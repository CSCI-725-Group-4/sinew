// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nobench.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nobench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Database_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Database_reflection_ = NULL;
const ::google::protobuf::Descriptor* Database_NoBench_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Database_NoBench_reflection_ = NULL;
const ::google::protobuf::Descriptor* Database_NoBench_NestedObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Database_NoBench_NestedObj_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nobench_2eproto() {
  protobuf_AddDesc_nobench_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nobench.proto");
  GOOGLE_CHECK(file != NULL);
  Database_descriptor_ = file->message_type(0);
  static const int Database_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, nb_),
  };
  Database_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Database_descriptor_,
      Database::default_instance_,
      Database_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Database));
  Database_NoBench_descriptor_ = Database_descriptor_->nested_type(0);
  static const int Database_NoBench_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, str1_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, str2_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, num_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, bool_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, dyn1_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, dyn1_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, dyn2_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, dyn2_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, dyn2_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, nested_arr_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, nested_obj_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_987_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_123_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_234_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_345_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_456_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_567_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, sparse_789_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, thousandth_),
  };
  Database_NoBench_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Database_NoBench_descriptor_,
      Database_NoBench::default_instance_,
      Database_NoBench_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Database_NoBench));
  Database_NoBench_NestedObj_descriptor_ = Database_NoBench_descriptor_->nested_type(0);
  static const int Database_NoBench_NestedObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench_NestedObj, str_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench_NestedObj, num_int_),
  };
  Database_NoBench_NestedObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Database_NoBench_NestedObj_descriptor_,
      Database_NoBench_NestedObj::default_instance_,
      Database_NoBench_NestedObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench_NestedObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database_NoBench_NestedObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Database_NoBench_NestedObj));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nobench_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Database_descriptor_, &Database::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Database_NoBench_descriptor_, &Database_NoBench::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Database_NoBench_NestedObj_descriptor_, &Database_NoBench_NestedObj::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nobench_2eproto() {
  delete Database::default_instance_;
  delete Database_reflection_;
  delete Database_NoBench::default_instance_;
  delete Database_NoBench_reflection_;
  delete Database_NoBench_NestedObj::default_instance_;
  delete Database_NoBench_NestedObj_reflection_;
}

void protobuf_AddDesc_nobench_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnobench.proto\"\245\004\n\010Database\022\035\n\002nb\030\001 \003(\013"
    "2\021.Database.NoBench\032\371\003\n\007NoBench\022\020\n\010str1_"
    "str\030\001 \001(\t\022\020\n\010str2_str\030\002 \001(\t\022\017\n\007num_int\030\003"
    " \001(\003\022\021\n\tbool_bool\030\004 \001(\010\022\020\n\010dyn1_int\030\005 \001("
    "\003\022\020\n\010dyn1_str\030\006 \001(\t\022\020\n\010dyn2_int\030\007 \001(\003\022\020\n"
    "\010dyn2_str\030\010 \001(\t\022\021\n\tdyn2_bool\030\t \001(\010\022\026\n\016ne"
    "sted_arr_str\030\n \003(\t\0223\n\016nested_obj_obj\030\013 \001"
    "(\0132\033.Database.NoBench.NestedObj\022\022\n\nspars"
    "e_str\030\014 \003(\t\022\026\n\016sparse_987_str\030\r \001(\t\022\026\n\016s"
    "parse_123_str\030\016 \001(\t\022\026\n\016sparse_234_str\030\017 "
    "\001(\t\022\026\n\016sparse_345_str\030\020 \001(\t\022\026\n\016sparse_45"
    "6_str\030\021 \001(\t\022\026\n\016sparse_567_str\030\022 \001(\t\022\026\n\016s"
    "parse_789_str\030\023 \001(\t\022\023\n\nthousandth\030\364\007 \001(\003"
    "\032-\n\tNestedObj\022\017\n\007str_str\030\001 \001(\t\022\017\n\007num_in"
    "t\030\002 \001(\003", 567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nobench.proto", &protobuf_RegisterTypes);
  Database::default_instance_ = new Database();
  Database_NoBench::default_instance_ = new Database_NoBench();
  Database_NoBench_NestedObj::default_instance_ = new Database_NoBench_NestedObj();
  Database::default_instance_->InitAsDefaultInstance();
  Database_NoBench::default_instance_->InitAsDefaultInstance();
  Database_NoBench_NestedObj::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nobench_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nobench_2eproto {
  StaticDescriptorInitializer_nobench_2eproto() {
    protobuf_AddDesc_nobench_2eproto();
  }
} static_descriptor_initializer_nobench_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Database_NoBench_NestedObj::kStrStrFieldNumber;
const int Database_NoBench_NestedObj::kNumIntFieldNumber;
#endif  // !_MSC_VER

Database_NoBench_NestedObj::Database_NoBench_NestedObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Database_NoBench_NestedObj::InitAsDefaultInstance() {
}

Database_NoBench_NestedObj::Database_NoBench_NestedObj(const Database_NoBench_NestedObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Database_NoBench_NestedObj::SharedCtor() {
  _cached_size_ = 0;
  str_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_int_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Database_NoBench_NestedObj::~Database_NoBench_NestedObj() {
  SharedDtor();
}

void Database_NoBench_NestedObj::SharedDtor() {
  if (str_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_str_;
  }
  if (this != default_instance_) {
  }
}

void Database_NoBench_NestedObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database_NoBench_NestedObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Database_NoBench_NestedObj_descriptor_;
}

const Database_NoBench_NestedObj& Database_NoBench_NestedObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nobench_2eproto();
  return *default_instance_;
}

Database_NoBench_NestedObj* Database_NoBench_NestedObj::default_instance_ = NULL;

Database_NoBench_NestedObj* Database_NoBench_NestedObj::New() const {
  return new Database_NoBench_NestedObj;
}

void Database_NoBench_NestedObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_str()) {
      if (str_str_ != &::google::protobuf::internal::kEmptyString) {
        str_str_->clear();
      }
    }
    num_int_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Database_NoBench_NestedObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str_str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_str().data(), this->str_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_int;
        break;
      }

      // optional int64 num_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_int_)));
          set_has_num_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Database_NoBench_NestedObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str_str = 1;
  if (has_str_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_str().data(), this->str_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_str(), output);
  }

  // optional int64 num_int = 2;
  if (has_num_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_int(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Database_NoBench_NestedObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str_str = 1;
  if (has_str_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_str().data(), this->str_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_str(), target);
  }

  // optional int64 num_int = 2;
  if (has_num_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_int(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Database_NoBench_NestedObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str_str = 1;
    if (has_str_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_str());
    }

    // optional int64 num_int = 2;
    if (has_num_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_int());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database_NoBench_NestedObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Database_NoBench_NestedObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Database_NoBench_NestedObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Database_NoBench_NestedObj::MergeFrom(const Database_NoBench_NestedObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_str()) {
      set_str_str(from.str_str());
    }
    if (from.has_num_int()) {
      set_num_int(from.num_int());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Database_NoBench_NestedObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database_NoBench_NestedObj::CopyFrom(const Database_NoBench_NestedObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database_NoBench_NestedObj::IsInitialized() const {

  return true;
}

void Database_NoBench_NestedObj::Swap(Database_NoBench_NestedObj* other) {
  if (other != this) {
    std::swap(str_str_, other->str_str_);
    std::swap(num_int_, other->num_int_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Database_NoBench_NestedObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Database_NoBench_NestedObj_descriptor_;
  metadata.reflection = Database_NoBench_NestedObj_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Database_NoBench::kStr1StrFieldNumber;
const int Database_NoBench::kStr2StrFieldNumber;
const int Database_NoBench::kNumIntFieldNumber;
const int Database_NoBench::kBoolBoolFieldNumber;
const int Database_NoBench::kDyn1IntFieldNumber;
const int Database_NoBench::kDyn1StrFieldNumber;
const int Database_NoBench::kDyn2IntFieldNumber;
const int Database_NoBench::kDyn2StrFieldNumber;
const int Database_NoBench::kDyn2BoolFieldNumber;
const int Database_NoBench::kNestedArrStrFieldNumber;
const int Database_NoBench::kNestedObjObjFieldNumber;
const int Database_NoBench::kSparseStrFieldNumber;
const int Database_NoBench::kSparse987StrFieldNumber;
const int Database_NoBench::kSparse123StrFieldNumber;
const int Database_NoBench::kSparse234StrFieldNumber;
const int Database_NoBench::kSparse345StrFieldNumber;
const int Database_NoBench::kSparse456StrFieldNumber;
const int Database_NoBench::kSparse567StrFieldNumber;
const int Database_NoBench::kSparse789StrFieldNumber;
const int Database_NoBench::kThousandthFieldNumber;
#endif  // !_MSC_VER

Database_NoBench::Database_NoBench()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Database_NoBench::InitAsDefaultInstance() {
  nested_obj_obj_ = const_cast< ::Database_NoBench_NestedObj*>(&::Database_NoBench_NestedObj::default_instance());
}

Database_NoBench::Database_NoBench(const Database_NoBench& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Database_NoBench::SharedCtor() {
  _cached_size_ = 0;
  str1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_int_ = GOOGLE_LONGLONG(0);
  bool_bool_ = false;
  dyn1_int_ = GOOGLE_LONGLONG(0);
  dyn1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dyn2_int_ = GOOGLE_LONGLONG(0);
  dyn2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dyn2_bool_ = false;
  nested_obj_obj_ = NULL;
  sparse_987_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_123_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_234_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_345_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_456_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_567_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sparse_789_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thousandth_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Database_NoBench::~Database_NoBench() {
  SharedDtor();
}

void Database_NoBench::SharedDtor() {
  if (str1_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_str_;
  }
  if (str2_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_str_;
  }
  if (dyn1_str_ != &::google::protobuf::internal::kEmptyString) {
    delete dyn1_str_;
  }
  if (dyn2_str_ != &::google::protobuf::internal::kEmptyString) {
    delete dyn2_str_;
  }
  if (sparse_987_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_987_str_;
  }
  if (sparse_123_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_123_str_;
  }
  if (sparse_234_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_234_str_;
  }
  if (sparse_345_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_345_str_;
  }
  if (sparse_456_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_456_str_;
  }
  if (sparse_567_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_567_str_;
  }
  if (sparse_789_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_789_str_;
  }
  if (this != default_instance_) {
    delete nested_obj_obj_;
  }
}

void Database_NoBench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database_NoBench::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Database_NoBench_descriptor_;
}

const Database_NoBench& Database_NoBench::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nobench_2eproto();
  return *default_instance_;
}

Database_NoBench* Database_NoBench::default_instance_ = NULL;

Database_NoBench* Database_NoBench::New() const {
  return new Database_NoBench;
}

void Database_NoBench::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str1_str()) {
      if (str1_str_ != &::google::protobuf::internal::kEmptyString) {
        str1_str_->clear();
      }
    }
    if (has_str2_str()) {
      if (str2_str_ != &::google::protobuf::internal::kEmptyString) {
        str2_str_->clear();
      }
    }
    num_int_ = GOOGLE_LONGLONG(0);
    bool_bool_ = false;
    dyn1_int_ = GOOGLE_LONGLONG(0);
    if (has_dyn1_str()) {
      if (dyn1_str_ != &::google::protobuf::internal::kEmptyString) {
        dyn1_str_->clear();
      }
    }
    dyn2_int_ = GOOGLE_LONGLONG(0);
    if (has_dyn2_str()) {
      if (dyn2_str_ != &::google::protobuf::internal::kEmptyString) {
        dyn2_str_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dyn2_bool_ = false;
    if (has_nested_obj_obj()) {
      if (nested_obj_obj_ != NULL) nested_obj_obj_->::Database_NoBench_NestedObj::Clear();
    }
    if (has_sparse_987_str()) {
      if (sparse_987_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_987_str_->clear();
      }
    }
    if (has_sparse_123_str()) {
      if (sparse_123_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_123_str_->clear();
      }
    }
    if (has_sparse_234_str()) {
      if (sparse_234_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_234_str_->clear();
      }
    }
    if (has_sparse_345_str()) {
      if (sparse_345_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_345_str_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sparse_456_str()) {
      if (sparse_456_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_456_str_->clear();
      }
    }
    if (has_sparse_567_str()) {
      if (sparse_567_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_567_str_->clear();
      }
    }
    if (has_sparse_789_str()) {
      if (sparse_789_str_ != &::google::protobuf::internal::kEmptyString) {
        sparse_789_str_->clear();
      }
    }
    thousandth_ = GOOGLE_LONGLONG(0);
  }
  nested_arr_str_.Clear();
  sparse_str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Database_NoBench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str1_str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1_str().data(), this->str1_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str2_str;
        break;
      }

      // optional string str2_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str2_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str2_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str2_str().data(), this->str2_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_int;
        break;
      }

      // optional int64 num_int = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_int_)));
          set_has_num_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bool_bool;
        break;
      }

      // optional bool bool_bool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_bool_)));
          set_has_bool_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dyn1_int;
        break;
      }

      // optional int64 dyn1_int = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dyn1_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dyn1_int_)));
          set_has_dyn1_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dyn1_str;
        break;
      }

      // optional string dyn1_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dyn1_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dyn1_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dyn1_str().data(), this->dyn1_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dyn2_int;
        break;
      }

      // optional int64 dyn2_int = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dyn2_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dyn2_int_)));
          set_has_dyn2_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dyn2_str;
        break;
      }

      // optional string dyn2_str = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dyn2_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dyn2_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dyn2_str().data(), this->dyn2_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dyn2_bool;
        break;
      }

      // optional bool dyn2_bool = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dyn2_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dyn2_bool_)));
          set_has_dyn2_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_nested_arr_str;
        break;
      }

      // repeated string nested_arr_str = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_arr_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nested_arr_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested_arr_str(this->nested_arr_str_size() - 1).data(),
            this->nested_arr_str(this->nested_arr_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_nested_arr_str;
        if (input->ExpectTag(90)) goto parse_nested_obj_obj;
        break;
      }

      // optional .Database.NoBench.NestedObj nested_obj_obj = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_obj_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nested_obj_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sparse_str;
        break;
      }

      // repeated string sparse_str = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sparse_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_str(this->sparse_str_size() - 1).data(),
            this->sparse_str(this->sparse_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sparse_str;
        if (input->ExpectTag(106)) goto parse_sparse_987_str;
        break;
      }

      // optional string sparse_987_str = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_987_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_987_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_987_str().data(), this->sparse_987_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sparse_123_str;
        break;
      }

      // optional string sparse_123_str = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_123_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_123_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_123_str().data(), this->sparse_123_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sparse_234_str;
        break;
      }

      // optional string sparse_234_str = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_234_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_234_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_234_str().data(), this->sparse_234_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sparse_345_str;
        break;
      }

      // optional string sparse_345_str = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_345_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_345_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_345_str().data(), this->sparse_345_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_sparse_456_str;
        break;
      }

      // optional string sparse_456_str = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_456_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_456_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_456_str().data(), this->sparse_456_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_sparse_567_str;
        break;
      }

      // optional string sparse_567_str = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_567_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_567_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_567_str().data(), this->sparse_567_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sparse_789_str;
        break;
      }

      // optional string sparse_789_str = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_789_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparse_789_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparse_789_str().data(), this->sparse_789_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8096)) goto parse_thousandth;
        break;
      }

      // optional int64 thousandth = 1012;
      case 1012: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thousandth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thousandth_)));
          set_has_thousandth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Database_NoBench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str1_str = 1;
  if (has_str1_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1_str().data(), this->str1_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str1_str(), output);
  }

  // optional string str2_str = 2;
  if (has_str2_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2_str().data(), this->str2_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str2_str(), output);
  }

  // optional int64 num_int = 3;
  if (has_num_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_int(), output);
  }

  // optional bool bool_bool = 4;
  if (has_bool_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_bool(), output);
  }

  // optional int64 dyn1_int = 5;
  if (has_dyn1_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dyn1_int(), output);
  }

  // optional string dyn1_str = 6;
  if (has_dyn1_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dyn1_str().data(), this->dyn1_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dyn1_str(), output);
  }

  // optional int64 dyn2_int = 7;
  if (has_dyn2_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dyn2_int(), output);
  }

  // optional string dyn2_str = 8;
  if (has_dyn2_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dyn2_str().data(), this->dyn2_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dyn2_str(), output);
  }

  // optional bool dyn2_bool = 9;
  if (has_dyn2_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->dyn2_bool(), output);
  }

  // repeated string nested_arr_str = 10;
  for (int i = 0; i < this->nested_arr_str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nested_arr_str(i).data(), this->nested_arr_str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->nested_arr_str(i), output);
  }

  // optional .Database.NoBench.NestedObj nested_obj_obj = 11;
  if (has_nested_obj_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->nested_obj_obj(), output);
  }

  // repeated string sparse_str = 12;
  for (int i = 0; i < this->sparse_str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sparse_str(i).data(), this->sparse_str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sparse_str(i), output);
  }

  // optional string sparse_987_str = 13;
  if (has_sparse_987_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_987_str().data(), this->sparse_987_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->sparse_987_str(), output);
  }

  // optional string sparse_123_str = 14;
  if (has_sparse_123_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_123_str().data(), this->sparse_123_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sparse_123_str(), output);
  }

  // optional string sparse_234_str = 15;
  if (has_sparse_234_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_234_str().data(), this->sparse_234_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sparse_234_str(), output);
  }

  // optional string sparse_345_str = 16;
  if (has_sparse_345_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_345_str().data(), this->sparse_345_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->sparse_345_str(), output);
  }

  // optional string sparse_456_str = 17;
  if (has_sparse_456_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_456_str().data(), this->sparse_456_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->sparse_456_str(), output);
  }

  // optional string sparse_567_str = 18;
  if (has_sparse_567_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_567_str().data(), this->sparse_567_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->sparse_567_str(), output);
  }

  // optional string sparse_789_str = 19;
  if (has_sparse_789_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_789_str().data(), this->sparse_789_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sparse_789_str(), output);
  }

  // optional int64 thousandth = 1012;
  if (has_thousandth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1012, this->thousandth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Database_NoBench::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str1_str = 1;
  if (has_str1_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1_str().data(), this->str1_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str1_str(), target);
  }

  // optional string str2_str = 2;
  if (has_str2_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2_str().data(), this->str2_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str2_str(), target);
  }

  // optional int64 num_int = 3;
  if (has_num_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_int(), target);
  }

  // optional bool bool_bool = 4;
  if (has_bool_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bool_bool(), target);
  }

  // optional int64 dyn1_int = 5;
  if (has_dyn1_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->dyn1_int(), target);
  }

  // optional string dyn1_str = 6;
  if (has_dyn1_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dyn1_str().data(), this->dyn1_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dyn1_str(), target);
  }

  // optional int64 dyn2_int = 7;
  if (has_dyn2_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->dyn2_int(), target);
  }

  // optional string dyn2_str = 8;
  if (has_dyn2_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dyn2_str().data(), this->dyn2_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dyn2_str(), target);
  }

  // optional bool dyn2_bool = 9;
  if (has_dyn2_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->dyn2_bool(), target);
  }

  // repeated string nested_arr_str = 10;
  for (int i = 0; i < this->nested_arr_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_arr_str(i).data(), this->nested_arr_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->nested_arr_str(i), target);
  }

  // optional .Database.NoBench.NestedObj nested_obj_obj = 11;
  if (has_nested_obj_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->nested_obj_obj(), target);
  }

  // repeated string sparse_str = 12;
  for (int i = 0; i < this->sparse_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_str(i).data(), this->sparse_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->sparse_str(i), target);
  }

  // optional string sparse_987_str = 13;
  if (has_sparse_987_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_987_str().data(), this->sparse_987_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sparse_987_str(), target);
  }

  // optional string sparse_123_str = 14;
  if (has_sparse_123_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_123_str().data(), this->sparse_123_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sparse_123_str(), target);
  }

  // optional string sparse_234_str = 15;
  if (has_sparse_234_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_234_str().data(), this->sparse_234_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sparse_234_str(), target);
  }

  // optional string sparse_345_str = 16;
  if (has_sparse_345_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_345_str().data(), this->sparse_345_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->sparse_345_str(), target);
  }

  // optional string sparse_456_str = 17;
  if (has_sparse_456_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_456_str().data(), this->sparse_456_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->sparse_456_str(), target);
  }

  // optional string sparse_567_str = 18;
  if (has_sparse_567_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_567_str().data(), this->sparse_567_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->sparse_567_str(), target);
  }

  // optional string sparse_789_str = 19;
  if (has_sparse_789_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparse_789_str().data(), this->sparse_789_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sparse_789_str(), target);
  }

  // optional int64 thousandth = 1012;
  if (has_thousandth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1012, this->thousandth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Database_NoBench::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str1_str = 1;
    if (has_str1_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1_str());
    }

    // optional string str2_str = 2;
    if (has_str2_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str2_str());
    }

    // optional int64 num_int = 3;
    if (has_num_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_int());
    }

    // optional bool bool_bool = 4;
    if (has_bool_bool()) {
      total_size += 1 + 1;
    }

    // optional int64 dyn1_int = 5;
    if (has_dyn1_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dyn1_int());
    }

    // optional string dyn1_str = 6;
    if (has_dyn1_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dyn1_str());
    }

    // optional int64 dyn2_int = 7;
    if (has_dyn2_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dyn2_int());
    }

    // optional string dyn2_str = 8;
    if (has_dyn2_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dyn2_str());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool dyn2_bool = 9;
    if (has_dyn2_bool()) {
      total_size += 1 + 1;
    }

    // optional .Database.NoBench.NestedObj nested_obj_obj = 11;
    if (has_nested_obj_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nested_obj_obj());
    }

    // optional string sparse_987_str = 13;
    if (has_sparse_987_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_987_str());
    }

    // optional string sparse_123_str = 14;
    if (has_sparse_123_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_123_str());
    }

    // optional string sparse_234_str = 15;
    if (has_sparse_234_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_234_str());
    }

    // optional string sparse_345_str = 16;
    if (has_sparse_345_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_345_str());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string sparse_456_str = 17;
    if (has_sparse_456_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_456_str());
    }

    // optional string sparse_567_str = 18;
    if (has_sparse_567_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_567_str());
    }

    // optional string sparse_789_str = 19;
    if (has_sparse_789_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparse_789_str());
    }

    // optional int64 thousandth = 1012;
    if (has_thousandth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thousandth());
    }

  }
  // repeated string nested_arr_str = 10;
  total_size += 1 * this->nested_arr_str_size();
  for (int i = 0; i < this->nested_arr_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nested_arr_str(i));
  }

  // repeated string sparse_str = 12;
  total_size += 1 * this->sparse_str_size();
  for (int i = 0; i < this->sparse_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sparse_str(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database_NoBench::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Database_NoBench* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Database_NoBench*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Database_NoBench::MergeFrom(const Database_NoBench& from) {
  GOOGLE_CHECK_NE(&from, this);
  nested_arr_str_.MergeFrom(from.nested_arr_str_);
  sparse_str_.MergeFrom(from.sparse_str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str1_str()) {
      set_str1_str(from.str1_str());
    }
    if (from.has_str2_str()) {
      set_str2_str(from.str2_str());
    }
    if (from.has_num_int()) {
      set_num_int(from.num_int());
    }
    if (from.has_bool_bool()) {
      set_bool_bool(from.bool_bool());
    }
    if (from.has_dyn1_int()) {
      set_dyn1_int(from.dyn1_int());
    }
    if (from.has_dyn1_str()) {
      set_dyn1_str(from.dyn1_str());
    }
    if (from.has_dyn2_int()) {
      set_dyn2_int(from.dyn2_int());
    }
    if (from.has_dyn2_str()) {
      set_dyn2_str(from.dyn2_str());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dyn2_bool()) {
      set_dyn2_bool(from.dyn2_bool());
    }
    if (from.has_nested_obj_obj()) {
      mutable_nested_obj_obj()->::Database_NoBench_NestedObj::MergeFrom(from.nested_obj_obj());
    }
    if (from.has_sparse_987_str()) {
      set_sparse_987_str(from.sparse_987_str());
    }
    if (from.has_sparse_123_str()) {
      set_sparse_123_str(from.sparse_123_str());
    }
    if (from.has_sparse_234_str()) {
      set_sparse_234_str(from.sparse_234_str());
    }
    if (from.has_sparse_345_str()) {
      set_sparse_345_str(from.sparse_345_str());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sparse_456_str()) {
      set_sparse_456_str(from.sparse_456_str());
    }
    if (from.has_sparse_567_str()) {
      set_sparse_567_str(from.sparse_567_str());
    }
    if (from.has_sparse_789_str()) {
      set_sparse_789_str(from.sparse_789_str());
    }
    if (from.has_thousandth()) {
      set_thousandth(from.thousandth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Database_NoBench::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database_NoBench::CopyFrom(const Database_NoBench& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database_NoBench::IsInitialized() const {

  return true;
}

void Database_NoBench::Swap(Database_NoBench* other) {
  if (other != this) {
    std::swap(str1_str_, other->str1_str_);
    std::swap(str2_str_, other->str2_str_);
    std::swap(num_int_, other->num_int_);
    std::swap(bool_bool_, other->bool_bool_);
    std::swap(dyn1_int_, other->dyn1_int_);
    std::swap(dyn1_str_, other->dyn1_str_);
    std::swap(dyn2_int_, other->dyn2_int_);
    std::swap(dyn2_str_, other->dyn2_str_);
    std::swap(dyn2_bool_, other->dyn2_bool_);
    nested_arr_str_.Swap(&other->nested_arr_str_);
    std::swap(nested_obj_obj_, other->nested_obj_obj_);
    sparse_str_.Swap(&other->sparse_str_);
    std::swap(sparse_987_str_, other->sparse_987_str_);
    std::swap(sparse_123_str_, other->sparse_123_str_);
    std::swap(sparse_234_str_, other->sparse_234_str_);
    std::swap(sparse_345_str_, other->sparse_345_str_);
    std::swap(sparse_456_str_, other->sparse_456_str_);
    std::swap(sparse_567_str_, other->sparse_567_str_);
    std::swap(sparse_789_str_, other->sparse_789_str_);
    std::swap(thousandth_, other->thousandth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Database_NoBench::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Database_NoBench_descriptor_;
  metadata.reflection = Database_NoBench_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Database::kNbFieldNumber;
#endif  // !_MSC_VER

Database::Database()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Database::InitAsDefaultInstance() {
}

Database::Database(const Database& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Database::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Database::~Database() {
  SharedDtor();
}

void Database::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Database::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Database_descriptor_;
}

const Database& Database::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nobench_2eproto();
  return *default_instance_;
}

Database* Database::default_instance_ = NULL;

Database* Database::New() const {
  return new Database;
}

void Database::Clear() {
  nb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Database::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Database.NoBench nb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nb;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Database::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Database.NoBench nb = 1;
  for (int i = 0; i < this->nb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Database::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Database.NoBench nb = 1;
  for (int i = 0; i < this->nb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Database::ByteSize() const {
  int total_size = 0;

  // repeated .Database.NoBench nb = 1;
  total_size += 1 * this->nb_size();
  for (int i = 0; i < this->nb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Database* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Database*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
  GOOGLE_CHECK_NE(&from, this);
  nb_.MergeFrom(from.nb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Database::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {

  return true;
}

void Database::Swap(Database* other) {
  if (other != this) {
    nb_.Swap(&other->nb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Database::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Database_descriptor_;
  metadata.reflection = Database_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
