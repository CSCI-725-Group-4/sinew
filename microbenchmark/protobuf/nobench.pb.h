// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nobench.proto

#ifndef PROTOBUF_nobench_2eproto__INCLUDED
#define PROTOBUF_nobench_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nobench_2eproto();
void protobuf_AssignDesc_nobench_2eproto();
void protobuf_ShutdownFile_nobench_2eproto();

class Database;
class Database_NoBench;
class Database_NoBench_NestedObj;

// ===================================================================

class Database_NoBench_NestedObj : public ::google::protobuf::Message {
 public:
  Database_NoBench_NestedObj();
  virtual ~Database_NoBench_NestedObj();

  Database_NoBench_NestedObj(const Database_NoBench_NestedObj& from);

  inline Database_NoBench_NestedObj& operator=(const Database_NoBench_NestedObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Database_NoBench_NestedObj& default_instance();

  void Swap(Database_NoBench_NestedObj* other);

  // implements Message ----------------------------------------------

  Database_NoBench_NestedObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Database_NoBench_NestedObj& from);
  void MergeFrom(const Database_NoBench_NestedObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str_str = 1;
  inline bool has_str_str() const;
  inline void clear_str_str();
  static const int kStrStrFieldNumber = 1;
  inline const ::std::string& str_str() const;
  inline void set_str_str(const ::std::string& value);
  inline void set_str_str(const char* value);
  inline void set_str_str(const char* value, size_t size);
  inline ::std::string* mutable_str_str();
  inline ::std::string* release_str_str();
  inline void set_allocated_str_str(::std::string* str_str);

  // optional int64 num_int = 2;
  inline bool has_num_int() const;
  inline void clear_num_int();
  static const int kNumIntFieldNumber = 2;
  inline ::google::protobuf::int64 num_int() const;
  inline void set_num_int(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Database.NoBench.NestedObj)
 private:
  inline void set_has_str_str();
  inline void clear_has_str_str();
  inline void set_has_num_int();
  inline void clear_has_num_int();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* str_str_;
  ::google::protobuf::int64 num_int_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nobench_2eproto();
  friend void protobuf_AssignDesc_nobench_2eproto();
  friend void protobuf_ShutdownFile_nobench_2eproto();

  void InitAsDefaultInstance();
  static Database_NoBench_NestedObj* default_instance_;
};
// -------------------------------------------------------------------

class Database_NoBench : public ::google::protobuf::Message {
 public:
  Database_NoBench();
  virtual ~Database_NoBench();

  Database_NoBench(const Database_NoBench& from);

  inline Database_NoBench& operator=(const Database_NoBench& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Database_NoBench& default_instance();

  void Swap(Database_NoBench* other);

  // implements Message ----------------------------------------------

  Database_NoBench* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Database_NoBench& from);
  void MergeFrom(const Database_NoBench& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Database_NoBench_NestedObj NestedObj;

  // accessors -------------------------------------------------------

  // optional string str1_str = 1;
  inline bool has_str1_str() const;
  inline void clear_str1_str();
  static const int kStr1StrFieldNumber = 1;
  inline const ::std::string& str1_str() const;
  inline void set_str1_str(const ::std::string& value);
  inline void set_str1_str(const char* value);
  inline void set_str1_str(const char* value, size_t size);
  inline ::std::string* mutable_str1_str();
  inline ::std::string* release_str1_str();
  inline void set_allocated_str1_str(::std::string* str1_str);

  // optional string str2_str = 2;
  inline bool has_str2_str() const;
  inline void clear_str2_str();
  static const int kStr2StrFieldNumber = 2;
  inline const ::std::string& str2_str() const;
  inline void set_str2_str(const ::std::string& value);
  inline void set_str2_str(const char* value);
  inline void set_str2_str(const char* value, size_t size);
  inline ::std::string* mutable_str2_str();
  inline ::std::string* release_str2_str();
  inline void set_allocated_str2_str(::std::string* str2_str);

  // optional int64 num_int = 3;
  inline bool has_num_int() const;
  inline void clear_num_int();
  static const int kNumIntFieldNumber = 3;
  inline ::google::protobuf::int64 num_int() const;
  inline void set_num_int(::google::protobuf::int64 value);

  // optional bool bool_bool = 4;
  inline bool has_bool_bool() const;
  inline void clear_bool_bool();
  static const int kBoolBoolFieldNumber = 4;
  inline bool bool_bool() const;
  inline void set_bool_bool(bool value);

  // optional int64 dyn1_int = 5;
  inline bool has_dyn1_int() const;
  inline void clear_dyn1_int();
  static const int kDyn1IntFieldNumber = 5;
  inline ::google::protobuf::int64 dyn1_int() const;
  inline void set_dyn1_int(::google::protobuf::int64 value);

  // optional string dyn1_str = 6;
  inline bool has_dyn1_str() const;
  inline void clear_dyn1_str();
  static const int kDyn1StrFieldNumber = 6;
  inline const ::std::string& dyn1_str() const;
  inline void set_dyn1_str(const ::std::string& value);
  inline void set_dyn1_str(const char* value);
  inline void set_dyn1_str(const char* value, size_t size);
  inline ::std::string* mutable_dyn1_str();
  inline ::std::string* release_dyn1_str();
  inline void set_allocated_dyn1_str(::std::string* dyn1_str);

  // optional int64 dyn2_int = 7;
  inline bool has_dyn2_int() const;
  inline void clear_dyn2_int();
  static const int kDyn2IntFieldNumber = 7;
  inline ::google::protobuf::int64 dyn2_int() const;
  inline void set_dyn2_int(::google::protobuf::int64 value);

  // optional string dyn2_str = 8;
  inline bool has_dyn2_str() const;
  inline void clear_dyn2_str();
  static const int kDyn2StrFieldNumber = 8;
  inline const ::std::string& dyn2_str() const;
  inline void set_dyn2_str(const ::std::string& value);
  inline void set_dyn2_str(const char* value);
  inline void set_dyn2_str(const char* value, size_t size);
  inline ::std::string* mutable_dyn2_str();
  inline ::std::string* release_dyn2_str();
  inline void set_allocated_dyn2_str(::std::string* dyn2_str);

  // optional bool dyn2_bool = 9;
  inline bool has_dyn2_bool() const;
  inline void clear_dyn2_bool();
  static const int kDyn2BoolFieldNumber = 9;
  inline bool dyn2_bool() const;
  inline void set_dyn2_bool(bool value);

  // repeated string nested_arr_str = 10;
  inline int nested_arr_str_size() const;
  inline void clear_nested_arr_str();
  static const int kNestedArrStrFieldNumber = 10;
  inline const ::std::string& nested_arr_str(int index) const;
  inline ::std::string* mutable_nested_arr_str(int index);
  inline void set_nested_arr_str(int index, const ::std::string& value);
  inline void set_nested_arr_str(int index, const char* value);
  inline void set_nested_arr_str(int index, const char* value, size_t size);
  inline ::std::string* add_nested_arr_str();
  inline void add_nested_arr_str(const ::std::string& value);
  inline void add_nested_arr_str(const char* value);
  inline void add_nested_arr_str(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nested_arr_str() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nested_arr_str();

  // optional .Database.NoBench.NestedObj nested_obj_obj = 11;
  inline bool has_nested_obj_obj() const;
  inline void clear_nested_obj_obj();
  static const int kNestedObjObjFieldNumber = 11;
  inline const ::Database_NoBench_NestedObj& nested_obj_obj() const;
  inline ::Database_NoBench_NestedObj* mutable_nested_obj_obj();
  inline ::Database_NoBench_NestedObj* release_nested_obj_obj();
  inline void set_allocated_nested_obj_obj(::Database_NoBench_NestedObj* nested_obj_obj);

  // optional int64 thousandth = 1012;
  inline bool has_thousandth() const;
  inline void clear_thousandth();
  static const int kThousandthFieldNumber = 1012;
  inline ::google::protobuf::int64 thousandth() const;
  inline void set_thousandth(::google::protobuf::int64 value);

  // repeated string sparse_str = 1013;
  inline int sparse_str_size() const;
  inline void clear_sparse_str();
  static const int kSparseStrFieldNumber = 1013;
  inline const ::std::string& sparse_str(int index) const;
  inline ::std::string* mutable_sparse_str(int index);
  inline void set_sparse_str(int index, const ::std::string& value);
  inline void set_sparse_str(int index, const char* value);
  inline void set_sparse_str(int index, const char* value, size_t size);
  inline ::std::string* add_sparse_str();
  inline void add_sparse_str(const ::std::string& value);
  inline void add_sparse_str(const char* value);
  inline void add_sparse_str(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sparse_str() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sparse_str();

  // optional string sparse_000_str = 12;
  inline bool has_sparse_000_str() const;
  inline void clear_sparse_000_str();
  static const int kSparse000StrFieldNumber = 12;
  inline const ::std::string& sparse_000_str() const;
  inline void set_sparse_000_str(const ::std::string& value);
  inline void set_sparse_000_str(const char* value);
  inline void set_sparse_000_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_000_str();
  inline ::std::string* release_sparse_000_str();
  inline void set_allocated_sparse_000_str(::std::string* sparse_000_str);

  // optional string sparse_001_str = 13;
  inline bool has_sparse_001_str() const;
  inline void clear_sparse_001_str();
  static const int kSparse001StrFieldNumber = 13;
  inline const ::std::string& sparse_001_str() const;
  inline void set_sparse_001_str(const ::std::string& value);
  inline void set_sparse_001_str(const char* value);
  inline void set_sparse_001_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_001_str();
  inline ::std::string* release_sparse_001_str();
  inline void set_allocated_sparse_001_str(::std::string* sparse_001_str);

  // optional string sparse_002_str = 14;
  inline bool has_sparse_002_str() const;
  inline void clear_sparse_002_str();
  static const int kSparse002StrFieldNumber = 14;
  inline const ::std::string& sparse_002_str() const;
  inline void set_sparse_002_str(const ::std::string& value);
  inline void set_sparse_002_str(const char* value);
  inline void set_sparse_002_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_002_str();
  inline ::std::string* release_sparse_002_str();
  inline void set_allocated_sparse_002_str(::std::string* sparse_002_str);

  // optional string sparse_003_str = 15;
  inline bool has_sparse_003_str() const;
  inline void clear_sparse_003_str();
  static const int kSparse003StrFieldNumber = 15;
  inline const ::std::string& sparse_003_str() const;
  inline void set_sparse_003_str(const ::std::string& value);
  inline void set_sparse_003_str(const char* value);
  inline void set_sparse_003_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_003_str();
  inline ::std::string* release_sparse_003_str();
  inline void set_allocated_sparse_003_str(::std::string* sparse_003_str);

  // optional string sparse_004_str = 16;
  inline bool has_sparse_004_str() const;
  inline void clear_sparse_004_str();
  static const int kSparse004StrFieldNumber = 16;
  inline const ::std::string& sparse_004_str() const;
  inline void set_sparse_004_str(const ::std::string& value);
  inline void set_sparse_004_str(const char* value);
  inline void set_sparse_004_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_004_str();
  inline ::std::string* release_sparse_004_str();
  inline void set_allocated_sparse_004_str(::std::string* sparse_004_str);

  // optional string sparse_005_str = 17;
  inline bool has_sparse_005_str() const;
  inline void clear_sparse_005_str();
  static const int kSparse005StrFieldNumber = 17;
  inline const ::std::string& sparse_005_str() const;
  inline void set_sparse_005_str(const ::std::string& value);
  inline void set_sparse_005_str(const char* value);
  inline void set_sparse_005_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_005_str();
  inline ::std::string* release_sparse_005_str();
  inline void set_allocated_sparse_005_str(::std::string* sparse_005_str);

  // optional string sparse_006_str = 18;
  inline bool has_sparse_006_str() const;
  inline void clear_sparse_006_str();
  static const int kSparse006StrFieldNumber = 18;
  inline const ::std::string& sparse_006_str() const;
  inline void set_sparse_006_str(const ::std::string& value);
  inline void set_sparse_006_str(const char* value);
  inline void set_sparse_006_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_006_str();
  inline ::std::string* release_sparse_006_str();
  inline void set_allocated_sparse_006_str(::std::string* sparse_006_str);

  // optional string sparse_007_str = 19;
  inline bool has_sparse_007_str() const;
  inline void clear_sparse_007_str();
  static const int kSparse007StrFieldNumber = 19;
  inline const ::std::string& sparse_007_str() const;
  inline void set_sparse_007_str(const ::std::string& value);
  inline void set_sparse_007_str(const char* value);
  inline void set_sparse_007_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_007_str();
  inline ::std::string* release_sparse_007_str();
  inline void set_allocated_sparse_007_str(::std::string* sparse_007_str);

  // optional string sparse_008_str = 20;
  inline bool has_sparse_008_str() const;
  inline void clear_sparse_008_str();
  static const int kSparse008StrFieldNumber = 20;
  inline const ::std::string& sparse_008_str() const;
  inline void set_sparse_008_str(const ::std::string& value);
  inline void set_sparse_008_str(const char* value);
  inline void set_sparse_008_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_008_str();
  inline ::std::string* release_sparse_008_str();
  inline void set_allocated_sparse_008_str(::std::string* sparse_008_str);

  // optional string sparse_009_str = 21;
  inline bool has_sparse_009_str() const;
  inline void clear_sparse_009_str();
  static const int kSparse009StrFieldNumber = 21;
  inline const ::std::string& sparse_009_str() const;
  inline void set_sparse_009_str(const ::std::string& value);
  inline void set_sparse_009_str(const char* value);
  inline void set_sparse_009_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_009_str();
  inline ::std::string* release_sparse_009_str();
  inline void set_allocated_sparse_009_str(::std::string* sparse_009_str);

  // optional string sparse_010_str = 22;
  inline bool has_sparse_010_str() const;
  inline void clear_sparse_010_str();
  static const int kSparse010StrFieldNumber = 22;
  inline const ::std::string& sparse_010_str() const;
  inline void set_sparse_010_str(const ::std::string& value);
  inline void set_sparse_010_str(const char* value);
  inline void set_sparse_010_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_010_str();
  inline ::std::string* release_sparse_010_str();
  inline void set_allocated_sparse_010_str(::std::string* sparse_010_str);

  // optional string sparse_011_str = 23;
  inline bool has_sparse_011_str() const;
  inline void clear_sparse_011_str();
  static const int kSparse011StrFieldNumber = 23;
  inline const ::std::string& sparse_011_str() const;
  inline void set_sparse_011_str(const ::std::string& value);
  inline void set_sparse_011_str(const char* value);
  inline void set_sparse_011_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_011_str();
  inline ::std::string* release_sparse_011_str();
  inline void set_allocated_sparse_011_str(::std::string* sparse_011_str);

  // optional string sparse_012_str = 24;
  inline bool has_sparse_012_str() const;
  inline void clear_sparse_012_str();
  static const int kSparse012StrFieldNumber = 24;
  inline const ::std::string& sparse_012_str() const;
  inline void set_sparse_012_str(const ::std::string& value);
  inline void set_sparse_012_str(const char* value);
  inline void set_sparse_012_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_012_str();
  inline ::std::string* release_sparse_012_str();
  inline void set_allocated_sparse_012_str(::std::string* sparse_012_str);

  // optional string sparse_013_str = 25;
  inline bool has_sparse_013_str() const;
  inline void clear_sparse_013_str();
  static const int kSparse013StrFieldNumber = 25;
  inline const ::std::string& sparse_013_str() const;
  inline void set_sparse_013_str(const ::std::string& value);
  inline void set_sparse_013_str(const char* value);
  inline void set_sparse_013_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_013_str();
  inline ::std::string* release_sparse_013_str();
  inline void set_allocated_sparse_013_str(::std::string* sparse_013_str);

  // optional string sparse_014_str = 26;
  inline bool has_sparse_014_str() const;
  inline void clear_sparse_014_str();
  static const int kSparse014StrFieldNumber = 26;
  inline const ::std::string& sparse_014_str() const;
  inline void set_sparse_014_str(const ::std::string& value);
  inline void set_sparse_014_str(const char* value);
  inline void set_sparse_014_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_014_str();
  inline ::std::string* release_sparse_014_str();
  inline void set_allocated_sparse_014_str(::std::string* sparse_014_str);

  // optional string sparse_015_str = 27;
  inline bool has_sparse_015_str() const;
  inline void clear_sparse_015_str();
  static const int kSparse015StrFieldNumber = 27;
  inline const ::std::string& sparse_015_str() const;
  inline void set_sparse_015_str(const ::std::string& value);
  inline void set_sparse_015_str(const char* value);
  inline void set_sparse_015_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_015_str();
  inline ::std::string* release_sparse_015_str();
  inline void set_allocated_sparse_015_str(::std::string* sparse_015_str);

  // optional string sparse_016_str = 28;
  inline bool has_sparse_016_str() const;
  inline void clear_sparse_016_str();
  static const int kSparse016StrFieldNumber = 28;
  inline const ::std::string& sparse_016_str() const;
  inline void set_sparse_016_str(const ::std::string& value);
  inline void set_sparse_016_str(const char* value);
  inline void set_sparse_016_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_016_str();
  inline ::std::string* release_sparse_016_str();
  inline void set_allocated_sparse_016_str(::std::string* sparse_016_str);

  // optional string sparse_017_str = 29;
  inline bool has_sparse_017_str() const;
  inline void clear_sparse_017_str();
  static const int kSparse017StrFieldNumber = 29;
  inline const ::std::string& sparse_017_str() const;
  inline void set_sparse_017_str(const ::std::string& value);
  inline void set_sparse_017_str(const char* value);
  inline void set_sparse_017_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_017_str();
  inline ::std::string* release_sparse_017_str();
  inline void set_allocated_sparse_017_str(::std::string* sparse_017_str);

  // optional string sparse_018_str = 30;
  inline bool has_sparse_018_str() const;
  inline void clear_sparse_018_str();
  static const int kSparse018StrFieldNumber = 30;
  inline const ::std::string& sparse_018_str() const;
  inline void set_sparse_018_str(const ::std::string& value);
  inline void set_sparse_018_str(const char* value);
  inline void set_sparse_018_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_018_str();
  inline ::std::string* release_sparse_018_str();
  inline void set_allocated_sparse_018_str(::std::string* sparse_018_str);

  // optional string sparse_019_str = 31;
  inline bool has_sparse_019_str() const;
  inline void clear_sparse_019_str();
  static const int kSparse019StrFieldNumber = 31;
  inline const ::std::string& sparse_019_str() const;
  inline void set_sparse_019_str(const ::std::string& value);
  inline void set_sparse_019_str(const char* value);
  inline void set_sparse_019_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_019_str();
  inline ::std::string* release_sparse_019_str();
  inline void set_allocated_sparse_019_str(::std::string* sparse_019_str);

  // optional string sparse_020_str = 32;
  inline bool has_sparse_020_str() const;
  inline void clear_sparse_020_str();
  static const int kSparse020StrFieldNumber = 32;
  inline const ::std::string& sparse_020_str() const;
  inline void set_sparse_020_str(const ::std::string& value);
  inline void set_sparse_020_str(const char* value);
  inline void set_sparse_020_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_020_str();
  inline ::std::string* release_sparse_020_str();
  inline void set_allocated_sparse_020_str(::std::string* sparse_020_str);

  // optional string sparse_021_str = 33;
  inline bool has_sparse_021_str() const;
  inline void clear_sparse_021_str();
  static const int kSparse021StrFieldNumber = 33;
  inline const ::std::string& sparse_021_str() const;
  inline void set_sparse_021_str(const ::std::string& value);
  inline void set_sparse_021_str(const char* value);
  inline void set_sparse_021_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_021_str();
  inline ::std::string* release_sparse_021_str();
  inline void set_allocated_sparse_021_str(::std::string* sparse_021_str);

  // optional string sparse_022_str = 34;
  inline bool has_sparse_022_str() const;
  inline void clear_sparse_022_str();
  static const int kSparse022StrFieldNumber = 34;
  inline const ::std::string& sparse_022_str() const;
  inline void set_sparse_022_str(const ::std::string& value);
  inline void set_sparse_022_str(const char* value);
  inline void set_sparse_022_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_022_str();
  inline ::std::string* release_sparse_022_str();
  inline void set_allocated_sparse_022_str(::std::string* sparse_022_str);

  // optional string sparse_023_str = 35;
  inline bool has_sparse_023_str() const;
  inline void clear_sparse_023_str();
  static const int kSparse023StrFieldNumber = 35;
  inline const ::std::string& sparse_023_str() const;
  inline void set_sparse_023_str(const ::std::string& value);
  inline void set_sparse_023_str(const char* value);
  inline void set_sparse_023_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_023_str();
  inline ::std::string* release_sparse_023_str();
  inline void set_allocated_sparse_023_str(::std::string* sparse_023_str);

  // optional string sparse_024_str = 36;
  inline bool has_sparse_024_str() const;
  inline void clear_sparse_024_str();
  static const int kSparse024StrFieldNumber = 36;
  inline const ::std::string& sparse_024_str() const;
  inline void set_sparse_024_str(const ::std::string& value);
  inline void set_sparse_024_str(const char* value);
  inline void set_sparse_024_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_024_str();
  inline ::std::string* release_sparse_024_str();
  inline void set_allocated_sparse_024_str(::std::string* sparse_024_str);

  // optional string sparse_025_str = 37;
  inline bool has_sparse_025_str() const;
  inline void clear_sparse_025_str();
  static const int kSparse025StrFieldNumber = 37;
  inline const ::std::string& sparse_025_str() const;
  inline void set_sparse_025_str(const ::std::string& value);
  inline void set_sparse_025_str(const char* value);
  inline void set_sparse_025_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_025_str();
  inline ::std::string* release_sparse_025_str();
  inline void set_allocated_sparse_025_str(::std::string* sparse_025_str);

  // optional string sparse_026_str = 38;
  inline bool has_sparse_026_str() const;
  inline void clear_sparse_026_str();
  static const int kSparse026StrFieldNumber = 38;
  inline const ::std::string& sparse_026_str() const;
  inline void set_sparse_026_str(const ::std::string& value);
  inline void set_sparse_026_str(const char* value);
  inline void set_sparse_026_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_026_str();
  inline ::std::string* release_sparse_026_str();
  inline void set_allocated_sparse_026_str(::std::string* sparse_026_str);

  // optional string sparse_027_str = 39;
  inline bool has_sparse_027_str() const;
  inline void clear_sparse_027_str();
  static const int kSparse027StrFieldNumber = 39;
  inline const ::std::string& sparse_027_str() const;
  inline void set_sparse_027_str(const ::std::string& value);
  inline void set_sparse_027_str(const char* value);
  inline void set_sparse_027_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_027_str();
  inline ::std::string* release_sparse_027_str();
  inline void set_allocated_sparse_027_str(::std::string* sparse_027_str);

  // optional string sparse_028_str = 40;
  inline bool has_sparse_028_str() const;
  inline void clear_sparse_028_str();
  static const int kSparse028StrFieldNumber = 40;
  inline const ::std::string& sparse_028_str() const;
  inline void set_sparse_028_str(const ::std::string& value);
  inline void set_sparse_028_str(const char* value);
  inline void set_sparse_028_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_028_str();
  inline ::std::string* release_sparse_028_str();
  inline void set_allocated_sparse_028_str(::std::string* sparse_028_str);

  // optional string sparse_029_str = 41;
  inline bool has_sparse_029_str() const;
  inline void clear_sparse_029_str();
  static const int kSparse029StrFieldNumber = 41;
  inline const ::std::string& sparse_029_str() const;
  inline void set_sparse_029_str(const ::std::string& value);
  inline void set_sparse_029_str(const char* value);
  inline void set_sparse_029_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_029_str();
  inline ::std::string* release_sparse_029_str();
  inline void set_allocated_sparse_029_str(::std::string* sparse_029_str);

  // optional string sparse_030_str = 42;
  inline bool has_sparse_030_str() const;
  inline void clear_sparse_030_str();
  static const int kSparse030StrFieldNumber = 42;
  inline const ::std::string& sparse_030_str() const;
  inline void set_sparse_030_str(const ::std::string& value);
  inline void set_sparse_030_str(const char* value);
  inline void set_sparse_030_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_030_str();
  inline ::std::string* release_sparse_030_str();
  inline void set_allocated_sparse_030_str(::std::string* sparse_030_str);

  // optional string sparse_031_str = 43;
  inline bool has_sparse_031_str() const;
  inline void clear_sparse_031_str();
  static const int kSparse031StrFieldNumber = 43;
  inline const ::std::string& sparse_031_str() const;
  inline void set_sparse_031_str(const ::std::string& value);
  inline void set_sparse_031_str(const char* value);
  inline void set_sparse_031_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_031_str();
  inline ::std::string* release_sparse_031_str();
  inline void set_allocated_sparse_031_str(::std::string* sparse_031_str);

  // optional string sparse_032_str = 44;
  inline bool has_sparse_032_str() const;
  inline void clear_sparse_032_str();
  static const int kSparse032StrFieldNumber = 44;
  inline const ::std::string& sparse_032_str() const;
  inline void set_sparse_032_str(const ::std::string& value);
  inline void set_sparse_032_str(const char* value);
  inline void set_sparse_032_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_032_str();
  inline ::std::string* release_sparse_032_str();
  inline void set_allocated_sparse_032_str(::std::string* sparse_032_str);

  // optional string sparse_033_str = 45;
  inline bool has_sparse_033_str() const;
  inline void clear_sparse_033_str();
  static const int kSparse033StrFieldNumber = 45;
  inline const ::std::string& sparse_033_str() const;
  inline void set_sparse_033_str(const ::std::string& value);
  inline void set_sparse_033_str(const char* value);
  inline void set_sparse_033_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_033_str();
  inline ::std::string* release_sparse_033_str();
  inline void set_allocated_sparse_033_str(::std::string* sparse_033_str);

  // optional string sparse_034_str = 46;
  inline bool has_sparse_034_str() const;
  inline void clear_sparse_034_str();
  static const int kSparse034StrFieldNumber = 46;
  inline const ::std::string& sparse_034_str() const;
  inline void set_sparse_034_str(const ::std::string& value);
  inline void set_sparse_034_str(const char* value);
  inline void set_sparse_034_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_034_str();
  inline ::std::string* release_sparse_034_str();
  inline void set_allocated_sparse_034_str(::std::string* sparse_034_str);

  // optional string sparse_035_str = 47;
  inline bool has_sparse_035_str() const;
  inline void clear_sparse_035_str();
  static const int kSparse035StrFieldNumber = 47;
  inline const ::std::string& sparse_035_str() const;
  inline void set_sparse_035_str(const ::std::string& value);
  inline void set_sparse_035_str(const char* value);
  inline void set_sparse_035_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_035_str();
  inline ::std::string* release_sparse_035_str();
  inline void set_allocated_sparse_035_str(::std::string* sparse_035_str);

  // optional string sparse_036_str = 48;
  inline bool has_sparse_036_str() const;
  inline void clear_sparse_036_str();
  static const int kSparse036StrFieldNumber = 48;
  inline const ::std::string& sparse_036_str() const;
  inline void set_sparse_036_str(const ::std::string& value);
  inline void set_sparse_036_str(const char* value);
  inline void set_sparse_036_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_036_str();
  inline ::std::string* release_sparse_036_str();
  inline void set_allocated_sparse_036_str(::std::string* sparse_036_str);

  // optional string sparse_037_str = 49;
  inline bool has_sparse_037_str() const;
  inline void clear_sparse_037_str();
  static const int kSparse037StrFieldNumber = 49;
  inline const ::std::string& sparse_037_str() const;
  inline void set_sparse_037_str(const ::std::string& value);
  inline void set_sparse_037_str(const char* value);
  inline void set_sparse_037_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_037_str();
  inline ::std::string* release_sparse_037_str();
  inline void set_allocated_sparse_037_str(::std::string* sparse_037_str);

  // optional string sparse_038_str = 50;
  inline bool has_sparse_038_str() const;
  inline void clear_sparse_038_str();
  static const int kSparse038StrFieldNumber = 50;
  inline const ::std::string& sparse_038_str() const;
  inline void set_sparse_038_str(const ::std::string& value);
  inline void set_sparse_038_str(const char* value);
  inline void set_sparse_038_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_038_str();
  inline ::std::string* release_sparse_038_str();
  inline void set_allocated_sparse_038_str(::std::string* sparse_038_str);

  // optional string sparse_039_str = 51;
  inline bool has_sparse_039_str() const;
  inline void clear_sparse_039_str();
  static const int kSparse039StrFieldNumber = 51;
  inline const ::std::string& sparse_039_str() const;
  inline void set_sparse_039_str(const ::std::string& value);
  inline void set_sparse_039_str(const char* value);
  inline void set_sparse_039_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_039_str();
  inline ::std::string* release_sparse_039_str();
  inline void set_allocated_sparse_039_str(::std::string* sparse_039_str);

  // optional string sparse_040_str = 52;
  inline bool has_sparse_040_str() const;
  inline void clear_sparse_040_str();
  static const int kSparse040StrFieldNumber = 52;
  inline const ::std::string& sparse_040_str() const;
  inline void set_sparse_040_str(const ::std::string& value);
  inline void set_sparse_040_str(const char* value);
  inline void set_sparse_040_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_040_str();
  inline ::std::string* release_sparse_040_str();
  inline void set_allocated_sparse_040_str(::std::string* sparse_040_str);

  // optional string sparse_041_str = 53;
  inline bool has_sparse_041_str() const;
  inline void clear_sparse_041_str();
  static const int kSparse041StrFieldNumber = 53;
  inline const ::std::string& sparse_041_str() const;
  inline void set_sparse_041_str(const ::std::string& value);
  inline void set_sparse_041_str(const char* value);
  inline void set_sparse_041_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_041_str();
  inline ::std::string* release_sparse_041_str();
  inline void set_allocated_sparse_041_str(::std::string* sparse_041_str);

  // optional string sparse_042_str = 54;
  inline bool has_sparse_042_str() const;
  inline void clear_sparse_042_str();
  static const int kSparse042StrFieldNumber = 54;
  inline const ::std::string& sparse_042_str() const;
  inline void set_sparse_042_str(const ::std::string& value);
  inline void set_sparse_042_str(const char* value);
  inline void set_sparse_042_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_042_str();
  inline ::std::string* release_sparse_042_str();
  inline void set_allocated_sparse_042_str(::std::string* sparse_042_str);

  // optional string sparse_043_str = 55;
  inline bool has_sparse_043_str() const;
  inline void clear_sparse_043_str();
  static const int kSparse043StrFieldNumber = 55;
  inline const ::std::string& sparse_043_str() const;
  inline void set_sparse_043_str(const ::std::string& value);
  inline void set_sparse_043_str(const char* value);
  inline void set_sparse_043_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_043_str();
  inline ::std::string* release_sparse_043_str();
  inline void set_allocated_sparse_043_str(::std::string* sparse_043_str);

  // optional string sparse_044_str = 56;
  inline bool has_sparse_044_str() const;
  inline void clear_sparse_044_str();
  static const int kSparse044StrFieldNumber = 56;
  inline const ::std::string& sparse_044_str() const;
  inline void set_sparse_044_str(const ::std::string& value);
  inline void set_sparse_044_str(const char* value);
  inline void set_sparse_044_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_044_str();
  inline ::std::string* release_sparse_044_str();
  inline void set_allocated_sparse_044_str(::std::string* sparse_044_str);

  // optional string sparse_045_str = 57;
  inline bool has_sparse_045_str() const;
  inline void clear_sparse_045_str();
  static const int kSparse045StrFieldNumber = 57;
  inline const ::std::string& sparse_045_str() const;
  inline void set_sparse_045_str(const ::std::string& value);
  inline void set_sparse_045_str(const char* value);
  inline void set_sparse_045_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_045_str();
  inline ::std::string* release_sparse_045_str();
  inline void set_allocated_sparse_045_str(::std::string* sparse_045_str);

  // optional string sparse_046_str = 58;
  inline bool has_sparse_046_str() const;
  inline void clear_sparse_046_str();
  static const int kSparse046StrFieldNumber = 58;
  inline const ::std::string& sparse_046_str() const;
  inline void set_sparse_046_str(const ::std::string& value);
  inline void set_sparse_046_str(const char* value);
  inline void set_sparse_046_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_046_str();
  inline ::std::string* release_sparse_046_str();
  inline void set_allocated_sparse_046_str(::std::string* sparse_046_str);

  // optional string sparse_047_str = 59;
  inline bool has_sparse_047_str() const;
  inline void clear_sparse_047_str();
  static const int kSparse047StrFieldNumber = 59;
  inline const ::std::string& sparse_047_str() const;
  inline void set_sparse_047_str(const ::std::string& value);
  inline void set_sparse_047_str(const char* value);
  inline void set_sparse_047_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_047_str();
  inline ::std::string* release_sparse_047_str();
  inline void set_allocated_sparse_047_str(::std::string* sparse_047_str);

  // optional string sparse_048_str = 60;
  inline bool has_sparse_048_str() const;
  inline void clear_sparse_048_str();
  static const int kSparse048StrFieldNumber = 60;
  inline const ::std::string& sparse_048_str() const;
  inline void set_sparse_048_str(const ::std::string& value);
  inline void set_sparse_048_str(const char* value);
  inline void set_sparse_048_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_048_str();
  inline ::std::string* release_sparse_048_str();
  inline void set_allocated_sparse_048_str(::std::string* sparse_048_str);

  // optional string sparse_049_str = 61;
  inline bool has_sparse_049_str() const;
  inline void clear_sparse_049_str();
  static const int kSparse049StrFieldNumber = 61;
  inline const ::std::string& sparse_049_str() const;
  inline void set_sparse_049_str(const ::std::string& value);
  inline void set_sparse_049_str(const char* value);
  inline void set_sparse_049_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_049_str();
  inline ::std::string* release_sparse_049_str();
  inline void set_allocated_sparse_049_str(::std::string* sparse_049_str);

  // optional string sparse_050_str = 62;
  inline bool has_sparse_050_str() const;
  inline void clear_sparse_050_str();
  static const int kSparse050StrFieldNumber = 62;
  inline const ::std::string& sparse_050_str() const;
  inline void set_sparse_050_str(const ::std::string& value);
  inline void set_sparse_050_str(const char* value);
  inline void set_sparse_050_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_050_str();
  inline ::std::string* release_sparse_050_str();
  inline void set_allocated_sparse_050_str(::std::string* sparse_050_str);

  // optional string sparse_051_str = 63;
  inline bool has_sparse_051_str() const;
  inline void clear_sparse_051_str();
  static const int kSparse051StrFieldNumber = 63;
  inline const ::std::string& sparse_051_str() const;
  inline void set_sparse_051_str(const ::std::string& value);
  inline void set_sparse_051_str(const char* value);
  inline void set_sparse_051_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_051_str();
  inline ::std::string* release_sparse_051_str();
  inline void set_allocated_sparse_051_str(::std::string* sparse_051_str);

  // optional string sparse_052_str = 64;
  inline bool has_sparse_052_str() const;
  inline void clear_sparse_052_str();
  static const int kSparse052StrFieldNumber = 64;
  inline const ::std::string& sparse_052_str() const;
  inline void set_sparse_052_str(const ::std::string& value);
  inline void set_sparse_052_str(const char* value);
  inline void set_sparse_052_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_052_str();
  inline ::std::string* release_sparse_052_str();
  inline void set_allocated_sparse_052_str(::std::string* sparse_052_str);

  // optional string sparse_053_str = 65;
  inline bool has_sparse_053_str() const;
  inline void clear_sparse_053_str();
  static const int kSparse053StrFieldNumber = 65;
  inline const ::std::string& sparse_053_str() const;
  inline void set_sparse_053_str(const ::std::string& value);
  inline void set_sparse_053_str(const char* value);
  inline void set_sparse_053_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_053_str();
  inline ::std::string* release_sparse_053_str();
  inline void set_allocated_sparse_053_str(::std::string* sparse_053_str);

  // optional string sparse_054_str = 66;
  inline bool has_sparse_054_str() const;
  inline void clear_sparse_054_str();
  static const int kSparse054StrFieldNumber = 66;
  inline const ::std::string& sparse_054_str() const;
  inline void set_sparse_054_str(const ::std::string& value);
  inline void set_sparse_054_str(const char* value);
  inline void set_sparse_054_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_054_str();
  inline ::std::string* release_sparse_054_str();
  inline void set_allocated_sparse_054_str(::std::string* sparse_054_str);

  // optional string sparse_055_str = 67;
  inline bool has_sparse_055_str() const;
  inline void clear_sparse_055_str();
  static const int kSparse055StrFieldNumber = 67;
  inline const ::std::string& sparse_055_str() const;
  inline void set_sparse_055_str(const ::std::string& value);
  inline void set_sparse_055_str(const char* value);
  inline void set_sparse_055_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_055_str();
  inline ::std::string* release_sparse_055_str();
  inline void set_allocated_sparse_055_str(::std::string* sparse_055_str);

  // optional string sparse_056_str = 68;
  inline bool has_sparse_056_str() const;
  inline void clear_sparse_056_str();
  static const int kSparse056StrFieldNumber = 68;
  inline const ::std::string& sparse_056_str() const;
  inline void set_sparse_056_str(const ::std::string& value);
  inline void set_sparse_056_str(const char* value);
  inline void set_sparse_056_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_056_str();
  inline ::std::string* release_sparse_056_str();
  inline void set_allocated_sparse_056_str(::std::string* sparse_056_str);

  // optional string sparse_057_str = 69;
  inline bool has_sparse_057_str() const;
  inline void clear_sparse_057_str();
  static const int kSparse057StrFieldNumber = 69;
  inline const ::std::string& sparse_057_str() const;
  inline void set_sparse_057_str(const ::std::string& value);
  inline void set_sparse_057_str(const char* value);
  inline void set_sparse_057_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_057_str();
  inline ::std::string* release_sparse_057_str();
  inline void set_allocated_sparse_057_str(::std::string* sparse_057_str);

  // optional string sparse_058_str = 70;
  inline bool has_sparse_058_str() const;
  inline void clear_sparse_058_str();
  static const int kSparse058StrFieldNumber = 70;
  inline const ::std::string& sparse_058_str() const;
  inline void set_sparse_058_str(const ::std::string& value);
  inline void set_sparse_058_str(const char* value);
  inline void set_sparse_058_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_058_str();
  inline ::std::string* release_sparse_058_str();
  inline void set_allocated_sparse_058_str(::std::string* sparse_058_str);

  // optional string sparse_059_str = 71;
  inline bool has_sparse_059_str() const;
  inline void clear_sparse_059_str();
  static const int kSparse059StrFieldNumber = 71;
  inline const ::std::string& sparse_059_str() const;
  inline void set_sparse_059_str(const ::std::string& value);
  inline void set_sparse_059_str(const char* value);
  inline void set_sparse_059_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_059_str();
  inline ::std::string* release_sparse_059_str();
  inline void set_allocated_sparse_059_str(::std::string* sparse_059_str);

  // optional string sparse_060_str = 72;
  inline bool has_sparse_060_str() const;
  inline void clear_sparse_060_str();
  static const int kSparse060StrFieldNumber = 72;
  inline const ::std::string& sparse_060_str() const;
  inline void set_sparse_060_str(const ::std::string& value);
  inline void set_sparse_060_str(const char* value);
  inline void set_sparse_060_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_060_str();
  inline ::std::string* release_sparse_060_str();
  inline void set_allocated_sparse_060_str(::std::string* sparse_060_str);

  // optional string sparse_061_str = 73;
  inline bool has_sparse_061_str() const;
  inline void clear_sparse_061_str();
  static const int kSparse061StrFieldNumber = 73;
  inline const ::std::string& sparse_061_str() const;
  inline void set_sparse_061_str(const ::std::string& value);
  inline void set_sparse_061_str(const char* value);
  inline void set_sparse_061_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_061_str();
  inline ::std::string* release_sparse_061_str();
  inline void set_allocated_sparse_061_str(::std::string* sparse_061_str);

  // optional string sparse_062_str = 74;
  inline bool has_sparse_062_str() const;
  inline void clear_sparse_062_str();
  static const int kSparse062StrFieldNumber = 74;
  inline const ::std::string& sparse_062_str() const;
  inline void set_sparse_062_str(const ::std::string& value);
  inline void set_sparse_062_str(const char* value);
  inline void set_sparse_062_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_062_str();
  inline ::std::string* release_sparse_062_str();
  inline void set_allocated_sparse_062_str(::std::string* sparse_062_str);

  // optional string sparse_063_str = 75;
  inline bool has_sparse_063_str() const;
  inline void clear_sparse_063_str();
  static const int kSparse063StrFieldNumber = 75;
  inline const ::std::string& sparse_063_str() const;
  inline void set_sparse_063_str(const ::std::string& value);
  inline void set_sparse_063_str(const char* value);
  inline void set_sparse_063_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_063_str();
  inline ::std::string* release_sparse_063_str();
  inline void set_allocated_sparse_063_str(::std::string* sparse_063_str);

  // optional string sparse_064_str = 76;
  inline bool has_sparse_064_str() const;
  inline void clear_sparse_064_str();
  static const int kSparse064StrFieldNumber = 76;
  inline const ::std::string& sparse_064_str() const;
  inline void set_sparse_064_str(const ::std::string& value);
  inline void set_sparse_064_str(const char* value);
  inline void set_sparse_064_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_064_str();
  inline ::std::string* release_sparse_064_str();
  inline void set_allocated_sparse_064_str(::std::string* sparse_064_str);

  // optional string sparse_065_str = 77;
  inline bool has_sparse_065_str() const;
  inline void clear_sparse_065_str();
  static const int kSparse065StrFieldNumber = 77;
  inline const ::std::string& sparse_065_str() const;
  inline void set_sparse_065_str(const ::std::string& value);
  inline void set_sparse_065_str(const char* value);
  inline void set_sparse_065_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_065_str();
  inline ::std::string* release_sparse_065_str();
  inline void set_allocated_sparse_065_str(::std::string* sparse_065_str);

  // optional string sparse_066_str = 78;
  inline bool has_sparse_066_str() const;
  inline void clear_sparse_066_str();
  static const int kSparse066StrFieldNumber = 78;
  inline const ::std::string& sparse_066_str() const;
  inline void set_sparse_066_str(const ::std::string& value);
  inline void set_sparse_066_str(const char* value);
  inline void set_sparse_066_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_066_str();
  inline ::std::string* release_sparse_066_str();
  inline void set_allocated_sparse_066_str(::std::string* sparse_066_str);

  // optional string sparse_067_str = 79;
  inline bool has_sparse_067_str() const;
  inline void clear_sparse_067_str();
  static const int kSparse067StrFieldNumber = 79;
  inline const ::std::string& sparse_067_str() const;
  inline void set_sparse_067_str(const ::std::string& value);
  inline void set_sparse_067_str(const char* value);
  inline void set_sparse_067_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_067_str();
  inline ::std::string* release_sparse_067_str();
  inline void set_allocated_sparse_067_str(::std::string* sparse_067_str);

  // optional string sparse_068_str = 80;
  inline bool has_sparse_068_str() const;
  inline void clear_sparse_068_str();
  static const int kSparse068StrFieldNumber = 80;
  inline const ::std::string& sparse_068_str() const;
  inline void set_sparse_068_str(const ::std::string& value);
  inline void set_sparse_068_str(const char* value);
  inline void set_sparse_068_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_068_str();
  inline ::std::string* release_sparse_068_str();
  inline void set_allocated_sparse_068_str(::std::string* sparse_068_str);

  // optional string sparse_069_str = 81;
  inline bool has_sparse_069_str() const;
  inline void clear_sparse_069_str();
  static const int kSparse069StrFieldNumber = 81;
  inline const ::std::string& sparse_069_str() const;
  inline void set_sparse_069_str(const ::std::string& value);
  inline void set_sparse_069_str(const char* value);
  inline void set_sparse_069_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_069_str();
  inline ::std::string* release_sparse_069_str();
  inline void set_allocated_sparse_069_str(::std::string* sparse_069_str);

  // optional string sparse_070_str = 82;
  inline bool has_sparse_070_str() const;
  inline void clear_sparse_070_str();
  static const int kSparse070StrFieldNumber = 82;
  inline const ::std::string& sparse_070_str() const;
  inline void set_sparse_070_str(const ::std::string& value);
  inline void set_sparse_070_str(const char* value);
  inline void set_sparse_070_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_070_str();
  inline ::std::string* release_sparse_070_str();
  inline void set_allocated_sparse_070_str(::std::string* sparse_070_str);

  // optional string sparse_071_str = 83;
  inline bool has_sparse_071_str() const;
  inline void clear_sparse_071_str();
  static const int kSparse071StrFieldNumber = 83;
  inline const ::std::string& sparse_071_str() const;
  inline void set_sparse_071_str(const ::std::string& value);
  inline void set_sparse_071_str(const char* value);
  inline void set_sparse_071_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_071_str();
  inline ::std::string* release_sparse_071_str();
  inline void set_allocated_sparse_071_str(::std::string* sparse_071_str);

  // optional string sparse_072_str = 84;
  inline bool has_sparse_072_str() const;
  inline void clear_sparse_072_str();
  static const int kSparse072StrFieldNumber = 84;
  inline const ::std::string& sparse_072_str() const;
  inline void set_sparse_072_str(const ::std::string& value);
  inline void set_sparse_072_str(const char* value);
  inline void set_sparse_072_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_072_str();
  inline ::std::string* release_sparse_072_str();
  inline void set_allocated_sparse_072_str(::std::string* sparse_072_str);

  // optional string sparse_073_str = 85;
  inline bool has_sparse_073_str() const;
  inline void clear_sparse_073_str();
  static const int kSparse073StrFieldNumber = 85;
  inline const ::std::string& sparse_073_str() const;
  inline void set_sparse_073_str(const ::std::string& value);
  inline void set_sparse_073_str(const char* value);
  inline void set_sparse_073_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_073_str();
  inline ::std::string* release_sparse_073_str();
  inline void set_allocated_sparse_073_str(::std::string* sparse_073_str);

  // optional string sparse_074_str = 86;
  inline bool has_sparse_074_str() const;
  inline void clear_sparse_074_str();
  static const int kSparse074StrFieldNumber = 86;
  inline const ::std::string& sparse_074_str() const;
  inline void set_sparse_074_str(const ::std::string& value);
  inline void set_sparse_074_str(const char* value);
  inline void set_sparse_074_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_074_str();
  inline ::std::string* release_sparse_074_str();
  inline void set_allocated_sparse_074_str(::std::string* sparse_074_str);

  // optional string sparse_075_str = 87;
  inline bool has_sparse_075_str() const;
  inline void clear_sparse_075_str();
  static const int kSparse075StrFieldNumber = 87;
  inline const ::std::string& sparse_075_str() const;
  inline void set_sparse_075_str(const ::std::string& value);
  inline void set_sparse_075_str(const char* value);
  inline void set_sparse_075_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_075_str();
  inline ::std::string* release_sparse_075_str();
  inline void set_allocated_sparse_075_str(::std::string* sparse_075_str);

  // optional string sparse_076_str = 88;
  inline bool has_sparse_076_str() const;
  inline void clear_sparse_076_str();
  static const int kSparse076StrFieldNumber = 88;
  inline const ::std::string& sparse_076_str() const;
  inline void set_sparse_076_str(const ::std::string& value);
  inline void set_sparse_076_str(const char* value);
  inline void set_sparse_076_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_076_str();
  inline ::std::string* release_sparse_076_str();
  inline void set_allocated_sparse_076_str(::std::string* sparse_076_str);

  // optional string sparse_077_str = 89;
  inline bool has_sparse_077_str() const;
  inline void clear_sparse_077_str();
  static const int kSparse077StrFieldNumber = 89;
  inline const ::std::string& sparse_077_str() const;
  inline void set_sparse_077_str(const ::std::string& value);
  inline void set_sparse_077_str(const char* value);
  inline void set_sparse_077_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_077_str();
  inline ::std::string* release_sparse_077_str();
  inline void set_allocated_sparse_077_str(::std::string* sparse_077_str);

  // optional string sparse_078_str = 90;
  inline bool has_sparse_078_str() const;
  inline void clear_sparse_078_str();
  static const int kSparse078StrFieldNumber = 90;
  inline const ::std::string& sparse_078_str() const;
  inline void set_sparse_078_str(const ::std::string& value);
  inline void set_sparse_078_str(const char* value);
  inline void set_sparse_078_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_078_str();
  inline ::std::string* release_sparse_078_str();
  inline void set_allocated_sparse_078_str(::std::string* sparse_078_str);

  // optional string sparse_079_str = 91;
  inline bool has_sparse_079_str() const;
  inline void clear_sparse_079_str();
  static const int kSparse079StrFieldNumber = 91;
  inline const ::std::string& sparse_079_str() const;
  inline void set_sparse_079_str(const ::std::string& value);
  inline void set_sparse_079_str(const char* value);
  inline void set_sparse_079_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_079_str();
  inline ::std::string* release_sparse_079_str();
  inline void set_allocated_sparse_079_str(::std::string* sparse_079_str);

  // optional string sparse_080_str = 92;
  inline bool has_sparse_080_str() const;
  inline void clear_sparse_080_str();
  static const int kSparse080StrFieldNumber = 92;
  inline const ::std::string& sparse_080_str() const;
  inline void set_sparse_080_str(const ::std::string& value);
  inline void set_sparse_080_str(const char* value);
  inline void set_sparse_080_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_080_str();
  inline ::std::string* release_sparse_080_str();
  inline void set_allocated_sparse_080_str(::std::string* sparse_080_str);

  // optional string sparse_081_str = 93;
  inline bool has_sparse_081_str() const;
  inline void clear_sparse_081_str();
  static const int kSparse081StrFieldNumber = 93;
  inline const ::std::string& sparse_081_str() const;
  inline void set_sparse_081_str(const ::std::string& value);
  inline void set_sparse_081_str(const char* value);
  inline void set_sparse_081_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_081_str();
  inline ::std::string* release_sparse_081_str();
  inline void set_allocated_sparse_081_str(::std::string* sparse_081_str);

  // optional string sparse_082_str = 94;
  inline bool has_sparse_082_str() const;
  inline void clear_sparse_082_str();
  static const int kSparse082StrFieldNumber = 94;
  inline const ::std::string& sparse_082_str() const;
  inline void set_sparse_082_str(const ::std::string& value);
  inline void set_sparse_082_str(const char* value);
  inline void set_sparse_082_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_082_str();
  inline ::std::string* release_sparse_082_str();
  inline void set_allocated_sparse_082_str(::std::string* sparse_082_str);

  // optional string sparse_083_str = 95;
  inline bool has_sparse_083_str() const;
  inline void clear_sparse_083_str();
  static const int kSparse083StrFieldNumber = 95;
  inline const ::std::string& sparse_083_str() const;
  inline void set_sparse_083_str(const ::std::string& value);
  inline void set_sparse_083_str(const char* value);
  inline void set_sparse_083_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_083_str();
  inline ::std::string* release_sparse_083_str();
  inline void set_allocated_sparse_083_str(::std::string* sparse_083_str);

  // optional string sparse_084_str = 96;
  inline bool has_sparse_084_str() const;
  inline void clear_sparse_084_str();
  static const int kSparse084StrFieldNumber = 96;
  inline const ::std::string& sparse_084_str() const;
  inline void set_sparse_084_str(const ::std::string& value);
  inline void set_sparse_084_str(const char* value);
  inline void set_sparse_084_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_084_str();
  inline ::std::string* release_sparse_084_str();
  inline void set_allocated_sparse_084_str(::std::string* sparse_084_str);

  // optional string sparse_085_str = 97;
  inline bool has_sparse_085_str() const;
  inline void clear_sparse_085_str();
  static const int kSparse085StrFieldNumber = 97;
  inline const ::std::string& sparse_085_str() const;
  inline void set_sparse_085_str(const ::std::string& value);
  inline void set_sparse_085_str(const char* value);
  inline void set_sparse_085_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_085_str();
  inline ::std::string* release_sparse_085_str();
  inline void set_allocated_sparse_085_str(::std::string* sparse_085_str);

  // optional string sparse_086_str = 98;
  inline bool has_sparse_086_str() const;
  inline void clear_sparse_086_str();
  static const int kSparse086StrFieldNumber = 98;
  inline const ::std::string& sparse_086_str() const;
  inline void set_sparse_086_str(const ::std::string& value);
  inline void set_sparse_086_str(const char* value);
  inline void set_sparse_086_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_086_str();
  inline ::std::string* release_sparse_086_str();
  inline void set_allocated_sparse_086_str(::std::string* sparse_086_str);

  // optional string sparse_087_str = 99;
  inline bool has_sparse_087_str() const;
  inline void clear_sparse_087_str();
  static const int kSparse087StrFieldNumber = 99;
  inline const ::std::string& sparse_087_str() const;
  inline void set_sparse_087_str(const ::std::string& value);
  inline void set_sparse_087_str(const char* value);
  inline void set_sparse_087_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_087_str();
  inline ::std::string* release_sparse_087_str();
  inline void set_allocated_sparse_087_str(::std::string* sparse_087_str);

  // optional string sparse_088_str = 100;
  inline bool has_sparse_088_str() const;
  inline void clear_sparse_088_str();
  static const int kSparse088StrFieldNumber = 100;
  inline const ::std::string& sparse_088_str() const;
  inline void set_sparse_088_str(const ::std::string& value);
  inline void set_sparse_088_str(const char* value);
  inline void set_sparse_088_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_088_str();
  inline ::std::string* release_sparse_088_str();
  inline void set_allocated_sparse_088_str(::std::string* sparse_088_str);

  // optional string sparse_089_str = 101;
  inline bool has_sparse_089_str() const;
  inline void clear_sparse_089_str();
  static const int kSparse089StrFieldNumber = 101;
  inline const ::std::string& sparse_089_str() const;
  inline void set_sparse_089_str(const ::std::string& value);
  inline void set_sparse_089_str(const char* value);
  inline void set_sparse_089_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_089_str();
  inline ::std::string* release_sparse_089_str();
  inline void set_allocated_sparse_089_str(::std::string* sparse_089_str);

  // optional string sparse_090_str = 102;
  inline bool has_sparse_090_str() const;
  inline void clear_sparse_090_str();
  static const int kSparse090StrFieldNumber = 102;
  inline const ::std::string& sparse_090_str() const;
  inline void set_sparse_090_str(const ::std::string& value);
  inline void set_sparse_090_str(const char* value);
  inline void set_sparse_090_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_090_str();
  inline ::std::string* release_sparse_090_str();
  inline void set_allocated_sparse_090_str(::std::string* sparse_090_str);

  // optional string sparse_091_str = 103;
  inline bool has_sparse_091_str() const;
  inline void clear_sparse_091_str();
  static const int kSparse091StrFieldNumber = 103;
  inline const ::std::string& sparse_091_str() const;
  inline void set_sparse_091_str(const ::std::string& value);
  inline void set_sparse_091_str(const char* value);
  inline void set_sparse_091_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_091_str();
  inline ::std::string* release_sparse_091_str();
  inline void set_allocated_sparse_091_str(::std::string* sparse_091_str);

  // optional string sparse_092_str = 104;
  inline bool has_sparse_092_str() const;
  inline void clear_sparse_092_str();
  static const int kSparse092StrFieldNumber = 104;
  inline const ::std::string& sparse_092_str() const;
  inline void set_sparse_092_str(const ::std::string& value);
  inline void set_sparse_092_str(const char* value);
  inline void set_sparse_092_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_092_str();
  inline ::std::string* release_sparse_092_str();
  inline void set_allocated_sparse_092_str(::std::string* sparse_092_str);

  // optional string sparse_093_str = 105;
  inline bool has_sparse_093_str() const;
  inline void clear_sparse_093_str();
  static const int kSparse093StrFieldNumber = 105;
  inline const ::std::string& sparse_093_str() const;
  inline void set_sparse_093_str(const ::std::string& value);
  inline void set_sparse_093_str(const char* value);
  inline void set_sparse_093_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_093_str();
  inline ::std::string* release_sparse_093_str();
  inline void set_allocated_sparse_093_str(::std::string* sparse_093_str);

  // optional string sparse_094_str = 106;
  inline bool has_sparse_094_str() const;
  inline void clear_sparse_094_str();
  static const int kSparse094StrFieldNumber = 106;
  inline const ::std::string& sparse_094_str() const;
  inline void set_sparse_094_str(const ::std::string& value);
  inline void set_sparse_094_str(const char* value);
  inline void set_sparse_094_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_094_str();
  inline ::std::string* release_sparse_094_str();
  inline void set_allocated_sparse_094_str(::std::string* sparse_094_str);

  // optional string sparse_095_str = 107;
  inline bool has_sparse_095_str() const;
  inline void clear_sparse_095_str();
  static const int kSparse095StrFieldNumber = 107;
  inline const ::std::string& sparse_095_str() const;
  inline void set_sparse_095_str(const ::std::string& value);
  inline void set_sparse_095_str(const char* value);
  inline void set_sparse_095_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_095_str();
  inline ::std::string* release_sparse_095_str();
  inline void set_allocated_sparse_095_str(::std::string* sparse_095_str);

  // optional string sparse_096_str = 108;
  inline bool has_sparse_096_str() const;
  inline void clear_sparse_096_str();
  static const int kSparse096StrFieldNumber = 108;
  inline const ::std::string& sparse_096_str() const;
  inline void set_sparse_096_str(const ::std::string& value);
  inline void set_sparse_096_str(const char* value);
  inline void set_sparse_096_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_096_str();
  inline ::std::string* release_sparse_096_str();
  inline void set_allocated_sparse_096_str(::std::string* sparse_096_str);

  // optional string sparse_097_str = 109;
  inline bool has_sparse_097_str() const;
  inline void clear_sparse_097_str();
  static const int kSparse097StrFieldNumber = 109;
  inline const ::std::string& sparse_097_str() const;
  inline void set_sparse_097_str(const ::std::string& value);
  inline void set_sparse_097_str(const char* value);
  inline void set_sparse_097_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_097_str();
  inline ::std::string* release_sparse_097_str();
  inline void set_allocated_sparse_097_str(::std::string* sparse_097_str);

  // optional string sparse_098_str = 110;
  inline bool has_sparse_098_str() const;
  inline void clear_sparse_098_str();
  static const int kSparse098StrFieldNumber = 110;
  inline const ::std::string& sparse_098_str() const;
  inline void set_sparse_098_str(const ::std::string& value);
  inline void set_sparse_098_str(const char* value);
  inline void set_sparse_098_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_098_str();
  inline ::std::string* release_sparse_098_str();
  inline void set_allocated_sparse_098_str(::std::string* sparse_098_str);

  // optional string sparse_099_str = 111;
  inline bool has_sparse_099_str() const;
  inline void clear_sparse_099_str();
  static const int kSparse099StrFieldNumber = 111;
  inline const ::std::string& sparse_099_str() const;
  inline void set_sparse_099_str(const ::std::string& value);
  inline void set_sparse_099_str(const char* value);
  inline void set_sparse_099_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_099_str();
  inline ::std::string* release_sparse_099_str();
  inline void set_allocated_sparse_099_str(::std::string* sparse_099_str);

  // optional string sparse_100_str = 112;
  inline bool has_sparse_100_str() const;
  inline void clear_sparse_100_str();
  static const int kSparse100StrFieldNumber = 112;
  inline const ::std::string& sparse_100_str() const;
  inline void set_sparse_100_str(const ::std::string& value);
  inline void set_sparse_100_str(const char* value);
  inline void set_sparse_100_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_100_str();
  inline ::std::string* release_sparse_100_str();
  inline void set_allocated_sparse_100_str(::std::string* sparse_100_str);

  // optional string sparse_101_str = 113;
  inline bool has_sparse_101_str() const;
  inline void clear_sparse_101_str();
  static const int kSparse101StrFieldNumber = 113;
  inline const ::std::string& sparse_101_str() const;
  inline void set_sparse_101_str(const ::std::string& value);
  inline void set_sparse_101_str(const char* value);
  inline void set_sparse_101_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_101_str();
  inline ::std::string* release_sparse_101_str();
  inline void set_allocated_sparse_101_str(::std::string* sparse_101_str);

  // optional string sparse_102_str = 114;
  inline bool has_sparse_102_str() const;
  inline void clear_sparse_102_str();
  static const int kSparse102StrFieldNumber = 114;
  inline const ::std::string& sparse_102_str() const;
  inline void set_sparse_102_str(const ::std::string& value);
  inline void set_sparse_102_str(const char* value);
  inline void set_sparse_102_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_102_str();
  inline ::std::string* release_sparse_102_str();
  inline void set_allocated_sparse_102_str(::std::string* sparse_102_str);

  // optional string sparse_103_str = 115;
  inline bool has_sparse_103_str() const;
  inline void clear_sparse_103_str();
  static const int kSparse103StrFieldNumber = 115;
  inline const ::std::string& sparse_103_str() const;
  inline void set_sparse_103_str(const ::std::string& value);
  inline void set_sparse_103_str(const char* value);
  inline void set_sparse_103_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_103_str();
  inline ::std::string* release_sparse_103_str();
  inline void set_allocated_sparse_103_str(::std::string* sparse_103_str);

  // optional string sparse_104_str = 116;
  inline bool has_sparse_104_str() const;
  inline void clear_sparse_104_str();
  static const int kSparse104StrFieldNumber = 116;
  inline const ::std::string& sparse_104_str() const;
  inline void set_sparse_104_str(const ::std::string& value);
  inline void set_sparse_104_str(const char* value);
  inline void set_sparse_104_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_104_str();
  inline ::std::string* release_sparse_104_str();
  inline void set_allocated_sparse_104_str(::std::string* sparse_104_str);

  // optional string sparse_105_str = 117;
  inline bool has_sparse_105_str() const;
  inline void clear_sparse_105_str();
  static const int kSparse105StrFieldNumber = 117;
  inline const ::std::string& sparse_105_str() const;
  inline void set_sparse_105_str(const ::std::string& value);
  inline void set_sparse_105_str(const char* value);
  inline void set_sparse_105_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_105_str();
  inline ::std::string* release_sparse_105_str();
  inline void set_allocated_sparse_105_str(::std::string* sparse_105_str);

  // optional string sparse_106_str = 118;
  inline bool has_sparse_106_str() const;
  inline void clear_sparse_106_str();
  static const int kSparse106StrFieldNumber = 118;
  inline const ::std::string& sparse_106_str() const;
  inline void set_sparse_106_str(const ::std::string& value);
  inline void set_sparse_106_str(const char* value);
  inline void set_sparse_106_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_106_str();
  inline ::std::string* release_sparse_106_str();
  inline void set_allocated_sparse_106_str(::std::string* sparse_106_str);

  // optional string sparse_107_str = 119;
  inline bool has_sparse_107_str() const;
  inline void clear_sparse_107_str();
  static const int kSparse107StrFieldNumber = 119;
  inline const ::std::string& sparse_107_str() const;
  inline void set_sparse_107_str(const ::std::string& value);
  inline void set_sparse_107_str(const char* value);
  inline void set_sparse_107_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_107_str();
  inline ::std::string* release_sparse_107_str();
  inline void set_allocated_sparse_107_str(::std::string* sparse_107_str);

  // optional string sparse_108_str = 120;
  inline bool has_sparse_108_str() const;
  inline void clear_sparse_108_str();
  static const int kSparse108StrFieldNumber = 120;
  inline const ::std::string& sparse_108_str() const;
  inline void set_sparse_108_str(const ::std::string& value);
  inline void set_sparse_108_str(const char* value);
  inline void set_sparse_108_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_108_str();
  inline ::std::string* release_sparse_108_str();
  inline void set_allocated_sparse_108_str(::std::string* sparse_108_str);

  // optional string sparse_109_str = 121;
  inline bool has_sparse_109_str() const;
  inline void clear_sparse_109_str();
  static const int kSparse109StrFieldNumber = 121;
  inline const ::std::string& sparse_109_str() const;
  inline void set_sparse_109_str(const ::std::string& value);
  inline void set_sparse_109_str(const char* value);
  inline void set_sparse_109_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_109_str();
  inline ::std::string* release_sparse_109_str();
  inline void set_allocated_sparse_109_str(::std::string* sparse_109_str);

  // optional string sparse_110_str = 122;
  inline bool has_sparse_110_str() const;
  inline void clear_sparse_110_str();
  static const int kSparse110StrFieldNumber = 122;
  inline const ::std::string& sparse_110_str() const;
  inline void set_sparse_110_str(const ::std::string& value);
  inline void set_sparse_110_str(const char* value);
  inline void set_sparse_110_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_110_str();
  inline ::std::string* release_sparse_110_str();
  inline void set_allocated_sparse_110_str(::std::string* sparse_110_str);

  // optional string sparse_111_str = 123;
  inline bool has_sparse_111_str() const;
  inline void clear_sparse_111_str();
  static const int kSparse111StrFieldNumber = 123;
  inline const ::std::string& sparse_111_str() const;
  inline void set_sparse_111_str(const ::std::string& value);
  inline void set_sparse_111_str(const char* value);
  inline void set_sparse_111_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_111_str();
  inline ::std::string* release_sparse_111_str();
  inline void set_allocated_sparse_111_str(::std::string* sparse_111_str);

  // optional string sparse_112_str = 124;
  inline bool has_sparse_112_str() const;
  inline void clear_sparse_112_str();
  static const int kSparse112StrFieldNumber = 124;
  inline const ::std::string& sparse_112_str() const;
  inline void set_sparse_112_str(const ::std::string& value);
  inline void set_sparse_112_str(const char* value);
  inline void set_sparse_112_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_112_str();
  inline ::std::string* release_sparse_112_str();
  inline void set_allocated_sparse_112_str(::std::string* sparse_112_str);

  // optional string sparse_113_str = 125;
  inline bool has_sparse_113_str() const;
  inline void clear_sparse_113_str();
  static const int kSparse113StrFieldNumber = 125;
  inline const ::std::string& sparse_113_str() const;
  inline void set_sparse_113_str(const ::std::string& value);
  inline void set_sparse_113_str(const char* value);
  inline void set_sparse_113_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_113_str();
  inline ::std::string* release_sparse_113_str();
  inline void set_allocated_sparse_113_str(::std::string* sparse_113_str);

  // optional string sparse_114_str = 126;
  inline bool has_sparse_114_str() const;
  inline void clear_sparse_114_str();
  static const int kSparse114StrFieldNumber = 126;
  inline const ::std::string& sparse_114_str() const;
  inline void set_sparse_114_str(const ::std::string& value);
  inline void set_sparse_114_str(const char* value);
  inline void set_sparse_114_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_114_str();
  inline ::std::string* release_sparse_114_str();
  inline void set_allocated_sparse_114_str(::std::string* sparse_114_str);

  // optional string sparse_115_str = 127;
  inline bool has_sparse_115_str() const;
  inline void clear_sparse_115_str();
  static const int kSparse115StrFieldNumber = 127;
  inline const ::std::string& sparse_115_str() const;
  inline void set_sparse_115_str(const ::std::string& value);
  inline void set_sparse_115_str(const char* value);
  inline void set_sparse_115_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_115_str();
  inline ::std::string* release_sparse_115_str();
  inline void set_allocated_sparse_115_str(::std::string* sparse_115_str);

  // optional string sparse_116_str = 128;
  inline bool has_sparse_116_str() const;
  inline void clear_sparse_116_str();
  static const int kSparse116StrFieldNumber = 128;
  inline const ::std::string& sparse_116_str() const;
  inline void set_sparse_116_str(const ::std::string& value);
  inline void set_sparse_116_str(const char* value);
  inline void set_sparse_116_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_116_str();
  inline ::std::string* release_sparse_116_str();
  inline void set_allocated_sparse_116_str(::std::string* sparse_116_str);

  // optional string sparse_117_str = 129;
  inline bool has_sparse_117_str() const;
  inline void clear_sparse_117_str();
  static const int kSparse117StrFieldNumber = 129;
  inline const ::std::string& sparse_117_str() const;
  inline void set_sparse_117_str(const ::std::string& value);
  inline void set_sparse_117_str(const char* value);
  inline void set_sparse_117_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_117_str();
  inline ::std::string* release_sparse_117_str();
  inline void set_allocated_sparse_117_str(::std::string* sparse_117_str);

  // optional string sparse_118_str = 130;
  inline bool has_sparse_118_str() const;
  inline void clear_sparse_118_str();
  static const int kSparse118StrFieldNumber = 130;
  inline const ::std::string& sparse_118_str() const;
  inline void set_sparse_118_str(const ::std::string& value);
  inline void set_sparse_118_str(const char* value);
  inline void set_sparse_118_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_118_str();
  inline ::std::string* release_sparse_118_str();
  inline void set_allocated_sparse_118_str(::std::string* sparse_118_str);

  // optional string sparse_119_str = 131;
  inline bool has_sparse_119_str() const;
  inline void clear_sparse_119_str();
  static const int kSparse119StrFieldNumber = 131;
  inline const ::std::string& sparse_119_str() const;
  inline void set_sparse_119_str(const ::std::string& value);
  inline void set_sparse_119_str(const char* value);
  inline void set_sparse_119_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_119_str();
  inline ::std::string* release_sparse_119_str();
  inline void set_allocated_sparse_119_str(::std::string* sparse_119_str);

  // optional string sparse_120_str = 132;
  inline bool has_sparse_120_str() const;
  inline void clear_sparse_120_str();
  static const int kSparse120StrFieldNumber = 132;
  inline const ::std::string& sparse_120_str() const;
  inline void set_sparse_120_str(const ::std::string& value);
  inline void set_sparse_120_str(const char* value);
  inline void set_sparse_120_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_120_str();
  inline ::std::string* release_sparse_120_str();
  inline void set_allocated_sparse_120_str(::std::string* sparse_120_str);

  // optional string sparse_121_str = 133;
  inline bool has_sparse_121_str() const;
  inline void clear_sparse_121_str();
  static const int kSparse121StrFieldNumber = 133;
  inline const ::std::string& sparse_121_str() const;
  inline void set_sparse_121_str(const ::std::string& value);
  inline void set_sparse_121_str(const char* value);
  inline void set_sparse_121_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_121_str();
  inline ::std::string* release_sparse_121_str();
  inline void set_allocated_sparse_121_str(::std::string* sparse_121_str);

  // optional string sparse_122_str = 134;
  inline bool has_sparse_122_str() const;
  inline void clear_sparse_122_str();
  static const int kSparse122StrFieldNumber = 134;
  inline const ::std::string& sparse_122_str() const;
  inline void set_sparse_122_str(const ::std::string& value);
  inline void set_sparse_122_str(const char* value);
  inline void set_sparse_122_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_122_str();
  inline ::std::string* release_sparse_122_str();
  inline void set_allocated_sparse_122_str(::std::string* sparse_122_str);

  // optional string sparse_123_str = 135;
  inline bool has_sparse_123_str() const;
  inline void clear_sparse_123_str();
  static const int kSparse123StrFieldNumber = 135;
  inline const ::std::string& sparse_123_str() const;
  inline void set_sparse_123_str(const ::std::string& value);
  inline void set_sparse_123_str(const char* value);
  inline void set_sparse_123_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_123_str();
  inline ::std::string* release_sparse_123_str();
  inline void set_allocated_sparse_123_str(::std::string* sparse_123_str);

  // optional string sparse_124_str = 136;
  inline bool has_sparse_124_str() const;
  inline void clear_sparse_124_str();
  static const int kSparse124StrFieldNumber = 136;
  inline const ::std::string& sparse_124_str() const;
  inline void set_sparse_124_str(const ::std::string& value);
  inline void set_sparse_124_str(const char* value);
  inline void set_sparse_124_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_124_str();
  inline ::std::string* release_sparse_124_str();
  inline void set_allocated_sparse_124_str(::std::string* sparse_124_str);

  // optional string sparse_125_str = 137;
  inline bool has_sparse_125_str() const;
  inline void clear_sparse_125_str();
  static const int kSparse125StrFieldNumber = 137;
  inline const ::std::string& sparse_125_str() const;
  inline void set_sparse_125_str(const ::std::string& value);
  inline void set_sparse_125_str(const char* value);
  inline void set_sparse_125_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_125_str();
  inline ::std::string* release_sparse_125_str();
  inline void set_allocated_sparse_125_str(::std::string* sparse_125_str);

  // optional string sparse_126_str = 138;
  inline bool has_sparse_126_str() const;
  inline void clear_sparse_126_str();
  static const int kSparse126StrFieldNumber = 138;
  inline const ::std::string& sparse_126_str() const;
  inline void set_sparse_126_str(const ::std::string& value);
  inline void set_sparse_126_str(const char* value);
  inline void set_sparse_126_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_126_str();
  inline ::std::string* release_sparse_126_str();
  inline void set_allocated_sparse_126_str(::std::string* sparse_126_str);

  // optional string sparse_127_str = 139;
  inline bool has_sparse_127_str() const;
  inline void clear_sparse_127_str();
  static const int kSparse127StrFieldNumber = 139;
  inline const ::std::string& sparse_127_str() const;
  inline void set_sparse_127_str(const ::std::string& value);
  inline void set_sparse_127_str(const char* value);
  inline void set_sparse_127_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_127_str();
  inline ::std::string* release_sparse_127_str();
  inline void set_allocated_sparse_127_str(::std::string* sparse_127_str);

  // optional string sparse_128_str = 140;
  inline bool has_sparse_128_str() const;
  inline void clear_sparse_128_str();
  static const int kSparse128StrFieldNumber = 140;
  inline const ::std::string& sparse_128_str() const;
  inline void set_sparse_128_str(const ::std::string& value);
  inline void set_sparse_128_str(const char* value);
  inline void set_sparse_128_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_128_str();
  inline ::std::string* release_sparse_128_str();
  inline void set_allocated_sparse_128_str(::std::string* sparse_128_str);

  // optional string sparse_129_str = 141;
  inline bool has_sparse_129_str() const;
  inline void clear_sparse_129_str();
  static const int kSparse129StrFieldNumber = 141;
  inline const ::std::string& sparse_129_str() const;
  inline void set_sparse_129_str(const ::std::string& value);
  inline void set_sparse_129_str(const char* value);
  inline void set_sparse_129_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_129_str();
  inline ::std::string* release_sparse_129_str();
  inline void set_allocated_sparse_129_str(::std::string* sparse_129_str);

  // optional string sparse_130_str = 142;
  inline bool has_sparse_130_str() const;
  inline void clear_sparse_130_str();
  static const int kSparse130StrFieldNumber = 142;
  inline const ::std::string& sparse_130_str() const;
  inline void set_sparse_130_str(const ::std::string& value);
  inline void set_sparse_130_str(const char* value);
  inline void set_sparse_130_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_130_str();
  inline ::std::string* release_sparse_130_str();
  inline void set_allocated_sparse_130_str(::std::string* sparse_130_str);

  // optional string sparse_131_str = 143;
  inline bool has_sparse_131_str() const;
  inline void clear_sparse_131_str();
  static const int kSparse131StrFieldNumber = 143;
  inline const ::std::string& sparse_131_str() const;
  inline void set_sparse_131_str(const ::std::string& value);
  inline void set_sparse_131_str(const char* value);
  inline void set_sparse_131_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_131_str();
  inline ::std::string* release_sparse_131_str();
  inline void set_allocated_sparse_131_str(::std::string* sparse_131_str);

  // optional string sparse_132_str = 144;
  inline bool has_sparse_132_str() const;
  inline void clear_sparse_132_str();
  static const int kSparse132StrFieldNumber = 144;
  inline const ::std::string& sparse_132_str() const;
  inline void set_sparse_132_str(const ::std::string& value);
  inline void set_sparse_132_str(const char* value);
  inline void set_sparse_132_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_132_str();
  inline ::std::string* release_sparse_132_str();
  inline void set_allocated_sparse_132_str(::std::string* sparse_132_str);

  // optional string sparse_133_str = 145;
  inline bool has_sparse_133_str() const;
  inline void clear_sparse_133_str();
  static const int kSparse133StrFieldNumber = 145;
  inline const ::std::string& sparse_133_str() const;
  inline void set_sparse_133_str(const ::std::string& value);
  inline void set_sparse_133_str(const char* value);
  inline void set_sparse_133_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_133_str();
  inline ::std::string* release_sparse_133_str();
  inline void set_allocated_sparse_133_str(::std::string* sparse_133_str);

  // optional string sparse_134_str = 146;
  inline bool has_sparse_134_str() const;
  inline void clear_sparse_134_str();
  static const int kSparse134StrFieldNumber = 146;
  inline const ::std::string& sparse_134_str() const;
  inline void set_sparse_134_str(const ::std::string& value);
  inline void set_sparse_134_str(const char* value);
  inline void set_sparse_134_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_134_str();
  inline ::std::string* release_sparse_134_str();
  inline void set_allocated_sparse_134_str(::std::string* sparse_134_str);

  // optional string sparse_135_str = 147;
  inline bool has_sparse_135_str() const;
  inline void clear_sparse_135_str();
  static const int kSparse135StrFieldNumber = 147;
  inline const ::std::string& sparse_135_str() const;
  inline void set_sparse_135_str(const ::std::string& value);
  inline void set_sparse_135_str(const char* value);
  inline void set_sparse_135_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_135_str();
  inline ::std::string* release_sparse_135_str();
  inline void set_allocated_sparse_135_str(::std::string* sparse_135_str);

  // optional string sparse_136_str = 148;
  inline bool has_sparse_136_str() const;
  inline void clear_sparse_136_str();
  static const int kSparse136StrFieldNumber = 148;
  inline const ::std::string& sparse_136_str() const;
  inline void set_sparse_136_str(const ::std::string& value);
  inline void set_sparse_136_str(const char* value);
  inline void set_sparse_136_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_136_str();
  inline ::std::string* release_sparse_136_str();
  inline void set_allocated_sparse_136_str(::std::string* sparse_136_str);

  // optional string sparse_137_str = 149;
  inline bool has_sparse_137_str() const;
  inline void clear_sparse_137_str();
  static const int kSparse137StrFieldNumber = 149;
  inline const ::std::string& sparse_137_str() const;
  inline void set_sparse_137_str(const ::std::string& value);
  inline void set_sparse_137_str(const char* value);
  inline void set_sparse_137_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_137_str();
  inline ::std::string* release_sparse_137_str();
  inline void set_allocated_sparse_137_str(::std::string* sparse_137_str);

  // optional string sparse_138_str = 150;
  inline bool has_sparse_138_str() const;
  inline void clear_sparse_138_str();
  static const int kSparse138StrFieldNumber = 150;
  inline const ::std::string& sparse_138_str() const;
  inline void set_sparse_138_str(const ::std::string& value);
  inline void set_sparse_138_str(const char* value);
  inline void set_sparse_138_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_138_str();
  inline ::std::string* release_sparse_138_str();
  inline void set_allocated_sparse_138_str(::std::string* sparse_138_str);

  // optional string sparse_139_str = 151;
  inline bool has_sparse_139_str() const;
  inline void clear_sparse_139_str();
  static const int kSparse139StrFieldNumber = 151;
  inline const ::std::string& sparse_139_str() const;
  inline void set_sparse_139_str(const ::std::string& value);
  inline void set_sparse_139_str(const char* value);
  inline void set_sparse_139_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_139_str();
  inline ::std::string* release_sparse_139_str();
  inline void set_allocated_sparse_139_str(::std::string* sparse_139_str);

  // optional string sparse_140_str = 152;
  inline bool has_sparse_140_str() const;
  inline void clear_sparse_140_str();
  static const int kSparse140StrFieldNumber = 152;
  inline const ::std::string& sparse_140_str() const;
  inline void set_sparse_140_str(const ::std::string& value);
  inline void set_sparse_140_str(const char* value);
  inline void set_sparse_140_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_140_str();
  inline ::std::string* release_sparse_140_str();
  inline void set_allocated_sparse_140_str(::std::string* sparse_140_str);

  // optional string sparse_141_str = 153;
  inline bool has_sparse_141_str() const;
  inline void clear_sparse_141_str();
  static const int kSparse141StrFieldNumber = 153;
  inline const ::std::string& sparse_141_str() const;
  inline void set_sparse_141_str(const ::std::string& value);
  inline void set_sparse_141_str(const char* value);
  inline void set_sparse_141_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_141_str();
  inline ::std::string* release_sparse_141_str();
  inline void set_allocated_sparse_141_str(::std::string* sparse_141_str);

  // optional string sparse_142_str = 154;
  inline bool has_sparse_142_str() const;
  inline void clear_sparse_142_str();
  static const int kSparse142StrFieldNumber = 154;
  inline const ::std::string& sparse_142_str() const;
  inline void set_sparse_142_str(const ::std::string& value);
  inline void set_sparse_142_str(const char* value);
  inline void set_sparse_142_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_142_str();
  inline ::std::string* release_sparse_142_str();
  inline void set_allocated_sparse_142_str(::std::string* sparse_142_str);

  // optional string sparse_143_str = 155;
  inline bool has_sparse_143_str() const;
  inline void clear_sparse_143_str();
  static const int kSparse143StrFieldNumber = 155;
  inline const ::std::string& sparse_143_str() const;
  inline void set_sparse_143_str(const ::std::string& value);
  inline void set_sparse_143_str(const char* value);
  inline void set_sparse_143_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_143_str();
  inline ::std::string* release_sparse_143_str();
  inline void set_allocated_sparse_143_str(::std::string* sparse_143_str);

  // optional string sparse_144_str = 156;
  inline bool has_sparse_144_str() const;
  inline void clear_sparse_144_str();
  static const int kSparse144StrFieldNumber = 156;
  inline const ::std::string& sparse_144_str() const;
  inline void set_sparse_144_str(const ::std::string& value);
  inline void set_sparse_144_str(const char* value);
  inline void set_sparse_144_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_144_str();
  inline ::std::string* release_sparse_144_str();
  inline void set_allocated_sparse_144_str(::std::string* sparse_144_str);

  // optional string sparse_145_str = 157;
  inline bool has_sparse_145_str() const;
  inline void clear_sparse_145_str();
  static const int kSparse145StrFieldNumber = 157;
  inline const ::std::string& sparse_145_str() const;
  inline void set_sparse_145_str(const ::std::string& value);
  inline void set_sparse_145_str(const char* value);
  inline void set_sparse_145_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_145_str();
  inline ::std::string* release_sparse_145_str();
  inline void set_allocated_sparse_145_str(::std::string* sparse_145_str);

  // optional string sparse_146_str = 158;
  inline bool has_sparse_146_str() const;
  inline void clear_sparse_146_str();
  static const int kSparse146StrFieldNumber = 158;
  inline const ::std::string& sparse_146_str() const;
  inline void set_sparse_146_str(const ::std::string& value);
  inline void set_sparse_146_str(const char* value);
  inline void set_sparse_146_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_146_str();
  inline ::std::string* release_sparse_146_str();
  inline void set_allocated_sparse_146_str(::std::string* sparse_146_str);

  // optional string sparse_147_str = 159;
  inline bool has_sparse_147_str() const;
  inline void clear_sparse_147_str();
  static const int kSparse147StrFieldNumber = 159;
  inline const ::std::string& sparse_147_str() const;
  inline void set_sparse_147_str(const ::std::string& value);
  inline void set_sparse_147_str(const char* value);
  inline void set_sparse_147_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_147_str();
  inline ::std::string* release_sparse_147_str();
  inline void set_allocated_sparse_147_str(::std::string* sparse_147_str);

  // optional string sparse_148_str = 160;
  inline bool has_sparse_148_str() const;
  inline void clear_sparse_148_str();
  static const int kSparse148StrFieldNumber = 160;
  inline const ::std::string& sparse_148_str() const;
  inline void set_sparse_148_str(const ::std::string& value);
  inline void set_sparse_148_str(const char* value);
  inline void set_sparse_148_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_148_str();
  inline ::std::string* release_sparse_148_str();
  inline void set_allocated_sparse_148_str(::std::string* sparse_148_str);

  // optional string sparse_149_str = 161;
  inline bool has_sparse_149_str() const;
  inline void clear_sparse_149_str();
  static const int kSparse149StrFieldNumber = 161;
  inline const ::std::string& sparse_149_str() const;
  inline void set_sparse_149_str(const ::std::string& value);
  inline void set_sparse_149_str(const char* value);
  inline void set_sparse_149_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_149_str();
  inline ::std::string* release_sparse_149_str();
  inline void set_allocated_sparse_149_str(::std::string* sparse_149_str);

  // optional string sparse_150_str = 162;
  inline bool has_sparse_150_str() const;
  inline void clear_sparse_150_str();
  static const int kSparse150StrFieldNumber = 162;
  inline const ::std::string& sparse_150_str() const;
  inline void set_sparse_150_str(const ::std::string& value);
  inline void set_sparse_150_str(const char* value);
  inline void set_sparse_150_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_150_str();
  inline ::std::string* release_sparse_150_str();
  inline void set_allocated_sparse_150_str(::std::string* sparse_150_str);

  // optional string sparse_151_str = 163;
  inline bool has_sparse_151_str() const;
  inline void clear_sparse_151_str();
  static const int kSparse151StrFieldNumber = 163;
  inline const ::std::string& sparse_151_str() const;
  inline void set_sparse_151_str(const ::std::string& value);
  inline void set_sparse_151_str(const char* value);
  inline void set_sparse_151_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_151_str();
  inline ::std::string* release_sparse_151_str();
  inline void set_allocated_sparse_151_str(::std::string* sparse_151_str);

  // optional string sparse_152_str = 164;
  inline bool has_sparse_152_str() const;
  inline void clear_sparse_152_str();
  static const int kSparse152StrFieldNumber = 164;
  inline const ::std::string& sparse_152_str() const;
  inline void set_sparse_152_str(const ::std::string& value);
  inline void set_sparse_152_str(const char* value);
  inline void set_sparse_152_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_152_str();
  inline ::std::string* release_sparse_152_str();
  inline void set_allocated_sparse_152_str(::std::string* sparse_152_str);

  // optional string sparse_153_str = 165;
  inline bool has_sparse_153_str() const;
  inline void clear_sparse_153_str();
  static const int kSparse153StrFieldNumber = 165;
  inline const ::std::string& sparse_153_str() const;
  inline void set_sparse_153_str(const ::std::string& value);
  inline void set_sparse_153_str(const char* value);
  inline void set_sparse_153_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_153_str();
  inline ::std::string* release_sparse_153_str();
  inline void set_allocated_sparse_153_str(::std::string* sparse_153_str);

  // optional string sparse_154_str = 166;
  inline bool has_sparse_154_str() const;
  inline void clear_sparse_154_str();
  static const int kSparse154StrFieldNumber = 166;
  inline const ::std::string& sparse_154_str() const;
  inline void set_sparse_154_str(const ::std::string& value);
  inline void set_sparse_154_str(const char* value);
  inline void set_sparse_154_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_154_str();
  inline ::std::string* release_sparse_154_str();
  inline void set_allocated_sparse_154_str(::std::string* sparse_154_str);

  // optional string sparse_155_str = 167;
  inline bool has_sparse_155_str() const;
  inline void clear_sparse_155_str();
  static const int kSparse155StrFieldNumber = 167;
  inline const ::std::string& sparse_155_str() const;
  inline void set_sparse_155_str(const ::std::string& value);
  inline void set_sparse_155_str(const char* value);
  inline void set_sparse_155_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_155_str();
  inline ::std::string* release_sparse_155_str();
  inline void set_allocated_sparse_155_str(::std::string* sparse_155_str);

  // optional string sparse_156_str = 168;
  inline bool has_sparse_156_str() const;
  inline void clear_sparse_156_str();
  static const int kSparse156StrFieldNumber = 168;
  inline const ::std::string& sparse_156_str() const;
  inline void set_sparse_156_str(const ::std::string& value);
  inline void set_sparse_156_str(const char* value);
  inline void set_sparse_156_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_156_str();
  inline ::std::string* release_sparse_156_str();
  inline void set_allocated_sparse_156_str(::std::string* sparse_156_str);

  // optional string sparse_157_str = 169;
  inline bool has_sparse_157_str() const;
  inline void clear_sparse_157_str();
  static const int kSparse157StrFieldNumber = 169;
  inline const ::std::string& sparse_157_str() const;
  inline void set_sparse_157_str(const ::std::string& value);
  inline void set_sparse_157_str(const char* value);
  inline void set_sparse_157_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_157_str();
  inline ::std::string* release_sparse_157_str();
  inline void set_allocated_sparse_157_str(::std::string* sparse_157_str);

  // optional string sparse_158_str = 170;
  inline bool has_sparse_158_str() const;
  inline void clear_sparse_158_str();
  static const int kSparse158StrFieldNumber = 170;
  inline const ::std::string& sparse_158_str() const;
  inline void set_sparse_158_str(const ::std::string& value);
  inline void set_sparse_158_str(const char* value);
  inline void set_sparse_158_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_158_str();
  inline ::std::string* release_sparse_158_str();
  inline void set_allocated_sparse_158_str(::std::string* sparse_158_str);

  // optional string sparse_159_str = 171;
  inline bool has_sparse_159_str() const;
  inline void clear_sparse_159_str();
  static const int kSparse159StrFieldNumber = 171;
  inline const ::std::string& sparse_159_str() const;
  inline void set_sparse_159_str(const ::std::string& value);
  inline void set_sparse_159_str(const char* value);
  inline void set_sparse_159_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_159_str();
  inline ::std::string* release_sparse_159_str();
  inline void set_allocated_sparse_159_str(::std::string* sparse_159_str);

  // optional string sparse_160_str = 172;
  inline bool has_sparse_160_str() const;
  inline void clear_sparse_160_str();
  static const int kSparse160StrFieldNumber = 172;
  inline const ::std::string& sparse_160_str() const;
  inline void set_sparse_160_str(const ::std::string& value);
  inline void set_sparse_160_str(const char* value);
  inline void set_sparse_160_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_160_str();
  inline ::std::string* release_sparse_160_str();
  inline void set_allocated_sparse_160_str(::std::string* sparse_160_str);

  // optional string sparse_161_str = 173;
  inline bool has_sparse_161_str() const;
  inline void clear_sparse_161_str();
  static const int kSparse161StrFieldNumber = 173;
  inline const ::std::string& sparse_161_str() const;
  inline void set_sparse_161_str(const ::std::string& value);
  inline void set_sparse_161_str(const char* value);
  inline void set_sparse_161_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_161_str();
  inline ::std::string* release_sparse_161_str();
  inline void set_allocated_sparse_161_str(::std::string* sparse_161_str);

  // optional string sparse_162_str = 174;
  inline bool has_sparse_162_str() const;
  inline void clear_sparse_162_str();
  static const int kSparse162StrFieldNumber = 174;
  inline const ::std::string& sparse_162_str() const;
  inline void set_sparse_162_str(const ::std::string& value);
  inline void set_sparse_162_str(const char* value);
  inline void set_sparse_162_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_162_str();
  inline ::std::string* release_sparse_162_str();
  inline void set_allocated_sparse_162_str(::std::string* sparse_162_str);

  // optional string sparse_163_str = 175;
  inline bool has_sparse_163_str() const;
  inline void clear_sparse_163_str();
  static const int kSparse163StrFieldNumber = 175;
  inline const ::std::string& sparse_163_str() const;
  inline void set_sparse_163_str(const ::std::string& value);
  inline void set_sparse_163_str(const char* value);
  inline void set_sparse_163_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_163_str();
  inline ::std::string* release_sparse_163_str();
  inline void set_allocated_sparse_163_str(::std::string* sparse_163_str);

  // optional string sparse_164_str = 176;
  inline bool has_sparse_164_str() const;
  inline void clear_sparse_164_str();
  static const int kSparse164StrFieldNumber = 176;
  inline const ::std::string& sparse_164_str() const;
  inline void set_sparse_164_str(const ::std::string& value);
  inline void set_sparse_164_str(const char* value);
  inline void set_sparse_164_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_164_str();
  inline ::std::string* release_sparse_164_str();
  inline void set_allocated_sparse_164_str(::std::string* sparse_164_str);

  // optional string sparse_165_str = 177;
  inline bool has_sparse_165_str() const;
  inline void clear_sparse_165_str();
  static const int kSparse165StrFieldNumber = 177;
  inline const ::std::string& sparse_165_str() const;
  inline void set_sparse_165_str(const ::std::string& value);
  inline void set_sparse_165_str(const char* value);
  inline void set_sparse_165_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_165_str();
  inline ::std::string* release_sparse_165_str();
  inline void set_allocated_sparse_165_str(::std::string* sparse_165_str);

  // optional string sparse_166_str = 178;
  inline bool has_sparse_166_str() const;
  inline void clear_sparse_166_str();
  static const int kSparse166StrFieldNumber = 178;
  inline const ::std::string& sparse_166_str() const;
  inline void set_sparse_166_str(const ::std::string& value);
  inline void set_sparse_166_str(const char* value);
  inline void set_sparse_166_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_166_str();
  inline ::std::string* release_sparse_166_str();
  inline void set_allocated_sparse_166_str(::std::string* sparse_166_str);

  // optional string sparse_167_str = 179;
  inline bool has_sparse_167_str() const;
  inline void clear_sparse_167_str();
  static const int kSparse167StrFieldNumber = 179;
  inline const ::std::string& sparse_167_str() const;
  inline void set_sparse_167_str(const ::std::string& value);
  inline void set_sparse_167_str(const char* value);
  inline void set_sparse_167_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_167_str();
  inline ::std::string* release_sparse_167_str();
  inline void set_allocated_sparse_167_str(::std::string* sparse_167_str);

  // optional string sparse_168_str = 180;
  inline bool has_sparse_168_str() const;
  inline void clear_sparse_168_str();
  static const int kSparse168StrFieldNumber = 180;
  inline const ::std::string& sparse_168_str() const;
  inline void set_sparse_168_str(const ::std::string& value);
  inline void set_sparse_168_str(const char* value);
  inline void set_sparse_168_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_168_str();
  inline ::std::string* release_sparse_168_str();
  inline void set_allocated_sparse_168_str(::std::string* sparse_168_str);

  // optional string sparse_169_str = 181;
  inline bool has_sparse_169_str() const;
  inline void clear_sparse_169_str();
  static const int kSparse169StrFieldNumber = 181;
  inline const ::std::string& sparse_169_str() const;
  inline void set_sparse_169_str(const ::std::string& value);
  inline void set_sparse_169_str(const char* value);
  inline void set_sparse_169_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_169_str();
  inline ::std::string* release_sparse_169_str();
  inline void set_allocated_sparse_169_str(::std::string* sparse_169_str);

  // optional string sparse_170_str = 182;
  inline bool has_sparse_170_str() const;
  inline void clear_sparse_170_str();
  static const int kSparse170StrFieldNumber = 182;
  inline const ::std::string& sparse_170_str() const;
  inline void set_sparse_170_str(const ::std::string& value);
  inline void set_sparse_170_str(const char* value);
  inline void set_sparse_170_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_170_str();
  inline ::std::string* release_sparse_170_str();
  inline void set_allocated_sparse_170_str(::std::string* sparse_170_str);

  // optional string sparse_171_str = 183;
  inline bool has_sparse_171_str() const;
  inline void clear_sparse_171_str();
  static const int kSparse171StrFieldNumber = 183;
  inline const ::std::string& sparse_171_str() const;
  inline void set_sparse_171_str(const ::std::string& value);
  inline void set_sparse_171_str(const char* value);
  inline void set_sparse_171_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_171_str();
  inline ::std::string* release_sparse_171_str();
  inline void set_allocated_sparse_171_str(::std::string* sparse_171_str);

  // optional string sparse_172_str = 184;
  inline bool has_sparse_172_str() const;
  inline void clear_sparse_172_str();
  static const int kSparse172StrFieldNumber = 184;
  inline const ::std::string& sparse_172_str() const;
  inline void set_sparse_172_str(const ::std::string& value);
  inline void set_sparse_172_str(const char* value);
  inline void set_sparse_172_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_172_str();
  inline ::std::string* release_sparse_172_str();
  inline void set_allocated_sparse_172_str(::std::string* sparse_172_str);

  // optional string sparse_173_str = 185;
  inline bool has_sparse_173_str() const;
  inline void clear_sparse_173_str();
  static const int kSparse173StrFieldNumber = 185;
  inline const ::std::string& sparse_173_str() const;
  inline void set_sparse_173_str(const ::std::string& value);
  inline void set_sparse_173_str(const char* value);
  inline void set_sparse_173_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_173_str();
  inline ::std::string* release_sparse_173_str();
  inline void set_allocated_sparse_173_str(::std::string* sparse_173_str);

  // optional string sparse_174_str = 186;
  inline bool has_sparse_174_str() const;
  inline void clear_sparse_174_str();
  static const int kSparse174StrFieldNumber = 186;
  inline const ::std::string& sparse_174_str() const;
  inline void set_sparse_174_str(const ::std::string& value);
  inline void set_sparse_174_str(const char* value);
  inline void set_sparse_174_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_174_str();
  inline ::std::string* release_sparse_174_str();
  inline void set_allocated_sparse_174_str(::std::string* sparse_174_str);

  // optional string sparse_175_str = 187;
  inline bool has_sparse_175_str() const;
  inline void clear_sparse_175_str();
  static const int kSparse175StrFieldNumber = 187;
  inline const ::std::string& sparse_175_str() const;
  inline void set_sparse_175_str(const ::std::string& value);
  inline void set_sparse_175_str(const char* value);
  inline void set_sparse_175_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_175_str();
  inline ::std::string* release_sparse_175_str();
  inline void set_allocated_sparse_175_str(::std::string* sparse_175_str);

  // optional string sparse_176_str = 188;
  inline bool has_sparse_176_str() const;
  inline void clear_sparse_176_str();
  static const int kSparse176StrFieldNumber = 188;
  inline const ::std::string& sparse_176_str() const;
  inline void set_sparse_176_str(const ::std::string& value);
  inline void set_sparse_176_str(const char* value);
  inline void set_sparse_176_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_176_str();
  inline ::std::string* release_sparse_176_str();
  inline void set_allocated_sparse_176_str(::std::string* sparse_176_str);

  // optional string sparse_177_str = 189;
  inline bool has_sparse_177_str() const;
  inline void clear_sparse_177_str();
  static const int kSparse177StrFieldNumber = 189;
  inline const ::std::string& sparse_177_str() const;
  inline void set_sparse_177_str(const ::std::string& value);
  inline void set_sparse_177_str(const char* value);
  inline void set_sparse_177_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_177_str();
  inline ::std::string* release_sparse_177_str();
  inline void set_allocated_sparse_177_str(::std::string* sparse_177_str);

  // optional string sparse_178_str = 190;
  inline bool has_sparse_178_str() const;
  inline void clear_sparse_178_str();
  static const int kSparse178StrFieldNumber = 190;
  inline const ::std::string& sparse_178_str() const;
  inline void set_sparse_178_str(const ::std::string& value);
  inline void set_sparse_178_str(const char* value);
  inline void set_sparse_178_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_178_str();
  inline ::std::string* release_sparse_178_str();
  inline void set_allocated_sparse_178_str(::std::string* sparse_178_str);

  // optional string sparse_179_str = 191;
  inline bool has_sparse_179_str() const;
  inline void clear_sparse_179_str();
  static const int kSparse179StrFieldNumber = 191;
  inline const ::std::string& sparse_179_str() const;
  inline void set_sparse_179_str(const ::std::string& value);
  inline void set_sparse_179_str(const char* value);
  inline void set_sparse_179_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_179_str();
  inline ::std::string* release_sparse_179_str();
  inline void set_allocated_sparse_179_str(::std::string* sparse_179_str);

  // optional string sparse_180_str = 192;
  inline bool has_sparse_180_str() const;
  inline void clear_sparse_180_str();
  static const int kSparse180StrFieldNumber = 192;
  inline const ::std::string& sparse_180_str() const;
  inline void set_sparse_180_str(const ::std::string& value);
  inline void set_sparse_180_str(const char* value);
  inline void set_sparse_180_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_180_str();
  inline ::std::string* release_sparse_180_str();
  inline void set_allocated_sparse_180_str(::std::string* sparse_180_str);

  // optional string sparse_181_str = 193;
  inline bool has_sparse_181_str() const;
  inline void clear_sparse_181_str();
  static const int kSparse181StrFieldNumber = 193;
  inline const ::std::string& sparse_181_str() const;
  inline void set_sparse_181_str(const ::std::string& value);
  inline void set_sparse_181_str(const char* value);
  inline void set_sparse_181_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_181_str();
  inline ::std::string* release_sparse_181_str();
  inline void set_allocated_sparse_181_str(::std::string* sparse_181_str);

  // optional string sparse_182_str = 194;
  inline bool has_sparse_182_str() const;
  inline void clear_sparse_182_str();
  static const int kSparse182StrFieldNumber = 194;
  inline const ::std::string& sparse_182_str() const;
  inline void set_sparse_182_str(const ::std::string& value);
  inline void set_sparse_182_str(const char* value);
  inline void set_sparse_182_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_182_str();
  inline ::std::string* release_sparse_182_str();
  inline void set_allocated_sparse_182_str(::std::string* sparse_182_str);

  // optional string sparse_183_str = 195;
  inline bool has_sparse_183_str() const;
  inline void clear_sparse_183_str();
  static const int kSparse183StrFieldNumber = 195;
  inline const ::std::string& sparse_183_str() const;
  inline void set_sparse_183_str(const ::std::string& value);
  inline void set_sparse_183_str(const char* value);
  inline void set_sparse_183_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_183_str();
  inline ::std::string* release_sparse_183_str();
  inline void set_allocated_sparse_183_str(::std::string* sparse_183_str);

  // optional string sparse_184_str = 196;
  inline bool has_sparse_184_str() const;
  inline void clear_sparse_184_str();
  static const int kSparse184StrFieldNumber = 196;
  inline const ::std::string& sparse_184_str() const;
  inline void set_sparse_184_str(const ::std::string& value);
  inline void set_sparse_184_str(const char* value);
  inline void set_sparse_184_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_184_str();
  inline ::std::string* release_sparse_184_str();
  inline void set_allocated_sparse_184_str(::std::string* sparse_184_str);

  // optional string sparse_185_str = 197;
  inline bool has_sparse_185_str() const;
  inline void clear_sparse_185_str();
  static const int kSparse185StrFieldNumber = 197;
  inline const ::std::string& sparse_185_str() const;
  inline void set_sparse_185_str(const ::std::string& value);
  inline void set_sparse_185_str(const char* value);
  inline void set_sparse_185_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_185_str();
  inline ::std::string* release_sparse_185_str();
  inline void set_allocated_sparse_185_str(::std::string* sparse_185_str);

  // optional string sparse_186_str = 198;
  inline bool has_sparse_186_str() const;
  inline void clear_sparse_186_str();
  static const int kSparse186StrFieldNumber = 198;
  inline const ::std::string& sparse_186_str() const;
  inline void set_sparse_186_str(const ::std::string& value);
  inline void set_sparse_186_str(const char* value);
  inline void set_sparse_186_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_186_str();
  inline ::std::string* release_sparse_186_str();
  inline void set_allocated_sparse_186_str(::std::string* sparse_186_str);

  // optional string sparse_187_str = 199;
  inline bool has_sparse_187_str() const;
  inline void clear_sparse_187_str();
  static const int kSparse187StrFieldNumber = 199;
  inline const ::std::string& sparse_187_str() const;
  inline void set_sparse_187_str(const ::std::string& value);
  inline void set_sparse_187_str(const char* value);
  inline void set_sparse_187_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_187_str();
  inline ::std::string* release_sparse_187_str();
  inline void set_allocated_sparse_187_str(::std::string* sparse_187_str);

  // optional string sparse_188_str = 200;
  inline bool has_sparse_188_str() const;
  inline void clear_sparse_188_str();
  static const int kSparse188StrFieldNumber = 200;
  inline const ::std::string& sparse_188_str() const;
  inline void set_sparse_188_str(const ::std::string& value);
  inline void set_sparse_188_str(const char* value);
  inline void set_sparse_188_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_188_str();
  inline ::std::string* release_sparse_188_str();
  inline void set_allocated_sparse_188_str(::std::string* sparse_188_str);

  // optional string sparse_189_str = 201;
  inline bool has_sparse_189_str() const;
  inline void clear_sparse_189_str();
  static const int kSparse189StrFieldNumber = 201;
  inline const ::std::string& sparse_189_str() const;
  inline void set_sparse_189_str(const ::std::string& value);
  inline void set_sparse_189_str(const char* value);
  inline void set_sparse_189_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_189_str();
  inline ::std::string* release_sparse_189_str();
  inline void set_allocated_sparse_189_str(::std::string* sparse_189_str);

  // optional string sparse_190_str = 202;
  inline bool has_sparse_190_str() const;
  inline void clear_sparse_190_str();
  static const int kSparse190StrFieldNumber = 202;
  inline const ::std::string& sparse_190_str() const;
  inline void set_sparse_190_str(const ::std::string& value);
  inline void set_sparse_190_str(const char* value);
  inline void set_sparse_190_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_190_str();
  inline ::std::string* release_sparse_190_str();
  inline void set_allocated_sparse_190_str(::std::string* sparse_190_str);

  // optional string sparse_191_str = 203;
  inline bool has_sparse_191_str() const;
  inline void clear_sparse_191_str();
  static const int kSparse191StrFieldNumber = 203;
  inline const ::std::string& sparse_191_str() const;
  inline void set_sparse_191_str(const ::std::string& value);
  inline void set_sparse_191_str(const char* value);
  inline void set_sparse_191_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_191_str();
  inline ::std::string* release_sparse_191_str();
  inline void set_allocated_sparse_191_str(::std::string* sparse_191_str);

  // optional string sparse_192_str = 204;
  inline bool has_sparse_192_str() const;
  inline void clear_sparse_192_str();
  static const int kSparse192StrFieldNumber = 204;
  inline const ::std::string& sparse_192_str() const;
  inline void set_sparse_192_str(const ::std::string& value);
  inline void set_sparse_192_str(const char* value);
  inline void set_sparse_192_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_192_str();
  inline ::std::string* release_sparse_192_str();
  inline void set_allocated_sparse_192_str(::std::string* sparse_192_str);

  // optional string sparse_193_str = 205;
  inline bool has_sparse_193_str() const;
  inline void clear_sparse_193_str();
  static const int kSparse193StrFieldNumber = 205;
  inline const ::std::string& sparse_193_str() const;
  inline void set_sparse_193_str(const ::std::string& value);
  inline void set_sparse_193_str(const char* value);
  inline void set_sparse_193_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_193_str();
  inline ::std::string* release_sparse_193_str();
  inline void set_allocated_sparse_193_str(::std::string* sparse_193_str);

  // optional string sparse_194_str = 206;
  inline bool has_sparse_194_str() const;
  inline void clear_sparse_194_str();
  static const int kSparse194StrFieldNumber = 206;
  inline const ::std::string& sparse_194_str() const;
  inline void set_sparse_194_str(const ::std::string& value);
  inline void set_sparse_194_str(const char* value);
  inline void set_sparse_194_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_194_str();
  inline ::std::string* release_sparse_194_str();
  inline void set_allocated_sparse_194_str(::std::string* sparse_194_str);

  // optional string sparse_195_str = 207;
  inline bool has_sparse_195_str() const;
  inline void clear_sparse_195_str();
  static const int kSparse195StrFieldNumber = 207;
  inline const ::std::string& sparse_195_str() const;
  inline void set_sparse_195_str(const ::std::string& value);
  inline void set_sparse_195_str(const char* value);
  inline void set_sparse_195_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_195_str();
  inline ::std::string* release_sparse_195_str();
  inline void set_allocated_sparse_195_str(::std::string* sparse_195_str);

  // optional string sparse_196_str = 208;
  inline bool has_sparse_196_str() const;
  inline void clear_sparse_196_str();
  static const int kSparse196StrFieldNumber = 208;
  inline const ::std::string& sparse_196_str() const;
  inline void set_sparse_196_str(const ::std::string& value);
  inline void set_sparse_196_str(const char* value);
  inline void set_sparse_196_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_196_str();
  inline ::std::string* release_sparse_196_str();
  inline void set_allocated_sparse_196_str(::std::string* sparse_196_str);

  // optional string sparse_197_str = 209;
  inline bool has_sparse_197_str() const;
  inline void clear_sparse_197_str();
  static const int kSparse197StrFieldNumber = 209;
  inline const ::std::string& sparse_197_str() const;
  inline void set_sparse_197_str(const ::std::string& value);
  inline void set_sparse_197_str(const char* value);
  inline void set_sparse_197_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_197_str();
  inline ::std::string* release_sparse_197_str();
  inline void set_allocated_sparse_197_str(::std::string* sparse_197_str);

  // optional string sparse_198_str = 210;
  inline bool has_sparse_198_str() const;
  inline void clear_sparse_198_str();
  static const int kSparse198StrFieldNumber = 210;
  inline const ::std::string& sparse_198_str() const;
  inline void set_sparse_198_str(const ::std::string& value);
  inline void set_sparse_198_str(const char* value);
  inline void set_sparse_198_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_198_str();
  inline ::std::string* release_sparse_198_str();
  inline void set_allocated_sparse_198_str(::std::string* sparse_198_str);

  // optional string sparse_199_str = 211;
  inline bool has_sparse_199_str() const;
  inline void clear_sparse_199_str();
  static const int kSparse199StrFieldNumber = 211;
  inline const ::std::string& sparse_199_str() const;
  inline void set_sparse_199_str(const ::std::string& value);
  inline void set_sparse_199_str(const char* value);
  inline void set_sparse_199_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_199_str();
  inline ::std::string* release_sparse_199_str();
  inline void set_allocated_sparse_199_str(::std::string* sparse_199_str);

  // optional string sparse_200_str = 212;
  inline bool has_sparse_200_str() const;
  inline void clear_sparse_200_str();
  static const int kSparse200StrFieldNumber = 212;
  inline const ::std::string& sparse_200_str() const;
  inline void set_sparse_200_str(const ::std::string& value);
  inline void set_sparse_200_str(const char* value);
  inline void set_sparse_200_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_200_str();
  inline ::std::string* release_sparse_200_str();
  inline void set_allocated_sparse_200_str(::std::string* sparse_200_str);

  // optional string sparse_201_str = 213;
  inline bool has_sparse_201_str() const;
  inline void clear_sparse_201_str();
  static const int kSparse201StrFieldNumber = 213;
  inline const ::std::string& sparse_201_str() const;
  inline void set_sparse_201_str(const ::std::string& value);
  inline void set_sparse_201_str(const char* value);
  inline void set_sparse_201_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_201_str();
  inline ::std::string* release_sparse_201_str();
  inline void set_allocated_sparse_201_str(::std::string* sparse_201_str);

  // optional string sparse_202_str = 214;
  inline bool has_sparse_202_str() const;
  inline void clear_sparse_202_str();
  static const int kSparse202StrFieldNumber = 214;
  inline const ::std::string& sparse_202_str() const;
  inline void set_sparse_202_str(const ::std::string& value);
  inline void set_sparse_202_str(const char* value);
  inline void set_sparse_202_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_202_str();
  inline ::std::string* release_sparse_202_str();
  inline void set_allocated_sparse_202_str(::std::string* sparse_202_str);

  // optional string sparse_203_str = 215;
  inline bool has_sparse_203_str() const;
  inline void clear_sparse_203_str();
  static const int kSparse203StrFieldNumber = 215;
  inline const ::std::string& sparse_203_str() const;
  inline void set_sparse_203_str(const ::std::string& value);
  inline void set_sparse_203_str(const char* value);
  inline void set_sparse_203_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_203_str();
  inline ::std::string* release_sparse_203_str();
  inline void set_allocated_sparse_203_str(::std::string* sparse_203_str);

  // optional string sparse_204_str = 216;
  inline bool has_sparse_204_str() const;
  inline void clear_sparse_204_str();
  static const int kSparse204StrFieldNumber = 216;
  inline const ::std::string& sparse_204_str() const;
  inline void set_sparse_204_str(const ::std::string& value);
  inline void set_sparse_204_str(const char* value);
  inline void set_sparse_204_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_204_str();
  inline ::std::string* release_sparse_204_str();
  inline void set_allocated_sparse_204_str(::std::string* sparse_204_str);

  // optional string sparse_205_str = 217;
  inline bool has_sparse_205_str() const;
  inline void clear_sparse_205_str();
  static const int kSparse205StrFieldNumber = 217;
  inline const ::std::string& sparse_205_str() const;
  inline void set_sparse_205_str(const ::std::string& value);
  inline void set_sparse_205_str(const char* value);
  inline void set_sparse_205_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_205_str();
  inline ::std::string* release_sparse_205_str();
  inline void set_allocated_sparse_205_str(::std::string* sparse_205_str);

  // optional string sparse_206_str = 218;
  inline bool has_sparse_206_str() const;
  inline void clear_sparse_206_str();
  static const int kSparse206StrFieldNumber = 218;
  inline const ::std::string& sparse_206_str() const;
  inline void set_sparse_206_str(const ::std::string& value);
  inline void set_sparse_206_str(const char* value);
  inline void set_sparse_206_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_206_str();
  inline ::std::string* release_sparse_206_str();
  inline void set_allocated_sparse_206_str(::std::string* sparse_206_str);

  // optional string sparse_207_str = 219;
  inline bool has_sparse_207_str() const;
  inline void clear_sparse_207_str();
  static const int kSparse207StrFieldNumber = 219;
  inline const ::std::string& sparse_207_str() const;
  inline void set_sparse_207_str(const ::std::string& value);
  inline void set_sparse_207_str(const char* value);
  inline void set_sparse_207_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_207_str();
  inline ::std::string* release_sparse_207_str();
  inline void set_allocated_sparse_207_str(::std::string* sparse_207_str);

  // optional string sparse_208_str = 220;
  inline bool has_sparse_208_str() const;
  inline void clear_sparse_208_str();
  static const int kSparse208StrFieldNumber = 220;
  inline const ::std::string& sparse_208_str() const;
  inline void set_sparse_208_str(const ::std::string& value);
  inline void set_sparse_208_str(const char* value);
  inline void set_sparse_208_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_208_str();
  inline ::std::string* release_sparse_208_str();
  inline void set_allocated_sparse_208_str(::std::string* sparse_208_str);

  // optional string sparse_209_str = 221;
  inline bool has_sparse_209_str() const;
  inline void clear_sparse_209_str();
  static const int kSparse209StrFieldNumber = 221;
  inline const ::std::string& sparse_209_str() const;
  inline void set_sparse_209_str(const ::std::string& value);
  inline void set_sparse_209_str(const char* value);
  inline void set_sparse_209_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_209_str();
  inline ::std::string* release_sparse_209_str();
  inline void set_allocated_sparse_209_str(::std::string* sparse_209_str);

  // optional string sparse_210_str = 222;
  inline bool has_sparse_210_str() const;
  inline void clear_sparse_210_str();
  static const int kSparse210StrFieldNumber = 222;
  inline const ::std::string& sparse_210_str() const;
  inline void set_sparse_210_str(const ::std::string& value);
  inline void set_sparse_210_str(const char* value);
  inline void set_sparse_210_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_210_str();
  inline ::std::string* release_sparse_210_str();
  inline void set_allocated_sparse_210_str(::std::string* sparse_210_str);

  // optional string sparse_211_str = 223;
  inline bool has_sparse_211_str() const;
  inline void clear_sparse_211_str();
  static const int kSparse211StrFieldNumber = 223;
  inline const ::std::string& sparse_211_str() const;
  inline void set_sparse_211_str(const ::std::string& value);
  inline void set_sparse_211_str(const char* value);
  inline void set_sparse_211_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_211_str();
  inline ::std::string* release_sparse_211_str();
  inline void set_allocated_sparse_211_str(::std::string* sparse_211_str);

  // optional string sparse_212_str = 224;
  inline bool has_sparse_212_str() const;
  inline void clear_sparse_212_str();
  static const int kSparse212StrFieldNumber = 224;
  inline const ::std::string& sparse_212_str() const;
  inline void set_sparse_212_str(const ::std::string& value);
  inline void set_sparse_212_str(const char* value);
  inline void set_sparse_212_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_212_str();
  inline ::std::string* release_sparse_212_str();
  inline void set_allocated_sparse_212_str(::std::string* sparse_212_str);

  // optional string sparse_213_str = 225;
  inline bool has_sparse_213_str() const;
  inline void clear_sparse_213_str();
  static const int kSparse213StrFieldNumber = 225;
  inline const ::std::string& sparse_213_str() const;
  inline void set_sparse_213_str(const ::std::string& value);
  inline void set_sparse_213_str(const char* value);
  inline void set_sparse_213_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_213_str();
  inline ::std::string* release_sparse_213_str();
  inline void set_allocated_sparse_213_str(::std::string* sparse_213_str);

  // optional string sparse_214_str = 226;
  inline bool has_sparse_214_str() const;
  inline void clear_sparse_214_str();
  static const int kSparse214StrFieldNumber = 226;
  inline const ::std::string& sparse_214_str() const;
  inline void set_sparse_214_str(const ::std::string& value);
  inline void set_sparse_214_str(const char* value);
  inline void set_sparse_214_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_214_str();
  inline ::std::string* release_sparse_214_str();
  inline void set_allocated_sparse_214_str(::std::string* sparse_214_str);

  // optional string sparse_215_str = 227;
  inline bool has_sparse_215_str() const;
  inline void clear_sparse_215_str();
  static const int kSparse215StrFieldNumber = 227;
  inline const ::std::string& sparse_215_str() const;
  inline void set_sparse_215_str(const ::std::string& value);
  inline void set_sparse_215_str(const char* value);
  inline void set_sparse_215_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_215_str();
  inline ::std::string* release_sparse_215_str();
  inline void set_allocated_sparse_215_str(::std::string* sparse_215_str);

  // optional string sparse_216_str = 228;
  inline bool has_sparse_216_str() const;
  inline void clear_sparse_216_str();
  static const int kSparse216StrFieldNumber = 228;
  inline const ::std::string& sparse_216_str() const;
  inline void set_sparse_216_str(const ::std::string& value);
  inline void set_sparse_216_str(const char* value);
  inline void set_sparse_216_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_216_str();
  inline ::std::string* release_sparse_216_str();
  inline void set_allocated_sparse_216_str(::std::string* sparse_216_str);

  // optional string sparse_217_str = 229;
  inline bool has_sparse_217_str() const;
  inline void clear_sparse_217_str();
  static const int kSparse217StrFieldNumber = 229;
  inline const ::std::string& sparse_217_str() const;
  inline void set_sparse_217_str(const ::std::string& value);
  inline void set_sparse_217_str(const char* value);
  inline void set_sparse_217_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_217_str();
  inline ::std::string* release_sparse_217_str();
  inline void set_allocated_sparse_217_str(::std::string* sparse_217_str);

  // optional string sparse_218_str = 230;
  inline bool has_sparse_218_str() const;
  inline void clear_sparse_218_str();
  static const int kSparse218StrFieldNumber = 230;
  inline const ::std::string& sparse_218_str() const;
  inline void set_sparse_218_str(const ::std::string& value);
  inline void set_sparse_218_str(const char* value);
  inline void set_sparse_218_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_218_str();
  inline ::std::string* release_sparse_218_str();
  inline void set_allocated_sparse_218_str(::std::string* sparse_218_str);

  // optional string sparse_219_str = 231;
  inline bool has_sparse_219_str() const;
  inline void clear_sparse_219_str();
  static const int kSparse219StrFieldNumber = 231;
  inline const ::std::string& sparse_219_str() const;
  inline void set_sparse_219_str(const ::std::string& value);
  inline void set_sparse_219_str(const char* value);
  inline void set_sparse_219_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_219_str();
  inline ::std::string* release_sparse_219_str();
  inline void set_allocated_sparse_219_str(::std::string* sparse_219_str);

  // optional string sparse_220_str = 232;
  inline bool has_sparse_220_str() const;
  inline void clear_sparse_220_str();
  static const int kSparse220StrFieldNumber = 232;
  inline const ::std::string& sparse_220_str() const;
  inline void set_sparse_220_str(const ::std::string& value);
  inline void set_sparse_220_str(const char* value);
  inline void set_sparse_220_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_220_str();
  inline ::std::string* release_sparse_220_str();
  inline void set_allocated_sparse_220_str(::std::string* sparse_220_str);

  // optional string sparse_221_str = 233;
  inline bool has_sparse_221_str() const;
  inline void clear_sparse_221_str();
  static const int kSparse221StrFieldNumber = 233;
  inline const ::std::string& sparse_221_str() const;
  inline void set_sparse_221_str(const ::std::string& value);
  inline void set_sparse_221_str(const char* value);
  inline void set_sparse_221_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_221_str();
  inline ::std::string* release_sparse_221_str();
  inline void set_allocated_sparse_221_str(::std::string* sparse_221_str);

  // optional string sparse_222_str = 234;
  inline bool has_sparse_222_str() const;
  inline void clear_sparse_222_str();
  static const int kSparse222StrFieldNumber = 234;
  inline const ::std::string& sparse_222_str() const;
  inline void set_sparse_222_str(const ::std::string& value);
  inline void set_sparse_222_str(const char* value);
  inline void set_sparse_222_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_222_str();
  inline ::std::string* release_sparse_222_str();
  inline void set_allocated_sparse_222_str(::std::string* sparse_222_str);

  // optional string sparse_223_str = 235;
  inline bool has_sparse_223_str() const;
  inline void clear_sparse_223_str();
  static const int kSparse223StrFieldNumber = 235;
  inline const ::std::string& sparse_223_str() const;
  inline void set_sparse_223_str(const ::std::string& value);
  inline void set_sparse_223_str(const char* value);
  inline void set_sparse_223_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_223_str();
  inline ::std::string* release_sparse_223_str();
  inline void set_allocated_sparse_223_str(::std::string* sparse_223_str);

  // optional string sparse_224_str = 236;
  inline bool has_sparse_224_str() const;
  inline void clear_sparse_224_str();
  static const int kSparse224StrFieldNumber = 236;
  inline const ::std::string& sparse_224_str() const;
  inline void set_sparse_224_str(const ::std::string& value);
  inline void set_sparse_224_str(const char* value);
  inline void set_sparse_224_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_224_str();
  inline ::std::string* release_sparse_224_str();
  inline void set_allocated_sparse_224_str(::std::string* sparse_224_str);

  // optional string sparse_225_str = 237;
  inline bool has_sparse_225_str() const;
  inline void clear_sparse_225_str();
  static const int kSparse225StrFieldNumber = 237;
  inline const ::std::string& sparse_225_str() const;
  inline void set_sparse_225_str(const ::std::string& value);
  inline void set_sparse_225_str(const char* value);
  inline void set_sparse_225_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_225_str();
  inline ::std::string* release_sparse_225_str();
  inline void set_allocated_sparse_225_str(::std::string* sparse_225_str);

  // optional string sparse_226_str = 238;
  inline bool has_sparse_226_str() const;
  inline void clear_sparse_226_str();
  static const int kSparse226StrFieldNumber = 238;
  inline const ::std::string& sparse_226_str() const;
  inline void set_sparse_226_str(const ::std::string& value);
  inline void set_sparse_226_str(const char* value);
  inline void set_sparse_226_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_226_str();
  inline ::std::string* release_sparse_226_str();
  inline void set_allocated_sparse_226_str(::std::string* sparse_226_str);

  // optional string sparse_227_str = 239;
  inline bool has_sparse_227_str() const;
  inline void clear_sparse_227_str();
  static const int kSparse227StrFieldNumber = 239;
  inline const ::std::string& sparse_227_str() const;
  inline void set_sparse_227_str(const ::std::string& value);
  inline void set_sparse_227_str(const char* value);
  inline void set_sparse_227_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_227_str();
  inline ::std::string* release_sparse_227_str();
  inline void set_allocated_sparse_227_str(::std::string* sparse_227_str);

  // optional string sparse_228_str = 240;
  inline bool has_sparse_228_str() const;
  inline void clear_sparse_228_str();
  static const int kSparse228StrFieldNumber = 240;
  inline const ::std::string& sparse_228_str() const;
  inline void set_sparse_228_str(const ::std::string& value);
  inline void set_sparse_228_str(const char* value);
  inline void set_sparse_228_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_228_str();
  inline ::std::string* release_sparse_228_str();
  inline void set_allocated_sparse_228_str(::std::string* sparse_228_str);

  // optional string sparse_229_str = 241;
  inline bool has_sparse_229_str() const;
  inline void clear_sparse_229_str();
  static const int kSparse229StrFieldNumber = 241;
  inline const ::std::string& sparse_229_str() const;
  inline void set_sparse_229_str(const ::std::string& value);
  inline void set_sparse_229_str(const char* value);
  inline void set_sparse_229_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_229_str();
  inline ::std::string* release_sparse_229_str();
  inline void set_allocated_sparse_229_str(::std::string* sparse_229_str);

  // optional string sparse_230_str = 242;
  inline bool has_sparse_230_str() const;
  inline void clear_sparse_230_str();
  static const int kSparse230StrFieldNumber = 242;
  inline const ::std::string& sparse_230_str() const;
  inline void set_sparse_230_str(const ::std::string& value);
  inline void set_sparse_230_str(const char* value);
  inline void set_sparse_230_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_230_str();
  inline ::std::string* release_sparse_230_str();
  inline void set_allocated_sparse_230_str(::std::string* sparse_230_str);

  // optional string sparse_231_str = 243;
  inline bool has_sparse_231_str() const;
  inline void clear_sparse_231_str();
  static const int kSparse231StrFieldNumber = 243;
  inline const ::std::string& sparse_231_str() const;
  inline void set_sparse_231_str(const ::std::string& value);
  inline void set_sparse_231_str(const char* value);
  inline void set_sparse_231_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_231_str();
  inline ::std::string* release_sparse_231_str();
  inline void set_allocated_sparse_231_str(::std::string* sparse_231_str);

  // optional string sparse_232_str = 244;
  inline bool has_sparse_232_str() const;
  inline void clear_sparse_232_str();
  static const int kSparse232StrFieldNumber = 244;
  inline const ::std::string& sparse_232_str() const;
  inline void set_sparse_232_str(const ::std::string& value);
  inline void set_sparse_232_str(const char* value);
  inline void set_sparse_232_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_232_str();
  inline ::std::string* release_sparse_232_str();
  inline void set_allocated_sparse_232_str(::std::string* sparse_232_str);

  // optional string sparse_233_str = 245;
  inline bool has_sparse_233_str() const;
  inline void clear_sparse_233_str();
  static const int kSparse233StrFieldNumber = 245;
  inline const ::std::string& sparse_233_str() const;
  inline void set_sparse_233_str(const ::std::string& value);
  inline void set_sparse_233_str(const char* value);
  inline void set_sparse_233_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_233_str();
  inline ::std::string* release_sparse_233_str();
  inline void set_allocated_sparse_233_str(::std::string* sparse_233_str);

  // optional string sparse_234_str = 246;
  inline bool has_sparse_234_str() const;
  inline void clear_sparse_234_str();
  static const int kSparse234StrFieldNumber = 246;
  inline const ::std::string& sparse_234_str() const;
  inline void set_sparse_234_str(const ::std::string& value);
  inline void set_sparse_234_str(const char* value);
  inline void set_sparse_234_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_234_str();
  inline ::std::string* release_sparse_234_str();
  inline void set_allocated_sparse_234_str(::std::string* sparse_234_str);

  // optional string sparse_235_str = 247;
  inline bool has_sparse_235_str() const;
  inline void clear_sparse_235_str();
  static const int kSparse235StrFieldNumber = 247;
  inline const ::std::string& sparse_235_str() const;
  inline void set_sparse_235_str(const ::std::string& value);
  inline void set_sparse_235_str(const char* value);
  inline void set_sparse_235_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_235_str();
  inline ::std::string* release_sparse_235_str();
  inline void set_allocated_sparse_235_str(::std::string* sparse_235_str);

  // optional string sparse_236_str = 248;
  inline bool has_sparse_236_str() const;
  inline void clear_sparse_236_str();
  static const int kSparse236StrFieldNumber = 248;
  inline const ::std::string& sparse_236_str() const;
  inline void set_sparse_236_str(const ::std::string& value);
  inline void set_sparse_236_str(const char* value);
  inline void set_sparse_236_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_236_str();
  inline ::std::string* release_sparse_236_str();
  inline void set_allocated_sparse_236_str(::std::string* sparse_236_str);

  // optional string sparse_237_str = 249;
  inline bool has_sparse_237_str() const;
  inline void clear_sparse_237_str();
  static const int kSparse237StrFieldNumber = 249;
  inline const ::std::string& sparse_237_str() const;
  inline void set_sparse_237_str(const ::std::string& value);
  inline void set_sparse_237_str(const char* value);
  inline void set_sparse_237_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_237_str();
  inline ::std::string* release_sparse_237_str();
  inline void set_allocated_sparse_237_str(::std::string* sparse_237_str);

  // optional string sparse_238_str = 250;
  inline bool has_sparse_238_str() const;
  inline void clear_sparse_238_str();
  static const int kSparse238StrFieldNumber = 250;
  inline const ::std::string& sparse_238_str() const;
  inline void set_sparse_238_str(const ::std::string& value);
  inline void set_sparse_238_str(const char* value);
  inline void set_sparse_238_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_238_str();
  inline ::std::string* release_sparse_238_str();
  inline void set_allocated_sparse_238_str(::std::string* sparse_238_str);

  // optional string sparse_239_str = 251;
  inline bool has_sparse_239_str() const;
  inline void clear_sparse_239_str();
  static const int kSparse239StrFieldNumber = 251;
  inline const ::std::string& sparse_239_str() const;
  inline void set_sparse_239_str(const ::std::string& value);
  inline void set_sparse_239_str(const char* value);
  inline void set_sparse_239_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_239_str();
  inline ::std::string* release_sparse_239_str();
  inline void set_allocated_sparse_239_str(::std::string* sparse_239_str);

  // optional string sparse_240_str = 252;
  inline bool has_sparse_240_str() const;
  inline void clear_sparse_240_str();
  static const int kSparse240StrFieldNumber = 252;
  inline const ::std::string& sparse_240_str() const;
  inline void set_sparse_240_str(const ::std::string& value);
  inline void set_sparse_240_str(const char* value);
  inline void set_sparse_240_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_240_str();
  inline ::std::string* release_sparse_240_str();
  inline void set_allocated_sparse_240_str(::std::string* sparse_240_str);

  // optional string sparse_241_str = 253;
  inline bool has_sparse_241_str() const;
  inline void clear_sparse_241_str();
  static const int kSparse241StrFieldNumber = 253;
  inline const ::std::string& sparse_241_str() const;
  inline void set_sparse_241_str(const ::std::string& value);
  inline void set_sparse_241_str(const char* value);
  inline void set_sparse_241_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_241_str();
  inline ::std::string* release_sparse_241_str();
  inline void set_allocated_sparse_241_str(::std::string* sparse_241_str);

  // optional string sparse_242_str = 254;
  inline bool has_sparse_242_str() const;
  inline void clear_sparse_242_str();
  static const int kSparse242StrFieldNumber = 254;
  inline const ::std::string& sparse_242_str() const;
  inline void set_sparse_242_str(const ::std::string& value);
  inline void set_sparse_242_str(const char* value);
  inline void set_sparse_242_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_242_str();
  inline ::std::string* release_sparse_242_str();
  inline void set_allocated_sparse_242_str(::std::string* sparse_242_str);

  // optional string sparse_243_str = 255;
  inline bool has_sparse_243_str() const;
  inline void clear_sparse_243_str();
  static const int kSparse243StrFieldNumber = 255;
  inline const ::std::string& sparse_243_str() const;
  inline void set_sparse_243_str(const ::std::string& value);
  inline void set_sparse_243_str(const char* value);
  inline void set_sparse_243_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_243_str();
  inline ::std::string* release_sparse_243_str();
  inline void set_allocated_sparse_243_str(::std::string* sparse_243_str);

  // optional string sparse_244_str = 256;
  inline bool has_sparse_244_str() const;
  inline void clear_sparse_244_str();
  static const int kSparse244StrFieldNumber = 256;
  inline const ::std::string& sparse_244_str() const;
  inline void set_sparse_244_str(const ::std::string& value);
  inline void set_sparse_244_str(const char* value);
  inline void set_sparse_244_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_244_str();
  inline ::std::string* release_sparse_244_str();
  inline void set_allocated_sparse_244_str(::std::string* sparse_244_str);

  // optional string sparse_245_str = 257;
  inline bool has_sparse_245_str() const;
  inline void clear_sparse_245_str();
  static const int kSparse245StrFieldNumber = 257;
  inline const ::std::string& sparse_245_str() const;
  inline void set_sparse_245_str(const ::std::string& value);
  inline void set_sparse_245_str(const char* value);
  inline void set_sparse_245_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_245_str();
  inline ::std::string* release_sparse_245_str();
  inline void set_allocated_sparse_245_str(::std::string* sparse_245_str);

  // optional string sparse_246_str = 258;
  inline bool has_sparse_246_str() const;
  inline void clear_sparse_246_str();
  static const int kSparse246StrFieldNumber = 258;
  inline const ::std::string& sparse_246_str() const;
  inline void set_sparse_246_str(const ::std::string& value);
  inline void set_sparse_246_str(const char* value);
  inline void set_sparse_246_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_246_str();
  inline ::std::string* release_sparse_246_str();
  inline void set_allocated_sparse_246_str(::std::string* sparse_246_str);

  // optional string sparse_247_str = 259;
  inline bool has_sparse_247_str() const;
  inline void clear_sparse_247_str();
  static const int kSparse247StrFieldNumber = 259;
  inline const ::std::string& sparse_247_str() const;
  inline void set_sparse_247_str(const ::std::string& value);
  inline void set_sparse_247_str(const char* value);
  inline void set_sparse_247_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_247_str();
  inline ::std::string* release_sparse_247_str();
  inline void set_allocated_sparse_247_str(::std::string* sparse_247_str);

  // optional string sparse_248_str = 260;
  inline bool has_sparse_248_str() const;
  inline void clear_sparse_248_str();
  static const int kSparse248StrFieldNumber = 260;
  inline const ::std::string& sparse_248_str() const;
  inline void set_sparse_248_str(const ::std::string& value);
  inline void set_sparse_248_str(const char* value);
  inline void set_sparse_248_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_248_str();
  inline ::std::string* release_sparse_248_str();
  inline void set_allocated_sparse_248_str(::std::string* sparse_248_str);

  // optional string sparse_249_str = 261;
  inline bool has_sparse_249_str() const;
  inline void clear_sparse_249_str();
  static const int kSparse249StrFieldNumber = 261;
  inline const ::std::string& sparse_249_str() const;
  inline void set_sparse_249_str(const ::std::string& value);
  inline void set_sparse_249_str(const char* value);
  inline void set_sparse_249_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_249_str();
  inline ::std::string* release_sparse_249_str();
  inline void set_allocated_sparse_249_str(::std::string* sparse_249_str);

  // optional string sparse_250_str = 262;
  inline bool has_sparse_250_str() const;
  inline void clear_sparse_250_str();
  static const int kSparse250StrFieldNumber = 262;
  inline const ::std::string& sparse_250_str() const;
  inline void set_sparse_250_str(const ::std::string& value);
  inline void set_sparse_250_str(const char* value);
  inline void set_sparse_250_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_250_str();
  inline ::std::string* release_sparse_250_str();
  inline void set_allocated_sparse_250_str(::std::string* sparse_250_str);

  // optional string sparse_251_str = 263;
  inline bool has_sparse_251_str() const;
  inline void clear_sparse_251_str();
  static const int kSparse251StrFieldNumber = 263;
  inline const ::std::string& sparse_251_str() const;
  inline void set_sparse_251_str(const ::std::string& value);
  inline void set_sparse_251_str(const char* value);
  inline void set_sparse_251_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_251_str();
  inline ::std::string* release_sparse_251_str();
  inline void set_allocated_sparse_251_str(::std::string* sparse_251_str);

  // optional string sparse_252_str = 264;
  inline bool has_sparse_252_str() const;
  inline void clear_sparse_252_str();
  static const int kSparse252StrFieldNumber = 264;
  inline const ::std::string& sparse_252_str() const;
  inline void set_sparse_252_str(const ::std::string& value);
  inline void set_sparse_252_str(const char* value);
  inline void set_sparse_252_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_252_str();
  inline ::std::string* release_sparse_252_str();
  inline void set_allocated_sparse_252_str(::std::string* sparse_252_str);

  // optional string sparse_253_str = 265;
  inline bool has_sparse_253_str() const;
  inline void clear_sparse_253_str();
  static const int kSparse253StrFieldNumber = 265;
  inline const ::std::string& sparse_253_str() const;
  inline void set_sparse_253_str(const ::std::string& value);
  inline void set_sparse_253_str(const char* value);
  inline void set_sparse_253_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_253_str();
  inline ::std::string* release_sparse_253_str();
  inline void set_allocated_sparse_253_str(::std::string* sparse_253_str);

  // optional string sparse_254_str = 266;
  inline bool has_sparse_254_str() const;
  inline void clear_sparse_254_str();
  static const int kSparse254StrFieldNumber = 266;
  inline const ::std::string& sparse_254_str() const;
  inline void set_sparse_254_str(const ::std::string& value);
  inline void set_sparse_254_str(const char* value);
  inline void set_sparse_254_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_254_str();
  inline ::std::string* release_sparse_254_str();
  inline void set_allocated_sparse_254_str(::std::string* sparse_254_str);

  // optional string sparse_255_str = 267;
  inline bool has_sparse_255_str() const;
  inline void clear_sparse_255_str();
  static const int kSparse255StrFieldNumber = 267;
  inline const ::std::string& sparse_255_str() const;
  inline void set_sparse_255_str(const ::std::string& value);
  inline void set_sparse_255_str(const char* value);
  inline void set_sparse_255_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_255_str();
  inline ::std::string* release_sparse_255_str();
  inline void set_allocated_sparse_255_str(::std::string* sparse_255_str);

  // optional string sparse_256_str = 268;
  inline bool has_sparse_256_str() const;
  inline void clear_sparse_256_str();
  static const int kSparse256StrFieldNumber = 268;
  inline const ::std::string& sparse_256_str() const;
  inline void set_sparse_256_str(const ::std::string& value);
  inline void set_sparse_256_str(const char* value);
  inline void set_sparse_256_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_256_str();
  inline ::std::string* release_sparse_256_str();
  inline void set_allocated_sparse_256_str(::std::string* sparse_256_str);

  // optional string sparse_257_str = 269;
  inline bool has_sparse_257_str() const;
  inline void clear_sparse_257_str();
  static const int kSparse257StrFieldNumber = 269;
  inline const ::std::string& sparse_257_str() const;
  inline void set_sparse_257_str(const ::std::string& value);
  inline void set_sparse_257_str(const char* value);
  inline void set_sparse_257_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_257_str();
  inline ::std::string* release_sparse_257_str();
  inline void set_allocated_sparse_257_str(::std::string* sparse_257_str);

  // optional string sparse_258_str = 270;
  inline bool has_sparse_258_str() const;
  inline void clear_sparse_258_str();
  static const int kSparse258StrFieldNumber = 270;
  inline const ::std::string& sparse_258_str() const;
  inline void set_sparse_258_str(const ::std::string& value);
  inline void set_sparse_258_str(const char* value);
  inline void set_sparse_258_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_258_str();
  inline ::std::string* release_sparse_258_str();
  inline void set_allocated_sparse_258_str(::std::string* sparse_258_str);

  // optional string sparse_259_str = 271;
  inline bool has_sparse_259_str() const;
  inline void clear_sparse_259_str();
  static const int kSparse259StrFieldNumber = 271;
  inline const ::std::string& sparse_259_str() const;
  inline void set_sparse_259_str(const ::std::string& value);
  inline void set_sparse_259_str(const char* value);
  inline void set_sparse_259_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_259_str();
  inline ::std::string* release_sparse_259_str();
  inline void set_allocated_sparse_259_str(::std::string* sparse_259_str);

  // optional string sparse_260_str = 272;
  inline bool has_sparse_260_str() const;
  inline void clear_sparse_260_str();
  static const int kSparse260StrFieldNumber = 272;
  inline const ::std::string& sparse_260_str() const;
  inline void set_sparse_260_str(const ::std::string& value);
  inline void set_sparse_260_str(const char* value);
  inline void set_sparse_260_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_260_str();
  inline ::std::string* release_sparse_260_str();
  inline void set_allocated_sparse_260_str(::std::string* sparse_260_str);

  // optional string sparse_261_str = 273;
  inline bool has_sparse_261_str() const;
  inline void clear_sparse_261_str();
  static const int kSparse261StrFieldNumber = 273;
  inline const ::std::string& sparse_261_str() const;
  inline void set_sparse_261_str(const ::std::string& value);
  inline void set_sparse_261_str(const char* value);
  inline void set_sparse_261_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_261_str();
  inline ::std::string* release_sparse_261_str();
  inline void set_allocated_sparse_261_str(::std::string* sparse_261_str);

  // optional string sparse_262_str = 274;
  inline bool has_sparse_262_str() const;
  inline void clear_sparse_262_str();
  static const int kSparse262StrFieldNumber = 274;
  inline const ::std::string& sparse_262_str() const;
  inline void set_sparse_262_str(const ::std::string& value);
  inline void set_sparse_262_str(const char* value);
  inline void set_sparse_262_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_262_str();
  inline ::std::string* release_sparse_262_str();
  inline void set_allocated_sparse_262_str(::std::string* sparse_262_str);

  // optional string sparse_263_str = 275;
  inline bool has_sparse_263_str() const;
  inline void clear_sparse_263_str();
  static const int kSparse263StrFieldNumber = 275;
  inline const ::std::string& sparse_263_str() const;
  inline void set_sparse_263_str(const ::std::string& value);
  inline void set_sparse_263_str(const char* value);
  inline void set_sparse_263_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_263_str();
  inline ::std::string* release_sparse_263_str();
  inline void set_allocated_sparse_263_str(::std::string* sparse_263_str);

  // optional string sparse_264_str = 276;
  inline bool has_sparse_264_str() const;
  inline void clear_sparse_264_str();
  static const int kSparse264StrFieldNumber = 276;
  inline const ::std::string& sparse_264_str() const;
  inline void set_sparse_264_str(const ::std::string& value);
  inline void set_sparse_264_str(const char* value);
  inline void set_sparse_264_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_264_str();
  inline ::std::string* release_sparse_264_str();
  inline void set_allocated_sparse_264_str(::std::string* sparse_264_str);

  // optional string sparse_265_str = 277;
  inline bool has_sparse_265_str() const;
  inline void clear_sparse_265_str();
  static const int kSparse265StrFieldNumber = 277;
  inline const ::std::string& sparse_265_str() const;
  inline void set_sparse_265_str(const ::std::string& value);
  inline void set_sparse_265_str(const char* value);
  inline void set_sparse_265_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_265_str();
  inline ::std::string* release_sparse_265_str();
  inline void set_allocated_sparse_265_str(::std::string* sparse_265_str);

  // optional string sparse_266_str = 278;
  inline bool has_sparse_266_str() const;
  inline void clear_sparse_266_str();
  static const int kSparse266StrFieldNumber = 278;
  inline const ::std::string& sparse_266_str() const;
  inline void set_sparse_266_str(const ::std::string& value);
  inline void set_sparse_266_str(const char* value);
  inline void set_sparse_266_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_266_str();
  inline ::std::string* release_sparse_266_str();
  inline void set_allocated_sparse_266_str(::std::string* sparse_266_str);

  // optional string sparse_267_str = 279;
  inline bool has_sparse_267_str() const;
  inline void clear_sparse_267_str();
  static const int kSparse267StrFieldNumber = 279;
  inline const ::std::string& sparse_267_str() const;
  inline void set_sparse_267_str(const ::std::string& value);
  inline void set_sparse_267_str(const char* value);
  inline void set_sparse_267_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_267_str();
  inline ::std::string* release_sparse_267_str();
  inline void set_allocated_sparse_267_str(::std::string* sparse_267_str);

  // optional string sparse_268_str = 280;
  inline bool has_sparse_268_str() const;
  inline void clear_sparse_268_str();
  static const int kSparse268StrFieldNumber = 280;
  inline const ::std::string& sparse_268_str() const;
  inline void set_sparse_268_str(const ::std::string& value);
  inline void set_sparse_268_str(const char* value);
  inline void set_sparse_268_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_268_str();
  inline ::std::string* release_sparse_268_str();
  inline void set_allocated_sparse_268_str(::std::string* sparse_268_str);

  // optional string sparse_269_str = 281;
  inline bool has_sparse_269_str() const;
  inline void clear_sparse_269_str();
  static const int kSparse269StrFieldNumber = 281;
  inline const ::std::string& sparse_269_str() const;
  inline void set_sparse_269_str(const ::std::string& value);
  inline void set_sparse_269_str(const char* value);
  inline void set_sparse_269_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_269_str();
  inline ::std::string* release_sparse_269_str();
  inline void set_allocated_sparse_269_str(::std::string* sparse_269_str);

  // optional string sparse_270_str = 282;
  inline bool has_sparse_270_str() const;
  inline void clear_sparse_270_str();
  static const int kSparse270StrFieldNumber = 282;
  inline const ::std::string& sparse_270_str() const;
  inline void set_sparse_270_str(const ::std::string& value);
  inline void set_sparse_270_str(const char* value);
  inline void set_sparse_270_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_270_str();
  inline ::std::string* release_sparse_270_str();
  inline void set_allocated_sparse_270_str(::std::string* sparse_270_str);

  // optional string sparse_271_str = 283;
  inline bool has_sparse_271_str() const;
  inline void clear_sparse_271_str();
  static const int kSparse271StrFieldNumber = 283;
  inline const ::std::string& sparse_271_str() const;
  inline void set_sparse_271_str(const ::std::string& value);
  inline void set_sparse_271_str(const char* value);
  inline void set_sparse_271_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_271_str();
  inline ::std::string* release_sparse_271_str();
  inline void set_allocated_sparse_271_str(::std::string* sparse_271_str);

  // optional string sparse_272_str = 284;
  inline bool has_sparse_272_str() const;
  inline void clear_sparse_272_str();
  static const int kSparse272StrFieldNumber = 284;
  inline const ::std::string& sparse_272_str() const;
  inline void set_sparse_272_str(const ::std::string& value);
  inline void set_sparse_272_str(const char* value);
  inline void set_sparse_272_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_272_str();
  inline ::std::string* release_sparse_272_str();
  inline void set_allocated_sparse_272_str(::std::string* sparse_272_str);

  // optional string sparse_273_str = 285;
  inline bool has_sparse_273_str() const;
  inline void clear_sparse_273_str();
  static const int kSparse273StrFieldNumber = 285;
  inline const ::std::string& sparse_273_str() const;
  inline void set_sparse_273_str(const ::std::string& value);
  inline void set_sparse_273_str(const char* value);
  inline void set_sparse_273_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_273_str();
  inline ::std::string* release_sparse_273_str();
  inline void set_allocated_sparse_273_str(::std::string* sparse_273_str);

  // optional string sparse_274_str = 286;
  inline bool has_sparse_274_str() const;
  inline void clear_sparse_274_str();
  static const int kSparse274StrFieldNumber = 286;
  inline const ::std::string& sparse_274_str() const;
  inline void set_sparse_274_str(const ::std::string& value);
  inline void set_sparse_274_str(const char* value);
  inline void set_sparse_274_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_274_str();
  inline ::std::string* release_sparse_274_str();
  inline void set_allocated_sparse_274_str(::std::string* sparse_274_str);

  // optional string sparse_275_str = 287;
  inline bool has_sparse_275_str() const;
  inline void clear_sparse_275_str();
  static const int kSparse275StrFieldNumber = 287;
  inline const ::std::string& sparse_275_str() const;
  inline void set_sparse_275_str(const ::std::string& value);
  inline void set_sparse_275_str(const char* value);
  inline void set_sparse_275_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_275_str();
  inline ::std::string* release_sparse_275_str();
  inline void set_allocated_sparse_275_str(::std::string* sparse_275_str);

  // optional string sparse_276_str = 288;
  inline bool has_sparse_276_str() const;
  inline void clear_sparse_276_str();
  static const int kSparse276StrFieldNumber = 288;
  inline const ::std::string& sparse_276_str() const;
  inline void set_sparse_276_str(const ::std::string& value);
  inline void set_sparse_276_str(const char* value);
  inline void set_sparse_276_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_276_str();
  inline ::std::string* release_sparse_276_str();
  inline void set_allocated_sparse_276_str(::std::string* sparse_276_str);

  // optional string sparse_277_str = 289;
  inline bool has_sparse_277_str() const;
  inline void clear_sparse_277_str();
  static const int kSparse277StrFieldNumber = 289;
  inline const ::std::string& sparse_277_str() const;
  inline void set_sparse_277_str(const ::std::string& value);
  inline void set_sparse_277_str(const char* value);
  inline void set_sparse_277_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_277_str();
  inline ::std::string* release_sparse_277_str();
  inline void set_allocated_sparse_277_str(::std::string* sparse_277_str);

  // optional string sparse_278_str = 290;
  inline bool has_sparse_278_str() const;
  inline void clear_sparse_278_str();
  static const int kSparse278StrFieldNumber = 290;
  inline const ::std::string& sparse_278_str() const;
  inline void set_sparse_278_str(const ::std::string& value);
  inline void set_sparse_278_str(const char* value);
  inline void set_sparse_278_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_278_str();
  inline ::std::string* release_sparse_278_str();
  inline void set_allocated_sparse_278_str(::std::string* sparse_278_str);

  // optional string sparse_279_str = 291;
  inline bool has_sparse_279_str() const;
  inline void clear_sparse_279_str();
  static const int kSparse279StrFieldNumber = 291;
  inline const ::std::string& sparse_279_str() const;
  inline void set_sparse_279_str(const ::std::string& value);
  inline void set_sparse_279_str(const char* value);
  inline void set_sparse_279_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_279_str();
  inline ::std::string* release_sparse_279_str();
  inline void set_allocated_sparse_279_str(::std::string* sparse_279_str);

  // optional string sparse_280_str = 292;
  inline bool has_sparse_280_str() const;
  inline void clear_sparse_280_str();
  static const int kSparse280StrFieldNumber = 292;
  inline const ::std::string& sparse_280_str() const;
  inline void set_sparse_280_str(const ::std::string& value);
  inline void set_sparse_280_str(const char* value);
  inline void set_sparse_280_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_280_str();
  inline ::std::string* release_sparse_280_str();
  inline void set_allocated_sparse_280_str(::std::string* sparse_280_str);

  // optional string sparse_281_str = 293;
  inline bool has_sparse_281_str() const;
  inline void clear_sparse_281_str();
  static const int kSparse281StrFieldNumber = 293;
  inline const ::std::string& sparse_281_str() const;
  inline void set_sparse_281_str(const ::std::string& value);
  inline void set_sparse_281_str(const char* value);
  inline void set_sparse_281_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_281_str();
  inline ::std::string* release_sparse_281_str();
  inline void set_allocated_sparse_281_str(::std::string* sparse_281_str);

  // optional string sparse_282_str = 294;
  inline bool has_sparse_282_str() const;
  inline void clear_sparse_282_str();
  static const int kSparse282StrFieldNumber = 294;
  inline const ::std::string& sparse_282_str() const;
  inline void set_sparse_282_str(const ::std::string& value);
  inline void set_sparse_282_str(const char* value);
  inline void set_sparse_282_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_282_str();
  inline ::std::string* release_sparse_282_str();
  inline void set_allocated_sparse_282_str(::std::string* sparse_282_str);

  // optional string sparse_283_str = 295;
  inline bool has_sparse_283_str() const;
  inline void clear_sparse_283_str();
  static const int kSparse283StrFieldNumber = 295;
  inline const ::std::string& sparse_283_str() const;
  inline void set_sparse_283_str(const ::std::string& value);
  inline void set_sparse_283_str(const char* value);
  inline void set_sparse_283_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_283_str();
  inline ::std::string* release_sparse_283_str();
  inline void set_allocated_sparse_283_str(::std::string* sparse_283_str);

  // optional string sparse_284_str = 296;
  inline bool has_sparse_284_str() const;
  inline void clear_sparse_284_str();
  static const int kSparse284StrFieldNumber = 296;
  inline const ::std::string& sparse_284_str() const;
  inline void set_sparse_284_str(const ::std::string& value);
  inline void set_sparse_284_str(const char* value);
  inline void set_sparse_284_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_284_str();
  inline ::std::string* release_sparse_284_str();
  inline void set_allocated_sparse_284_str(::std::string* sparse_284_str);

  // optional string sparse_285_str = 297;
  inline bool has_sparse_285_str() const;
  inline void clear_sparse_285_str();
  static const int kSparse285StrFieldNumber = 297;
  inline const ::std::string& sparse_285_str() const;
  inline void set_sparse_285_str(const ::std::string& value);
  inline void set_sparse_285_str(const char* value);
  inline void set_sparse_285_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_285_str();
  inline ::std::string* release_sparse_285_str();
  inline void set_allocated_sparse_285_str(::std::string* sparse_285_str);

  // optional string sparse_286_str = 298;
  inline bool has_sparse_286_str() const;
  inline void clear_sparse_286_str();
  static const int kSparse286StrFieldNumber = 298;
  inline const ::std::string& sparse_286_str() const;
  inline void set_sparse_286_str(const ::std::string& value);
  inline void set_sparse_286_str(const char* value);
  inline void set_sparse_286_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_286_str();
  inline ::std::string* release_sparse_286_str();
  inline void set_allocated_sparse_286_str(::std::string* sparse_286_str);

  // optional string sparse_287_str = 299;
  inline bool has_sparse_287_str() const;
  inline void clear_sparse_287_str();
  static const int kSparse287StrFieldNumber = 299;
  inline const ::std::string& sparse_287_str() const;
  inline void set_sparse_287_str(const ::std::string& value);
  inline void set_sparse_287_str(const char* value);
  inline void set_sparse_287_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_287_str();
  inline ::std::string* release_sparse_287_str();
  inline void set_allocated_sparse_287_str(::std::string* sparse_287_str);

  // optional string sparse_288_str = 300;
  inline bool has_sparse_288_str() const;
  inline void clear_sparse_288_str();
  static const int kSparse288StrFieldNumber = 300;
  inline const ::std::string& sparse_288_str() const;
  inline void set_sparse_288_str(const ::std::string& value);
  inline void set_sparse_288_str(const char* value);
  inline void set_sparse_288_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_288_str();
  inline ::std::string* release_sparse_288_str();
  inline void set_allocated_sparse_288_str(::std::string* sparse_288_str);

  // optional string sparse_289_str = 301;
  inline bool has_sparse_289_str() const;
  inline void clear_sparse_289_str();
  static const int kSparse289StrFieldNumber = 301;
  inline const ::std::string& sparse_289_str() const;
  inline void set_sparse_289_str(const ::std::string& value);
  inline void set_sparse_289_str(const char* value);
  inline void set_sparse_289_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_289_str();
  inline ::std::string* release_sparse_289_str();
  inline void set_allocated_sparse_289_str(::std::string* sparse_289_str);

  // optional string sparse_290_str = 302;
  inline bool has_sparse_290_str() const;
  inline void clear_sparse_290_str();
  static const int kSparse290StrFieldNumber = 302;
  inline const ::std::string& sparse_290_str() const;
  inline void set_sparse_290_str(const ::std::string& value);
  inline void set_sparse_290_str(const char* value);
  inline void set_sparse_290_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_290_str();
  inline ::std::string* release_sparse_290_str();
  inline void set_allocated_sparse_290_str(::std::string* sparse_290_str);

  // optional string sparse_291_str = 303;
  inline bool has_sparse_291_str() const;
  inline void clear_sparse_291_str();
  static const int kSparse291StrFieldNumber = 303;
  inline const ::std::string& sparse_291_str() const;
  inline void set_sparse_291_str(const ::std::string& value);
  inline void set_sparse_291_str(const char* value);
  inline void set_sparse_291_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_291_str();
  inline ::std::string* release_sparse_291_str();
  inline void set_allocated_sparse_291_str(::std::string* sparse_291_str);

  // optional string sparse_292_str = 304;
  inline bool has_sparse_292_str() const;
  inline void clear_sparse_292_str();
  static const int kSparse292StrFieldNumber = 304;
  inline const ::std::string& sparse_292_str() const;
  inline void set_sparse_292_str(const ::std::string& value);
  inline void set_sparse_292_str(const char* value);
  inline void set_sparse_292_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_292_str();
  inline ::std::string* release_sparse_292_str();
  inline void set_allocated_sparse_292_str(::std::string* sparse_292_str);

  // optional string sparse_293_str = 305;
  inline bool has_sparse_293_str() const;
  inline void clear_sparse_293_str();
  static const int kSparse293StrFieldNumber = 305;
  inline const ::std::string& sparse_293_str() const;
  inline void set_sparse_293_str(const ::std::string& value);
  inline void set_sparse_293_str(const char* value);
  inline void set_sparse_293_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_293_str();
  inline ::std::string* release_sparse_293_str();
  inline void set_allocated_sparse_293_str(::std::string* sparse_293_str);

  // optional string sparse_294_str = 306;
  inline bool has_sparse_294_str() const;
  inline void clear_sparse_294_str();
  static const int kSparse294StrFieldNumber = 306;
  inline const ::std::string& sparse_294_str() const;
  inline void set_sparse_294_str(const ::std::string& value);
  inline void set_sparse_294_str(const char* value);
  inline void set_sparse_294_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_294_str();
  inline ::std::string* release_sparse_294_str();
  inline void set_allocated_sparse_294_str(::std::string* sparse_294_str);

  // optional string sparse_295_str = 307;
  inline bool has_sparse_295_str() const;
  inline void clear_sparse_295_str();
  static const int kSparse295StrFieldNumber = 307;
  inline const ::std::string& sparse_295_str() const;
  inline void set_sparse_295_str(const ::std::string& value);
  inline void set_sparse_295_str(const char* value);
  inline void set_sparse_295_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_295_str();
  inline ::std::string* release_sparse_295_str();
  inline void set_allocated_sparse_295_str(::std::string* sparse_295_str);

  // optional string sparse_296_str = 308;
  inline bool has_sparse_296_str() const;
  inline void clear_sparse_296_str();
  static const int kSparse296StrFieldNumber = 308;
  inline const ::std::string& sparse_296_str() const;
  inline void set_sparse_296_str(const ::std::string& value);
  inline void set_sparse_296_str(const char* value);
  inline void set_sparse_296_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_296_str();
  inline ::std::string* release_sparse_296_str();
  inline void set_allocated_sparse_296_str(::std::string* sparse_296_str);

  // optional string sparse_297_str = 309;
  inline bool has_sparse_297_str() const;
  inline void clear_sparse_297_str();
  static const int kSparse297StrFieldNumber = 309;
  inline const ::std::string& sparse_297_str() const;
  inline void set_sparse_297_str(const ::std::string& value);
  inline void set_sparse_297_str(const char* value);
  inline void set_sparse_297_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_297_str();
  inline ::std::string* release_sparse_297_str();
  inline void set_allocated_sparse_297_str(::std::string* sparse_297_str);

  // optional string sparse_298_str = 310;
  inline bool has_sparse_298_str() const;
  inline void clear_sparse_298_str();
  static const int kSparse298StrFieldNumber = 310;
  inline const ::std::string& sparse_298_str() const;
  inline void set_sparse_298_str(const ::std::string& value);
  inline void set_sparse_298_str(const char* value);
  inline void set_sparse_298_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_298_str();
  inline ::std::string* release_sparse_298_str();
  inline void set_allocated_sparse_298_str(::std::string* sparse_298_str);

  // optional string sparse_299_str = 311;
  inline bool has_sparse_299_str() const;
  inline void clear_sparse_299_str();
  static const int kSparse299StrFieldNumber = 311;
  inline const ::std::string& sparse_299_str() const;
  inline void set_sparse_299_str(const ::std::string& value);
  inline void set_sparse_299_str(const char* value);
  inline void set_sparse_299_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_299_str();
  inline ::std::string* release_sparse_299_str();
  inline void set_allocated_sparse_299_str(::std::string* sparse_299_str);

  // optional string sparse_300_str = 312;
  inline bool has_sparse_300_str() const;
  inline void clear_sparse_300_str();
  static const int kSparse300StrFieldNumber = 312;
  inline const ::std::string& sparse_300_str() const;
  inline void set_sparse_300_str(const ::std::string& value);
  inline void set_sparse_300_str(const char* value);
  inline void set_sparse_300_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_300_str();
  inline ::std::string* release_sparse_300_str();
  inline void set_allocated_sparse_300_str(::std::string* sparse_300_str);

  // optional string sparse_301_str = 313;
  inline bool has_sparse_301_str() const;
  inline void clear_sparse_301_str();
  static const int kSparse301StrFieldNumber = 313;
  inline const ::std::string& sparse_301_str() const;
  inline void set_sparse_301_str(const ::std::string& value);
  inline void set_sparse_301_str(const char* value);
  inline void set_sparse_301_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_301_str();
  inline ::std::string* release_sparse_301_str();
  inline void set_allocated_sparse_301_str(::std::string* sparse_301_str);

  // optional string sparse_302_str = 314;
  inline bool has_sparse_302_str() const;
  inline void clear_sparse_302_str();
  static const int kSparse302StrFieldNumber = 314;
  inline const ::std::string& sparse_302_str() const;
  inline void set_sparse_302_str(const ::std::string& value);
  inline void set_sparse_302_str(const char* value);
  inline void set_sparse_302_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_302_str();
  inline ::std::string* release_sparse_302_str();
  inline void set_allocated_sparse_302_str(::std::string* sparse_302_str);

  // optional string sparse_303_str = 315;
  inline bool has_sparse_303_str() const;
  inline void clear_sparse_303_str();
  static const int kSparse303StrFieldNumber = 315;
  inline const ::std::string& sparse_303_str() const;
  inline void set_sparse_303_str(const ::std::string& value);
  inline void set_sparse_303_str(const char* value);
  inline void set_sparse_303_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_303_str();
  inline ::std::string* release_sparse_303_str();
  inline void set_allocated_sparse_303_str(::std::string* sparse_303_str);

  // optional string sparse_304_str = 316;
  inline bool has_sparse_304_str() const;
  inline void clear_sparse_304_str();
  static const int kSparse304StrFieldNumber = 316;
  inline const ::std::string& sparse_304_str() const;
  inline void set_sparse_304_str(const ::std::string& value);
  inline void set_sparse_304_str(const char* value);
  inline void set_sparse_304_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_304_str();
  inline ::std::string* release_sparse_304_str();
  inline void set_allocated_sparse_304_str(::std::string* sparse_304_str);

  // optional string sparse_305_str = 317;
  inline bool has_sparse_305_str() const;
  inline void clear_sparse_305_str();
  static const int kSparse305StrFieldNumber = 317;
  inline const ::std::string& sparse_305_str() const;
  inline void set_sparse_305_str(const ::std::string& value);
  inline void set_sparse_305_str(const char* value);
  inline void set_sparse_305_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_305_str();
  inline ::std::string* release_sparse_305_str();
  inline void set_allocated_sparse_305_str(::std::string* sparse_305_str);

  // optional string sparse_306_str = 318;
  inline bool has_sparse_306_str() const;
  inline void clear_sparse_306_str();
  static const int kSparse306StrFieldNumber = 318;
  inline const ::std::string& sparse_306_str() const;
  inline void set_sparse_306_str(const ::std::string& value);
  inline void set_sparse_306_str(const char* value);
  inline void set_sparse_306_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_306_str();
  inline ::std::string* release_sparse_306_str();
  inline void set_allocated_sparse_306_str(::std::string* sparse_306_str);

  // optional string sparse_307_str = 319;
  inline bool has_sparse_307_str() const;
  inline void clear_sparse_307_str();
  static const int kSparse307StrFieldNumber = 319;
  inline const ::std::string& sparse_307_str() const;
  inline void set_sparse_307_str(const ::std::string& value);
  inline void set_sparse_307_str(const char* value);
  inline void set_sparse_307_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_307_str();
  inline ::std::string* release_sparse_307_str();
  inline void set_allocated_sparse_307_str(::std::string* sparse_307_str);

  // optional string sparse_308_str = 320;
  inline bool has_sparse_308_str() const;
  inline void clear_sparse_308_str();
  static const int kSparse308StrFieldNumber = 320;
  inline const ::std::string& sparse_308_str() const;
  inline void set_sparse_308_str(const ::std::string& value);
  inline void set_sparse_308_str(const char* value);
  inline void set_sparse_308_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_308_str();
  inline ::std::string* release_sparse_308_str();
  inline void set_allocated_sparse_308_str(::std::string* sparse_308_str);

  // optional string sparse_309_str = 321;
  inline bool has_sparse_309_str() const;
  inline void clear_sparse_309_str();
  static const int kSparse309StrFieldNumber = 321;
  inline const ::std::string& sparse_309_str() const;
  inline void set_sparse_309_str(const ::std::string& value);
  inline void set_sparse_309_str(const char* value);
  inline void set_sparse_309_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_309_str();
  inline ::std::string* release_sparse_309_str();
  inline void set_allocated_sparse_309_str(::std::string* sparse_309_str);

  // optional string sparse_310_str = 322;
  inline bool has_sparse_310_str() const;
  inline void clear_sparse_310_str();
  static const int kSparse310StrFieldNumber = 322;
  inline const ::std::string& sparse_310_str() const;
  inline void set_sparse_310_str(const ::std::string& value);
  inline void set_sparse_310_str(const char* value);
  inline void set_sparse_310_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_310_str();
  inline ::std::string* release_sparse_310_str();
  inline void set_allocated_sparse_310_str(::std::string* sparse_310_str);

  // optional string sparse_311_str = 323;
  inline bool has_sparse_311_str() const;
  inline void clear_sparse_311_str();
  static const int kSparse311StrFieldNumber = 323;
  inline const ::std::string& sparse_311_str() const;
  inline void set_sparse_311_str(const ::std::string& value);
  inline void set_sparse_311_str(const char* value);
  inline void set_sparse_311_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_311_str();
  inline ::std::string* release_sparse_311_str();
  inline void set_allocated_sparse_311_str(::std::string* sparse_311_str);

  // optional string sparse_312_str = 324;
  inline bool has_sparse_312_str() const;
  inline void clear_sparse_312_str();
  static const int kSparse312StrFieldNumber = 324;
  inline const ::std::string& sparse_312_str() const;
  inline void set_sparse_312_str(const ::std::string& value);
  inline void set_sparse_312_str(const char* value);
  inline void set_sparse_312_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_312_str();
  inline ::std::string* release_sparse_312_str();
  inline void set_allocated_sparse_312_str(::std::string* sparse_312_str);

  // optional string sparse_313_str = 325;
  inline bool has_sparse_313_str() const;
  inline void clear_sparse_313_str();
  static const int kSparse313StrFieldNumber = 325;
  inline const ::std::string& sparse_313_str() const;
  inline void set_sparse_313_str(const ::std::string& value);
  inline void set_sparse_313_str(const char* value);
  inline void set_sparse_313_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_313_str();
  inline ::std::string* release_sparse_313_str();
  inline void set_allocated_sparse_313_str(::std::string* sparse_313_str);

  // optional string sparse_314_str = 326;
  inline bool has_sparse_314_str() const;
  inline void clear_sparse_314_str();
  static const int kSparse314StrFieldNumber = 326;
  inline const ::std::string& sparse_314_str() const;
  inline void set_sparse_314_str(const ::std::string& value);
  inline void set_sparse_314_str(const char* value);
  inline void set_sparse_314_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_314_str();
  inline ::std::string* release_sparse_314_str();
  inline void set_allocated_sparse_314_str(::std::string* sparse_314_str);

  // optional string sparse_315_str = 327;
  inline bool has_sparse_315_str() const;
  inline void clear_sparse_315_str();
  static const int kSparse315StrFieldNumber = 327;
  inline const ::std::string& sparse_315_str() const;
  inline void set_sparse_315_str(const ::std::string& value);
  inline void set_sparse_315_str(const char* value);
  inline void set_sparse_315_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_315_str();
  inline ::std::string* release_sparse_315_str();
  inline void set_allocated_sparse_315_str(::std::string* sparse_315_str);

  // optional string sparse_316_str = 328;
  inline bool has_sparse_316_str() const;
  inline void clear_sparse_316_str();
  static const int kSparse316StrFieldNumber = 328;
  inline const ::std::string& sparse_316_str() const;
  inline void set_sparse_316_str(const ::std::string& value);
  inline void set_sparse_316_str(const char* value);
  inline void set_sparse_316_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_316_str();
  inline ::std::string* release_sparse_316_str();
  inline void set_allocated_sparse_316_str(::std::string* sparse_316_str);

  // optional string sparse_317_str = 329;
  inline bool has_sparse_317_str() const;
  inline void clear_sparse_317_str();
  static const int kSparse317StrFieldNumber = 329;
  inline const ::std::string& sparse_317_str() const;
  inline void set_sparse_317_str(const ::std::string& value);
  inline void set_sparse_317_str(const char* value);
  inline void set_sparse_317_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_317_str();
  inline ::std::string* release_sparse_317_str();
  inline void set_allocated_sparse_317_str(::std::string* sparse_317_str);

  // optional string sparse_318_str = 330;
  inline bool has_sparse_318_str() const;
  inline void clear_sparse_318_str();
  static const int kSparse318StrFieldNumber = 330;
  inline const ::std::string& sparse_318_str() const;
  inline void set_sparse_318_str(const ::std::string& value);
  inline void set_sparse_318_str(const char* value);
  inline void set_sparse_318_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_318_str();
  inline ::std::string* release_sparse_318_str();
  inline void set_allocated_sparse_318_str(::std::string* sparse_318_str);

  // optional string sparse_319_str = 331;
  inline bool has_sparse_319_str() const;
  inline void clear_sparse_319_str();
  static const int kSparse319StrFieldNumber = 331;
  inline const ::std::string& sparse_319_str() const;
  inline void set_sparse_319_str(const ::std::string& value);
  inline void set_sparse_319_str(const char* value);
  inline void set_sparse_319_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_319_str();
  inline ::std::string* release_sparse_319_str();
  inline void set_allocated_sparse_319_str(::std::string* sparse_319_str);

  // optional string sparse_320_str = 332;
  inline bool has_sparse_320_str() const;
  inline void clear_sparse_320_str();
  static const int kSparse320StrFieldNumber = 332;
  inline const ::std::string& sparse_320_str() const;
  inline void set_sparse_320_str(const ::std::string& value);
  inline void set_sparse_320_str(const char* value);
  inline void set_sparse_320_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_320_str();
  inline ::std::string* release_sparse_320_str();
  inline void set_allocated_sparse_320_str(::std::string* sparse_320_str);

  // optional string sparse_321_str = 333;
  inline bool has_sparse_321_str() const;
  inline void clear_sparse_321_str();
  static const int kSparse321StrFieldNumber = 333;
  inline const ::std::string& sparse_321_str() const;
  inline void set_sparse_321_str(const ::std::string& value);
  inline void set_sparse_321_str(const char* value);
  inline void set_sparse_321_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_321_str();
  inline ::std::string* release_sparse_321_str();
  inline void set_allocated_sparse_321_str(::std::string* sparse_321_str);

  // optional string sparse_322_str = 334;
  inline bool has_sparse_322_str() const;
  inline void clear_sparse_322_str();
  static const int kSparse322StrFieldNumber = 334;
  inline const ::std::string& sparse_322_str() const;
  inline void set_sparse_322_str(const ::std::string& value);
  inline void set_sparse_322_str(const char* value);
  inline void set_sparse_322_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_322_str();
  inline ::std::string* release_sparse_322_str();
  inline void set_allocated_sparse_322_str(::std::string* sparse_322_str);

  // optional string sparse_323_str = 335;
  inline bool has_sparse_323_str() const;
  inline void clear_sparse_323_str();
  static const int kSparse323StrFieldNumber = 335;
  inline const ::std::string& sparse_323_str() const;
  inline void set_sparse_323_str(const ::std::string& value);
  inline void set_sparse_323_str(const char* value);
  inline void set_sparse_323_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_323_str();
  inline ::std::string* release_sparse_323_str();
  inline void set_allocated_sparse_323_str(::std::string* sparse_323_str);

  // optional string sparse_324_str = 336;
  inline bool has_sparse_324_str() const;
  inline void clear_sparse_324_str();
  static const int kSparse324StrFieldNumber = 336;
  inline const ::std::string& sparse_324_str() const;
  inline void set_sparse_324_str(const ::std::string& value);
  inline void set_sparse_324_str(const char* value);
  inline void set_sparse_324_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_324_str();
  inline ::std::string* release_sparse_324_str();
  inline void set_allocated_sparse_324_str(::std::string* sparse_324_str);

  // optional string sparse_325_str = 337;
  inline bool has_sparse_325_str() const;
  inline void clear_sparse_325_str();
  static const int kSparse325StrFieldNumber = 337;
  inline const ::std::string& sparse_325_str() const;
  inline void set_sparse_325_str(const ::std::string& value);
  inline void set_sparse_325_str(const char* value);
  inline void set_sparse_325_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_325_str();
  inline ::std::string* release_sparse_325_str();
  inline void set_allocated_sparse_325_str(::std::string* sparse_325_str);

  // optional string sparse_326_str = 338;
  inline bool has_sparse_326_str() const;
  inline void clear_sparse_326_str();
  static const int kSparse326StrFieldNumber = 338;
  inline const ::std::string& sparse_326_str() const;
  inline void set_sparse_326_str(const ::std::string& value);
  inline void set_sparse_326_str(const char* value);
  inline void set_sparse_326_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_326_str();
  inline ::std::string* release_sparse_326_str();
  inline void set_allocated_sparse_326_str(::std::string* sparse_326_str);

  // optional string sparse_327_str = 339;
  inline bool has_sparse_327_str() const;
  inline void clear_sparse_327_str();
  static const int kSparse327StrFieldNumber = 339;
  inline const ::std::string& sparse_327_str() const;
  inline void set_sparse_327_str(const ::std::string& value);
  inline void set_sparse_327_str(const char* value);
  inline void set_sparse_327_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_327_str();
  inline ::std::string* release_sparse_327_str();
  inline void set_allocated_sparse_327_str(::std::string* sparse_327_str);

  // optional string sparse_328_str = 340;
  inline bool has_sparse_328_str() const;
  inline void clear_sparse_328_str();
  static const int kSparse328StrFieldNumber = 340;
  inline const ::std::string& sparse_328_str() const;
  inline void set_sparse_328_str(const ::std::string& value);
  inline void set_sparse_328_str(const char* value);
  inline void set_sparse_328_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_328_str();
  inline ::std::string* release_sparse_328_str();
  inline void set_allocated_sparse_328_str(::std::string* sparse_328_str);

  // optional string sparse_329_str = 341;
  inline bool has_sparse_329_str() const;
  inline void clear_sparse_329_str();
  static const int kSparse329StrFieldNumber = 341;
  inline const ::std::string& sparse_329_str() const;
  inline void set_sparse_329_str(const ::std::string& value);
  inline void set_sparse_329_str(const char* value);
  inline void set_sparse_329_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_329_str();
  inline ::std::string* release_sparse_329_str();
  inline void set_allocated_sparse_329_str(::std::string* sparse_329_str);

  // optional string sparse_330_str = 342;
  inline bool has_sparse_330_str() const;
  inline void clear_sparse_330_str();
  static const int kSparse330StrFieldNumber = 342;
  inline const ::std::string& sparse_330_str() const;
  inline void set_sparse_330_str(const ::std::string& value);
  inline void set_sparse_330_str(const char* value);
  inline void set_sparse_330_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_330_str();
  inline ::std::string* release_sparse_330_str();
  inline void set_allocated_sparse_330_str(::std::string* sparse_330_str);

  // optional string sparse_331_str = 343;
  inline bool has_sparse_331_str() const;
  inline void clear_sparse_331_str();
  static const int kSparse331StrFieldNumber = 343;
  inline const ::std::string& sparse_331_str() const;
  inline void set_sparse_331_str(const ::std::string& value);
  inline void set_sparse_331_str(const char* value);
  inline void set_sparse_331_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_331_str();
  inline ::std::string* release_sparse_331_str();
  inline void set_allocated_sparse_331_str(::std::string* sparse_331_str);

  // optional string sparse_332_str = 344;
  inline bool has_sparse_332_str() const;
  inline void clear_sparse_332_str();
  static const int kSparse332StrFieldNumber = 344;
  inline const ::std::string& sparse_332_str() const;
  inline void set_sparse_332_str(const ::std::string& value);
  inline void set_sparse_332_str(const char* value);
  inline void set_sparse_332_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_332_str();
  inline ::std::string* release_sparse_332_str();
  inline void set_allocated_sparse_332_str(::std::string* sparse_332_str);

  // optional string sparse_333_str = 345;
  inline bool has_sparse_333_str() const;
  inline void clear_sparse_333_str();
  static const int kSparse333StrFieldNumber = 345;
  inline const ::std::string& sparse_333_str() const;
  inline void set_sparse_333_str(const ::std::string& value);
  inline void set_sparse_333_str(const char* value);
  inline void set_sparse_333_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_333_str();
  inline ::std::string* release_sparse_333_str();
  inline void set_allocated_sparse_333_str(::std::string* sparse_333_str);

  // optional string sparse_334_str = 346;
  inline bool has_sparse_334_str() const;
  inline void clear_sparse_334_str();
  static const int kSparse334StrFieldNumber = 346;
  inline const ::std::string& sparse_334_str() const;
  inline void set_sparse_334_str(const ::std::string& value);
  inline void set_sparse_334_str(const char* value);
  inline void set_sparse_334_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_334_str();
  inline ::std::string* release_sparse_334_str();
  inline void set_allocated_sparse_334_str(::std::string* sparse_334_str);

  // optional string sparse_335_str = 347;
  inline bool has_sparse_335_str() const;
  inline void clear_sparse_335_str();
  static const int kSparse335StrFieldNumber = 347;
  inline const ::std::string& sparse_335_str() const;
  inline void set_sparse_335_str(const ::std::string& value);
  inline void set_sparse_335_str(const char* value);
  inline void set_sparse_335_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_335_str();
  inline ::std::string* release_sparse_335_str();
  inline void set_allocated_sparse_335_str(::std::string* sparse_335_str);

  // optional string sparse_336_str = 348;
  inline bool has_sparse_336_str() const;
  inline void clear_sparse_336_str();
  static const int kSparse336StrFieldNumber = 348;
  inline const ::std::string& sparse_336_str() const;
  inline void set_sparse_336_str(const ::std::string& value);
  inline void set_sparse_336_str(const char* value);
  inline void set_sparse_336_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_336_str();
  inline ::std::string* release_sparse_336_str();
  inline void set_allocated_sparse_336_str(::std::string* sparse_336_str);

  // optional string sparse_337_str = 349;
  inline bool has_sparse_337_str() const;
  inline void clear_sparse_337_str();
  static const int kSparse337StrFieldNumber = 349;
  inline const ::std::string& sparse_337_str() const;
  inline void set_sparse_337_str(const ::std::string& value);
  inline void set_sparse_337_str(const char* value);
  inline void set_sparse_337_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_337_str();
  inline ::std::string* release_sparse_337_str();
  inline void set_allocated_sparse_337_str(::std::string* sparse_337_str);

  // optional string sparse_338_str = 350;
  inline bool has_sparse_338_str() const;
  inline void clear_sparse_338_str();
  static const int kSparse338StrFieldNumber = 350;
  inline const ::std::string& sparse_338_str() const;
  inline void set_sparse_338_str(const ::std::string& value);
  inline void set_sparse_338_str(const char* value);
  inline void set_sparse_338_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_338_str();
  inline ::std::string* release_sparse_338_str();
  inline void set_allocated_sparse_338_str(::std::string* sparse_338_str);

  // optional string sparse_339_str = 351;
  inline bool has_sparse_339_str() const;
  inline void clear_sparse_339_str();
  static const int kSparse339StrFieldNumber = 351;
  inline const ::std::string& sparse_339_str() const;
  inline void set_sparse_339_str(const ::std::string& value);
  inline void set_sparse_339_str(const char* value);
  inline void set_sparse_339_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_339_str();
  inline ::std::string* release_sparse_339_str();
  inline void set_allocated_sparse_339_str(::std::string* sparse_339_str);

  // optional string sparse_340_str = 352;
  inline bool has_sparse_340_str() const;
  inline void clear_sparse_340_str();
  static const int kSparse340StrFieldNumber = 352;
  inline const ::std::string& sparse_340_str() const;
  inline void set_sparse_340_str(const ::std::string& value);
  inline void set_sparse_340_str(const char* value);
  inline void set_sparse_340_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_340_str();
  inline ::std::string* release_sparse_340_str();
  inline void set_allocated_sparse_340_str(::std::string* sparse_340_str);

  // optional string sparse_341_str = 353;
  inline bool has_sparse_341_str() const;
  inline void clear_sparse_341_str();
  static const int kSparse341StrFieldNumber = 353;
  inline const ::std::string& sparse_341_str() const;
  inline void set_sparse_341_str(const ::std::string& value);
  inline void set_sparse_341_str(const char* value);
  inline void set_sparse_341_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_341_str();
  inline ::std::string* release_sparse_341_str();
  inline void set_allocated_sparse_341_str(::std::string* sparse_341_str);

  // optional string sparse_342_str = 354;
  inline bool has_sparse_342_str() const;
  inline void clear_sparse_342_str();
  static const int kSparse342StrFieldNumber = 354;
  inline const ::std::string& sparse_342_str() const;
  inline void set_sparse_342_str(const ::std::string& value);
  inline void set_sparse_342_str(const char* value);
  inline void set_sparse_342_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_342_str();
  inline ::std::string* release_sparse_342_str();
  inline void set_allocated_sparse_342_str(::std::string* sparse_342_str);

  // optional string sparse_343_str = 355;
  inline bool has_sparse_343_str() const;
  inline void clear_sparse_343_str();
  static const int kSparse343StrFieldNumber = 355;
  inline const ::std::string& sparse_343_str() const;
  inline void set_sparse_343_str(const ::std::string& value);
  inline void set_sparse_343_str(const char* value);
  inline void set_sparse_343_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_343_str();
  inline ::std::string* release_sparse_343_str();
  inline void set_allocated_sparse_343_str(::std::string* sparse_343_str);

  // optional string sparse_344_str = 356;
  inline bool has_sparse_344_str() const;
  inline void clear_sparse_344_str();
  static const int kSparse344StrFieldNumber = 356;
  inline const ::std::string& sparse_344_str() const;
  inline void set_sparse_344_str(const ::std::string& value);
  inline void set_sparse_344_str(const char* value);
  inline void set_sparse_344_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_344_str();
  inline ::std::string* release_sparse_344_str();
  inline void set_allocated_sparse_344_str(::std::string* sparse_344_str);

  // optional string sparse_345_str = 357;
  inline bool has_sparse_345_str() const;
  inline void clear_sparse_345_str();
  static const int kSparse345StrFieldNumber = 357;
  inline const ::std::string& sparse_345_str() const;
  inline void set_sparse_345_str(const ::std::string& value);
  inline void set_sparse_345_str(const char* value);
  inline void set_sparse_345_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_345_str();
  inline ::std::string* release_sparse_345_str();
  inline void set_allocated_sparse_345_str(::std::string* sparse_345_str);

  // optional string sparse_346_str = 358;
  inline bool has_sparse_346_str() const;
  inline void clear_sparse_346_str();
  static const int kSparse346StrFieldNumber = 358;
  inline const ::std::string& sparse_346_str() const;
  inline void set_sparse_346_str(const ::std::string& value);
  inline void set_sparse_346_str(const char* value);
  inline void set_sparse_346_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_346_str();
  inline ::std::string* release_sparse_346_str();
  inline void set_allocated_sparse_346_str(::std::string* sparse_346_str);

  // optional string sparse_347_str = 359;
  inline bool has_sparse_347_str() const;
  inline void clear_sparse_347_str();
  static const int kSparse347StrFieldNumber = 359;
  inline const ::std::string& sparse_347_str() const;
  inline void set_sparse_347_str(const ::std::string& value);
  inline void set_sparse_347_str(const char* value);
  inline void set_sparse_347_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_347_str();
  inline ::std::string* release_sparse_347_str();
  inline void set_allocated_sparse_347_str(::std::string* sparse_347_str);

  // optional string sparse_348_str = 360;
  inline bool has_sparse_348_str() const;
  inline void clear_sparse_348_str();
  static const int kSparse348StrFieldNumber = 360;
  inline const ::std::string& sparse_348_str() const;
  inline void set_sparse_348_str(const ::std::string& value);
  inline void set_sparse_348_str(const char* value);
  inline void set_sparse_348_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_348_str();
  inline ::std::string* release_sparse_348_str();
  inline void set_allocated_sparse_348_str(::std::string* sparse_348_str);

  // optional string sparse_349_str = 361;
  inline bool has_sparse_349_str() const;
  inline void clear_sparse_349_str();
  static const int kSparse349StrFieldNumber = 361;
  inline const ::std::string& sparse_349_str() const;
  inline void set_sparse_349_str(const ::std::string& value);
  inline void set_sparse_349_str(const char* value);
  inline void set_sparse_349_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_349_str();
  inline ::std::string* release_sparse_349_str();
  inline void set_allocated_sparse_349_str(::std::string* sparse_349_str);

  // optional string sparse_350_str = 362;
  inline bool has_sparse_350_str() const;
  inline void clear_sparse_350_str();
  static const int kSparse350StrFieldNumber = 362;
  inline const ::std::string& sparse_350_str() const;
  inline void set_sparse_350_str(const ::std::string& value);
  inline void set_sparse_350_str(const char* value);
  inline void set_sparse_350_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_350_str();
  inline ::std::string* release_sparse_350_str();
  inline void set_allocated_sparse_350_str(::std::string* sparse_350_str);

  // optional string sparse_351_str = 363;
  inline bool has_sparse_351_str() const;
  inline void clear_sparse_351_str();
  static const int kSparse351StrFieldNumber = 363;
  inline const ::std::string& sparse_351_str() const;
  inline void set_sparse_351_str(const ::std::string& value);
  inline void set_sparse_351_str(const char* value);
  inline void set_sparse_351_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_351_str();
  inline ::std::string* release_sparse_351_str();
  inline void set_allocated_sparse_351_str(::std::string* sparse_351_str);

  // optional string sparse_352_str = 364;
  inline bool has_sparse_352_str() const;
  inline void clear_sparse_352_str();
  static const int kSparse352StrFieldNumber = 364;
  inline const ::std::string& sparse_352_str() const;
  inline void set_sparse_352_str(const ::std::string& value);
  inline void set_sparse_352_str(const char* value);
  inline void set_sparse_352_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_352_str();
  inline ::std::string* release_sparse_352_str();
  inline void set_allocated_sparse_352_str(::std::string* sparse_352_str);

  // optional string sparse_353_str = 365;
  inline bool has_sparse_353_str() const;
  inline void clear_sparse_353_str();
  static const int kSparse353StrFieldNumber = 365;
  inline const ::std::string& sparse_353_str() const;
  inline void set_sparse_353_str(const ::std::string& value);
  inline void set_sparse_353_str(const char* value);
  inline void set_sparse_353_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_353_str();
  inline ::std::string* release_sparse_353_str();
  inline void set_allocated_sparse_353_str(::std::string* sparse_353_str);

  // optional string sparse_354_str = 366;
  inline bool has_sparse_354_str() const;
  inline void clear_sparse_354_str();
  static const int kSparse354StrFieldNumber = 366;
  inline const ::std::string& sparse_354_str() const;
  inline void set_sparse_354_str(const ::std::string& value);
  inline void set_sparse_354_str(const char* value);
  inline void set_sparse_354_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_354_str();
  inline ::std::string* release_sparse_354_str();
  inline void set_allocated_sparse_354_str(::std::string* sparse_354_str);

  // optional string sparse_355_str = 367;
  inline bool has_sparse_355_str() const;
  inline void clear_sparse_355_str();
  static const int kSparse355StrFieldNumber = 367;
  inline const ::std::string& sparse_355_str() const;
  inline void set_sparse_355_str(const ::std::string& value);
  inline void set_sparse_355_str(const char* value);
  inline void set_sparse_355_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_355_str();
  inline ::std::string* release_sparse_355_str();
  inline void set_allocated_sparse_355_str(::std::string* sparse_355_str);

  // optional string sparse_356_str = 368;
  inline bool has_sparse_356_str() const;
  inline void clear_sparse_356_str();
  static const int kSparse356StrFieldNumber = 368;
  inline const ::std::string& sparse_356_str() const;
  inline void set_sparse_356_str(const ::std::string& value);
  inline void set_sparse_356_str(const char* value);
  inline void set_sparse_356_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_356_str();
  inline ::std::string* release_sparse_356_str();
  inline void set_allocated_sparse_356_str(::std::string* sparse_356_str);

  // optional string sparse_357_str = 369;
  inline bool has_sparse_357_str() const;
  inline void clear_sparse_357_str();
  static const int kSparse357StrFieldNumber = 369;
  inline const ::std::string& sparse_357_str() const;
  inline void set_sparse_357_str(const ::std::string& value);
  inline void set_sparse_357_str(const char* value);
  inline void set_sparse_357_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_357_str();
  inline ::std::string* release_sparse_357_str();
  inline void set_allocated_sparse_357_str(::std::string* sparse_357_str);

  // optional string sparse_358_str = 370;
  inline bool has_sparse_358_str() const;
  inline void clear_sparse_358_str();
  static const int kSparse358StrFieldNumber = 370;
  inline const ::std::string& sparse_358_str() const;
  inline void set_sparse_358_str(const ::std::string& value);
  inline void set_sparse_358_str(const char* value);
  inline void set_sparse_358_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_358_str();
  inline ::std::string* release_sparse_358_str();
  inline void set_allocated_sparse_358_str(::std::string* sparse_358_str);

  // optional string sparse_359_str = 371;
  inline bool has_sparse_359_str() const;
  inline void clear_sparse_359_str();
  static const int kSparse359StrFieldNumber = 371;
  inline const ::std::string& sparse_359_str() const;
  inline void set_sparse_359_str(const ::std::string& value);
  inline void set_sparse_359_str(const char* value);
  inline void set_sparse_359_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_359_str();
  inline ::std::string* release_sparse_359_str();
  inline void set_allocated_sparse_359_str(::std::string* sparse_359_str);

  // optional string sparse_360_str = 372;
  inline bool has_sparse_360_str() const;
  inline void clear_sparse_360_str();
  static const int kSparse360StrFieldNumber = 372;
  inline const ::std::string& sparse_360_str() const;
  inline void set_sparse_360_str(const ::std::string& value);
  inline void set_sparse_360_str(const char* value);
  inline void set_sparse_360_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_360_str();
  inline ::std::string* release_sparse_360_str();
  inline void set_allocated_sparse_360_str(::std::string* sparse_360_str);

  // optional string sparse_361_str = 373;
  inline bool has_sparse_361_str() const;
  inline void clear_sparse_361_str();
  static const int kSparse361StrFieldNumber = 373;
  inline const ::std::string& sparse_361_str() const;
  inline void set_sparse_361_str(const ::std::string& value);
  inline void set_sparse_361_str(const char* value);
  inline void set_sparse_361_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_361_str();
  inline ::std::string* release_sparse_361_str();
  inline void set_allocated_sparse_361_str(::std::string* sparse_361_str);

  // optional string sparse_362_str = 374;
  inline bool has_sparse_362_str() const;
  inline void clear_sparse_362_str();
  static const int kSparse362StrFieldNumber = 374;
  inline const ::std::string& sparse_362_str() const;
  inline void set_sparse_362_str(const ::std::string& value);
  inline void set_sparse_362_str(const char* value);
  inline void set_sparse_362_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_362_str();
  inline ::std::string* release_sparse_362_str();
  inline void set_allocated_sparse_362_str(::std::string* sparse_362_str);

  // optional string sparse_363_str = 375;
  inline bool has_sparse_363_str() const;
  inline void clear_sparse_363_str();
  static const int kSparse363StrFieldNumber = 375;
  inline const ::std::string& sparse_363_str() const;
  inline void set_sparse_363_str(const ::std::string& value);
  inline void set_sparse_363_str(const char* value);
  inline void set_sparse_363_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_363_str();
  inline ::std::string* release_sparse_363_str();
  inline void set_allocated_sparse_363_str(::std::string* sparse_363_str);

  // optional string sparse_364_str = 376;
  inline bool has_sparse_364_str() const;
  inline void clear_sparse_364_str();
  static const int kSparse364StrFieldNumber = 376;
  inline const ::std::string& sparse_364_str() const;
  inline void set_sparse_364_str(const ::std::string& value);
  inline void set_sparse_364_str(const char* value);
  inline void set_sparse_364_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_364_str();
  inline ::std::string* release_sparse_364_str();
  inline void set_allocated_sparse_364_str(::std::string* sparse_364_str);

  // optional string sparse_365_str = 377;
  inline bool has_sparse_365_str() const;
  inline void clear_sparse_365_str();
  static const int kSparse365StrFieldNumber = 377;
  inline const ::std::string& sparse_365_str() const;
  inline void set_sparse_365_str(const ::std::string& value);
  inline void set_sparse_365_str(const char* value);
  inline void set_sparse_365_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_365_str();
  inline ::std::string* release_sparse_365_str();
  inline void set_allocated_sparse_365_str(::std::string* sparse_365_str);

  // optional string sparse_366_str = 378;
  inline bool has_sparse_366_str() const;
  inline void clear_sparse_366_str();
  static const int kSparse366StrFieldNumber = 378;
  inline const ::std::string& sparse_366_str() const;
  inline void set_sparse_366_str(const ::std::string& value);
  inline void set_sparse_366_str(const char* value);
  inline void set_sparse_366_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_366_str();
  inline ::std::string* release_sparse_366_str();
  inline void set_allocated_sparse_366_str(::std::string* sparse_366_str);

  // optional string sparse_367_str = 379;
  inline bool has_sparse_367_str() const;
  inline void clear_sparse_367_str();
  static const int kSparse367StrFieldNumber = 379;
  inline const ::std::string& sparse_367_str() const;
  inline void set_sparse_367_str(const ::std::string& value);
  inline void set_sparse_367_str(const char* value);
  inline void set_sparse_367_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_367_str();
  inline ::std::string* release_sparse_367_str();
  inline void set_allocated_sparse_367_str(::std::string* sparse_367_str);

  // optional string sparse_368_str = 380;
  inline bool has_sparse_368_str() const;
  inline void clear_sparse_368_str();
  static const int kSparse368StrFieldNumber = 380;
  inline const ::std::string& sparse_368_str() const;
  inline void set_sparse_368_str(const ::std::string& value);
  inline void set_sparse_368_str(const char* value);
  inline void set_sparse_368_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_368_str();
  inline ::std::string* release_sparse_368_str();
  inline void set_allocated_sparse_368_str(::std::string* sparse_368_str);

  // optional string sparse_369_str = 381;
  inline bool has_sparse_369_str() const;
  inline void clear_sparse_369_str();
  static const int kSparse369StrFieldNumber = 381;
  inline const ::std::string& sparse_369_str() const;
  inline void set_sparse_369_str(const ::std::string& value);
  inline void set_sparse_369_str(const char* value);
  inline void set_sparse_369_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_369_str();
  inline ::std::string* release_sparse_369_str();
  inline void set_allocated_sparse_369_str(::std::string* sparse_369_str);

  // optional string sparse_370_str = 382;
  inline bool has_sparse_370_str() const;
  inline void clear_sparse_370_str();
  static const int kSparse370StrFieldNumber = 382;
  inline const ::std::string& sparse_370_str() const;
  inline void set_sparse_370_str(const ::std::string& value);
  inline void set_sparse_370_str(const char* value);
  inline void set_sparse_370_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_370_str();
  inline ::std::string* release_sparse_370_str();
  inline void set_allocated_sparse_370_str(::std::string* sparse_370_str);

  // optional string sparse_371_str = 383;
  inline bool has_sparse_371_str() const;
  inline void clear_sparse_371_str();
  static const int kSparse371StrFieldNumber = 383;
  inline const ::std::string& sparse_371_str() const;
  inline void set_sparse_371_str(const ::std::string& value);
  inline void set_sparse_371_str(const char* value);
  inline void set_sparse_371_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_371_str();
  inline ::std::string* release_sparse_371_str();
  inline void set_allocated_sparse_371_str(::std::string* sparse_371_str);

  // optional string sparse_372_str = 384;
  inline bool has_sparse_372_str() const;
  inline void clear_sparse_372_str();
  static const int kSparse372StrFieldNumber = 384;
  inline const ::std::string& sparse_372_str() const;
  inline void set_sparse_372_str(const ::std::string& value);
  inline void set_sparse_372_str(const char* value);
  inline void set_sparse_372_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_372_str();
  inline ::std::string* release_sparse_372_str();
  inline void set_allocated_sparse_372_str(::std::string* sparse_372_str);

  // optional string sparse_373_str = 385;
  inline bool has_sparse_373_str() const;
  inline void clear_sparse_373_str();
  static const int kSparse373StrFieldNumber = 385;
  inline const ::std::string& sparse_373_str() const;
  inline void set_sparse_373_str(const ::std::string& value);
  inline void set_sparse_373_str(const char* value);
  inline void set_sparse_373_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_373_str();
  inline ::std::string* release_sparse_373_str();
  inline void set_allocated_sparse_373_str(::std::string* sparse_373_str);

  // optional string sparse_374_str = 386;
  inline bool has_sparse_374_str() const;
  inline void clear_sparse_374_str();
  static const int kSparse374StrFieldNumber = 386;
  inline const ::std::string& sparse_374_str() const;
  inline void set_sparse_374_str(const ::std::string& value);
  inline void set_sparse_374_str(const char* value);
  inline void set_sparse_374_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_374_str();
  inline ::std::string* release_sparse_374_str();
  inline void set_allocated_sparse_374_str(::std::string* sparse_374_str);

  // optional string sparse_375_str = 387;
  inline bool has_sparse_375_str() const;
  inline void clear_sparse_375_str();
  static const int kSparse375StrFieldNumber = 387;
  inline const ::std::string& sparse_375_str() const;
  inline void set_sparse_375_str(const ::std::string& value);
  inline void set_sparse_375_str(const char* value);
  inline void set_sparse_375_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_375_str();
  inline ::std::string* release_sparse_375_str();
  inline void set_allocated_sparse_375_str(::std::string* sparse_375_str);

  // optional string sparse_376_str = 388;
  inline bool has_sparse_376_str() const;
  inline void clear_sparse_376_str();
  static const int kSparse376StrFieldNumber = 388;
  inline const ::std::string& sparse_376_str() const;
  inline void set_sparse_376_str(const ::std::string& value);
  inline void set_sparse_376_str(const char* value);
  inline void set_sparse_376_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_376_str();
  inline ::std::string* release_sparse_376_str();
  inline void set_allocated_sparse_376_str(::std::string* sparse_376_str);

  // optional string sparse_377_str = 389;
  inline bool has_sparse_377_str() const;
  inline void clear_sparse_377_str();
  static const int kSparse377StrFieldNumber = 389;
  inline const ::std::string& sparse_377_str() const;
  inline void set_sparse_377_str(const ::std::string& value);
  inline void set_sparse_377_str(const char* value);
  inline void set_sparse_377_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_377_str();
  inline ::std::string* release_sparse_377_str();
  inline void set_allocated_sparse_377_str(::std::string* sparse_377_str);

  // optional string sparse_378_str = 390;
  inline bool has_sparse_378_str() const;
  inline void clear_sparse_378_str();
  static const int kSparse378StrFieldNumber = 390;
  inline const ::std::string& sparse_378_str() const;
  inline void set_sparse_378_str(const ::std::string& value);
  inline void set_sparse_378_str(const char* value);
  inline void set_sparse_378_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_378_str();
  inline ::std::string* release_sparse_378_str();
  inline void set_allocated_sparse_378_str(::std::string* sparse_378_str);

  // optional string sparse_379_str = 391;
  inline bool has_sparse_379_str() const;
  inline void clear_sparse_379_str();
  static const int kSparse379StrFieldNumber = 391;
  inline const ::std::string& sparse_379_str() const;
  inline void set_sparse_379_str(const ::std::string& value);
  inline void set_sparse_379_str(const char* value);
  inline void set_sparse_379_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_379_str();
  inline ::std::string* release_sparse_379_str();
  inline void set_allocated_sparse_379_str(::std::string* sparse_379_str);

  // optional string sparse_380_str = 392;
  inline bool has_sparse_380_str() const;
  inline void clear_sparse_380_str();
  static const int kSparse380StrFieldNumber = 392;
  inline const ::std::string& sparse_380_str() const;
  inline void set_sparse_380_str(const ::std::string& value);
  inline void set_sparse_380_str(const char* value);
  inline void set_sparse_380_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_380_str();
  inline ::std::string* release_sparse_380_str();
  inline void set_allocated_sparse_380_str(::std::string* sparse_380_str);

  // optional string sparse_381_str = 393;
  inline bool has_sparse_381_str() const;
  inline void clear_sparse_381_str();
  static const int kSparse381StrFieldNumber = 393;
  inline const ::std::string& sparse_381_str() const;
  inline void set_sparse_381_str(const ::std::string& value);
  inline void set_sparse_381_str(const char* value);
  inline void set_sparse_381_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_381_str();
  inline ::std::string* release_sparse_381_str();
  inline void set_allocated_sparse_381_str(::std::string* sparse_381_str);

  // optional string sparse_382_str = 394;
  inline bool has_sparse_382_str() const;
  inline void clear_sparse_382_str();
  static const int kSparse382StrFieldNumber = 394;
  inline const ::std::string& sparse_382_str() const;
  inline void set_sparse_382_str(const ::std::string& value);
  inline void set_sparse_382_str(const char* value);
  inline void set_sparse_382_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_382_str();
  inline ::std::string* release_sparse_382_str();
  inline void set_allocated_sparse_382_str(::std::string* sparse_382_str);

  // optional string sparse_383_str = 395;
  inline bool has_sparse_383_str() const;
  inline void clear_sparse_383_str();
  static const int kSparse383StrFieldNumber = 395;
  inline const ::std::string& sparse_383_str() const;
  inline void set_sparse_383_str(const ::std::string& value);
  inline void set_sparse_383_str(const char* value);
  inline void set_sparse_383_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_383_str();
  inline ::std::string* release_sparse_383_str();
  inline void set_allocated_sparse_383_str(::std::string* sparse_383_str);

  // optional string sparse_384_str = 396;
  inline bool has_sparse_384_str() const;
  inline void clear_sparse_384_str();
  static const int kSparse384StrFieldNumber = 396;
  inline const ::std::string& sparse_384_str() const;
  inline void set_sparse_384_str(const ::std::string& value);
  inline void set_sparse_384_str(const char* value);
  inline void set_sparse_384_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_384_str();
  inline ::std::string* release_sparse_384_str();
  inline void set_allocated_sparse_384_str(::std::string* sparse_384_str);

  // optional string sparse_385_str = 397;
  inline bool has_sparse_385_str() const;
  inline void clear_sparse_385_str();
  static const int kSparse385StrFieldNumber = 397;
  inline const ::std::string& sparse_385_str() const;
  inline void set_sparse_385_str(const ::std::string& value);
  inline void set_sparse_385_str(const char* value);
  inline void set_sparse_385_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_385_str();
  inline ::std::string* release_sparse_385_str();
  inline void set_allocated_sparse_385_str(::std::string* sparse_385_str);

  // optional string sparse_386_str = 398;
  inline bool has_sparse_386_str() const;
  inline void clear_sparse_386_str();
  static const int kSparse386StrFieldNumber = 398;
  inline const ::std::string& sparse_386_str() const;
  inline void set_sparse_386_str(const ::std::string& value);
  inline void set_sparse_386_str(const char* value);
  inline void set_sparse_386_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_386_str();
  inline ::std::string* release_sparse_386_str();
  inline void set_allocated_sparse_386_str(::std::string* sparse_386_str);

  // optional string sparse_387_str = 399;
  inline bool has_sparse_387_str() const;
  inline void clear_sparse_387_str();
  static const int kSparse387StrFieldNumber = 399;
  inline const ::std::string& sparse_387_str() const;
  inline void set_sparse_387_str(const ::std::string& value);
  inline void set_sparse_387_str(const char* value);
  inline void set_sparse_387_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_387_str();
  inline ::std::string* release_sparse_387_str();
  inline void set_allocated_sparse_387_str(::std::string* sparse_387_str);

  // optional string sparse_388_str = 400;
  inline bool has_sparse_388_str() const;
  inline void clear_sparse_388_str();
  static const int kSparse388StrFieldNumber = 400;
  inline const ::std::string& sparse_388_str() const;
  inline void set_sparse_388_str(const ::std::string& value);
  inline void set_sparse_388_str(const char* value);
  inline void set_sparse_388_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_388_str();
  inline ::std::string* release_sparse_388_str();
  inline void set_allocated_sparse_388_str(::std::string* sparse_388_str);

  // optional string sparse_389_str = 401;
  inline bool has_sparse_389_str() const;
  inline void clear_sparse_389_str();
  static const int kSparse389StrFieldNumber = 401;
  inline const ::std::string& sparse_389_str() const;
  inline void set_sparse_389_str(const ::std::string& value);
  inline void set_sparse_389_str(const char* value);
  inline void set_sparse_389_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_389_str();
  inline ::std::string* release_sparse_389_str();
  inline void set_allocated_sparse_389_str(::std::string* sparse_389_str);

  // optional string sparse_390_str = 402;
  inline bool has_sparse_390_str() const;
  inline void clear_sparse_390_str();
  static const int kSparse390StrFieldNumber = 402;
  inline const ::std::string& sparse_390_str() const;
  inline void set_sparse_390_str(const ::std::string& value);
  inline void set_sparse_390_str(const char* value);
  inline void set_sparse_390_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_390_str();
  inline ::std::string* release_sparse_390_str();
  inline void set_allocated_sparse_390_str(::std::string* sparse_390_str);

  // optional string sparse_391_str = 403;
  inline bool has_sparse_391_str() const;
  inline void clear_sparse_391_str();
  static const int kSparse391StrFieldNumber = 403;
  inline const ::std::string& sparse_391_str() const;
  inline void set_sparse_391_str(const ::std::string& value);
  inline void set_sparse_391_str(const char* value);
  inline void set_sparse_391_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_391_str();
  inline ::std::string* release_sparse_391_str();
  inline void set_allocated_sparse_391_str(::std::string* sparse_391_str);

  // optional string sparse_392_str = 404;
  inline bool has_sparse_392_str() const;
  inline void clear_sparse_392_str();
  static const int kSparse392StrFieldNumber = 404;
  inline const ::std::string& sparse_392_str() const;
  inline void set_sparse_392_str(const ::std::string& value);
  inline void set_sparse_392_str(const char* value);
  inline void set_sparse_392_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_392_str();
  inline ::std::string* release_sparse_392_str();
  inline void set_allocated_sparse_392_str(::std::string* sparse_392_str);

  // optional string sparse_393_str = 405;
  inline bool has_sparse_393_str() const;
  inline void clear_sparse_393_str();
  static const int kSparse393StrFieldNumber = 405;
  inline const ::std::string& sparse_393_str() const;
  inline void set_sparse_393_str(const ::std::string& value);
  inline void set_sparse_393_str(const char* value);
  inline void set_sparse_393_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_393_str();
  inline ::std::string* release_sparse_393_str();
  inline void set_allocated_sparse_393_str(::std::string* sparse_393_str);

  // optional string sparse_394_str = 406;
  inline bool has_sparse_394_str() const;
  inline void clear_sparse_394_str();
  static const int kSparse394StrFieldNumber = 406;
  inline const ::std::string& sparse_394_str() const;
  inline void set_sparse_394_str(const ::std::string& value);
  inline void set_sparse_394_str(const char* value);
  inline void set_sparse_394_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_394_str();
  inline ::std::string* release_sparse_394_str();
  inline void set_allocated_sparse_394_str(::std::string* sparse_394_str);

  // optional string sparse_395_str = 407;
  inline bool has_sparse_395_str() const;
  inline void clear_sparse_395_str();
  static const int kSparse395StrFieldNumber = 407;
  inline const ::std::string& sparse_395_str() const;
  inline void set_sparse_395_str(const ::std::string& value);
  inline void set_sparse_395_str(const char* value);
  inline void set_sparse_395_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_395_str();
  inline ::std::string* release_sparse_395_str();
  inline void set_allocated_sparse_395_str(::std::string* sparse_395_str);

  // optional string sparse_396_str = 408;
  inline bool has_sparse_396_str() const;
  inline void clear_sparse_396_str();
  static const int kSparse396StrFieldNumber = 408;
  inline const ::std::string& sparse_396_str() const;
  inline void set_sparse_396_str(const ::std::string& value);
  inline void set_sparse_396_str(const char* value);
  inline void set_sparse_396_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_396_str();
  inline ::std::string* release_sparse_396_str();
  inline void set_allocated_sparse_396_str(::std::string* sparse_396_str);

  // optional string sparse_397_str = 409;
  inline bool has_sparse_397_str() const;
  inline void clear_sparse_397_str();
  static const int kSparse397StrFieldNumber = 409;
  inline const ::std::string& sparse_397_str() const;
  inline void set_sparse_397_str(const ::std::string& value);
  inline void set_sparse_397_str(const char* value);
  inline void set_sparse_397_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_397_str();
  inline ::std::string* release_sparse_397_str();
  inline void set_allocated_sparse_397_str(::std::string* sparse_397_str);

  // optional string sparse_398_str = 410;
  inline bool has_sparse_398_str() const;
  inline void clear_sparse_398_str();
  static const int kSparse398StrFieldNumber = 410;
  inline const ::std::string& sparse_398_str() const;
  inline void set_sparse_398_str(const ::std::string& value);
  inline void set_sparse_398_str(const char* value);
  inline void set_sparse_398_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_398_str();
  inline ::std::string* release_sparse_398_str();
  inline void set_allocated_sparse_398_str(::std::string* sparse_398_str);

  // optional string sparse_399_str = 411;
  inline bool has_sparse_399_str() const;
  inline void clear_sparse_399_str();
  static const int kSparse399StrFieldNumber = 411;
  inline const ::std::string& sparse_399_str() const;
  inline void set_sparse_399_str(const ::std::string& value);
  inline void set_sparse_399_str(const char* value);
  inline void set_sparse_399_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_399_str();
  inline ::std::string* release_sparse_399_str();
  inline void set_allocated_sparse_399_str(::std::string* sparse_399_str);

  // optional string sparse_400_str = 412;
  inline bool has_sparse_400_str() const;
  inline void clear_sparse_400_str();
  static const int kSparse400StrFieldNumber = 412;
  inline const ::std::string& sparse_400_str() const;
  inline void set_sparse_400_str(const ::std::string& value);
  inline void set_sparse_400_str(const char* value);
  inline void set_sparse_400_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_400_str();
  inline ::std::string* release_sparse_400_str();
  inline void set_allocated_sparse_400_str(::std::string* sparse_400_str);

  // optional string sparse_401_str = 413;
  inline bool has_sparse_401_str() const;
  inline void clear_sparse_401_str();
  static const int kSparse401StrFieldNumber = 413;
  inline const ::std::string& sparse_401_str() const;
  inline void set_sparse_401_str(const ::std::string& value);
  inline void set_sparse_401_str(const char* value);
  inline void set_sparse_401_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_401_str();
  inline ::std::string* release_sparse_401_str();
  inline void set_allocated_sparse_401_str(::std::string* sparse_401_str);

  // optional string sparse_402_str = 414;
  inline bool has_sparse_402_str() const;
  inline void clear_sparse_402_str();
  static const int kSparse402StrFieldNumber = 414;
  inline const ::std::string& sparse_402_str() const;
  inline void set_sparse_402_str(const ::std::string& value);
  inline void set_sparse_402_str(const char* value);
  inline void set_sparse_402_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_402_str();
  inline ::std::string* release_sparse_402_str();
  inline void set_allocated_sparse_402_str(::std::string* sparse_402_str);

  // optional string sparse_403_str = 415;
  inline bool has_sparse_403_str() const;
  inline void clear_sparse_403_str();
  static const int kSparse403StrFieldNumber = 415;
  inline const ::std::string& sparse_403_str() const;
  inline void set_sparse_403_str(const ::std::string& value);
  inline void set_sparse_403_str(const char* value);
  inline void set_sparse_403_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_403_str();
  inline ::std::string* release_sparse_403_str();
  inline void set_allocated_sparse_403_str(::std::string* sparse_403_str);

  // optional string sparse_404_str = 416;
  inline bool has_sparse_404_str() const;
  inline void clear_sparse_404_str();
  static const int kSparse404StrFieldNumber = 416;
  inline const ::std::string& sparse_404_str() const;
  inline void set_sparse_404_str(const ::std::string& value);
  inline void set_sparse_404_str(const char* value);
  inline void set_sparse_404_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_404_str();
  inline ::std::string* release_sparse_404_str();
  inline void set_allocated_sparse_404_str(::std::string* sparse_404_str);

  // optional string sparse_405_str = 417;
  inline bool has_sparse_405_str() const;
  inline void clear_sparse_405_str();
  static const int kSparse405StrFieldNumber = 417;
  inline const ::std::string& sparse_405_str() const;
  inline void set_sparse_405_str(const ::std::string& value);
  inline void set_sparse_405_str(const char* value);
  inline void set_sparse_405_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_405_str();
  inline ::std::string* release_sparse_405_str();
  inline void set_allocated_sparse_405_str(::std::string* sparse_405_str);

  // optional string sparse_406_str = 418;
  inline bool has_sparse_406_str() const;
  inline void clear_sparse_406_str();
  static const int kSparse406StrFieldNumber = 418;
  inline const ::std::string& sparse_406_str() const;
  inline void set_sparse_406_str(const ::std::string& value);
  inline void set_sparse_406_str(const char* value);
  inline void set_sparse_406_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_406_str();
  inline ::std::string* release_sparse_406_str();
  inline void set_allocated_sparse_406_str(::std::string* sparse_406_str);

  // optional string sparse_407_str = 419;
  inline bool has_sparse_407_str() const;
  inline void clear_sparse_407_str();
  static const int kSparse407StrFieldNumber = 419;
  inline const ::std::string& sparse_407_str() const;
  inline void set_sparse_407_str(const ::std::string& value);
  inline void set_sparse_407_str(const char* value);
  inline void set_sparse_407_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_407_str();
  inline ::std::string* release_sparse_407_str();
  inline void set_allocated_sparse_407_str(::std::string* sparse_407_str);

  // optional string sparse_408_str = 420;
  inline bool has_sparse_408_str() const;
  inline void clear_sparse_408_str();
  static const int kSparse408StrFieldNumber = 420;
  inline const ::std::string& sparse_408_str() const;
  inline void set_sparse_408_str(const ::std::string& value);
  inline void set_sparse_408_str(const char* value);
  inline void set_sparse_408_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_408_str();
  inline ::std::string* release_sparse_408_str();
  inline void set_allocated_sparse_408_str(::std::string* sparse_408_str);

  // optional string sparse_409_str = 421;
  inline bool has_sparse_409_str() const;
  inline void clear_sparse_409_str();
  static const int kSparse409StrFieldNumber = 421;
  inline const ::std::string& sparse_409_str() const;
  inline void set_sparse_409_str(const ::std::string& value);
  inline void set_sparse_409_str(const char* value);
  inline void set_sparse_409_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_409_str();
  inline ::std::string* release_sparse_409_str();
  inline void set_allocated_sparse_409_str(::std::string* sparse_409_str);

  // optional string sparse_410_str = 422;
  inline bool has_sparse_410_str() const;
  inline void clear_sparse_410_str();
  static const int kSparse410StrFieldNumber = 422;
  inline const ::std::string& sparse_410_str() const;
  inline void set_sparse_410_str(const ::std::string& value);
  inline void set_sparse_410_str(const char* value);
  inline void set_sparse_410_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_410_str();
  inline ::std::string* release_sparse_410_str();
  inline void set_allocated_sparse_410_str(::std::string* sparse_410_str);

  // optional string sparse_411_str = 423;
  inline bool has_sparse_411_str() const;
  inline void clear_sparse_411_str();
  static const int kSparse411StrFieldNumber = 423;
  inline const ::std::string& sparse_411_str() const;
  inline void set_sparse_411_str(const ::std::string& value);
  inline void set_sparse_411_str(const char* value);
  inline void set_sparse_411_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_411_str();
  inline ::std::string* release_sparse_411_str();
  inline void set_allocated_sparse_411_str(::std::string* sparse_411_str);

  // optional string sparse_412_str = 424;
  inline bool has_sparse_412_str() const;
  inline void clear_sparse_412_str();
  static const int kSparse412StrFieldNumber = 424;
  inline const ::std::string& sparse_412_str() const;
  inline void set_sparse_412_str(const ::std::string& value);
  inline void set_sparse_412_str(const char* value);
  inline void set_sparse_412_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_412_str();
  inline ::std::string* release_sparse_412_str();
  inline void set_allocated_sparse_412_str(::std::string* sparse_412_str);

  // optional string sparse_413_str = 425;
  inline bool has_sparse_413_str() const;
  inline void clear_sparse_413_str();
  static const int kSparse413StrFieldNumber = 425;
  inline const ::std::string& sparse_413_str() const;
  inline void set_sparse_413_str(const ::std::string& value);
  inline void set_sparse_413_str(const char* value);
  inline void set_sparse_413_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_413_str();
  inline ::std::string* release_sparse_413_str();
  inline void set_allocated_sparse_413_str(::std::string* sparse_413_str);

  // optional string sparse_414_str = 426;
  inline bool has_sparse_414_str() const;
  inline void clear_sparse_414_str();
  static const int kSparse414StrFieldNumber = 426;
  inline const ::std::string& sparse_414_str() const;
  inline void set_sparse_414_str(const ::std::string& value);
  inline void set_sparse_414_str(const char* value);
  inline void set_sparse_414_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_414_str();
  inline ::std::string* release_sparse_414_str();
  inline void set_allocated_sparse_414_str(::std::string* sparse_414_str);

  // optional string sparse_415_str = 427;
  inline bool has_sparse_415_str() const;
  inline void clear_sparse_415_str();
  static const int kSparse415StrFieldNumber = 427;
  inline const ::std::string& sparse_415_str() const;
  inline void set_sparse_415_str(const ::std::string& value);
  inline void set_sparse_415_str(const char* value);
  inline void set_sparse_415_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_415_str();
  inline ::std::string* release_sparse_415_str();
  inline void set_allocated_sparse_415_str(::std::string* sparse_415_str);

  // optional string sparse_416_str = 428;
  inline bool has_sparse_416_str() const;
  inline void clear_sparse_416_str();
  static const int kSparse416StrFieldNumber = 428;
  inline const ::std::string& sparse_416_str() const;
  inline void set_sparse_416_str(const ::std::string& value);
  inline void set_sparse_416_str(const char* value);
  inline void set_sparse_416_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_416_str();
  inline ::std::string* release_sparse_416_str();
  inline void set_allocated_sparse_416_str(::std::string* sparse_416_str);

  // optional string sparse_417_str = 429;
  inline bool has_sparse_417_str() const;
  inline void clear_sparse_417_str();
  static const int kSparse417StrFieldNumber = 429;
  inline const ::std::string& sparse_417_str() const;
  inline void set_sparse_417_str(const ::std::string& value);
  inline void set_sparse_417_str(const char* value);
  inline void set_sparse_417_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_417_str();
  inline ::std::string* release_sparse_417_str();
  inline void set_allocated_sparse_417_str(::std::string* sparse_417_str);

  // optional string sparse_418_str = 430;
  inline bool has_sparse_418_str() const;
  inline void clear_sparse_418_str();
  static const int kSparse418StrFieldNumber = 430;
  inline const ::std::string& sparse_418_str() const;
  inline void set_sparse_418_str(const ::std::string& value);
  inline void set_sparse_418_str(const char* value);
  inline void set_sparse_418_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_418_str();
  inline ::std::string* release_sparse_418_str();
  inline void set_allocated_sparse_418_str(::std::string* sparse_418_str);

  // optional string sparse_419_str = 431;
  inline bool has_sparse_419_str() const;
  inline void clear_sparse_419_str();
  static const int kSparse419StrFieldNumber = 431;
  inline const ::std::string& sparse_419_str() const;
  inline void set_sparse_419_str(const ::std::string& value);
  inline void set_sparse_419_str(const char* value);
  inline void set_sparse_419_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_419_str();
  inline ::std::string* release_sparse_419_str();
  inline void set_allocated_sparse_419_str(::std::string* sparse_419_str);

  // optional string sparse_420_str = 432;
  inline bool has_sparse_420_str() const;
  inline void clear_sparse_420_str();
  static const int kSparse420StrFieldNumber = 432;
  inline const ::std::string& sparse_420_str() const;
  inline void set_sparse_420_str(const ::std::string& value);
  inline void set_sparse_420_str(const char* value);
  inline void set_sparse_420_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_420_str();
  inline ::std::string* release_sparse_420_str();
  inline void set_allocated_sparse_420_str(::std::string* sparse_420_str);

  // optional string sparse_421_str = 433;
  inline bool has_sparse_421_str() const;
  inline void clear_sparse_421_str();
  static const int kSparse421StrFieldNumber = 433;
  inline const ::std::string& sparse_421_str() const;
  inline void set_sparse_421_str(const ::std::string& value);
  inline void set_sparse_421_str(const char* value);
  inline void set_sparse_421_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_421_str();
  inline ::std::string* release_sparse_421_str();
  inline void set_allocated_sparse_421_str(::std::string* sparse_421_str);

  // optional string sparse_422_str = 434;
  inline bool has_sparse_422_str() const;
  inline void clear_sparse_422_str();
  static const int kSparse422StrFieldNumber = 434;
  inline const ::std::string& sparse_422_str() const;
  inline void set_sparse_422_str(const ::std::string& value);
  inline void set_sparse_422_str(const char* value);
  inline void set_sparse_422_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_422_str();
  inline ::std::string* release_sparse_422_str();
  inline void set_allocated_sparse_422_str(::std::string* sparse_422_str);

  // optional string sparse_423_str = 435;
  inline bool has_sparse_423_str() const;
  inline void clear_sparse_423_str();
  static const int kSparse423StrFieldNumber = 435;
  inline const ::std::string& sparse_423_str() const;
  inline void set_sparse_423_str(const ::std::string& value);
  inline void set_sparse_423_str(const char* value);
  inline void set_sparse_423_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_423_str();
  inline ::std::string* release_sparse_423_str();
  inline void set_allocated_sparse_423_str(::std::string* sparse_423_str);

  // optional string sparse_424_str = 436;
  inline bool has_sparse_424_str() const;
  inline void clear_sparse_424_str();
  static const int kSparse424StrFieldNumber = 436;
  inline const ::std::string& sparse_424_str() const;
  inline void set_sparse_424_str(const ::std::string& value);
  inline void set_sparse_424_str(const char* value);
  inline void set_sparse_424_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_424_str();
  inline ::std::string* release_sparse_424_str();
  inline void set_allocated_sparse_424_str(::std::string* sparse_424_str);

  // optional string sparse_425_str = 437;
  inline bool has_sparse_425_str() const;
  inline void clear_sparse_425_str();
  static const int kSparse425StrFieldNumber = 437;
  inline const ::std::string& sparse_425_str() const;
  inline void set_sparse_425_str(const ::std::string& value);
  inline void set_sparse_425_str(const char* value);
  inline void set_sparse_425_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_425_str();
  inline ::std::string* release_sparse_425_str();
  inline void set_allocated_sparse_425_str(::std::string* sparse_425_str);

  // optional string sparse_426_str = 438;
  inline bool has_sparse_426_str() const;
  inline void clear_sparse_426_str();
  static const int kSparse426StrFieldNumber = 438;
  inline const ::std::string& sparse_426_str() const;
  inline void set_sparse_426_str(const ::std::string& value);
  inline void set_sparse_426_str(const char* value);
  inline void set_sparse_426_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_426_str();
  inline ::std::string* release_sparse_426_str();
  inline void set_allocated_sparse_426_str(::std::string* sparse_426_str);

  // optional string sparse_427_str = 439;
  inline bool has_sparse_427_str() const;
  inline void clear_sparse_427_str();
  static const int kSparse427StrFieldNumber = 439;
  inline const ::std::string& sparse_427_str() const;
  inline void set_sparse_427_str(const ::std::string& value);
  inline void set_sparse_427_str(const char* value);
  inline void set_sparse_427_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_427_str();
  inline ::std::string* release_sparse_427_str();
  inline void set_allocated_sparse_427_str(::std::string* sparse_427_str);

  // optional string sparse_428_str = 440;
  inline bool has_sparse_428_str() const;
  inline void clear_sparse_428_str();
  static const int kSparse428StrFieldNumber = 440;
  inline const ::std::string& sparse_428_str() const;
  inline void set_sparse_428_str(const ::std::string& value);
  inline void set_sparse_428_str(const char* value);
  inline void set_sparse_428_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_428_str();
  inline ::std::string* release_sparse_428_str();
  inline void set_allocated_sparse_428_str(::std::string* sparse_428_str);

  // optional string sparse_429_str = 441;
  inline bool has_sparse_429_str() const;
  inline void clear_sparse_429_str();
  static const int kSparse429StrFieldNumber = 441;
  inline const ::std::string& sparse_429_str() const;
  inline void set_sparse_429_str(const ::std::string& value);
  inline void set_sparse_429_str(const char* value);
  inline void set_sparse_429_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_429_str();
  inline ::std::string* release_sparse_429_str();
  inline void set_allocated_sparse_429_str(::std::string* sparse_429_str);

  // optional string sparse_430_str = 442;
  inline bool has_sparse_430_str() const;
  inline void clear_sparse_430_str();
  static const int kSparse430StrFieldNumber = 442;
  inline const ::std::string& sparse_430_str() const;
  inline void set_sparse_430_str(const ::std::string& value);
  inline void set_sparse_430_str(const char* value);
  inline void set_sparse_430_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_430_str();
  inline ::std::string* release_sparse_430_str();
  inline void set_allocated_sparse_430_str(::std::string* sparse_430_str);

  // optional string sparse_431_str = 443;
  inline bool has_sparse_431_str() const;
  inline void clear_sparse_431_str();
  static const int kSparse431StrFieldNumber = 443;
  inline const ::std::string& sparse_431_str() const;
  inline void set_sparse_431_str(const ::std::string& value);
  inline void set_sparse_431_str(const char* value);
  inline void set_sparse_431_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_431_str();
  inline ::std::string* release_sparse_431_str();
  inline void set_allocated_sparse_431_str(::std::string* sparse_431_str);

  // optional string sparse_432_str = 444;
  inline bool has_sparse_432_str() const;
  inline void clear_sparse_432_str();
  static const int kSparse432StrFieldNumber = 444;
  inline const ::std::string& sparse_432_str() const;
  inline void set_sparse_432_str(const ::std::string& value);
  inline void set_sparse_432_str(const char* value);
  inline void set_sparse_432_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_432_str();
  inline ::std::string* release_sparse_432_str();
  inline void set_allocated_sparse_432_str(::std::string* sparse_432_str);

  // optional string sparse_433_str = 445;
  inline bool has_sparse_433_str() const;
  inline void clear_sparse_433_str();
  static const int kSparse433StrFieldNumber = 445;
  inline const ::std::string& sparse_433_str() const;
  inline void set_sparse_433_str(const ::std::string& value);
  inline void set_sparse_433_str(const char* value);
  inline void set_sparse_433_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_433_str();
  inline ::std::string* release_sparse_433_str();
  inline void set_allocated_sparse_433_str(::std::string* sparse_433_str);

  // optional string sparse_434_str = 446;
  inline bool has_sparse_434_str() const;
  inline void clear_sparse_434_str();
  static const int kSparse434StrFieldNumber = 446;
  inline const ::std::string& sparse_434_str() const;
  inline void set_sparse_434_str(const ::std::string& value);
  inline void set_sparse_434_str(const char* value);
  inline void set_sparse_434_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_434_str();
  inline ::std::string* release_sparse_434_str();
  inline void set_allocated_sparse_434_str(::std::string* sparse_434_str);

  // optional string sparse_435_str = 447;
  inline bool has_sparse_435_str() const;
  inline void clear_sparse_435_str();
  static const int kSparse435StrFieldNumber = 447;
  inline const ::std::string& sparse_435_str() const;
  inline void set_sparse_435_str(const ::std::string& value);
  inline void set_sparse_435_str(const char* value);
  inline void set_sparse_435_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_435_str();
  inline ::std::string* release_sparse_435_str();
  inline void set_allocated_sparse_435_str(::std::string* sparse_435_str);

  // optional string sparse_436_str = 448;
  inline bool has_sparse_436_str() const;
  inline void clear_sparse_436_str();
  static const int kSparse436StrFieldNumber = 448;
  inline const ::std::string& sparse_436_str() const;
  inline void set_sparse_436_str(const ::std::string& value);
  inline void set_sparse_436_str(const char* value);
  inline void set_sparse_436_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_436_str();
  inline ::std::string* release_sparse_436_str();
  inline void set_allocated_sparse_436_str(::std::string* sparse_436_str);

  // optional string sparse_437_str = 449;
  inline bool has_sparse_437_str() const;
  inline void clear_sparse_437_str();
  static const int kSparse437StrFieldNumber = 449;
  inline const ::std::string& sparse_437_str() const;
  inline void set_sparse_437_str(const ::std::string& value);
  inline void set_sparse_437_str(const char* value);
  inline void set_sparse_437_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_437_str();
  inline ::std::string* release_sparse_437_str();
  inline void set_allocated_sparse_437_str(::std::string* sparse_437_str);

  // optional string sparse_438_str = 450;
  inline bool has_sparse_438_str() const;
  inline void clear_sparse_438_str();
  static const int kSparse438StrFieldNumber = 450;
  inline const ::std::string& sparse_438_str() const;
  inline void set_sparse_438_str(const ::std::string& value);
  inline void set_sparse_438_str(const char* value);
  inline void set_sparse_438_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_438_str();
  inline ::std::string* release_sparse_438_str();
  inline void set_allocated_sparse_438_str(::std::string* sparse_438_str);

  // optional string sparse_439_str = 451;
  inline bool has_sparse_439_str() const;
  inline void clear_sparse_439_str();
  static const int kSparse439StrFieldNumber = 451;
  inline const ::std::string& sparse_439_str() const;
  inline void set_sparse_439_str(const ::std::string& value);
  inline void set_sparse_439_str(const char* value);
  inline void set_sparse_439_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_439_str();
  inline ::std::string* release_sparse_439_str();
  inline void set_allocated_sparse_439_str(::std::string* sparse_439_str);

  // optional string sparse_440_str = 452;
  inline bool has_sparse_440_str() const;
  inline void clear_sparse_440_str();
  static const int kSparse440StrFieldNumber = 452;
  inline const ::std::string& sparse_440_str() const;
  inline void set_sparse_440_str(const ::std::string& value);
  inline void set_sparse_440_str(const char* value);
  inline void set_sparse_440_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_440_str();
  inline ::std::string* release_sparse_440_str();
  inline void set_allocated_sparse_440_str(::std::string* sparse_440_str);

  // optional string sparse_441_str = 453;
  inline bool has_sparse_441_str() const;
  inline void clear_sparse_441_str();
  static const int kSparse441StrFieldNumber = 453;
  inline const ::std::string& sparse_441_str() const;
  inline void set_sparse_441_str(const ::std::string& value);
  inline void set_sparse_441_str(const char* value);
  inline void set_sparse_441_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_441_str();
  inline ::std::string* release_sparse_441_str();
  inline void set_allocated_sparse_441_str(::std::string* sparse_441_str);

  // optional string sparse_442_str = 454;
  inline bool has_sparse_442_str() const;
  inline void clear_sparse_442_str();
  static const int kSparse442StrFieldNumber = 454;
  inline const ::std::string& sparse_442_str() const;
  inline void set_sparse_442_str(const ::std::string& value);
  inline void set_sparse_442_str(const char* value);
  inline void set_sparse_442_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_442_str();
  inline ::std::string* release_sparse_442_str();
  inline void set_allocated_sparse_442_str(::std::string* sparse_442_str);

  // optional string sparse_443_str = 455;
  inline bool has_sparse_443_str() const;
  inline void clear_sparse_443_str();
  static const int kSparse443StrFieldNumber = 455;
  inline const ::std::string& sparse_443_str() const;
  inline void set_sparse_443_str(const ::std::string& value);
  inline void set_sparse_443_str(const char* value);
  inline void set_sparse_443_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_443_str();
  inline ::std::string* release_sparse_443_str();
  inline void set_allocated_sparse_443_str(::std::string* sparse_443_str);

  // optional string sparse_444_str = 456;
  inline bool has_sparse_444_str() const;
  inline void clear_sparse_444_str();
  static const int kSparse444StrFieldNumber = 456;
  inline const ::std::string& sparse_444_str() const;
  inline void set_sparse_444_str(const ::std::string& value);
  inline void set_sparse_444_str(const char* value);
  inline void set_sparse_444_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_444_str();
  inline ::std::string* release_sparse_444_str();
  inline void set_allocated_sparse_444_str(::std::string* sparse_444_str);

  // optional string sparse_445_str = 457;
  inline bool has_sparse_445_str() const;
  inline void clear_sparse_445_str();
  static const int kSparse445StrFieldNumber = 457;
  inline const ::std::string& sparse_445_str() const;
  inline void set_sparse_445_str(const ::std::string& value);
  inline void set_sparse_445_str(const char* value);
  inline void set_sparse_445_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_445_str();
  inline ::std::string* release_sparse_445_str();
  inline void set_allocated_sparse_445_str(::std::string* sparse_445_str);

  // optional string sparse_446_str = 458;
  inline bool has_sparse_446_str() const;
  inline void clear_sparse_446_str();
  static const int kSparse446StrFieldNumber = 458;
  inline const ::std::string& sparse_446_str() const;
  inline void set_sparse_446_str(const ::std::string& value);
  inline void set_sparse_446_str(const char* value);
  inline void set_sparse_446_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_446_str();
  inline ::std::string* release_sparse_446_str();
  inline void set_allocated_sparse_446_str(::std::string* sparse_446_str);

  // optional string sparse_447_str = 459;
  inline bool has_sparse_447_str() const;
  inline void clear_sparse_447_str();
  static const int kSparse447StrFieldNumber = 459;
  inline const ::std::string& sparse_447_str() const;
  inline void set_sparse_447_str(const ::std::string& value);
  inline void set_sparse_447_str(const char* value);
  inline void set_sparse_447_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_447_str();
  inline ::std::string* release_sparse_447_str();
  inline void set_allocated_sparse_447_str(::std::string* sparse_447_str);

  // optional string sparse_448_str = 460;
  inline bool has_sparse_448_str() const;
  inline void clear_sparse_448_str();
  static const int kSparse448StrFieldNumber = 460;
  inline const ::std::string& sparse_448_str() const;
  inline void set_sparse_448_str(const ::std::string& value);
  inline void set_sparse_448_str(const char* value);
  inline void set_sparse_448_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_448_str();
  inline ::std::string* release_sparse_448_str();
  inline void set_allocated_sparse_448_str(::std::string* sparse_448_str);

  // optional string sparse_449_str = 461;
  inline bool has_sparse_449_str() const;
  inline void clear_sparse_449_str();
  static const int kSparse449StrFieldNumber = 461;
  inline const ::std::string& sparse_449_str() const;
  inline void set_sparse_449_str(const ::std::string& value);
  inline void set_sparse_449_str(const char* value);
  inline void set_sparse_449_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_449_str();
  inline ::std::string* release_sparse_449_str();
  inline void set_allocated_sparse_449_str(::std::string* sparse_449_str);

  // optional string sparse_450_str = 462;
  inline bool has_sparse_450_str() const;
  inline void clear_sparse_450_str();
  static const int kSparse450StrFieldNumber = 462;
  inline const ::std::string& sparse_450_str() const;
  inline void set_sparse_450_str(const ::std::string& value);
  inline void set_sparse_450_str(const char* value);
  inline void set_sparse_450_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_450_str();
  inline ::std::string* release_sparse_450_str();
  inline void set_allocated_sparse_450_str(::std::string* sparse_450_str);

  // optional string sparse_451_str = 463;
  inline bool has_sparse_451_str() const;
  inline void clear_sparse_451_str();
  static const int kSparse451StrFieldNumber = 463;
  inline const ::std::string& sparse_451_str() const;
  inline void set_sparse_451_str(const ::std::string& value);
  inline void set_sparse_451_str(const char* value);
  inline void set_sparse_451_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_451_str();
  inline ::std::string* release_sparse_451_str();
  inline void set_allocated_sparse_451_str(::std::string* sparse_451_str);

  // optional string sparse_452_str = 464;
  inline bool has_sparse_452_str() const;
  inline void clear_sparse_452_str();
  static const int kSparse452StrFieldNumber = 464;
  inline const ::std::string& sparse_452_str() const;
  inline void set_sparse_452_str(const ::std::string& value);
  inline void set_sparse_452_str(const char* value);
  inline void set_sparse_452_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_452_str();
  inline ::std::string* release_sparse_452_str();
  inline void set_allocated_sparse_452_str(::std::string* sparse_452_str);

  // optional string sparse_453_str = 465;
  inline bool has_sparse_453_str() const;
  inline void clear_sparse_453_str();
  static const int kSparse453StrFieldNumber = 465;
  inline const ::std::string& sparse_453_str() const;
  inline void set_sparse_453_str(const ::std::string& value);
  inline void set_sparse_453_str(const char* value);
  inline void set_sparse_453_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_453_str();
  inline ::std::string* release_sparse_453_str();
  inline void set_allocated_sparse_453_str(::std::string* sparse_453_str);

  // optional string sparse_454_str = 466;
  inline bool has_sparse_454_str() const;
  inline void clear_sparse_454_str();
  static const int kSparse454StrFieldNumber = 466;
  inline const ::std::string& sparse_454_str() const;
  inline void set_sparse_454_str(const ::std::string& value);
  inline void set_sparse_454_str(const char* value);
  inline void set_sparse_454_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_454_str();
  inline ::std::string* release_sparse_454_str();
  inline void set_allocated_sparse_454_str(::std::string* sparse_454_str);

  // optional string sparse_455_str = 467;
  inline bool has_sparse_455_str() const;
  inline void clear_sparse_455_str();
  static const int kSparse455StrFieldNumber = 467;
  inline const ::std::string& sparse_455_str() const;
  inline void set_sparse_455_str(const ::std::string& value);
  inline void set_sparse_455_str(const char* value);
  inline void set_sparse_455_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_455_str();
  inline ::std::string* release_sparse_455_str();
  inline void set_allocated_sparse_455_str(::std::string* sparse_455_str);

  // optional string sparse_456_str = 468;
  inline bool has_sparse_456_str() const;
  inline void clear_sparse_456_str();
  static const int kSparse456StrFieldNumber = 468;
  inline const ::std::string& sparse_456_str() const;
  inline void set_sparse_456_str(const ::std::string& value);
  inline void set_sparse_456_str(const char* value);
  inline void set_sparse_456_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_456_str();
  inline ::std::string* release_sparse_456_str();
  inline void set_allocated_sparse_456_str(::std::string* sparse_456_str);

  // optional string sparse_457_str = 469;
  inline bool has_sparse_457_str() const;
  inline void clear_sparse_457_str();
  static const int kSparse457StrFieldNumber = 469;
  inline const ::std::string& sparse_457_str() const;
  inline void set_sparse_457_str(const ::std::string& value);
  inline void set_sparse_457_str(const char* value);
  inline void set_sparse_457_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_457_str();
  inline ::std::string* release_sparse_457_str();
  inline void set_allocated_sparse_457_str(::std::string* sparse_457_str);

  // optional string sparse_458_str = 470;
  inline bool has_sparse_458_str() const;
  inline void clear_sparse_458_str();
  static const int kSparse458StrFieldNumber = 470;
  inline const ::std::string& sparse_458_str() const;
  inline void set_sparse_458_str(const ::std::string& value);
  inline void set_sparse_458_str(const char* value);
  inline void set_sparse_458_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_458_str();
  inline ::std::string* release_sparse_458_str();
  inline void set_allocated_sparse_458_str(::std::string* sparse_458_str);

  // optional string sparse_459_str = 471;
  inline bool has_sparse_459_str() const;
  inline void clear_sparse_459_str();
  static const int kSparse459StrFieldNumber = 471;
  inline const ::std::string& sparse_459_str() const;
  inline void set_sparse_459_str(const ::std::string& value);
  inline void set_sparse_459_str(const char* value);
  inline void set_sparse_459_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_459_str();
  inline ::std::string* release_sparse_459_str();
  inline void set_allocated_sparse_459_str(::std::string* sparse_459_str);

  // optional string sparse_460_str = 472;
  inline bool has_sparse_460_str() const;
  inline void clear_sparse_460_str();
  static const int kSparse460StrFieldNumber = 472;
  inline const ::std::string& sparse_460_str() const;
  inline void set_sparse_460_str(const ::std::string& value);
  inline void set_sparse_460_str(const char* value);
  inline void set_sparse_460_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_460_str();
  inline ::std::string* release_sparse_460_str();
  inline void set_allocated_sparse_460_str(::std::string* sparse_460_str);

  // optional string sparse_461_str = 473;
  inline bool has_sparse_461_str() const;
  inline void clear_sparse_461_str();
  static const int kSparse461StrFieldNumber = 473;
  inline const ::std::string& sparse_461_str() const;
  inline void set_sparse_461_str(const ::std::string& value);
  inline void set_sparse_461_str(const char* value);
  inline void set_sparse_461_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_461_str();
  inline ::std::string* release_sparse_461_str();
  inline void set_allocated_sparse_461_str(::std::string* sparse_461_str);

  // optional string sparse_462_str = 474;
  inline bool has_sparse_462_str() const;
  inline void clear_sparse_462_str();
  static const int kSparse462StrFieldNumber = 474;
  inline const ::std::string& sparse_462_str() const;
  inline void set_sparse_462_str(const ::std::string& value);
  inline void set_sparse_462_str(const char* value);
  inline void set_sparse_462_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_462_str();
  inline ::std::string* release_sparse_462_str();
  inline void set_allocated_sparse_462_str(::std::string* sparse_462_str);

  // optional string sparse_463_str = 475;
  inline bool has_sparse_463_str() const;
  inline void clear_sparse_463_str();
  static const int kSparse463StrFieldNumber = 475;
  inline const ::std::string& sparse_463_str() const;
  inline void set_sparse_463_str(const ::std::string& value);
  inline void set_sparse_463_str(const char* value);
  inline void set_sparse_463_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_463_str();
  inline ::std::string* release_sparse_463_str();
  inline void set_allocated_sparse_463_str(::std::string* sparse_463_str);

  // optional string sparse_464_str = 476;
  inline bool has_sparse_464_str() const;
  inline void clear_sparse_464_str();
  static const int kSparse464StrFieldNumber = 476;
  inline const ::std::string& sparse_464_str() const;
  inline void set_sparse_464_str(const ::std::string& value);
  inline void set_sparse_464_str(const char* value);
  inline void set_sparse_464_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_464_str();
  inline ::std::string* release_sparse_464_str();
  inline void set_allocated_sparse_464_str(::std::string* sparse_464_str);

  // optional string sparse_465_str = 477;
  inline bool has_sparse_465_str() const;
  inline void clear_sparse_465_str();
  static const int kSparse465StrFieldNumber = 477;
  inline const ::std::string& sparse_465_str() const;
  inline void set_sparse_465_str(const ::std::string& value);
  inline void set_sparse_465_str(const char* value);
  inline void set_sparse_465_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_465_str();
  inline ::std::string* release_sparse_465_str();
  inline void set_allocated_sparse_465_str(::std::string* sparse_465_str);

  // optional string sparse_466_str = 478;
  inline bool has_sparse_466_str() const;
  inline void clear_sparse_466_str();
  static const int kSparse466StrFieldNumber = 478;
  inline const ::std::string& sparse_466_str() const;
  inline void set_sparse_466_str(const ::std::string& value);
  inline void set_sparse_466_str(const char* value);
  inline void set_sparse_466_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_466_str();
  inline ::std::string* release_sparse_466_str();
  inline void set_allocated_sparse_466_str(::std::string* sparse_466_str);

  // optional string sparse_467_str = 479;
  inline bool has_sparse_467_str() const;
  inline void clear_sparse_467_str();
  static const int kSparse467StrFieldNumber = 479;
  inline const ::std::string& sparse_467_str() const;
  inline void set_sparse_467_str(const ::std::string& value);
  inline void set_sparse_467_str(const char* value);
  inline void set_sparse_467_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_467_str();
  inline ::std::string* release_sparse_467_str();
  inline void set_allocated_sparse_467_str(::std::string* sparse_467_str);

  // optional string sparse_468_str = 480;
  inline bool has_sparse_468_str() const;
  inline void clear_sparse_468_str();
  static const int kSparse468StrFieldNumber = 480;
  inline const ::std::string& sparse_468_str() const;
  inline void set_sparse_468_str(const ::std::string& value);
  inline void set_sparse_468_str(const char* value);
  inline void set_sparse_468_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_468_str();
  inline ::std::string* release_sparse_468_str();
  inline void set_allocated_sparse_468_str(::std::string* sparse_468_str);

  // optional string sparse_469_str = 481;
  inline bool has_sparse_469_str() const;
  inline void clear_sparse_469_str();
  static const int kSparse469StrFieldNumber = 481;
  inline const ::std::string& sparse_469_str() const;
  inline void set_sparse_469_str(const ::std::string& value);
  inline void set_sparse_469_str(const char* value);
  inline void set_sparse_469_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_469_str();
  inline ::std::string* release_sparse_469_str();
  inline void set_allocated_sparse_469_str(::std::string* sparse_469_str);

  // optional string sparse_470_str = 482;
  inline bool has_sparse_470_str() const;
  inline void clear_sparse_470_str();
  static const int kSparse470StrFieldNumber = 482;
  inline const ::std::string& sparse_470_str() const;
  inline void set_sparse_470_str(const ::std::string& value);
  inline void set_sparse_470_str(const char* value);
  inline void set_sparse_470_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_470_str();
  inline ::std::string* release_sparse_470_str();
  inline void set_allocated_sparse_470_str(::std::string* sparse_470_str);

  // optional string sparse_471_str = 483;
  inline bool has_sparse_471_str() const;
  inline void clear_sparse_471_str();
  static const int kSparse471StrFieldNumber = 483;
  inline const ::std::string& sparse_471_str() const;
  inline void set_sparse_471_str(const ::std::string& value);
  inline void set_sparse_471_str(const char* value);
  inline void set_sparse_471_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_471_str();
  inline ::std::string* release_sparse_471_str();
  inline void set_allocated_sparse_471_str(::std::string* sparse_471_str);

  // optional string sparse_472_str = 484;
  inline bool has_sparse_472_str() const;
  inline void clear_sparse_472_str();
  static const int kSparse472StrFieldNumber = 484;
  inline const ::std::string& sparse_472_str() const;
  inline void set_sparse_472_str(const ::std::string& value);
  inline void set_sparse_472_str(const char* value);
  inline void set_sparse_472_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_472_str();
  inline ::std::string* release_sparse_472_str();
  inline void set_allocated_sparse_472_str(::std::string* sparse_472_str);

  // optional string sparse_473_str = 485;
  inline bool has_sparse_473_str() const;
  inline void clear_sparse_473_str();
  static const int kSparse473StrFieldNumber = 485;
  inline const ::std::string& sparse_473_str() const;
  inline void set_sparse_473_str(const ::std::string& value);
  inline void set_sparse_473_str(const char* value);
  inline void set_sparse_473_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_473_str();
  inline ::std::string* release_sparse_473_str();
  inline void set_allocated_sparse_473_str(::std::string* sparse_473_str);

  // optional string sparse_474_str = 486;
  inline bool has_sparse_474_str() const;
  inline void clear_sparse_474_str();
  static const int kSparse474StrFieldNumber = 486;
  inline const ::std::string& sparse_474_str() const;
  inline void set_sparse_474_str(const ::std::string& value);
  inline void set_sparse_474_str(const char* value);
  inline void set_sparse_474_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_474_str();
  inline ::std::string* release_sparse_474_str();
  inline void set_allocated_sparse_474_str(::std::string* sparse_474_str);

  // optional string sparse_475_str = 487;
  inline bool has_sparse_475_str() const;
  inline void clear_sparse_475_str();
  static const int kSparse475StrFieldNumber = 487;
  inline const ::std::string& sparse_475_str() const;
  inline void set_sparse_475_str(const ::std::string& value);
  inline void set_sparse_475_str(const char* value);
  inline void set_sparse_475_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_475_str();
  inline ::std::string* release_sparse_475_str();
  inline void set_allocated_sparse_475_str(::std::string* sparse_475_str);

  // optional string sparse_476_str = 488;
  inline bool has_sparse_476_str() const;
  inline void clear_sparse_476_str();
  static const int kSparse476StrFieldNumber = 488;
  inline const ::std::string& sparse_476_str() const;
  inline void set_sparse_476_str(const ::std::string& value);
  inline void set_sparse_476_str(const char* value);
  inline void set_sparse_476_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_476_str();
  inline ::std::string* release_sparse_476_str();
  inline void set_allocated_sparse_476_str(::std::string* sparse_476_str);

  // optional string sparse_477_str = 489;
  inline bool has_sparse_477_str() const;
  inline void clear_sparse_477_str();
  static const int kSparse477StrFieldNumber = 489;
  inline const ::std::string& sparse_477_str() const;
  inline void set_sparse_477_str(const ::std::string& value);
  inline void set_sparse_477_str(const char* value);
  inline void set_sparse_477_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_477_str();
  inline ::std::string* release_sparse_477_str();
  inline void set_allocated_sparse_477_str(::std::string* sparse_477_str);

  // optional string sparse_478_str = 490;
  inline bool has_sparse_478_str() const;
  inline void clear_sparse_478_str();
  static const int kSparse478StrFieldNumber = 490;
  inline const ::std::string& sparse_478_str() const;
  inline void set_sparse_478_str(const ::std::string& value);
  inline void set_sparse_478_str(const char* value);
  inline void set_sparse_478_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_478_str();
  inline ::std::string* release_sparse_478_str();
  inline void set_allocated_sparse_478_str(::std::string* sparse_478_str);

  // optional string sparse_479_str = 491;
  inline bool has_sparse_479_str() const;
  inline void clear_sparse_479_str();
  static const int kSparse479StrFieldNumber = 491;
  inline const ::std::string& sparse_479_str() const;
  inline void set_sparse_479_str(const ::std::string& value);
  inline void set_sparse_479_str(const char* value);
  inline void set_sparse_479_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_479_str();
  inline ::std::string* release_sparse_479_str();
  inline void set_allocated_sparse_479_str(::std::string* sparse_479_str);

  // optional string sparse_480_str = 492;
  inline bool has_sparse_480_str() const;
  inline void clear_sparse_480_str();
  static const int kSparse480StrFieldNumber = 492;
  inline const ::std::string& sparse_480_str() const;
  inline void set_sparse_480_str(const ::std::string& value);
  inline void set_sparse_480_str(const char* value);
  inline void set_sparse_480_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_480_str();
  inline ::std::string* release_sparse_480_str();
  inline void set_allocated_sparse_480_str(::std::string* sparse_480_str);

  // optional string sparse_481_str = 493;
  inline bool has_sparse_481_str() const;
  inline void clear_sparse_481_str();
  static const int kSparse481StrFieldNumber = 493;
  inline const ::std::string& sparse_481_str() const;
  inline void set_sparse_481_str(const ::std::string& value);
  inline void set_sparse_481_str(const char* value);
  inline void set_sparse_481_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_481_str();
  inline ::std::string* release_sparse_481_str();
  inline void set_allocated_sparse_481_str(::std::string* sparse_481_str);

  // optional string sparse_482_str = 494;
  inline bool has_sparse_482_str() const;
  inline void clear_sparse_482_str();
  static const int kSparse482StrFieldNumber = 494;
  inline const ::std::string& sparse_482_str() const;
  inline void set_sparse_482_str(const ::std::string& value);
  inline void set_sparse_482_str(const char* value);
  inline void set_sparse_482_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_482_str();
  inline ::std::string* release_sparse_482_str();
  inline void set_allocated_sparse_482_str(::std::string* sparse_482_str);

  // optional string sparse_483_str = 495;
  inline bool has_sparse_483_str() const;
  inline void clear_sparse_483_str();
  static const int kSparse483StrFieldNumber = 495;
  inline const ::std::string& sparse_483_str() const;
  inline void set_sparse_483_str(const ::std::string& value);
  inline void set_sparse_483_str(const char* value);
  inline void set_sparse_483_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_483_str();
  inline ::std::string* release_sparse_483_str();
  inline void set_allocated_sparse_483_str(::std::string* sparse_483_str);

  // optional string sparse_484_str = 496;
  inline bool has_sparse_484_str() const;
  inline void clear_sparse_484_str();
  static const int kSparse484StrFieldNumber = 496;
  inline const ::std::string& sparse_484_str() const;
  inline void set_sparse_484_str(const ::std::string& value);
  inline void set_sparse_484_str(const char* value);
  inline void set_sparse_484_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_484_str();
  inline ::std::string* release_sparse_484_str();
  inline void set_allocated_sparse_484_str(::std::string* sparse_484_str);

  // optional string sparse_485_str = 497;
  inline bool has_sparse_485_str() const;
  inline void clear_sparse_485_str();
  static const int kSparse485StrFieldNumber = 497;
  inline const ::std::string& sparse_485_str() const;
  inline void set_sparse_485_str(const ::std::string& value);
  inline void set_sparse_485_str(const char* value);
  inline void set_sparse_485_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_485_str();
  inline ::std::string* release_sparse_485_str();
  inline void set_allocated_sparse_485_str(::std::string* sparse_485_str);

  // optional string sparse_486_str = 498;
  inline bool has_sparse_486_str() const;
  inline void clear_sparse_486_str();
  static const int kSparse486StrFieldNumber = 498;
  inline const ::std::string& sparse_486_str() const;
  inline void set_sparse_486_str(const ::std::string& value);
  inline void set_sparse_486_str(const char* value);
  inline void set_sparse_486_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_486_str();
  inline ::std::string* release_sparse_486_str();
  inline void set_allocated_sparse_486_str(::std::string* sparse_486_str);

  // optional string sparse_487_str = 499;
  inline bool has_sparse_487_str() const;
  inline void clear_sparse_487_str();
  static const int kSparse487StrFieldNumber = 499;
  inline const ::std::string& sparse_487_str() const;
  inline void set_sparse_487_str(const ::std::string& value);
  inline void set_sparse_487_str(const char* value);
  inline void set_sparse_487_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_487_str();
  inline ::std::string* release_sparse_487_str();
  inline void set_allocated_sparse_487_str(::std::string* sparse_487_str);

  // optional string sparse_488_str = 500;
  inline bool has_sparse_488_str() const;
  inline void clear_sparse_488_str();
  static const int kSparse488StrFieldNumber = 500;
  inline const ::std::string& sparse_488_str() const;
  inline void set_sparse_488_str(const ::std::string& value);
  inline void set_sparse_488_str(const char* value);
  inline void set_sparse_488_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_488_str();
  inline ::std::string* release_sparse_488_str();
  inline void set_allocated_sparse_488_str(::std::string* sparse_488_str);

  // optional string sparse_489_str = 501;
  inline bool has_sparse_489_str() const;
  inline void clear_sparse_489_str();
  static const int kSparse489StrFieldNumber = 501;
  inline const ::std::string& sparse_489_str() const;
  inline void set_sparse_489_str(const ::std::string& value);
  inline void set_sparse_489_str(const char* value);
  inline void set_sparse_489_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_489_str();
  inline ::std::string* release_sparse_489_str();
  inline void set_allocated_sparse_489_str(::std::string* sparse_489_str);

  // optional string sparse_490_str = 502;
  inline bool has_sparse_490_str() const;
  inline void clear_sparse_490_str();
  static const int kSparse490StrFieldNumber = 502;
  inline const ::std::string& sparse_490_str() const;
  inline void set_sparse_490_str(const ::std::string& value);
  inline void set_sparse_490_str(const char* value);
  inline void set_sparse_490_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_490_str();
  inline ::std::string* release_sparse_490_str();
  inline void set_allocated_sparse_490_str(::std::string* sparse_490_str);

  // optional string sparse_491_str = 503;
  inline bool has_sparse_491_str() const;
  inline void clear_sparse_491_str();
  static const int kSparse491StrFieldNumber = 503;
  inline const ::std::string& sparse_491_str() const;
  inline void set_sparse_491_str(const ::std::string& value);
  inline void set_sparse_491_str(const char* value);
  inline void set_sparse_491_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_491_str();
  inline ::std::string* release_sparse_491_str();
  inline void set_allocated_sparse_491_str(::std::string* sparse_491_str);

  // optional string sparse_492_str = 504;
  inline bool has_sparse_492_str() const;
  inline void clear_sparse_492_str();
  static const int kSparse492StrFieldNumber = 504;
  inline const ::std::string& sparse_492_str() const;
  inline void set_sparse_492_str(const ::std::string& value);
  inline void set_sparse_492_str(const char* value);
  inline void set_sparse_492_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_492_str();
  inline ::std::string* release_sparse_492_str();
  inline void set_allocated_sparse_492_str(::std::string* sparse_492_str);

  // optional string sparse_493_str = 505;
  inline bool has_sparse_493_str() const;
  inline void clear_sparse_493_str();
  static const int kSparse493StrFieldNumber = 505;
  inline const ::std::string& sparse_493_str() const;
  inline void set_sparse_493_str(const ::std::string& value);
  inline void set_sparse_493_str(const char* value);
  inline void set_sparse_493_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_493_str();
  inline ::std::string* release_sparse_493_str();
  inline void set_allocated_sparse_493_str(::std::string* sparse_493_str);

  // optional string sparse_494_str = 506;
  inline bool has_sparse_494_str() const;
  inline void clear_sparse_494_str();
  static const int kSparse494StrFieldNumber = 506;
  inline const ::std::string& sparse_494_str() const;
  inline void set_sparse_494_str(const ::std::string& value);
  inline void set_sparse_494_str(const char* value);
  inline void set_sparse_494_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_494_str();
  inline ::std::string* release_sparse_494_str();
  inline void set_allocated_sparse_494_str(::std::string* sparse_494_str);

  // optional string sparse_495_str = 507;
  inline bool has_sparse_495_str() const;
  inline void clear_sparse_495_str();
  static const int kSparse495StrFieldNumber = 507;
  inline const ::std::string& sparse_495_str() const;
  inline void set_sparse_495_str(const ::std::string& value);
  inline void set_sparse_495_str(const char* value);
  inline void set_sparse_495_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_495_str();
  inline ::std::string* release_sparse_495_str();
  inline void set_allocated_sparse_495_str(::std::string* sparse_495_str);

  // optional string sparse_496_str = 508;
  inline bool has_sparse_496_str() const;
  inline void clear_sparse_496_str();
  static const int kSparse496StrFieldNumber = 508;
  inline const ::std::string& sparse_496_str() const;
  inline void set_sparse_496_str(const ::std::string& value);
  inline void set_sparse_496_str(const char* value);
  inline void set_sparse_496_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_496_str();
  inline ::std::string* release_sparse_496_str();
  inline void set_allocated_sparse_496_str(::std::string* sparse_496_str);

  // optional string sparse_497_str = 509;
  inline bool has_sparse_497_str() const;
  inline void clear_sparse_497_str();
  static const int kSparse497StrFieldNumber = 509;
  inline const ::std::string& sparse_497_str() const;
  inline void set_sparse_497_str(const ::std::string& value);
  inline void set_sparse_497_str(const char* value);
  inline void set_sparse_497_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_497_str();
  inline ::std::string* release_sparse_497_str();
  inline void set_allocated_sparse_497_str(::std::string* sparse_497_str);

  // optional string sparse_498_str = 510;
  inline bool has_sparse_498_str() const;
  inline void clear_sparse_498_str();
  static const int kSparse498StrFieldNumber = 510;
  inline const ::std::string& sparse_498_str() const;
  inline void set_sparse_498_str(const ::std::string& value);
  inline void set_sparse_498_str(const char* value);
  inline void set_sparse_498_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_498_str();
  inline ::std::string* release_sparse_498_str();
  inline void set_allocated_sparse_498_str(::std::string* sparse_498_str);

  // optional string sparse_499_str = 511;
  inline bool has_sparse_499_str() const;
  inline void clear_sparse_499_str();
  static const int kSparse499StrFieldNumber = 511;
  inline const ::std::string& sparse_499_str() const;
  inline void set_sparse_499_str(const ::std::string& value);
  inline void set_sparse_499_str(const char* value);
  inline void set_sparse_499_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_499_str();
  inline ::std::string* release_sparse_499_str();
  inline void set_allocated_sparse_499_str(::std::string* sparse_499_str);

  // optional string sparse_500_str = 512;
  inline bool has_sparse_500_str() const;
  inline void clear_sparse_500_str();
  static const int kSparse500StrFieldNumber = 512;
  inline const ::std::string& sparse_500_str() const;
  inline void set_sparse_500_str(const ::std::string& value);
  inline void set_sparse_500_str(const char* value);
  inline void set_sparse_500_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_500_str();
  inline ::std::string* release_sparse_500_str();
  inline void set_allocated_sparse_500_str(::std::string* sparse_500_str);

  // optional string sparse_501_str = 513;
  inline bool has_sparse_501_str() const;
  inline void clear_sparse_501_str();
  static const int kSparse501StrFieldNumber = 513;
  inline const ::std::string& sparse_501_str() const;
  inline void set_sparse_501_str(const ::std::string& value);
  inline void set_sparse_501_str(const char* value);
  inline void set_sparse_501_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_501_str();
  inline ::std::string* release_sparse_501_str();
  inline void set_allocated_sparse_501_str(::std::string* sparse_501_str);

  // optional string sparse_502_str = 514;
  inline bool has_sparse_502_str() const;
  inline void clear_sparse_502_str();
  static const int kSparse502StrFieldNumber = 514;
  inline const ::std::string& sparse_502_str() const;
  inline void set_sparse_502_str(const ::std::string& value);
  inline void set_sparse_502_str(const char* value);
  inline void set_sparse_502_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_502_str();
  inline ::std::string* release_sparse_502_str();
  inline void set_allocated_sparse_502_str(::std::string* sparse_502_str);

  // optional string sparse_503_str = 515;
  inline bool has_sparse_503_str() const;
  inline void clear_sparse_503_str();
  static const int kSparse503StrFieldNumber = 515;
  inline const ::std::string& sparse_503_str() const;
  inline void set_sparse_503_str(const ::std::string& value);
  inline void set_sparse_503_str(const char* value);
  inline void set_sparse_503_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_503_str();
  inline ::std::string* release_sparse_503_str();
  inline void set_allocated_sparse_503_str(::std::string* sparse_503_str);

  // optional string sparse_504_str = 516;
  inline bool has_sparse_504_str() const;
  inline void clear_sparse_504_str();
  static const int kSparse504StrFieldNumber = 516;
  inline const ::std::string& sparse_504_str() const;
  inline void set_sparse_504_str(const ::std::string& value);
  inline void set_sparse_504_str(const char* value);
  inline void set_sparse_504_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_504_str();
  inline ::std::string* release_sparse_504_str();
  inline void set_allocated_sparse_504_str(::std::string* sparse_504_str);

  // optional string sparse_505_str = 517;
  inline bool has_sparse_505_str() const;
  inline void clear_sparse_505_str();
  static const int kSparse505StrFieldNumber = 517;
  inline const ::std::string& sparse_505_str() const;
  inline void set_sparse_505_str(const ::std::string& value);
  inline void set_sparse_505_str(const char* value);
  inline void set_sparse_505_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_505_str();
  inline ::std::string* release_sparse_505_str();
  inline void set_allocated_sparse_505_str(::std::string* sparse_505_str);

  // optional string sparse_506_str = 518;
  inline bool has_sparse_506_str() const;
  inline void clear_sparse_506_str();
  static const int kSparse506StrFieldNumber = 518;
  inline const ::std::string& sparse_506_str() const;
  inline void set_sparse_506_str(const ::std::string& value);
  inline void set_sparse_506_str(const char* value);
  inline void set_sparse_506_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_506_str();
  inline ::std::string* release_sparse_506_str();
  inline void set_allocated_sparse_506_str(::std::string* sparse_506_str);

  // optional string sparse_507_str = 519;
  inline bool has_sparse_507_str() const;
  inline void clear_sparse_507_str();
  static const int kSparse507StrFieldNumber = 519;
  inline const ::std::string& sparse_507_str() const;
  inline void set_sparse_507_str(const ::std::string& value);
  inline void set_sparse_507_str(const char* value);
  inline void set_sparse_507_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_507_str();
  inline ::std::string* release_sparse_507_str();
  inline void set_allocated_sparse_507_str(::std::string* sparse_507_str);

  // optional string sparse_508_str = 520;
  inline bool has_sparse_508_str() const;
  inline void clear_sparse_508_str();
  static const int kSparse508StrFieldNumber = 520;
  inline const ::std::string& sparse_508_str() const;
  inline void set_sparse_508_str(const ::std::string& value);
  inline void set_sparse_508_str(const char* value);
  inline void set_sparse_508_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_508_str();
  inline ::std::string* release_sparse_508_str();
  inline void set_allocated_sparse_508_str(::std::string* sparse_508_str);

  // optional string sparse_509_str = 521;
  inline bool has_sparse_509_str() const;
  inline void clear_sparse_509_str();
  static const int kSparse509StrFieldNumber = 521;
  inline const ::std::string& sparse_509_str() const;
  inline void set_sparse_509_str(const ::std::string& value);
  inline void set_sparse_509_str(const char* value);
  inline void set_sparse_509_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_509_str();
  inline ::std::string* release_sparse_509_str();
  inline void set_allocated_sparse_509_str(::std::string* sparse_509_str);

  // optional string sparse_510_str = 522;
  inline bool has_sparse_510_str() const;
  inline void clear_sparse_510_str();
  static const int kSparse510StrFieldNumber = 522;
  inline const ::std::string& sparse_510_str() const;
  inline void set_sparse_510_str(const ::std::string& value);
  inline void set_sparse_510_str(const char* value);
  inline void set_sparse_510_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_510_str();
  inline ::std::string* release_sparse_510_str();
  inline void set_allocated_sparse_510_str(::std::string* sparse_510_str);

  // optional string sparse_511_str = 523;
  inline bool has_sparse_511_str() const;
  inline void clear_sparse_511_str();
  static const int kSparse511StrFieldNumber = 523;
  inline const ::std::string& sparse_511_str() const;
  inline void set_sparse_511_str(const ::std::string& value);
  inline void set_sparse_511_str(const char* value);
  inline void set_sparse_511_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_511_str();
  inline ::std::string* release_sparse_511_str();
  inline void set_allocated_sparse_511_str(::std::string* sparse_511_str);

  // optional string sparse_512_str = 524;
  inline bool has_sparse_512_str() const;
  inline void clear_sparse_512_str();
  static const int kSparse512StrFieldNumber = 524;
  inline const ::std::string& sparse_512_str() const;
  inline void set_sparse_512_str(const ::std::string& value);
  inline void set_sparse_512_str(const char* value);
  inline void set_sparse_512_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_512_str();
  inline ::std::string* release_sparse_512_str();
  inline void set_allocated_sparse_512_str(::std::string* sparse_512_str);

  // optional string sparse_513_str = 525;
  inline bool has_sparse_513_str() const;
  inline void clear_sparse_513_str();
  static const int kSparse513StrFieldNumber = 525;
  inline const ::std::string& sparse_513_str() const;
  inline void set_sparse_513_str(const ::std::string& value);
  inline void set_sparse_513_str(const char* value);
  inline void set_sparse_513_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_513_str();
  inline ::std::string* release_sparse_513_str();
  inline void set_allocated_sparse_513_str(::std::string* sparse_513_str);

  // optional string sparse_514_str = 526;
  inline bool has_sparse_514_str() const;
  inline void clear_sparse_514_str();
  static const int kSparse514StrFieldNumber = 526;
  inline const ::std::string& sparse_514_str() const;
  inline void set_sparse_514_str(const ::std::string& value);
  inline void set_sparse_514_str(const char* value);
  inline void set_sparse_514_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_514_str();
  inline ::std::string* release_sparse_514_str();
  inline void set_allocated_sparse_514_str(::std::string* sparse_514_str);

  // optional string sparse_515_str = 527;
  inline bool has_sparse_515_str() const;
  inline void clear_sparse_515_str();
  static const int kSparse515StrFieldNumber = 527;
  inline const ::std::string& sparse_515_str() const;
  inline void set_sparse_515_str(const ::std::string& value);
  inline void set_sparse_515_str(const char* value);
  inline void set_sparse_515_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_515_str();
  inline ::std::string* release_sparse_515_str();
  inline void set_allocated_sparse_515_str(::std::string* sparse_515_str);

  // optional string sparse_516_str = 528;
  inline bool has_sparse_516_str() const;
  inline void clear_sparse_516_str();
  static const int kSparse516StrFieldNumber = 528;
  inline const ::std::string& sparse_516_str() const;
  inline void set_sparse_516_str(const ::std::string& value);
  inline void set_sparse_516_str(const char* value);
  inline void set_sparse_516_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_516_str();
  inline ::std::string* release_sparse_516_str();
  inline void set_allocated_sparse_516_str(::std::string* sparse_516_str);

  // optional string sparse_517_str = 529;
  inline bool has_sparse_517_str() const;
  inline void clear_sparse_517_str();
  static const int kSparse517StrFieldNumber = 529;
  inline const ::std::string& sparse_517_str() const;
  inline void set_sparse_517_str(const ::std::string& value);
  inline void set_sparse_517_str(const char* value);
  inline void set_sparse_517_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_517_str();
  inline ::std::string* release_sparse_517_str();
  inline void set_allocated_sparse_517_str(::std::string* sparse_517_str);

  // optional string sparse_518_str = 530;
  inline bool has_sparse_518_str() const;
  inline void clear_sparse_518_str();
  static const int kSparse518StrFieldNumber = 530;
  inline const ::std::string& sparse_518_str() const;
  inline void set_sparse_518_str(const ::std::string& value);
  inline void set_sparse_518_str(const char* value);
  inline void set_sparse_518_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_518_str();
  inline ::std::string* release_sparse_518_str();
  inline void set_allocated_sparse_518_str(::std::string* sparse_518_str);

  // optional string sparse_519_str = 531;
  inline bool has_sparse_519_str() const;
  inline void clear_sparse_519_str();
  static const int kSparse519StrFieldNumber = 531;
  inline const ::std::string& sparse_519_str() const;
  inline void set_sparse_519_str(const ::std::string& value);
  inline void set_sparse_519_str(const char* value);
  inline void set_sparse_519_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_519_str();
  inline ::std::string* release_sparse_519_str();
  inline void set_allocated_sparse_519_str(::std::string* sparse_519_str);

  // optional string sparse_520_str = 532;
  inline bool has_sparse_520_str() const;
  inline void clear_sparse_520_str();
  static const int kSparse520StrFieldNumber = 532;
  inline const ::std::string& sparse_520_str() const;
  inline void set_sparse_520_str(const ::std::string& value);
  inline void set_sparse_520_str(const char* value);
  inline void set_sparse_520_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_520_str();
  inline ::std::string* release_sparse_520_str();
  inline void set_allocated_sparse_520_str(::std::string* sparse_520_str);

  // optional string sparse_521_str = 533;
  inline bool has_sparse_521_str() const;
  inline void clear_sparse_521_str();
  static const int kSparse521StrFieldNumber = 533;
  inline const ::std::string& sparse_521_str() const;
  inline void set_sparse_521_str(const ::std::string& value);
  inline void set_sparse_521_str(const char* value);
  inline void set_sparse_521_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_521_str();
  inline ::std::string* release_sparse_521_str();
  inline void set_allocated_sparse_521_str(::std::string* sparse_521_str);

  // optional string sparse_522_str = 534;
  inline bool has_sparse_522_str() const;
  inline void clear_sparse_522_str();
  static const int kSparse522StrFieldNumber = 534;
  inline const ::std::string& sparse_522_str() const;
  inline void set_sparse_522_str(const ::std::string& value);
  inline void set_sparse_522_str(const char* value);
  inline void set_sparse_522_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_522_str();
  inline ::std::string* release_sparse_522_str();
  inline void set_allocated_sparse_522_str(::std::string* sparse_522_str);

  // optional string sparse_523_str = 535;
  inline bool has_sparse_523_str() const;
  inline void clear_sparse_523_str();
  static const int kSparse523StrFieldNumber = 535;
  inline const ::std::string& sparse_523_str() const;
  inline void set_sparse_523_str(const ::std::string& value);
  inline void set_sparse_523_str(const char* value);
  inline void set_sparse_523_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_523_str();
  inline ::std::string* release_sparse_523_str();
  inline void set_allocated_sparse_523_str(::std::string* sparse_523_str);

  // optional string sparse_524_str = 536;
  inline bool has_sparse_524_str() const;
  inline void clear_sparse_524_str();
  static const int kSparse524StrFieldNumber = 536;
  inline const ::std::string& sparse_524_str() const;
  inline void set_sparse_524_str(const ::std::string& value);
  inline void set_sparse_524_str(const char* value);
  inline void set_sparse_524_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_524_str();
  inline ::std::string* release_sparse_524_str();
  inline void set_allocated_sparse_524_str(::std::string* sparse_524_str);

  // optional string sparse_525_str = 537;
  inline bool has_sparse_525_str() const;
  inline void clear_sparse_525_str();
  static const int kSparse525StrFieldNumber = 537;
  inline const ::std::string& sparse_525_str() const;
  inline void set_sparse_525_str(const ::std::string& value);
  inline void set_sparse_525_str(const char* value);
  inline void set_sparse_525_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_525_str();
  inline ::std::string* release_sparse_525_str();
  inline void set_allocated_sparse_525_str(::std::string* sparse_525_str);

  // optional string sparse_526_str = 538;
  inline bool has_sparse_526_str() const;
  inline void clear_sparse_526_str();
  static const int kSparse526StrFieldNumber = 538;
  inline const ::std::string& sparse_526_str() const;
  inline void set_sparse_526_str(const ::std::string& value);
  inline void set_sparse_526_str(const char* value);
  inline void set_sparse_526_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_526_str();
  inline ::std::string* release_sparse_526_str();
  inline void set_allocated_sparse_526_str(::std::string* sparse_526_str);

  // optional string sparse_527_str = 539;
  inline bool has_sparse_527_str() const;
  inline void clear_sparse_527_str();
  static const int kSparse527StrFieldNumber = 539;
  inline const ::std::string& sparse_527_str() const;
  inline void set_sparse_527_str(const ::std::string& value);
  inline void set_sparse_527_str(const char* value);
  inline void set_sparse_527_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_527_str();
  inline ::std::string* release_sparse_527_str();
  inline void set_allocated_sparse_527_str(::std::string* sparse_527_str);

  // optional string sparse_528_str = 540;
  inline bool has_sparse_528_str() const;
  inline void clear_sparse_528_str();
  static const int kSparse528StrFieldNumber = 540;
  inline const ::std::string& sparse_528_str() const;
  inline void set_sparse_528_str(const ::std::string& value);
  inline void set_sparse_528_str(const char* value);
  inline void set_sparse_528_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_528_str();
  inline ::std::string* release_sparse_528_str();
  inline void set_allocated_sparse_528_str(::std::string* sparse_528_str);

  // optional string sparse_529_str = 541;
  inline bool has_sparse_529_str() const;
  inline void clear_sparse_529_str();
  static const int kSparse529StrFieldNumber = 541;
  inline const ::std::string& sparse_529_str() const;
  inline void set_sparse_529_str(const ::std::string& value);
  inline void set_sparse_529_str(const char* value);
  inline void set_sparse_529_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_529_str();
  inline ::std::string* release_sparse_529_str();
  inline void set_allocated_sparse_529_str(::std::string* sparse_529_str);

  // optional string sparse_530_str = 542;
  inline bool has_sparse_530_str() const;
  inline void clear_sparse_530_str();
  static const int kSparse530StrFieldNumber = 542;
  inline const ::std::string& sparse_530_str() const;
  inline void set_sparse_530_str(const ::std::string& value);
  inline void set_sparse_530_str(const char* value);
  inline void set_sparse_530_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_530_str();
  inline ::std::string* release_sparse_530_str();
  inline void set_allocated_sparse_530_str(::std::string* sparse_530_str);

  // optional string sparse_531_str = 543;
  inline bool has_sparse_531_str() const;
  inline void clear_sparse_531_str();
  static const int kSparse531StrFieldNumber = 543;
  inline const ::std::string& sparse_531_str() const;
  inline void set_sparse_531_str(const ::std::string& value);
  inline void set_sparse_531_str(const char* value);
  inline void set_sparse_531_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_531_str();
  inline ::std::string* release_sparse_531_str();
  inline void set_allocated_sparse_531_str(::std::string* sparse_531_str);

  // optional string sparse_532_str = 544;
  inline bool has_sparse_532_str() const;
  inline void clear_sparse_532_str();
  static const int kSparse532StrFieldNumber = 544;
  inline const ::std::string& sparse_532_str() const;
  inline void set_sparse_532_str(const ::std::string& value);
  inline void set_sparse_532_str(const char* value);
  inline void set_sparse_532_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_532_str();
  inline ::std::string* release_sparse_532_str();
  inline void set_allocated_sparse_532_str(::std::string* sparse_532_str);

  // optional string sparse_533_str = 545;
  inline bool has_sparse_533_str() const;
  inline void clear_sparse_533_str();
  static const int kSparse533StrFieldNumber = 545;
  inline const ::std::string& sparse_533_str() const;
  inline void set_sparse_533_str(const ::std::string& value);
  inline void set_sparse_533_str(const char* value);
  inline void set_sparse_533_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_533_str();
  inline ::std::string* release_sparse_533_str();
  inline void set_allocated_sparse_533_str(::std::string* sparse_533_str);

  // optional string sparse_534_str = 546;
  inline bool has_sparse_534_str() const;
  inline void clear_sparse_534_str();
  static const int kSparse534StrFieldNumber = 546;
  inline const ::std::string& sparse_534_str() const;
  inline void set_sparse_534_str(const ::std::string& value);
  inline void set_sparse_534_str(const char* value);
  inline void set_sparse_534_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_534_str();
  inline ::std::string* release_sparse_534_str();
  inline void set_allocated_sparse_534_str(::std::string* sparse_534_str);

  // optional string sparse_535_str = 547;
  inline bool has_sparse_535_str() const;
  inline void clear_sparse_535_str();
  static const int kSparse535StrFieldNumber = 547;
  inline const ::std::string& sparse_535_str() const;
  inline void set_sparse_535_str(const ::std::string& value);
  inline void set_sparse_535_str(const char* value);
  inline void set_sparse_535_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_535_str();
  inline ::std::string* release_sparse_535_str();
  inline void set_allocated_sparse_535_str(::std::string* sparse_535_str);

  // optional string sparse_536_str = 548;
  inline bool has_sparse_536_str() const;
  inline void clear_sparse_536_str();
  static const int kSparse536StrFieldNumber = 548;
  inline const ::std::string& sparse_536_str() const;
  inline void set_sparse_536_str(const ::std::string& value);
  inline void set_sparse_536_str(const char* value);
  inline void set_sparse_536_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_536_str();
  inline ::std::string* release_sparse_536_str();
  inline void set_allocated_sparse_536_str(::std::string* sparse_536_str);

  // optional string sparse_537_str = 549;
  inline bool has_sparse_537_str() const;
  inline void clear_sparse_537_str();
  static const int kSparse537StrFieldNumber = 549;
  inline const ::std::string& sparse_537_str() const;
  inline void set_sparse_537_str(const ::std::string& value);
  inline void set_sparse_537_str(const char* value);
  inline void set_sparse_537_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_537_str();
  inline ::std::string* release_sparse_537_str();
  inline void set_allocated_sparse_537_str(::std::string* sparse_537_str);

  // optional string sparse_538_str = 550;
  inline bool has_sparse_538_str() const;
  inline void clear_sparse_538_str();
  static const int kSparse538StrFieldNumber = 550;
  inline const ::std::string& sparse_538_str() const;
  inline void set_sparse_538_str(const ::std::string& value);
  inline void set_sparse_538_str(const char* value);
  inline void set_sparse_538_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_538_str();
  inline ::std::string* release_sparse_538_str();
  inline void set_allocated_sparse_538_str(::std::string* sparse_538_str);

  // optional string sparse_539_str = 551;
  inline bool has_sparse_539_str() const;
  inline void clear_sparse_539_str();
  static const int kSparse539StrFieldNumber = 551;
  inline const ::std::string& sparse_539_str() const;
  inline void set_sparse_539_str(const ::std::string& value);
  inline void set_sparse_539_str(const char* value);
  inline void set_sparse_539_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_539_str();
  inline ::std::string* release_sparse_539_str();
  inline void set_allocated_sparse_539_str(::std::string* sparse_539_str);

  // optional string sparse_540_str = 552;
  inline bool has_sparse_540_str() const;
  inline void clear_sparse_540_str();
  static const int kSparse540StrFieldNumber = 552;
  inline const ::std::string& sparse_540_str() const;
  inline void set_sparse_540_str(const ::std::string& value);
  inline void set_sparse_540_str(const char* value);
  inline void set_sparse_540_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_540_str();
  inline ::std::string* release_sparse_540_str();
  inline void set_allocated_sparse_540_str(::std::string* sparse_540_str);

  // optional string sparse_541_str = 553;
  inline bool has_sparse_541_str() const;
  inline void clear_sparse_541_str();
  static const int kSparse541StrFieldNumber = 553;
  inline const ::std::string& sparse_541_str() const;
  inline void set_sparse_541_str(const ::std::string& value);
  inline void set_sparse_541_str(const char* value);
  inline void set_sparse_541_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_541_str();
  inline ::std::string* release_sparse_541_str();
  inline void set_allocated_sparse_541_str(::std::string* sparse_541_str);

  // optional string sparse_542_str = 554;
  inline bool has_sparse_542_str() const;
  inline void clear_sparse_542_str();
  static const int kSparse542StrFieldNumber = 554;
  inline const ::std::string& sparse_542_str() const;
  inline void set_sparse_542_str(const ::std::string& value);
  inline void set_sparse_542_str(const char* value);
  inline void set_sparse_542_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_542_str();
  inline ::std::string* release_sparse_542_str();
  inline void set_allocated_sparse_542_str(::std::string* sparse_542_str);

  // optional string sparse_543_str = 555;
  inline bool has_sparse_543_str() const;
  inline void clear_sparse_543_str();
  static const int kSparse543StrFieldNumber = 555;
  inline const ::std::string& sparse_543_str() const;
  inline void set_sparse_543_str(const ::std::string& value);
  inline void set_sparse_543_str(const char* value);
  inline void set_sparse_543_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_543_str();
  inline ::std::string* release_sparse_543_str();
  inline void set_allocated_sparse_543_str(::std::string* sparse_543_str);

  // optional string sparse_544_str = 556;
  inline bool has_sparse_544_str() const;
  inline void clear_sparse_544_str();
  static const int kSparse544StrFieldNumber = 556;
  inline const ::std::string& sparse_544_str() const;
  inline void set_sparse_544_str(const ::std::string& value);
  inline void set_sparse_544_str(const char* value);
  inline void set_sparse_544_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_544_str();
  inline ::std::string* release_sparse_544_str();
  inline void set_allocated_sparse_544_str(::std::string* sparse_544_str);

  // optional string sparse_545_str = 557;
  inline bool has_sparse_545_str() const;
  inline void clear_sparse_545_str();
  static const int kSparse545StrFieldNumber = 557;
  inline const ::std::string& sparse_545_str() const;
  inline void set_sparse_545_str(const ::std::string& value);
  inline void set_sparse_545_str(const char* value);
  inline void set_sparse_545_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_545_str();
  inline ::std::string* release_sparse_545_str();
  inline void set_allocated_sparse_545_str(::std::string* sparse_545_str);

  // optional string sparse_546_str = 558;
  inline bool has_sparse_546_str() const;
  inline void clear_sparse_546_str();
  static const int kSparse546StrFieldNumber = 558;
  inline const ::std::string& sparse_546_str() const;
  inline void set_sparse_546_str(const ::std::string& value);
  inline void set_sparse_546_str(const char* value);
  inline void set_sparse_546_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_546_str();
  inline ::std::string* release_sparse_546_str();
  inline void set_allocated_sparse_546_str(::std::string* sparse_546_str);

  // optional string sparse_547_str = 559;
  inline bool has_sparse_547_str() const;
  inline void clear_sparse_547_str();
  static const int kSparse547StrFieldNumber = 559;
  inline const ::std::string& sparse_547_str() const;
  inline void set_sparse_547_str(const ::std::string& value);
  inline void set_sparse_547_str(const char* value);
  inline void set_sparse_547_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_547_str();
  inline ::std::string* release_sparse_547_str();
  inline void set_allocated_sparse_547_str(::std::string* sparse_547_str);

  // optional string sparse_548_str = 560;
  inline bool has_sparse_548_str() const;
  inline void clear_sparse_548_str();
  static const int kSparse548StrFieldNumber = 560;
  inline const ::std::string& sparse_548_str() const;
  inline void set_sparse_548_str(const ::std::string& value);
  inline void set_sparse_548_str(const char* value);
  inline void set_sparse_548_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_548_str();
  inline ::std::string* release_sparse_548_str();
  inline void set_allocated_sparse_548_str(::std::string* sparse_548_str);

  // optional string sparse_549_str = 561;
  inline bool has_sparse_549_str() const;
  inline void clear_sparse_549_str();
  static const int kSparse549StrFieldNumber = 561;
  inline const ::std::string& sparse_549_str() const;
  inline void set_sparse_549_str(const ::std::string& value);
  inline void set_sparse_549_str(const char* value);
  inline void set_sparse_549_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_549_str();
  inline ::std::string* release_sparse_549_str();
  inline void set_allocated_sparse_549_str(::std::string* sparse_549_str);

  // optional string sparse_550_str = 562;
  inline bool has_sparse_550_str() const;
  inline void clear_sparse_550_str();
  static const int kSparse550StrFieldNumber = 562;
  inline const ::std::string& sparse_550_str() const;
  inline void set_sparse_550_str(const ::std::string& value);
  inline void set_sparse_550_str(const char* value);
  inline void set_sparse_550_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_550_str();
  inline ::std::string* release_sparse_550_str();
  inline void set_allocated_sparse_550_str(::std::string* sparse_550_str);

  // optional string sparse_551_str = 563;
  inline bool has_sparse_551_str() const;
  inline void clear_sparse_551_str();
  static const int kSparse551StrFieldNumber = 563;
  inline const ::std::string& sparse_551_str() const;
  inline void set_sparse_551_str(const ::std::string& value);
  inline void set_sparse_551_str(const char* value);
  inline void set_sparse_551_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_551_str();
  inline ::std::string* release_sparse_551_str();
  inline void set_allocated_sparse_551_str(::std::string* sparse_551_str);

  // optional string sparse_552_str = 564;
  inline bool has_sparse_552_str() const;
  inline void clear_sparse_552_str();
  static const int kSparse552StrFieldNumber = 564;
  inline const ::std::string& sparse_552_str() const;
  inline void set_sparse_552_str(const ::std::string& value);
  inline void set_sparse_552_str(const char* value);
  inline void set_sparse_552_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_552_str();
  inline ::std::string* release_sparse_552_str();
  inline void set_allocated_sparse_552_str(::std::string* sparse_552_str);

  // optional string sparse_553_str = 565;
  inline bool has_sparse_553_str() const;
  inline void clear_sparse_553_str();
  static const int kSparse553StrFieldNumber = 565;
  inline const ::std::string& sparse_553_str() const;
  inline void set_sparse_553_str(const ::std::string& value);
  inline void set_sparse_553_str(const char* value);
  inline void set_sparse_553_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_553_str();
  inline ::std::string* release_sparse_553_str();
  inline void set_allocated_sparse_553_str(::std::string* sparse_553_str);

  // optional string sparse_554_str = 566;
  inline bool has_sparse_554_str() const;
  inline void clear_sparse_554_str();
  static const int kSparse554StrFieldNumber = 566;
  inline const ::std::string& sparse_554_str() const;
  inline void set_sparse_554_str(const ::std::string& value);
  inline void set_sparse_554_str(const char* value);
  inline void set_sparse_554_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_554_str();
  inline ::std::string* release_sparse_554_str();
  inline void set_allocated_sparse_554_str(::std::string* sparse_554_str);

  // optional string sparse_555_str = 567;
  inline bool has_sparse_555_str() const;
  inline void clear_sparse_555_str();
  static const int kSparse555StrFieldNumber = 567;
  inline const ::std::string& sparse_555_str() const;
  inline void set_sparse_555_str(const ::std::string& value);
  inline void set_sparse_555_str(const char* value);
  inline void set_sparse_555_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_555_str();
  inline ::std::string* release_sparse_555_str();
  inline void set_allocated_sparse_555_str(::std::string* sparse_555_str);

  // optional string sparse_556_str = 568;
  inline bool has_sparse_556_str() const;
  inline void clear_sparse_556_str();
  static const int kSparse556StrFieldNumber = 568;
  inline const ::std::string& sparse_556_str() const;
  inline void set_sparse_556_str(const ::std::string& value);
  inline void set_sparse_556_str(const char* value);
  inline void set_sparse_556_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_556_str();
  inline ::std::string* release_sparse_556_str();
  inline void set_allocated_sparse_556_str(::std::string* sparse_556_str);

  // optional string sparse_557_str = 569;
  inline bool has_sparse_557_str() const;
  inline void clear_sparse_557_str();
  static const int kSparse557StrFieldNumber = 569;
  inline const ::std::string& sparse_557_str() const;
  inline void set_sparse_557_str(const ::std::string& value);
  inline void set_sparse_557_str(const char* value);
  inline void set_sparse_557_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_557_str();
  inline ::std::string* release_sparse_557_str();
  inline void set_allocated_sparse_557_str(::std::string* sparse_557_str);

  // optional string sparse_558_str = 570;
  inline bool has_sparse_558_str() const;
  inline void clear_sparse_558_str();
  static const int kSparse558StrFieldNumber = 570;
  inline const ::std::string& sparse_558_str() const;
  inline void set_sparse_558_str(const ::std::string& value);
  inline void set_sparse_558_str(const char* value);
  inline void set_sparse_558_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_558_str();
  inline ::std::string* release_sparse_558_str();
  inline void set_allocated_sparse_558_str(::std::string* sparse_558_str);

  // optional string sparse_559_str = 571;
  inline bool has_sparse_559_str() const;
  inline void clear_sparse_559_str();
  static const int kSparse559StrFieldNumber = 571;
  inline const ::std::string& sparse_559_str() const;
  inline void set_sparse_559_str(const ::std::string& value);
  inline void set_sparse_559_str(const char* value);
  inline void set_sparse_559_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_559_str();
  inline ::std::string* release_sparse_559_str();
  inline void set_allocated_sparse_559_str(::std::string* sparse_559_str);

  // optional string sparse_560_str = 572;
  inline bool has_sparse_560_str() const;
  inline void clear_sparse_560_str();
  static const int kSparse560StrFieldNumber = 572;
  inline const ::std::string& sparse_560_str() const;
  inline void set_sparse_560_str(const ::std::string& value);
  inline void set_sparse_560_str(const char* value);
  inline void set_sparse_560_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_560_str();
  inline ::std::string* release_sparse_560_str();
  inline void set_allocated_sparse_560_str(::std::string* sparse_560_str);

  // optional string sparse_561_str = 573;
  inline bool has_sparse_561_str() const;
  inline void clear_sparse_561_str();
  static const int kSparse561StrFieldNumber = 573;
  inline const ::std::string& sparse_561_str() const;
  inline void set_sparse_561_str(const ::std::string& value);
  inline void set_sparse_561_str(const char* value);
  inline void set_sparse_561_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_561_str();
  inline ::std::string* release_sparse_561_str();
  inline void set_allocated_sparse_561_str(::std::string* sparse_561_str);

  // optional string sparse_562_str = 574;
  inline bool has_sparse_562_str() const;
  inline void clear_sparse_562_str();
  static const int kSparse562StrFieldNumber = 574;
  inline const ::std::string& sparse_562_str() const;
  inline void set_sparse_562_str(const ::std::string& value);
  inline void set_sparse_562_str(const char* value);
  inline void set_sparse_562_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_562_str();
  inline ::std::string* release_sparse_562_str();
  inline void set_allocated_sparse_562_str(::std::string* sparse_562_str);

  // optional string sparse_563_str = 575;
  inline bool has_sparse_563_str() const;
  inline void clear_sparse_563_str();
  static const int kSparse563StrFieldNumber = 575;
  inline const ::std::string& sparse_563_str() const;
  inline void set_sparse_563_str(const ::std::string& value);
  inline void set_sparse_563_str(const char* value);
  inline void set_sparse_563_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_563_str();
  inline ::std::string* release_sparse_563_str();
  inline void set_allocated_sparse_563_str(::std::string* sparse_563_str);

  // optional string sparse_564_str = 576;
  inline bool has_sparse_564_str() const;
  inline void clear_sparse_564_str();
  static const int kSparse564StrFieldNumber = 576;
  inline const ::std::string& sparse_564_str() const;
  inline void set_sparse_564_str(const ::std::string& value);
  inline void set_sparse_564_str(const char* value);
  inline void set_sparse_564_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_564_str();
  inline ::std::string* release_sparse_564_str();
  inline void set_allocated_sparse_564_str(::std::string* sparse_564_str);

  // optional string sparse_565_str = 577;
  inline bool has_sparse_565_str() const;
  inline void clear_sparse_565_str();
  static const int kSparse565StrFieldNumber = 577;
  inline const ::std::string& sparse_565_str() const;
  inline void set_sparse_565_str(const ::std::string& value);
  inline void set_sparse_565_str(const char* value);
  inline void set_sparse_565_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_565_str();
  inline ::std::string* release_sparse_565_str();
  inline void set_allocated_sparse_565_str(::std::string* sparse_565_str);

  // optional string sparse_566_str = 578;
  inline bool has_sparse_566_str() const;
  inline void clear_sparse_566_str();
  static const int kSparse566StrFieldNumber = 578;
  inline const ::std::string& sparse_566_str() const;
  inline void set_sparse_566_str(const ::std::string& value);
  inline void set_sparse_566_str(const char* value);
  inline void set_sparse_566_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_566_str();
  inline ::std::string* release_sparse_566_str();
  inline void set_allocated_sparse_566_str(::std::string* sparse_566_str);

  // optional string sparse_567_str = 579;
  inline bool has_sparse_567_str() const;
  inline void clear_sparse_567_str();
  static const int kSparse567StrFieldNumber = 579;
  inline const ::std::string& sparse_567_str() const;
  inline void set_sparse_567_str(const ::std::string& value);
  inline void set_sparse_567_str(const char* value);
  inline void set_sparse_567_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_567_str();
  inline ::std::string* release_sparse_567_str();
  inline void set_allocated_sparse_567_str(::std::string* sparse_567_str);

  // optional string sparse_568_str = 580;
  inline bool has_sparse_568_str() const;
  inline void clear_sparse_568_str();
  static const int kSparse568StrFieldNumber = 580;
  inline const ::std::string& sparse_568_str() const;
  inline void set_sparse_568_str(const ::std::string& value);
  inline void set_sparse_568_str(const char* value);
  inline void set_sparse_568_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_568_str();
  inline ::std::string* release_sparse_568_str();
  inline void set_allocated_sparse_568_str(::std::string* sparse_568_str);

  // optional string sparse_569_str = 581;
  inline bool has_sparse_569_str() const;
  inline void clear_sparse_569_str();
  static const int kSparse569StrFieldNumber = 581;
  inline const ::std::string& sparse_569_str() const;
  inline void set_sparse_569_str(const ::std::string& value);
  inline void set_sparse_569_str(const char* value);
  inline void set_sparse_569_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_569_str();
  inline ::std::string* release_sparse_569_str();
  inline void set_allocated_sparse_569_str(::std::string* sparse_569_str);

  // optional string sparse_570_str = 582;
  inline bool has_sparse_570_str() const;
  inline void clear_sparse_570_str();
  static const int kSparse570StrFieldNumber = 582;
  inline const ::std::string& sparse_570_str() const;
  inline void set_sparse_570_str(const ::std::string& value);
  inline void set_sparse_570_str(const char* value);
  inline void set_sparse_570_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_570_str();
  inline ::std::string* release_sparse_570_str();
  inline void set_allocated_sparse_570_str(::std::string* sparse_570_str);

  // optional string sparse_571_str = 583;
  inline bool has_sparse_571_str() const;
  inline void clear_sparse_571_str();
  static const int kSparse571StrFieldNumber = 583;
  inline const ::std::string& sparse_571_str() const;
  inline void set_sparse_571_str(const ::std::string& value);
  inline void set_sparse_571_str(const char* value);
  inline void set_sparse_571_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_571_str();
  inline ::std::string* release_sparse_571_str();
  inline void set_allocated_sparse_571_str(::std::string* sparse_571_str);

  // optional string sparse_572_str = 584;
  inline bool has_sparse_572_str() const;
  inline void clear_sparse_572_str();
  static const int kSparse572StrFieldNumber = 584;
  inline const ::std::string& sparse_572_str() const;
  inline void set_sparse_572_str(const ::std::string& value);
  inline void set_sparse_572_str(const char* value);
  inline void set_sparse_572_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_572_str();
  inline ::std::string* release_sparse_572_str();
  inline void set_allocated_sparse_572_str(::std::string* sparse_572_str);

  // optional string sparse_573_str = 585;
  inline bool has_sparse_573_str() const;
  inline void clear_sparse_573_str();
  static const int kSparse573StrFieldNumber = 585;
  inline const ::std::string& sparse_573_str() const;
  inline void set_sparse_573_str(const ::std::string& value);
  inline void set_sparse_573_str(const char* value);
  inline void set_sparse_573_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_573_str();
  inline ::std::string* release_sparse_573_str();
  inline void set_allocated_sparse_573_str(::std::string* sparse_573_str);

  // optional string sparse_574_str = 586;
  inline bool has_sparse_574_str() const;
  inline void clear_sparse_574_str();
  static const int kSparse574StrFieldNumber = 586;
  inline const ::std::string& sparse_574_str() const;
  inline void set_sparse_574_str(const ::std::string& value);
  inline void set_sparse_574_str(const char* value);
  inline void set_sparse_574_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_574_str();
  inline ::std::string* release_sparse_574_str();
  inline void set_allocated_sparse_574_str(::std::string* sparse_574_str);

  // optional string sparse_575_str = 587;
  inline bool has_sparse_575_str() const;
  inline void clear_sparse_575_str();
  static const int kSparse575StrFieldNumber = 587;
  inline const ::std::string& sparse_575_str() const;
  inline void set_sparse_575_str(const ::std::string& value);
  inline void set_sparse_575_str(const char* value);
  inline void set_sparse_575_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_575_str();
  inline ::std::string* release_sparse_575_str();
  inline void set_allocated_sparse_575_str(::std::string* sparse_575_str);

  // optional string sparse_576_str = 588;
  inline bool has_sparse_576_str() const;
  inline void clear_sparse_576_str();
  static const int kSparse576StrFieldNumber = 588;
  inline const ::std::string& sparse_576_str() const;
  inline void set_sparse_576_str(const ::std::string& value);
  inline void set_sparse_576_str(const char* value);
  inline void set_sparse_576_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_576_str();
  inline ::std::string* release_sparse_576_str();
  inline void set_allocated_sparse_576_str(::std::string* sparse_576_str);

  // optional string sparse_577_str = 589;
  inline bool has_sparse_577_str() const;
  inline void clear_sparse_577_str();
  static const int kSparse577StrFieldNumber = 589;
  inline const ::std::string& sparse_577_str() const;
  inline void set_sparse_577_str(const ::std::string& value);
  inline void set_sparse_577_str(const char* value);
  inline void set_sparse_577_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_577_str();
  inline ::std::string* release_sparse_577_str();
  inline void set_allocated_sparse_577_str(::std::string* sparse_577_str);

  // optional string sparse_578_str = 590;
  inline bool has_sparse_578_str() const;
  inline void clear_sparse_578_str();
  static const int kSparse578StrFieldNumber = 590;
  inline const ::std::string& sparse_578_str() const;
  inline void set_sparse_578_str(const ::std::string& value);
  inline void set_sparse_578_str(const char* value);
  inline void set_sparse_578_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_578_str();
  inline ::std::string* release_sparse_578_str();
  inline void set_allocated_sparse_578_str(::std::string* sparse_578_str);

  // optional string sparse_579_str = 591;
  inline bool has_sparse_579_str() const;
  inline void clear_sparse_579_str();
  static const int kSparse579StrFieldNumber = 591;
  inline const ::std::string& sparse_579_str() const;
  inline void set_sparse_579_str(const ::std::string& value);
  inline void set_sparse_579_str(const char* value);
  inline void set_sparse_579_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_579_str();
  inline ::std::string* release_sparse_579_str();
  inline void set_allocated_sparse_579_str(::std::string* sparse_579_str);

  // optional string sparse_580_str = 592;
  inline bool has_sparse_580_str() const;
  inline void clear_sparse_580_str();
  static const int kSparse580StrFieldNumber = 592;
  inline const ::std::string& sparse_580_str() const;
  inline void set_sparse_580_str(const ::std::string& value);
  inline void set_sparse_580_str(const char* value);
  inline void set_sparse_580_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_580_str();
  inline ::std::string* release_sparse_580_str();
  inline void set_allocated_sparse_580_str(::std::string* sparse_580_str);

  // optional string sparse_581_str = 593;
  inline bool has_sparse_581_str() const;
  inline void clear_sparse_581_str();
  static const int kSparse581StrFieldNumber = 593;
  inline const ::std::string& sparse_581_str() const;
  inline void set_sparse_581_str(const ::std::string& value);
  inline void set_sparse_581_str(const char* value);
  inline void set_sparse_581_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_581_str();
  inline ::std::string* release_sparse_581_str();
  inline void set_allocated_sparse_581_str(::std::string* sparse_581_str);

  // optional string sparse_582_str = 594;
  inline bool has_sparse_582_str() const;
  inline void clear_sparse_582_str();
  static const int kSparse582StrFieldNumber = 594;
  inline const ::std::string& sparse_582_str() const;
  inline void set_sparse_582_str(const ::std::string& value);
  inline void set_sparse_582_str(const char* value);
  inline void set_sparse_582_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_582_str();
  inline ::std::string* release_sparse_582_str();
  inline void set_allocated_sparse_582_str(::std::string* sparse_582_str);

  // optional string sparse_583_str = 595;
  inline bool has_sparse_583_str() const;
  inline void clear_sparse_583_str();
  static const int kSparse583StrFieldNumber = 595;
  inline const ::std::string& sparse_583_str() const;
  inline void set_sparse_583_str(const ::std::string& value);
  inline void set_sparse_583_str(const char* value);
  inline void set_sparse_583_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_583_str();
  inline ::std::string* release_sparse_583_str();
  inline void set_allocated_sparse_583_str(::std::string* sparse_583_str);

  // optional string sparse_584_str = 596;
  inline bool has_sparse_584_str() const;
  inline void clear_sparse_584_str();
  static const int kSparse584StrFieldNumber = 596;
  inline const ::std::string& sparse_584_str() const;
  inline void set_sparse_584_str(const ::std::string& value);
  inline void set_sparse_584_str(const char* value);
  inline void set_sparse_584_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_584_str();
  inline ::std::string* release_sparse_584_str();
  inline void set_allocated_sparse_584_str(::std::string* sparse_584_str);

  // optional string sparse_585_str = 597;
  inline bool has_sparse_585_str() const;
  inline void clear_sparse_585_str();
  static const int kSparse585StrFieldNumber = 597;
  inline const ::std::string& sparse_585_str() const;
  inline void set_sparse_585_str(const ::std::string& value);
  inline void set_sparse_585_str(const char* value);
  inline void set_sparse_585_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_585_str();
  inline ::std::string* release_sparse_585_str();
  inline void set_allocated_sparse_585_str(::std::string* sparse_585_str);

  // optional string sparse_586_str = 598;
  inline bool has_sparse_586_str() const;
  inline void clear_sparse_586_str();
  static const int kSparse586StrFieldNumber = 598;
  inline const ::std::string& sparse_586_str() const;
  inline void set_sparse_586_str(const ::std::string& value);
  inline void set_sparse_586_str(const char* value);
  inline void set_sparse_586_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_586_str();
  inline ::std::string* release_sparse_586_str();
  inline void set_allocated_sparse_586_str(::std::string* sparse_586_str);

  // optional string sparse_587_str = 599;
  inline bool has_sparse_587_str() const;
  inline void clear_sparse_587_str();
  static const int kSparse587StrFieldNumber = 599;
  inline const ::std::string& sparse_587_str() const;
  inline void set_sparse_587_str(const ::std::string& value);
  inline void set_sparse_587_str(const char* value);
  inline void set_sparse_587_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_587_str();
  inline ::std::string* release_sparse_587_str();
  inline void set_allocated_sparse_587_str(::std::string* sparse_587_str);

  // optional string sparse_588_str = 600;
  inline bool has_sparse_588_str() const;
  inline void clear_sparse_588_str();
  static const int kSparse588StrFieldNumber = 600;
  inline const ::std::string& sparse_588_str() const;
  inline void set_sparse_588_str(const ::std::string& value);
  inline void set_sparse_588_str(const char* value);
  inline void set_sparse_588_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_588_str();
  inline ::std::string* release_sparse_588_str();
  inline void set_allocated_sparse_588_str(::std::string* sparse_588_str);

  // optional string sparse_589_str = 601;
  inline bool has_sparse_589_str() const;
  inline void clear_sparse_589_str();
  static const int kSparse589StrFieldNumber = 601;
  inline const ::std::string& sparse_589_str() const;
  inline void set_sparse_589_str(const ::std::string& value);
  inline void set_sparse_589_str(const char* value);
  inline void set_sparse_589_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_589_str();
  inline ::std::string* release_sparse_589_str();
  inline void set_allocated_sparse_589_str(::std::string* sparse_589_str);

  // optional string sparse_590_str = 602;
  inline bool has_sparse_590_str() const;
  inline void clear_sparse_590_str();
  static const int kSparse590StrFieldNumber = 602;
  inline const ::std::string& sparse_590_str() const;
  inline void set_sparse_590_str(const ::std::string& value);
  inline void set_sparse_590_str(const char* value);
  inline void set_sparse_590_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_590_str();
  inline ::std::string* release_sparse_590_str();
  inline void set_allocated_sparse_590_str(::std::string* sparse_590_str);

  // optional string sparse_591_str = 603;
  inline bool has_sparse_591_str() const;
  inline void clear_sparse_591_str();
  static const int kSparse591StrFieldNumber = 603;
  inline const ::std::string& sparse_591_str() const;
  inline void set_sparse_591_str(const ::std::string& value);
  inline void set_sparse_591_str(const char* value);
  inline void set_sparse_591_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_591_str();
  inline ::std::string* release_sparse_591_str();
  inline void set_allocated_sparse_591_str(::std::string* sparse_591_str);

  // optional string sparse_592_str = 604;
  inline bool has_sparse_592_str() const;
  inline void clear_sparse_592_str();
  static const int kSparse592StrFieldNumber = 604;
  inline const ::std::string& sparse_592_str() const;
  inline void set_sparse_592_str(const ::std::string& value);
  inline void set_sparse_592_str(const char* value);
  inline void set_sparse_592_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_592_str();
  inline ::std::string* release_sparse_592_str();
  inline void set_allocated_sparse_592_str(::std::string* sparse_592_str);

  // optional string sparse_593_str = 605;
  inline bool has_sparse_593_str() const;
  inline void clear_sparse_593_str();
  static const int kSparse593StrFieldNumber = 605;
  inline const ::std::string& sparse_593_str() const;
  inline void set_sparse_593_str(const ::std::string& value);
  inline void set_sparse_593_str(const char* value);
  inline void set_sparse_593_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_593_str();
  inline ::std::string* release_sparse_593_str();
  inline void set_allocated_sparse_593_str(::std::string* sparse_593_str);

  // optional string sparse_594_str = 606;
  inline bool has_sparse_594_str() const;
  inline void clear_sparse_594_str();
  static const int kSparse594StrFieldNumber = 606;
  inline const ::std::string& sparse_594_str() const;
  inline void set_sparse_594_str(const ::std::string& value);
  inline void set_sparse_594_str(const char* value);
  inline void set_sparse_594_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_594_str();
  inline ::std::string* release_sparse_594_str();
  inline void set_allocated_sparse_594_str(::std::string* sparse_594_str);

  // optional string sparse_595_str = 607;
  inline bool has_sparse_595_str() const;
  inline void clear_sparse_595_str();
  static const int kSparse595StrFieldNumber = 607;
  inline const ::std::string& sparse_595_str() const;
  inline void set_sparse_595_str(const ::std::string& value);
  inline void set_sparse_595_str(const char* value);
  inline void set_sparse_595_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_595_str();
  inline ::std::string* release_sparse_595_str();
  inline void set_allocated_sparse_595_str(::std::string* sparse_595_str);

  // optional string sparse_596_str = 608;
  inline bool has_sparse_596_str() const;
  inline void clear_sparse_596_str();
  static const int kSparse596StrFieldNumber = 608;
  inline const ::std::string& sparse_596_str() const;
  inline void set_sparse_596_str(const ::std::string& value);
  inline void set_sparse_596_str(const char* value);
  inline void set_sparse_596_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_596_str();
  inline ::std::string* release_sparse_596_str();
  inline void set_allocated_sparse_596_str(::std::string* sparse_596_str);

  // optional string sparse_597_str = 609;
  inline bool has_sparse_597_str() const;
  inline void clear_sparse_597_str();
  static const int kSparse597StrFieldNumber = 609;
  inline const ::std::string& sparse_597_str() const;
  inline void set_sparse_597_str(const ::std::string& value);
  inline void set_sparse_597_str(const char* value);
  inline void set_sparse_597_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_597_str();
  inline ::std::string* release_sparse_597_str();
  inline void set_allocated_sparse_597_str(::std::string* sparse_597_str);

  // optional string sparse_598_str = 610;
  inline bool has_sparse_598_str() const;
  inline void clear_sparse_598_str();
  static const int kSparse598StrFieldNumber = 610;
  inline const ::std::string& sparse_598_str() const;
  inline void set_sparse_598_str(const ::std::string& value);
  inline void set_sparse_598_str(const char* value);
  inline void set_sparse_598_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_598_str();
  inline ::std::string* release_sparse_598_str();
  inline void set_allocated_sparse_598_str(::std::string* sparse_598_str);

  // optional string sparse_599_str = 611;
  inline bool has_sparse_599_str() const;
  inline void clear_sparse_599_str();
  static const int kSparse599StrFieldNumber = 611;
  inline const ::std::string& sparse_599_str() const;
  inline void set_sparse_599_str(const ::std::string& value);
  inline void set_sparse_599_str(const char* value);
  inline void set_sparse_599_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_599_str();
  inline ::std::string* release_sparse_599_str();
  inline void set_allocated_sparse_599_str(::std::string* sparse_599_str);

  // optional string sparse_600_str = 612;
  inline bool has_sparse_600_str() const;
  inline void clear_sparse_600_str();
  static const int kSparse600StrFieldNumber = 612;
  inline const ::std::string& sparse_600_str() const;
  inline void set_sparse_600_str(const ::std::string& value);
  inline void set_sparse_600_str(const char* value);
  inline void set_sparse_600_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_600_str();
  inline ::std::string* release_sparse_600_str();
  inline void set_allocated_sparse_600_str(::std::string* sparse_600_str);

  // optional string sparse_601_str = 613;
  inline bool has_sparse_601_str() const;
  inline void clear_sparse_601_str();
  static const int kSparse601StrFieldNumber = 613;
  inline const ::std::string& sparse_601_str() const;
  inline void set_sparse_601_str(const ::std::string& value);
  inline void set_sparse_601_str(const char* value);
  inline void set_sparse_601_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_601_str();
  inline ::std::string* release_sparse_601_str();
  inline void set_allocated_sparse_601_str(::std::string* sparse_601_str);

  // optional string sparse_602_str = 614;
  inline bool has_sparse_602_str() const;
  inline void clear_sparse_602_str();
  static const int kSparse602StrFieldNumber = 614;
  inline const ::std::string& sparse_602_str() const;
  inline void set_sparse_602_str(const ::std::string& value);
  inline void set_sparse_602_str(const char* value);
  inline void set_sparse_602_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_602_str();
  inline ::std::string* release_sparse_602_str();
  inline void set_allocated_sparse_602_str(::std::string* sparse_602_str);

  // optional string sparse_603_str = 615;
  inline bool has_sparse_603_str() const;
  inline void clear_sparse_603_str();
  static const int kSparse603StrFieldNumber = 615;
  inline const ::std::string& sparse_603_str() const;
  inline void set_sparse_603_str(const ::std::string& value);
  inline void set_sparse_603_str(const char* value);
  inline void set_sparse_603_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_603_str();
  inline ::std::string* release_sparse_603_str();
  inline void set_allocated_sparse_603_str(::std::string* sparse_603_str);

  // optional string sparse_604_str = 616;
  inline bool has_sparse_604_str() const;
  inline void clear_sparse_604_str();
  static const int kSparse604StrFieldNumber = 616;
  inline const ::std::string& sparse_604_str() const;
  inline void set_sparse_604_str(const ::std::string& value);
  inline void set_sparse_604_str(const char* value);
  inline void set_sparse_604_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_604_str();
  inline ::std::string* release_sparse_604_str();
  inline void set_allocated_sparse_604_str(::std::string* sparse_604_str);

  // optional string sparse_605_str = 617;
  inline bool has_sparse_605_str() const;
  inline void clear_sparse_605_str();
  static const int kSparse605StrFieldNumber = 617;
  inline const ::std::string& sparse_605_str() const;
  inline void set_sparse_605_str(const ::std::string& value);
  inline void set_sparse_605_str(const char* value);
  inline void set_sparse_605_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_605_str();
  inline ::std::string* release_sparse_605_str();
  inline void set_allocated_sparse_605_str(::std::string* sparse_605_str);

  // optional string sparse_606_str = 618;
  inline bool has_sparse_606_str() const;
  inline void clear_sparse_606_str();
  static const int kSparse606StrFieldNumber = 618;
  inline const ::std::string& sparse_606_str() const;
  inline void set_sparse_606_str(const ::std::string& value);
  inline void set_sparse_606_str(const char* value);
  inline void set_sparse_606_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_606_str();
  inline ::std::string* release_sparse_606_str();
  inline void set_allocated_sparse_606_str(::std::string* sparse_606_str);

  // optional string sparse_607_str = 619;
  inline bool has_sparse_607_str() const;
  inline void clear_sparse_607_str();
  static const int kSparse607StrFieldNumber = 619;
  inline const ::std::string& sparse_607_str() const;
  inline void set_sparse_607_str(const ::std::string& value);
  inline void set_sparse_607_str(const char* value);
  inline void set_sparse_607_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_607_str();
  inline ::std::string* release_sparse_607_str();
  inline void set_allocated_sparse_607_str(::std::string* sparse_607_str);

  // optional string sparse_608_str = 620;
  inline bool has_sparse_608_str() const;
  inline void clear_sparse_608_str();
  static const int kSparse608StrFieldNumber = 620;
  inline const ::std::string& sparse_608_str() const;
  inline void set_sparse_608_str(const ::std::string& value);
  inline void set_sparse_608_str(const char* value);
  inline void set_sparse_608_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_608_str();
  inline ::std::string* release_sparse_608_str();
  inline void set_allocated_sparse_608_str(::std::string* sparse_608_str);

  // optional string sparse_609_str = 621;
  inline bool has_sparse_609_str() const;
  inline void clear_sparse_609_str();
  static const int kSparse609StrFieldNumber = 621;
  inline const ::std::string& sparse_609_str() const;
  inline void set_sparse_609_str(const ::std::string& value);
  inline void set_sparse_609_str(const char* value);
  inline void set_sparse_609_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_609_str();
  inline ::std::string* release_sparse_609_str();
  inline void set_allocated_sparse_609_str(::std::string* sparse_609_str);

  // optional string sparse_610_str = 622;
  inline bool has_sparse_610_str() const;
  inline void clear_sparse_610_str();
  static const int kSparse610StrFieldNumber = 622;
  inline const ::std::string& sparse_610_str() const;
  inline void set_sparse_610_str(const ::std::string& value);
  inline void set_sparse_610_str(const char* value);
  inline void set_sparse_610_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_610_str();
  inline ::std::string* release_sparse_610_str();
  inline void set_allocated_sparse_610_str(::std::string* sparse_610_str);

  // optional string sparse_611_str = 623;
  inline bool has_sparse_611_str() const;
  inline void clear_sparse_611_str();
  static const int kSparse611StrFieldNumber = 623;
  inline const ::std::string& sparse_611_str() const;
  inline void set_sparse_611_str(const ::std::string& value);
  inline void set_sparse_611_str(const char* value);
  inline void set_sparse_611_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_611_str();
  inline ::std::string* release_sparse_611_str();
  inline void set_allocated_sparse_611_str(::std::string* sparse_611_str);

  // optional string sparse_612_str = 624;
  inline bool has_sparse_612_str() const;
  inline void clear_sparse_612_str();
  static const int kSparse612StrFieldNumber = 624;
  inline const ::std::string& sparse_612_str() const;
  inline void set_sparse_612_str(const ::std::string& value);
  inline void set_sparse_612_str(const char* value);
  inline void set_sparse_612_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_612_str();
  inline ::std::string* release_sparse_612_str();
  inline void set_allocated_sparse_612_str(::std::string* sparse_612_str);

  // optional string sparse_613_str = 625;
  inline bool has_sparse_613_str() const;
  inline void clear_sparse_613_str();
  static const int kSparse613StrFieldNumber = 625;
  inline const ::std::string& sparse_613_str() const;
  inline void set_sparse_613_str(const ::std::string& value);
  inline void set_sparse_613_str(const char* value);
  inline void set_sparse_613_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_613_str();
  inline ::std::string* release_sparse_613_str();
  inline void set_allocated_sparse_613_str(::std::string* sparse_613_str);

  // optional string sparse_614_str = 626;
  inline bool has_sparse_614_str() const;
  inline void clear_sparse_614_str();
  static const int kSparse614StrFieldNumber = 626;
  inline const ::std::string& sparse_614_str() const;
  inline void set_sparse_614_str(const ::std::string& value);
  inline void set_sparse_614_str(const char* value);
  inline void set_sparse_614_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_614_str();
  inline ::std::string* release_sparse_614_str();
  inline void set_allocated_sparse_614_str(::std::string* sparse_614_str);

  // optional string sparse_615_str = 627;
  inline bool has_sparse_615_str() const;
  inline void clear_sparse_615_str();
  static const int kSparse615StrFieldNumber = 627;
  inline const ::std::string& sparse_615_str() const;
  inline void set_sparse_615_str(const ::std::string& value);
  inline void set_sparse_615_str(const char* value);
  inline void set_sparse_615_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_615_str();
  inline ::std::string* release_sparse_615_str();
  inline void set_allocated_sparse_615_str(::std::string* sparse_615_str);

  // optional string sparse_616_str = 628;
  inline bool has_sparse_616_str() const;
  inline void clear_sparse_616_str();
  static const int kSparse616StrFieldNumber = 628;
  inline const ::std::string& sparse_616_str() const;
  inline void set_sparse_616_str(const ::std::string& value);
  inline void set_sparse_616_str(const char* value);
  inline void set_sparse_616_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_616_str();
  inline ::std::string* release_sparse_616_str();
  inline void set_allocated_sparse_616_str(::std::string* sparse_616_str);

  // optional string sparse_617_str = 629;
  inline bool has_sparse_617_str() const;
  inline void clear_sparse_617_str();
  static const int kSparse617StrFieldNumber = 629;
  inline const ::std::string& sparse_617_str() const;
  inline void set_sparse_617_str(const ::std::string& value);
  inline void set_sparse_617_str(const char* value);
  inline void set_sparse_617_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_617_str();
  inline ::std::string* release_sparse_617_str();
  inline void set_allocated_sparse_617_str(::std::string* sparse_617_str);

  // optional string sparse_618_str = 630;
  inline bool has_sparse_618_str() const;
  inline void clear_sparse_618_str();
  static const int kSparse618StrFieldNumber = 630;
  inline const ::std::string& sparse_618_str() const;
  inline void set_sparse_618_str(const ::std::string& value);
  inline void set_sparse_618_str(const char* value);
  inline void set_sparse_618_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_618_str();
  inline ::std::string* release_sparse_618_str();
  inline void set_allocated_sparse_618_str(::std::string* sparse_618_str);

  // optional string sparse_619_str = 631;
  inline bool has_sparse_619_str() const;
  inline void clear_sparse_619_str();
  static const int kSparse619StrFieldNumber = 631;
  inline const ::std::string& sparse_619_str() const;
  inline void set_sparse_619_str(const ::std::string& value);
  inline void set_sparse_619_str(const char* value);
  inline void set_sparse_619_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_619_str();
  inline ::std::string* release_sparse_619_str();
  inline void set_allocated_sparse_619_str(::std::string* sparse_619_str);

  // optional string sparse_620_str = 632;
  inline bool has_sparse_620_str() const;
  inline void clear_sparse_620_str();
  static const int kSparse620StrFieldNumber = 632;
  inline const ::std::string& sparse_620_str() const;
  inline void set_sparse_620_str(const ::std::string& value);
  inline void set_sparse_620_str(const char* value);
  inline void set_sparse_620_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_620_str();
  inline ::std::string* release_sparse_620_str();
  inline void set_allocated_sparse_620_str(::std::string* sparse_620_str);

  // optional string sparse_621_str = 633;
  inline bool has_sparse_621_str() const;
  inline void clear_sparse_621_str();
  static const int kSparse621StrFieldNumber = 633;
  inline const ::std::string& sparse_621_str() const;
  inline void set_sparse_621_str(const ::std::string& value);
  inline void set_sparse_621_str(const char* value);
  inline void set_sparse_621_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_621_str();
  inline ::std::string* release_sparse_621_str();
  inline void set_allocated_sparse_621_str(::std::string* sparse_621_str);

  // optional string sparse_622_str = 634;
  inline bool has_sparse_622_str() const;
  inline void clear_sparse_622_str();
  static const int kSparse622StrFieldNumber = 634;
  inline const ::std::string& sparse_622_str() const;
  inline void set_sparse_622_str(const ::std::string& value);
  inline void set_sparse_622_str(const char* value);
  inline void set_sparse_622_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_622_str();
  inline ::std::string* release_sparse_622_str();
  inline void set_allocated_sparse_622_str(::std::string* sparse_622_str);

  // optional string sparse_623_str = 635;
  inline bool has_sparse_623_str() const;
  inline void clear_sparse_623_str();
  static const int kSparse623StrFieldNumber = 635;
  inline const ::std::string& sparse_623_str() const;
  inline void set_sparse_623_str(const ::std::string& value);
  inline void set_sparse_623_str(const char* value);
  inline void set_sparse_623_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_623_str();
  inline ::std::string* release_sparse_623_str();
  inline void set_allocated_sparse_623_str(::std::string* sparse_623_str);

  // optional string sparse_624_str = 636;
  inline bool has_sparse_624_str() const;
  inline void clear_sparse_624_str();
  static const int kSparse624StrFieldNumber = 636;
  inline const ::std::string& sparse_624_str() const;
  inline void set_sparse_624_str(const ::std::string& value);
  inline void set_sparse_624_str(const char* value);
  inline void set_sparse_624_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_624_str();
  inline ::std::string* release_sparse_624_str();
  inline void set_allocated_sparse_624_str(::std::string* sparse_624_str);

  // optional string sparse_625_str = 637;
  inline bool has_sparse_625_str() const;
  inline void clear_sparse_625_str();
  static const int kSparse625StrFieldNumber = 637;
  inline const ::std::string& sparse_625_str() const;
  inline void set_sparse_625_str(const ::std::string& value);
  inline void set_sparse_625_str(const char* value);
  inline void set_sparse_625_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_625_str();
  inline ::std::string* release_sparse_625_str();
  inline void set_allocated_sparse_625_str(::std::string* sparse_625_str);

  // optional string sparse_626_str = 638;
  inline bool has_sparse_626_str() const;
  inline void clear_sparse_626_str();
  static const int kSparse626StrFieldNumber = 638;
  inline const ::std::string& sparse_626_str() const;
  inline void set_sparse_626_str(const ::std::string& value);
  inline void set_sparse_626_str(const char* value);
  inline void set_sparse_626_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_626_str();
  inline ::std::string* release_sparse_626_str();
  inline void set_allocated_sparse_626_str(::std::string* sparse_626_str);

  // optional string sparse_627_str = 639;
  inline bool has_sparse_627_str() const;
  inline void clear_sparse_627_str();
  static const int kSparse627StrFieldNumber = 639;
  inline const ::std::string& sparse_627_str() const;
  inline void set_sparse_627_str(const ::std::string& value);
  inline void set_sparse_627_str(const char* value);
  inline void set_sparse_627_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_627_str();
  inline ::std::string* release_sparse_627_str();
  inline void set_allocated_sparse_627_str(::std::string* sparse_627_str);

  // optional string sparse_628_str = 640;
  inline bool has_sparse_628_str() const;
  inline void clear_sparse_628_str();
  static const int kSparse628StrFieldNumber = 640;
  inline const ::std::string& sparse_628_str() const;
  inline void set_sparse_628_str(const ::std::string& value);
  inline void set_sparse_628_str(const char* value);
  inline void set_sparse_628_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_628_str();
  inline ::std::string* release_sparse_628_str();
  inline void set_allocated_sparse_628_str(::std::string* sparse_628_str);

  // optional string sparse_629_str = 641;
  inline bool has_sparse_629_str() const;
  inline void clear_sparse_629_str();
  static const int kSparse629StrFieldNumber = 641;
  inline const ::std::string& sparse_629_str() const;
  inline void set_sparse_629_str(const ::std::string& value);
  inline void set_sparse_629_str(const char* value);
  inline void set_sparse_629_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_629_str();
  inline ::std::string* release_sparse_629_str();
  inline void set_allocated_sparse_629_str(::std::string* sparse_629_str);

  // optional string sparse_630_str = 642;
  inline bool has_sparse_630_str() const;
  inline void clear_sparse_630_str();
  static const int kSparse630StrFieldNumber = 642;
  inline const ::std::string& sparse_630_str() const;
  inline void set_sparse_630_str(const ::std::string& value);
  inline void set_sparse_630_str(const char* value);
  inline void set_sparse_630_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_630_str();
  inline ::std::string* release_sparse_630_str();
  inline void set_allocated_sparse_630_str(::std::string* sparse_630_str);

  // optional string sparse_631_str = 643;
  inline bool has_sparse_631_str() const;
  inline void clear_sparse_631_str();
  static const int kSparse631StrFieldNumber = 643;
  inline const ::std::string& sparse_631_str() const;
  inline void set_sparse_631_str(const ::std::string& value);
  inline void set_sparse_631_str(const char* value);
  inline void set_sparse_631_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_631_str();
  inline ::std::string* release_sparse_631_str();
  inline void set_allocated_sparse_631_str(::std::string* sparse_631_str);

  // optional string sparse_632_str = 644;
  inline bool has_sparse_632_str() const;
  inline void clear_sparse_632_str();
  static const int kSparse632StrFieldNumber = 644;
  inline const ::std::string& sparse_632_str() const;
  inline void set_sparse_632_str(const ::std::string& value);
  inline void set_sparse_632_str(const char* value);
  inline void set_sparse_632_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_632_str();
  inline ::std::string* release_sparse_632_str();
  inline void set_allocated_sparse_632_str(::std::string* sparse_632_str);

  // optional string sparse_633_str = 645;
  inline bool has_sparse_633_str() const;
  inline void clear_sparse_633_str();
  static const int kSparse633StrFieldNumber = 645;
  inline const ::std::string& sparse_633_str() const;
  inline void set_sparse_633_str(const ::std::string& value);
  inline void set_sparse_633_str(const char* value);
  inline void set_sparse_633_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_633_str();
  inline ::std::string* release_sparse_633_str();
  inline void set_allocated_sparse_633_str(::std::string* sparse_633_str);

  // optional string sparse_634_str = 646;
  inline bool has_sparse_634_str() const;
  inline void clear_sparse_634_str();
  static const int kSparse634StrFieldNumber = 646;
  inline const ::std::string& sparse_634_str() const;
  inline void set_sparse_634_str(const ::std::string& value);
  inline void set_sparse_634_str(const char* value);
  inline void set_sparse_634_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_634_str();
  inline ::std::string* release_sparse_634_str();
  inline void set_allocated_sparse_634_str(::std::string* sparse_634_str);

  // optional string sparse_635_str = 647;
  inline bool has_sparse_635_str() const;
  inline void clear_sparse_635_str();
  static const int kSparse635StrFieldNumber = 647;
  inline const ::std::string& sparse_635_str() const;
  inline void set_sparse_635_str(const ::std::string& value);
  inline void set_sparse_635_str(const char* value);
  inline void set_sparse_635_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_635_str();
  inline ::std::string* release_sparse_635_str();
  inline void set_allocated_sparse_635_str(::std::string* sparse_635_str);

  // optional string sparse_636_str = 648;
  inline bool has_sparse_636_str() const;
  inline void clear_sparse_636_str();
  static const int kSparse636StrFieldNumber = 648;
  inline const ::std::string& sparse_636_str() const;
  inline void set_sparse_636_str(const ::std::string& value);
  inline void set_sparse_636_str(const char* value);
  inline void set_sparse_636_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_636_str();
  inline ::std::string* release_sparse_636_str();
  inline void set_allocated_sparse_636_str(::std::string* sparse_636_str);

  // optional string sparse_637_str = 649;
  inline bool has_sparse_637_str() const;
  inline void clear_sparse_637_str();
  static const int kSparse637StrFieldNumber = 649;
  inline const ::std::string& sparse_637_str() const;
  inline void set_sparse_637_str(const ::std::string& value);
  inline void set_sparse_637_str(const char* value);
  inline void set_sparse_637_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_637_str();
  inline ::std::string* release_sparse_637_str();
  inline void set_allocated_sparse_637_str(::std::string* sparse_637_str);

  // optional string sparse_638_str = 650;
  inline bool has_sparse_638_str() const;
  inline void clear_sparse_638_str();
  static const int kSparse638StrFieldNumber = 650;
  inline const ::std::string& sparse_638_str() const;
  inline void set_sparse_638_str(const ::std::string& value);
  inline void set_sparse_638_str(const char* value);
  inline void set_sparse_638_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_638_str();
  inline ::std::string* release_sparse_638_str();
  inline void set_allocated_sparse_638_str(::std::string* sparse_638_str);

  // optional string sparse_639_str = 651;
  inline bool has_sparse_639_str() const;
  inline void clear_sparse_639_str();
  static const int kSparse639StrFieldNumber = 651;
  inline const ::std::string& sparse_639_str() const;
  inline void set_sparse_639_str(const ::std::string& value);
  inline void set_sparse_639_str(const char* value);
  inline void set_sparse_639_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_639_str();
  inline ::std::string* release_sparse_639_str();
  inline void set_allocated_sparse_639_str(::std::string* sparse_639_str);

  // optional string sparse_640_str = 652;
  inline bool has_sparse_640_str() const;
  inline void clear_sparse_640_str();
  static const int kSparse640StrFieldNumber = 652;
  inline const ::std::string& sparse_640_str() const;
  inline void set_sparse_640_str(const ::std::string& value);
  inline void set_sparse_640_str(const char* value);
  inline void set_sparse_640_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_640_str();
  inline ::std::string* release_sparse_640_str();
  inline void set_allocated_sparse_640_str(::std::string* sparse_640_str);

  // optional string sparse_641_str = 653;
  inline bool has_sparse_641_str() const;
  inline void clear_sparse_641_str();
  static const int kSparse641StrFieldNumber = 653;
  inline const ::std::string& sparse_641_str() const;
  inline void set_sparse_641_str(const ::std::string& value);
  inline void set_sparse_641_str(const char* value);
  inline void set_sparse_641_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_641_str();
  inline ::std::string* release_sparse_641_str();
  inline void set_allocated_sparse_641_str(::std::string* sparse_641_str);

  // optional string sparse_642_str = 654;
  inline bool has_sparse_642_str() const;
  inline void clear_sparse_642_str();
  static const int kSparse642StrFieldNumber = 654;
  inline const ::std::string& sparse_642_str() const;
  inline void set_sparse_642_str(const ::std::string& value);
  inline void set_sparse_642_str(const char* value);
  inline void set_sparse_642_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_642_str();
  inline ::std::string* release_sparse_642_str();
  inline void set_allocated_sparse_642_str(::std::string* sparse_642_str);

  // optional string sparse_643_str = 655;
  inline bool has_sparse_643_str() const;
  inline void clear_sparse_643_str();
  static const int kSparse643StrFieldNumber = 655;
  inline const ::std::string& sparse_643_str() const;
  inline void set_sparse_643_str(const ::std::string& value);
  inline void set_sparse_643_str(const char* value);
  inline void set_sparse_643_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_643_str();
  inline ::std::string* release_sparse_643_str();
  inline void set_allocated_sparse_643_str(::std::string* sparse_643_str);

  // optional string sparse_644_str = 656;
  inline bool has_sparse_644_str() const;
  inline void clear_sparse_644_str();
  static const int kSparse644StrFieldNumber = 656;
  inline const ::std::string& sparse_644_str() const;
  inline void set_sparse_644_str(const ::std::string& value);
  inline void set_sparse_644_str(const char* value);
  inline void set_sparse_644_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_644_str();
  inline ::std::string* release_sparse_644_str();
  inline void set_allocated_sparse_644_str(::std::string* sparse_644_str);

  // optional string sparse_645_str = 657;
  inline bool has_sparse_645_str() const;
  inline void clear_sparse_645_str();
  static const int kSparse645StrFieldNumber = 657;
  inline const ::std::string& sparse_645_str() const;
  inline void set_sparse_645_str(const ::std::string& value);
  inline void set_sparse_645_str(const char* value);
  inline void set_sparse_645_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_645_str();
  inline ::std::string* release_sparse_645_str();
  inline void set_allocated_sparse_645_str(::std::string* sparse_645_str);

  // optional string sparse_646_str = 658;
  inline bool has_sparse_646_str() const;
  inline void clear_sparse_646_str();
  static const int kSparse646StrFieldNumber = 658;
  inline const ::std::string& sparse_646_str() const;
  inline void set_sparse_646_str(const ::std::string& value);
  inline void set_sparse_646_str(const char* value);
  inline void set_sparse_646_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_646_str();
  inline ::std::string* release_sparse_646_str();
  inline void set_allocated_sparse_646_str(::std::string* sparse_646_str);

  // optional string sparse_647_str = 659;
  inline bool has_sparse_647_str() const;
  inline void clear_sparse_647_str();
  static const int kSparse647StrFieldNumber = 659;
  inline const ::std::string& sparse_647_str() const;
  inline void set_sparse_647_str(const ::std::string& value);
  inline void set_sparse_647_str(const char* value);
  inline void set_sparse_647_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_647_str();
  inline ::std::string* release_sparse_647_str();
  inline void set_allocated_sparse_647_str(::std::string* sparse_647_str);

  // optional string sparse_648_str = 660;
  inline bool has_sparse_648_str() const;
  inline void clear_sparse_648_str();
  static const int kSparse648StrFieldNumber = 660;
  inline const ::std::string& sparse_648_str() const;
  inline void set_sparse_648_str(const ::std::string& value);
  inline void set_sparse_648_str(const char* value);
  inline void set_sparse_648_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_648_str();
  inline ::std::string* release_sparse_648_str();
  inline void set_allocated_sparse_648_str(::std::string* sparse_648_str);

  // optional string sparse_649_str = 661;
  inline bool has_sparse_649_str() const;
  inline void clear_sparse_649_str();
  static const int kSparse649StrFieldNumber = 661;
  inline const ::std::string& sparse_649_str() const;
  inline void set_sparse_649_str(const ::std::string& value);
  inline void set_sparse_649_str(const char* value);
  inline void set_sparse_649_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_649_str();
  inline ::std::string* release_sparse_649_str();
  inline void set_allocated_sparse_649_str(::std::string* sparse_649_str);

  // optional string sparse_650_str = 662;
  inline bool has_sparse_650_str() const;
  inline void clear_sparse_650_str();
  static const int kSparse650StrFieldNumber = 662;
  inline const ::std::string& sparse_650_str() const;
  inline void set_sparse_650_str(const ::std::string& value);
  inline void set_sparse_650_str(const char* value);
  inline void set_sparse_650_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_650_str();
  inline ::std::string* release_sparse_650_str();
  inline void set_allocated_sparse_650_str(::std::string* sparse_650_str);

  // optional string sparse_651_str = 663;
  inline bool has_sparse_651_str() const;
  inline void clear_sparse_651_str();
  static const int kSparse651StrFieldNumber = 663;
  inline const ::std::string& sparse_651_str() const;
  inline void set_sparse_651_str(const ::std::string& value);
  inline void set_sparse_651_str(const char* value);
  inline void set_sparse_651_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_651_str();
  inline ::std::string* release_sparse_651_str();
  inline void set_allocated_sparse_651_str(::std::string* sparse_651_str);

  // optional string sparse_652_str = 664;
  inline bool has_sparse_652_str() const;
  inline void clear_sparse_652_str();
  static const int kSparse652StrFieldNumber = 664;
  inline const ::std::string& sparse_652_str() const;
  inline void set_sparse_652_str(const ::std::string& value);
  inline void set_sparse_652_str(const char* value);
  inline void set_sparse_652_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_652_str();
  inline ::std::string* release_sparse_652_str();
  inline void set_allocated_sparse_652_str(::std::string* sparse_652_str);

  // optional string sparse_653_str = 665;
  inline bool has_sparse_653_str() const;
  inline void clear_sparse_653_str();
  static const int kSparse653StrFieldNumber = 665;
  inline const ::std::string& sparse_653_str() const;
  inline void set_sparse_653_str(const ::std::string& value);
  inline void set_sparse_653_str(const char* value);
  inline void set_sparse_653_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_653_str();
  inline ::std::string* release_sparse_653_str();
  inline void set_allocated_sparse_653_str(::std::string* sparse_653_str);

  // optional string sparse_654_str = 666;
  inline bool has_sparse_654_str() const;
  inline void clear_sparse_654_str();
  static const int kSparse654StrFieldNumber = 666;
  inline const ::std::string& sparse_654_str() const;
  inline void set_sparse_654_str(const ::std::string& value);
  inline void set_sparse_654_str(const char* value);
  inline void set_sparse_654_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_654_str();
  inline ::std::string* release_sparse_654_str();
  inline void set_allocated_sparse_654_str(::std::string* sparse_654_str);

  // optional string sparse_655_str = 667;
  inline bool has_sparse_655_str() const;
  inline void clear_sparse_655_str();
  static const int kSparse655StrFieldNumber = 667;
  inline const ::std::string& sparse_655_str() const;
  inline void set_sparse_655_str(const ::std::string& value);
  inline void set_sparse_655_str(const char* value);
  inline void set_sparse_655_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_655_str();
  inline ::std::string* release_sparse_655_str();
  inline void set_allocated_sparse_655_str(::std::string* sparse_655_str);

  // optional string sparse_656_str = 668;
  inline bool has_sparse_656_str() const;
  inline void clear_sparse_656_str();
  static const int kSparse656StrFieldNumber = 668;
  inline const ::std::string& sparse_656_str() const;
  inline void set_sparse_656_str(const ::std::string& value);
  inline void set_sparse_656_str(const char* value);
  inline void set_sparse_656_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_656_str();
  inline ::std::string* release_sparse_656_str();
  inline void set_allocated_sparse_656_str(::std::string* sparse_656_str);

  // optional string sparse_657_str = 669;
  inline bool has_sparse_657_str() const;
  inline void clear_sparse_657_str();
  static const int kSparse657StrFieldNumber = 669;
  inline const ::std::string& sparse_657_str() const;
  inline void set_sparse_657_str(const ::std::string& value);
  inline void set_sparse_657_str(const char* value);
  inline void set_sparse_657_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_657_str();
  inline ::std::string* release_sparse_657_str();
  inline void set_allocated_sparse_657_str(::std::string* sparse_657_str);

  // optional string sparse_658_str = 670;
  inline bool has_sparse_658_str() const;
  inline void clear_sparse_658_str();
  static const int kSparse658StrFieldNumber = 670;
  inline const ::std::string& sparse_658_str() const;
  inline void set_sparse_658_str(const ::std::string& value);
  inline void set_sparse_658_str(const char* value);
  inline void set_sparse_658_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_658_str();
  inline ::std::string* release_sparse_658_str();
  inline void set_allocated_sparse_658_str(::std::string* sparse_658_str);

  // optional string sparse_659_str = 671;
  inline bool has_sparse_659_str() const;
  inline void clear_sparse_659_str();
  static const int kSparse659StrFieldNumber = 671;
  inline const ::std::string& sparse_659_str() const;
  inline void set_sparse_659_str(const ::std::string& value);
  inline void set_sparse_659_str(const char* value);
  inline void set_sparse_659_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_659_str();
  inline ::std::string* release_sparse_659_str();
  inline void set_allocated_sparse_659_str(::std::string* sparse_659_str);

  // optional string sparse_660_str = 672;
  inline bool has_sparse_660_str() const;
  inline void clear_sparse_660_str();
  static const int kSparse660StrFieldNumber = 672;
  inline const ::std::string& sparse_660_str() const;
  inline void set_sparse_660_str(const ::std::string& value);
  inline void set_sparse_660_str(const char* value);
  inline void set_sparse_660_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_660_str();
  inline ::std::string* release_sparse_660_str();
  inline void set_allocated_sparse_660_str(::std::string* sparse_660_str);

  // optional string sparse_661_str = 673;
  inline bool has_sparse_661_str() const;
  inline void clear_sparse_661_str();
  static const int kSparse661StrFieldNumber = 673;
  inline const ::std::string& sparse_661_str() const;
  inline void set_sparse_661_str(const ::std::string& value);
  inline void set_sparse_661_str(const char* value);
  inline void set_sparse_661_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_661_str();
  inline ::std::string* release_sparse_661_str();
  inline void set_allocated_sparse_661_str(::std::string* sparse_661_str);

  // optional string sparse_662_str = 674;
  inline bool has_sparse_662_str() const;
  inline void clear_sparse_662_str();
  static const int kSparse662StrFieldNumber = 674;
  inline const ::std::string& sparse_662_str() const;
  inline void set_sparse_662_str(const ::std::string& value);
  inline void set_sparse_662_str(const char* value);
  inline void set_sparse_662_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_662_str();
  inline ::std::string* release_sparse_662_str();
  inline void set_allocated_sparse_662_str(::std::string* sparse_662_str);

  // optional string sparse_663_str = 675;
  inline bool has_sparse_663_str() const;
  inline void clear_sparse_663_str();
  static const int kSparse663StrFieldNumber = 675;
  inline const ::std::string& sparse_663_str() const;
  inline void set_sparse_663_str(const ::std::string& value);
  inline void set_sparse_663_str(const char* value);
  inline void set_sparse_663_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_663_str();
  inline ::std::string* release_sparse_663_str();
  inline void set_allocated_sparse_663_str(::std::string* sparse_663_str);

  // optional string sparse_664_str = 676;
  inline bool has_sparse_664_str() const;
  inline void clear_sparse_664_str();
  static const int kSparse664StrFieldNumber = 676;
  inline const ::std::string& sparse_664_str() const;
  inline void set_sparse_664_str(const ::std::string& value);
  inline void set_sparse_664_str(const char* value);
  inline void set_sparse_664_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_664_str();
  inline ::std::string* release_sparse_664_str();
  inline void set_allocated_sparse_664_str(::std::string* sparse_664_str);

  // optional string sparse_665_str = 677;
  inline bool has_sparse_665_str() const;
  inline void clear_sparse_665_str();
  static const int kSparse665StrFieldNumber = 677;
  inline const ::std::string& sparse_665_str() const;
  inline void set_sparse_665_str(const ::std::string& value);
  inline void set_sparse_665_str(const char* value);
  inline void set_sparse_665_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_665_str();
  inline ::std::string* release_sparse_665_str();
  inline void set_allocated_sparse_665_str(::std::string* sparse_665_str);

  // optional string sparse_666_str = 678;
  inline bool has_sparse_666_str() const;
  inline void clear_sparse_666_str();
  static const int kSparse666StrFieldNumber = 678;
  inline const ::std::string& sparse_666_str() const;
  inline void set_sparse_666_str(const ::std::string& value);
  inline void set_sparse_666_str(const char* value);
  inline void set_sparse_666_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_666_str();
  inline ::std::string* release_sparse_666_str();
  inline void set_allocated_sparse_666_str(::std::string* sparse_666_str);

  // optional string sparse_667_str = 679;
  inline bool has_sparse_667_str() const;
  inline void clear_sparse_667_str();
  static const int kSparse667StrFieldNumber = 679;
  inline const ::std::string& sparse_667_str() const;
  inline void set_sparse_667_str(const ::std::string& value);
  inline void set_sparse_667_str(const char* value);
  inline void set_sparse_667_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_667_str();
  inline ::std::string* release_sparse_667_str();
  inline void set_allocated_sparse_667_str(::std::string* sparse_667_str);

  // optional string sparse_668_str = 680;
  inline bool has_sparse_668_str() const;
  inline void clear_sparse_668_str();
  static const int kSparse668StrFieldNumber = 680;
  inline const ::std::string& sparse_668_str() const;
  inline void set_sparse_668_str(const ::std::string& value);
  inline void set_sparse_668_str(const char* value);
  inline void set_sparse_668_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_668_str();
  inline ::std::string* release_sparse_668_str();
  inline void set_allocated_sparse_668_str(::std::string* sparse_668_str);

  // optional string sparse_669_str = 681;
  inline bool has_sparse_669_str() const;
  inline void clear_sparse_669_str();
  static const int kSparse669StrFieldNumber = 681;
  inline const ::std::string& sparse_669_str() const;
  inline void set_sparse_669_str(const ::std::string& value);
  inline void set_sparse_669_str(const char* value);
  inline void set_sparse_669_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_669_str();
  inline ::std::string* release_sparse_669_str();
  inline void set_allocated_sparse_669_str(::std::string* sparse_669_str);

  // optional string sparse_670_str = 682;
  inline bool has_sparse_670_str() const;
  inline void clear_sparse_670_str();
  static const int kSparse670StrFieldNumber = 682;
  inline const ::std::string& sparse_670_str() const;
  inline void set_sparse_670_str(const ::std::string& value);
  inline void set_sparse_670_str(const char* value);
  inline void set_sparse_670_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_670_str();
  inline ::std::string* release_sparse_670_str();
  inline void set_allocated_sparse_670_str(::std::string* sparse_670_str);

  // optional string sparse_671_str = 683;
  inline bool has_sparse_671_str() const;
  inline void clear_sparse_671_str();
  static const int kSparse671StrFieldNumber = 683;
  inline const ::std::string& sparse_671_str() const;
  inline void set_sparse_671_str(const ::std::string& value);
  inline void set_sparse_671_str(const char* value);
  inline void set_sparse_671_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_671_str();
  inline ::std::string* release_sparse_671_str();
  inline void set_allocated_sparse_671_str(::std::string* sparse_671_str);

  // optional string sparse_672_str = 684;
  inline bool has_sparse_672_str() const;
  inline void clear_sparse_672_str();
  static const int kSparse672StrFieldNumber = 684;
  inline const ::std::string& sparse_672_str() const;
  inline void set_sparse_672_str(const ::std::string& value);
  inline void set_sparse_672_str(const char* value);
  inline void set_sparse_672_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_672_str();
  inline ::std::string* release_sparse_672_str();
  inline void set_allocated_sparse_672_str(::std::string* sparse_672_str);

  // optional string sparse_673_str = 685;
  inline bool has_sparse_673_str() const;
  inline void clear_sparse_673_str();
  static const int kSparse673StrFieldNumber = 685;
  inline const ::std::string& sparse_673_str() const;
  inline void set_sparse_673_str(const ::std::string& value);
  inline void set_sparse_673_str(const char* value);
  inline void set_sparse_673_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_673_str();
  inline ::std::string* release_sparse_673_str();
  inline void set_allocated_sparse_673_str(::std::string* sparse_673_str);

  // optional string sparse_674_str = 686;
  inline bool has_sparse_674_str() const;
  inline void clear_sparse_674_str();
  static const int kSparse674StrFieldNumber = 686;
  inline const ::std::string& sparse_674_str() const;
  inline void set_sparse_674_str(const ::std::string& value);
  inline void set_sparse_674_str(const char* value);
  inline void set_sparse_674_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_674_str();
  inline ::std::string* release_sparse_674_str();
  inline void set_allocated_sparse_674_str(::std::string* sparse_674_str);

  // optional string sparse_675_str = 687;
  inline bool has_sparse_675_str() const;
  inline void clear_sparse_675_str();
  static const int kSparse675StrFieldNumber = 687;
  inline const ::std::string& sparse_675_str() const;
  inline void set_sparse_675_str(const ::std::string& value);
  inline void set_sparse_675_str(const char* value);
  inline void set_sparse_675_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_675_str();
  inline ::std::string* release_sparse_675_str();
  inline void set_allocated_sparse_675_str(::std::string* sparse_675_str);

  // optional string sparse_676_str = 688;
  inline bool has_sparse_676_str() const;
  inline void clear_sparse_676_str();
  static const int kSparse676StrFieldNumber = 688;
  inline const ::std::string& sparse_676_str() const;
  inline void set_sparse_676_str(const ::std::string& value);
  inline void set_sparse_676_str(const char* value);
  inline void set_sparse_676_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_676_str();
  inline ::std::string* release_sparse_676_str();
  inline void set_allocated_sparse_676_str(::std::string* sparse_676_str);

  // optional string sparse_677_str = 689;
  inline bool has_sparse_677_str() const;
  inline void clear_sparse_677_str();
  static const int kSparse677StrFieldNumber = 689;
  inline const ::std::string& sparse_677_str() const;
  inline void set_sparse_677_str(const ::std::string& value);
  inline void set_sparse_677_str(const char* value);
  inline void set_sparse_677_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_677_str();
  inline ::std::string* release_sparse_677_str();
  inline void set_allocated_sparse_677_str(::std::string* sparse_677_str);

  // optional string sparse_678_str = 690;
  inline bool has_sparse_678_str() const;
  inline void clear_sparse_678_str();
  static const int kSparse678StrFieldNumber = 690;
  inline const ::std::string& sparse_678_str() const;
  inline void set_sparse_678_str(const ::std::string& value);
  inline void set_sparse_678_str(const char* value);
  inline void set_sparse_678_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_678_str();
  inline ::std::string* release_sparse_678_str();
  inline void set_allocated_sparse_678_str(::std::string* sparse_678_str);

  // optional string sparse_679_str = 691;
  inline bool has_sparse_679_str() const;
  inline void clear_sparse_679_str();
  static const int kSparse679StrFieldNumber = 691;
  inline const ::std::string& sparse_679_str() const;
  inline void set_sparse_679_str(const ::std::string& value);
  inline void set_sparse_679_str(const char* value);
  inline void set_sparse_679_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_679_str();
  inline ::std::string* release_sparse_679_str();
  inline void set_allocated_sparse_679_str(::std::string* sparse_679_str);

  // optional string sparse_680_str = 692;
  inline bool has_sparse_680_str() const;
  inline void clear_sparse_680_str();
  static const int kSparse680StrFieldNumber = 692;
  inline const ::std::string& sparse_680_str() const;
  inline void set_sparse_680_str(const ::std::string& value);
  inline void set_sparse_680_str(const char* value);
  inline void set_sparse_680_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_680_str();
  inline ::std::string* release_sparse_680_str();
  inline void set_allocated_sparse_680_str(::std::string* sparse_680_str);

  // optional string sparse_681_str = 693;
  inline bool has_sparse_681_str() const;
  inline void clear_sparse_681_str();
  static const int kSparse681StrFieldNumber = 693;
  inline const ::std::string& sparse_681_str() const;
  inline void set_sparse_681_str(const ::std::string& value);
  inline void set_sparse_681_str(const char* value);
  inline void set_sparse_681_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_681_str();
  inline ::std::string* release_sparse_681_str();
  inline void set_allocated_sparse_681_str(::std::string* sparse_681_str);

  // optional string sparse_682_str = 694;
  inline bool has_sparse_682_str() const;
  inline void clear_sparse_682_str();
  static const int kSparse682StrFieldNumber = 694;
  inline const ::std::string& sparse_682_str() const;
  inline void set_sparse_682_str(const ::std::string& value);
  inline void set_sparse_682_str(const char* value);
  inline void set_sparse_682_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_682_str();
  inline ::std::string* release_sparse_682_str();
  inline void set_allocated_sparse_682_str(::std::string* sparse_682_str);

  // optional string sparse_683_str = 695;
  inline bool has_sparse_683_str() const;
  inline void clear_sparse_683_str();
  static const int kSparse683StrFieldNumber = 695;
  inline const ::std::string& sparse_683_str() const;
  inline void set_sparse_683_str(const ::std::string& value);
  inline void set_sparse_683_str(const char* value);
  inline void set_sparse_683_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_683_str();
  inline ::std::string* release_sparse_683_str();
  inline void set_allocated_sparse_683_str(::std::string* sparse_683_str);

  // optional string sparse_684_str = 696;
  inline bool has_sparse_684_str() const;
  inline void clear_sparse_684_str();
  static const int kSparse684StrFieldNumber = 696;
  inline const ::std::string& sparse_684_str() const;
  inline void set_sparse_684_str(const ::std::string& value);
  inline void set_sparse_684_str(const char* value);
  inline void set_sparse_684_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_684_str();
  inline ::std::string* release_sparse_684_str();
  inline void set_allocated_sparse_684_str(::std::string* sparse_684_str);

  // optional string sparse_685_str = 697;
  inline bool has_sparse_685_str() const;
  inline void clear_sparse_685_str();
  static const int kSparse685StrFieldNumber = 697;
  inline const ::std::string& sparse_685_str() const;
  inline void set_sparse_685_str(const ::std::string& value);
  inline void set_sparse_685_str(const char* value);
  inline void set_sparse_685_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_685_str();
  inline ::std::string* release_sparse_685_str();
  inline void set_allocated_sparse_685_str(::std::string* sparse_685_str);

  // optional string sparse_686_str = 698;
  inline bool has_sparse_686_str() const;
  inline void clear_sparse_686_str();
  static const int kSparse686StrFieldNumber = 698;
  inline const ::std::string& sparse_686_str() const;
  inline void set_sparse_686_str(const ::std::string& value);
  inline void set_sparse_686_str(const char* value);
  inline void set_sparse_686_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_686_str();
  inline ::std::string* release_sparse_686_str();
  inline void set_allocated_sparse_686_str(::std::string* sparse_686_str);

  // optional string sparse_687_str = 699;
  inline bool has_sparse_687_str() const;
  inline void clear_sparse_687_str();
  static const int kSparse687StrFieldNumber = 699;
  inline const ::std::string& sparse_687_str() const;
  inline void set_sparse_687_str(const ::std::string& value);
  inline void set_sparse_687_str(const char* value);
  inline void set_sparse_687_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_687_str();
  inline ::std::string* release_sparse_687_str();
  inline void set_allocated_sparse_687_str(::std::string* sparse_687_str);

  // optional string sparse_688_str = 700;
  inline bool has_sparse_688_str() const;
  inline void clear_sparse_688_str();
  static const int kSparse688StrFieldNumber = 700;
  inline const ::std::string& sparse_688_str() const;
  inline void set_sparse_688_str(const ::std::string& value);
  inline void set_sparse_688_str(const char* value);
  inline void set_sparse_688_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_688_str();
  inline ::std::string* release_sparse_688_str();
  inline void set_allocated_sparse_688_str(::std::string* sparse_688_str);

  // optional string sparse_689_str = 701;
  inline bool has_sparse_689_str() const;
  inline void clear_sparse_689_str();
  static const int kSparse689StrFieldNumber = 701;
  inline const ::std::string& sparse_689_str() const;
  inline void set_sparse_689_str(const ::std::string& value);
  inline void set_sparse_689_str(const char* value);
  inline void set_sparse_689_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_689_str();
  inline ::std::string* release_sparse_689_str();
  inline void set_allocated_sparse_689_str(::std::string* sparse_689_str);

  // optional string sparse_690_str = 702;
  inline bool has_sparse_690_str() const;
  inline void clear_sparse_690_str();
  static const int kSparse690StrFieldNumber = 702;
  inline const ::std::string& sparse_690_str() const;
  inline void set_sparse_690_str(const ::std::string& value);
  inline void set_sparse_690_str(const char* value);
  inline void set_sparse_690_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_690_str();
  inline ::std::string* release_sparse_690_str();
  inline void set_allocated_sparse_690_str(::std::string* sparse_690_str);

  // optional string sparse_691_str = 703;
  inline bool has_sparse_691_str() const;
  inline void clear_sparse_691_str();
  static const int kSparse691StrFieldNumber = 703;
  inline const ::std::string& sparse_691_str() const;
  inline void set_sparse_691_str(const ::std::string& value);
  inline void set_sparse_691_str(const char* value);
  inline void set_sparse_691_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_691_str();
  inline ::std::string* release_sparse_691_str();
  inline void set_allocated_sparse_691_str(::std::string* sparse_691_str);

  // optional string sparse_692_str = 704;
  inline bool has_sparse_692_str() const;
  inline void clear_sparse_692_str();
  static const int kSparse692StrFieldNumber = 704;
  inline const ::std::string& sparse_692_str() const;
  inline void set_sparse_692_str(const ::std::string& value);
  inline void set_sparse_692_str(const char* value);
  inline void set_sparse_692_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_692_str();
  inline ::std::string* release_sparse_692_str();
  inline void set_allocated_sparse_692_str(::std::string* sparse_692_str);

  // optional string sparse_693_str = 705;
  inline bool has_sparse_693_str() const;
  inline void clear_sparse_693_str();
  static const int kSparse693StrFieldNumber = 705;
  inline const ::std::string& sparse_693_str() const;
  inline void set_sparse_693_str(const ::std::string& value);
  inline void set_sparse_693_str(const char* value);
  inline void set_sparse_693_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_693_str();
  inline ::std::string* release_sparse_693_str();
  inline void set_allocated_sparse_693_str(::std::string* sparse_693_str);

  // optional string sparse_694_str = 706;
  inline bool has_sparse_694_str() const;
  inline void clear_sparse_694_str();
  static const int kSparse694StrFieldNumber = 706;
  inline const ::std::string& sparse_694_str() const;
  inline void set_sparse_694_str(const ::std::string& value);
  inline void set_sparse_694_str(const char* value);
  inline void set_sparse_694_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_694_str();
  inline ::std::string* release_sparse_694_str();
  inline void set_allocated_sparse_694_str(::std::string* sparse_694_str);

  // optional string sparse_695_str = 707;
  inline bool has_sparse_695_str() const;
  inline void clear_sparse_695_str();
  static const int kSparse695StrFieldNumber = 707;
  inline const ::std::string& sparse_695_str() const;
  inline void set_sparse_695_str(const ::std::string& value);
  inline void set_sparse_695_str(const char* value);
  inline void set_sparse_695_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_695_str();
  inline ::std::string* release_sparse_695_str();
  inline void set_allocated_sparse_695_str(::std::string* sparse_695_str);

  // optional string sparse_696_str = 708;
  inline bool has_sparse_696_str() const;
  inline void clear_sparse_696_str();
  static const int kSparse696StrFieldNumber = 708;
  inline const ::std::string& sparse_696_str() const;
  inline void set_sparse_696_str(const ::std::string& value);
  inline void set_sparse_696_str(const char* value);
  inline void set_sparse_696_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_696_str();
  inline ::std::string* release_sparse_696_str();
  inline void set_allocated_sparse_696_str(::std::string* sparse_696_str);

  // optional string sparse_697_str = 709;
  inline bool has_sparse_697_str() const;
  inline void clear_sparse_697_str();
  static const int kSparse697StrFieldNumber = 709;
  inline const ::std::string& sparse_697_str() const;
  inline void set_sparse_697_str(const ::std::string& value);
  inline void set_sparse_697_str(const char* value);
  inline void set_sparse_697_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_697_str();
  inline ::std::string* release_sparse_697_str();
  inline void set_allocated_sparse_697_str(::std::string* sparse_697_str);

  // optional string sparse_698_str = 710;
  inline bool has_sparse_698_str() const;
  inline void clear_sparse_698_str();
  static const int kSparse698StrFieldNumber = 710;
  inline const ::std::string& sparse_698_str() const;
  inline void set_sparse_698_str(const ::std::string& value);
  inline void set_sparse_698_str(const char* value);
  inline void set_sparse_698_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_698_str();
  inline ::std::string* release_sparse_698_str();
  inline void set_allocated_sparse_698_str(::std::string* sparse_698_str);

  // optional string sparse_699_str = 711;
  inline bool has_sparse_699_str() const;
  inline void clear_sparse_699_str();
  static const int kSparse699StrFieldNumber = 711;
  inline const ::std::string& sparse_699_str() const;
  inline void set_sparse_699_str(const ::std::string& value);
  inline void set_sparse_699_str(const char* value);
  inline void set_sparse_699_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_699_str();
  inline ::std::string* release_sparse_699_str();
  inline void set_allocated_sparse_699_str(::std::string* sparse_699_str);

  // optional string sparse_700_str = 712;
  inline bool has_sparse_700_str() const;
  inline void clear_sparse_700_str();
  static const int kSparse700StrFieldNumber = 712;
  inline const ::std::string& sparse_700_str() const;
  inline void set_sparse_700_str(const ::std::string& value);
  inline void set_sparse_700_str(const char* value);
  inline void set_sparse_700_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_700_str();
  inline ::std::string* release_sparse_700_str();
  inline void set_allocated_sparse_700_str(::std::string* sparse_700_str);

  // optional string sparse_701_str = 713;
  inline bool has_sparse_701_str() const;
  inline void clear_sparse_701_str();
  static const int kSparse701StrFieldNumber = 713;
  inline const ::std::string& sparse_701_str() const;
  inline void set_sparse_701_str(const ::std::string& value);
  inline void set_sparse_701_str(const char* value);
  inline void set_sparse_701_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_701_str();
  inline ::std::string* release_sparse_701_str();
  inline void set_allocated_sparse_701_str(::std::string* sparse_701_str);

  // optional string sparse_702_str = 714;
  inline bool has_sparse_702_str() const;
  inline void clear_sparse_702_str();
  static const int kSparse702StrFieldNumber = 714;
  inline const ::std::string& sparse_702_str() const;
  inline void set_sparse_702_str(const ::std::string& value);
  inline void set_sparse_702_str(const char* value);
  inline void set_sparse_702_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_702_str();
  inline ::std::string* release_sparse_702_str();
  inline void set_allocated_sparse_702_str(::std::string* sparse_702_str);

  // optional string sparse_703_str = 715;
  inline bool has_sparse_703_str() const;
  inline void clear_sparse_703_str();
  static const int kSparse703StrFieldNumber = 715;
  inline const ::std::string& sparse_703_str() const;
  inline void set_sparse_703_str(const ::std::string& value);
  inline void set_sparse_703_str(const char* value);
  inline void set_sparse_703_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_703_str();
  inline ::std::string* release_sparse_703_str();
  inline void set_allocated_sparse_703_str(::std::string* sparse_703_str);

  // optional string sparse_704_str = 716;
  inline bool has_sparse_704_str() const;
  inline void clear_sparse_704_str();
  static const int kSparse704StrFieldNumber = 716;
  inline const ::std::string& sparse_704_str() const;
  inline void set_sparse_704_str(const ::std::string& value);
  inline void set_sparse_704_str(const char* value);
  inline void set_sparse_704_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_704_str();
  inline ::std::string* release_sparse_704_str();
  inline void set_allocated_sparse_704_str(::std::string* sparse_704_str);

  // optional string sparse_705_str = 717;
  inline bool has_sparse_705_str() const;
  inline void clear_sparse_705_str();
  static const int kSparse705StrFieldNumber = 717;
  inline const ::std::string& sparse_705_str() const;
  inline void set_sparse_705_str(const ::std::string& value);
  inline void set_sparse_705_str(const char* value);
  inline void set_sparse_705_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_705_str();
  inline ::std::string* release_sparse_705_str();
  inline void set_allocated_sparse_705_str(::std::string* sparse_705_str);

  // optional string sparse_706_str = 718;
  inline bool has_sparse_706_str() const;
  inline void clear_sparse_706_str();
  static const int kSparse706StrFieldNumber = 718;
  inline const ::std::string& sparse_706_str() const;
  inline void set_sparse_706_str(const ::std::string& value);
  inline void set_sparse_706_str(const char* value);
  inline void set_sparse_706_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_706_str();
  inline ::std::string* release_sparse_706_str();
  inline void set_allocated_sparse_706_str(::std::string* sparse_706_str);

  // optional string sparse_707_str = 719;
  inline bool has_sparse_707_str() const;
  inline void clear_sparse_707_str();
  static const int kSparse707StrFieldNumber = 719;
  inline const ::std::string& sparse_707_str() const;
  inline void set_sparse_707_str(const ::std::string& value);
  inline void set_sparse_707_str(const char* value);
  inline void set_sparse_707_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_707_str();
  inline ::std::string* release_sparse_707_str();
  inline void set_allocated_sparse_707_str(::std::string* sparse_707_str);

  // optional string sparse_708_str = 720;
  inline bool has_sparse_708_str() const;
  inline void clear_sparse_708_str();
  static const int kSparse708StrFieldNumber = 720;
  inline const ::std::string& sparse_708_str() const;
  inline void set_sparse_708_str(const ::std::string& value);
  inline void set_sparse_708_str(const char* value);
  inline void set_sparse_708_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_708_str();
  inline ::std::string* release_sparse_708_str();
  inline void set_allocated_sparse_708_str(::std::string* sparse_708_str);

  // optional string sparse_709_str = 721;
  inline bool has_sparse_709_str() const;
  inline void clear_sparse_709_str();
  static const int kSparse709StrFieldNumber = 721;
  inline const ::std::string& sparse_709_str() const;
  inline void set_sparse_709_str(const ::std::string& value);
  inline void set_sparse_709_str(const char* value);
  inline void set_sparse_709_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_709_str();
  inline ::std::string* release_sparse_709_str();
  inline void set_allocated_sparse_709_str(::std::string* sparse_709_str);

  // optional string sparse_710_str = 722;
  inline bool has_sparse_710_str() const;
  inline void clear_sparse_710_str();
  static const int kSparse710StrFieldNumber = 722;
  inline const ::std::string& sparse_710_str() const;
  inline void set_sparse_710_str(const ::std::string& value);
  inline void set_sparse_710_str(const char* value);
  inline void set_sparse_710_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_710_str();
  inline ::std::string* release_sparse_710_str();
  inline void set_allocated_sparse_710_str(::std::string* sparse_710_str);

  // optional string sparse_711_str = 723;
  inline bool has_sparse_711_str() const;
  inline void clear_sparse_711_str();
  static const int kSparse711StrFieldNumber = 723;
  inline const ::std::string& sparse_711_str() const;
  inline void set_sparse_711_str(const ::std::string& value);
  inline void set_sparse_711_str(const char* value);
  inline void set_sparse_711_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_711_str();
  inline ::std::string* release_sparse_711_str();
  inline void set_allocated_sparse_711_str(::std::string* sparse_711_str);

  // optional string sparse_712_str = 724;
  inline bool has_sparse_712_str() const;
  inline void clear_sparse_712_str();
  static const int kSparse712StrFieldNumber = 724;
  inline const ::std::string& sparse_712_str() const;
  inline void set_sparse_712_str(const ::std::string& value);
  inline void set_sparse_712_str(const char* value);
  inline void set_sparse_712_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_712_str();
  inline ::std::string* release_sparse_712_str();
  inline void set_allocated_sparse_712_str(::std::string* sparse_712_str);

  // optional string sparse_713_str = 725;
  inline bool has_sparse_713_str() const;
  inline void clear_sparse_713_str();
  static const int kSparse713StrFieldNumber = 725;
  inline const ::std::string& sparse_713_str() const;
  inline void set_sparse_713_str(const ::std::string& value);
  inline void set_sparse_713_str(const char* value);
  inline void set_sparse_713_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_713_str();
  inline ::std::string* release_sparse_713_str();
  inline void set_allocated_sparse_713_str(::std::string* sparse_713_str);

  // optional string sparse_714_str = 726;
  inline bool has_sparse_714_str() const;
  inline void clear_sparse_714_str();
  static const int kSparse714StrFieldNumber = 726;
  inline const ::std::string& sparse_714_str() const;
  inline void set_sparse_714_str(const ::std::string& value);
  inline void set_sparse_714_str(const char* value);
  inline void set_sparse_714_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_714_str();
  inline ::std::string* release_sparse_714_str();
  inline void set_allocated_sparse_714_str(::std::string* sparse_714_str);

  // optional string sparse_715_str = 727;
  inline bool has_sparse_715_str() const;
  inline void clear_sparse_715_str();
  static const int kSparse715StrFieldNumber = 727;
  inline const ::std::string& sparse_715_str() const;
  inline void set_sparse_715_str(const ::std::string& value);
  inline void set_sparse_715_str(const char* value);
  inline void set_sparse_715_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_715_str();
  inline ::std::string* release_sparse_715_str();
  inline void set_allocated_sparse_715_str(::std::string* sparse_715_str);

  // optional string sparse_716_str = 728;
  inline bool has_sparse_716_str() const;
  inline void clear_sparse_716_str();
  static const int kSparse716StrFieldNumber = 728;
  inline const ::std::string& sparse_716_str() const;
  inline void set_sparse_716_str(const ::std::string& value);
  inline void set_sparse_716_str(const char* value);
  inline void set_sparse_716_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_716_str();
  inline ::std::string* release_sparse_716_str();
  inline void set_allocated_sparse_716_str(::std::string* sparse_716_str);

  // optional string sparse_717_str = 729;
  inline bool has_sparse_717_str() const;
  inline void clear_sparse_717_str();
  static const int kSparse717StrFieldNumber = 729;
  inline const ::std::string& sparse_717_str() const;
  inline void set_sparse_717_str(const ::std::string& value);
  inline void set_sparse_717_str(const char* value);
  inline void set_sparse_717_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_717_str();
  inline ::std::string* release_sparse_717_str();
  inline void set_allocated_sparse_717_str(::std::string* sparse_717_str);

  // optional string sparse_718_str = 730;
  inline bool has_sparse_718_str() const;
  inline void clear_sparse_718_str();
  static const int kSparse718StrFieldNumber = 730;
  inline const ::std::string& sparse_718_str() const;
  inline void set_sparse_718_str(const ::std::string& value);
  inline void set_sparse_718_str(const char* value);
  inline void set_sparse_718_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_718_str();
  inline ::std::string* release_sparse_718_str();
  inline void set_allocated_sparse_718_str(::std::string* sparse_718_str);

  // optional string sparse_719_str = 731;
  inline bool has_sparse_719_str() const;
  inline void clear_sparse_719_str();
  static const int kSparse719StrFieldNumber = 731;
  inline const ::std::string& sparse_719_str() const;
  inline void set_sparse_719_str(const ::std::string& value);
  inline void set_sparse_719_str(const char* value);
  inline void set_sparse_719_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_719_str();
  inline ::std::string* release_sparse_719_str();
  inline void set_allocated_sparse_719_str(::std::string* sparse_719_str);

  // optional string sparse_720_str = 732;
  inline bool has_sparse_720_str() const;
  inline void clear_sparse_720_str();
  static const int kSparse720StrFieldNumber = 732;
  inline const ::std::string& sparse_720_str() const;
  inline void set_sparse_720_str(const ::std::string& value);
  inline void set_sparse_720_str(const char* value);
  inline void set_sparse_720_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_720_str();
  inline ::std::string* release_sparse_720_str();
  inline void set_allocated_sparse_720_str(::std::string* sparse_720_str);

  // optional string sparse_721_str = 733;
  inline bool has_sparse_721_str() const;
  inline void clear_sparse_721_str();
  static const int kSparse721StrFieldNumber = 733;
  inline const ::std::string& sparse_721_str() const;
  inline void set_sparse_721_str(const ::std::string& value);
  inline void set_sparse_721_str(const char* value);
  inline void set_sparse_721_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_721_str();
  inline ::std::string* release_sparse_721_str();
  inline void set_allocated_sparse_721_str(::std::string* sparse_721_str);

  // optional string sparse_722_str = 734;
  inline bool has_sparse_722_str() const;
  inline void clear_sparse_722_str();
  static const int kSparse722StrFieldNumber = 734;
  inline const ::std::string& sparse_722_str() const;
  inline void set_sparse_722_str(const ::std::string& value);
  inline void set_sparse_722_str(const char* value);
  inline void set_sparse_722_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_722_str();
  inline ::std::string* release_sparse_722_str();
  inline void set_allocated_sparse_722_str(::std::string* sparse_722_str);

  // optional string sparse_723_str = 735;
  inline bool has_sparse_723_str() const;
  inline void clear_sparse_723_str();
  static const int kSparse723StrFieldNumber = 735;
  inline const ::std::string& sparse_723_str() const;
  inline void set_sparse_723_str(const ::std::string& value);
  inline void set_sparse_723_str(const char* value);
  inline void set_sparse_723_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_723_str();
  inline ::std::string* release_sparse_723_str();
  inline void set_allocated_sparse_723_str(::std::string* sparse_723_str);

  // optional string sparse_724_str = 736;
  inline bool has_sparse_724_str() const;
  inline void clear_sparse_724_str();
  static const int kSparse724StrFieldNumber = 736;
  inline const ::std::string& sparse_724_str() const;
  inline void set_sparse_724_str(const ::std::string& value);
  inline void set_sparse_724_str(const char* value);
  inline void set_sparse_724_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_724_str();
  inline ::std::string* release_sparse_724_str();
  inline void set_allocated_sparse_724_str(::std::string* sparse_724_str);

  // optional string sparse_725_str = 737;
  inline bool has_sparse_725_str() const;
  inline void clear_sparse_725_str();
  static const int kSparse725StrFieldNumber = 737;
  inline const ::std::string& sparse_725_str() const;
  inline void set_sparse_725_str(const ::std::string& value);
  inline void set_sparse_725_str(const char* value);
  inline void set_sparse_725_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_725_str();
  inline ::std::string* release_sparse_725_str();
  inline void set_allocated_sparse_725_str(::std::string* sparse_725_str);

  // optional string sparse_726_str = 738;
  inline bool has_sparse_726_str() const;
  inline void clear_sparse_726_str();
  static const int kSparse726StrFieldNumber = 738;
  inline const ::std::string& sparse_726_str() const;
  inline void set_sparse_726_str(const ::std::string& value);
  inline void set_sparse_726_str(const char* value);
  inline void set_sparse_726_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_726_str();
  inline ::std::string* release_sparse_726_str();
  inline void set_allocated_sparse_726_str(::std::string* sparse_726_str);

  // optional string sparse_727_str = 739;
  inline bool has_sparse_727_str() const;
  inline void clear_sparse_727_str();
  static const int kSparse727StrFieldNumber = 739;
  inline const ::std::string& sparse_727_str() const;
  inline void set_sparse_727_str(const ::std::string& value);
  inline void set_sparse_727_str(const char* value);
  inline void set_sparse_727_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_727_str();
  inline ::std::string* release_sparse_727_str();
  inline void set_allocated_sparse_727_str(::std::string* sparse_727_str);

  // optional string sparse_728_str = 740;
  inline bool has_sparse_728_str() const;
  inline void clear_sparse_728_str();
  static const int kSparse728StrFieldNumber = 740;
  inline const ::std::string& sparse_728_str() const;
  inline void set_sparse_728_str(const ::std::string& value);
  inline void set_sparse_728_str(const char* value);
  inline void set_sparse_728_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_728_str();
  inline ::std::string* release_sparse_728_str();
  inline void set_allocated_sparse_728_str(::std::string* sparse_728_str);

  // optional string sparse_729_str = 741;
  inline bool has_sparse_729_str() const;
  inline void clear_sparse_729_str();
  static const int kSparse729StrFieldNumber = 741;
  inline const ::std::string& sparse_729_str() const;
  inline void set_sparse_729_str(const ::std::string& value);
  inline void set_sparse_729_str(const char* value);
  inline void set_sparse_729_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_729_str();
  inline ::std::string* release_sparse_729_str();
  inline void set_allocated_sparse_729_str(::std::string* sparse_729_str);

  // optional string sparse_730_str = 742;
  inline bool has_sparse_730_str() const;
  inline void clear_sparse_730_str();
  static const int kSparse730StrFieldNumber = 742;
  inline const ::std::string& sparse_730_str() const;
  inline void set_sparse_730_str(const ::std::string& value);
  inline void set_sparse_730_str(const char* value);
  inline void set_sparse_730_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_730_str();
  inline ::std::string* release_sparse_730_str();
  inline void set_allocated_sparse_730_str(::std::string* sparse_730_str);

  // optional string sparse_731_str = 743;
  inline bool has_sparse_731_str() const;
  inline void clear_sparse_731_str();
  static const int kSparse731StrFieldNumber = 743;
  inline const ::std::string& sparse_731_str() const;
  inline void set_sparse_731_str(const ::std::string& value);
  inline void set_sparse_731_str(const char* value);
  inline void set_sparse_731_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_731_str();
  inline ::std::string* release_sparse_731_str();
  inline void set_allocated_sparse_731_str(::std::string* sparse_731_str);

  // optional string sparse_732_str = 744;
  inline bool has_sparse_732_str() const;
  inline void clear_sparse_732_str();
  static const int kSparse732StrFieldNumber = 744;
  inline const ::std::string& sparse_732_str() const;
  inline void set_sparse_732_str(const ::std::string& value);
  inline void set_sparse_732_str(const char* value);
  inline void set_sparse_732_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_732_str();
  inline ::std::string* release_sparse_732_str();
  inline void set_allocated_sparse_732_str(::std::string* sparse_732_str);

  // optional string sparse_733_str = 745;
  inline bool has_sparse_733_str() const;
  inline void clear_sparse_733_str();
  static const int kSparse733StrFieldNumber = 745;
  inline const ::std::string& sparse_733_str() const;
  inline void set_sparse_733_str(const ::std::string& value);
  inline void set_sparse_733_str(const char* value);
  inline void set_sparse_733_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_733_str();
  inline ::std::string* release_sparse_733_str();
  inline void set_allocated_sparse_733_str(::std::string* sparse_733_str);

  // optional string sparse_734_str = 746;
  inline bool has_sparse_734_str() const;
  inline void clear_sparse_734_str();
  static const int kSparse734StrFieldNumber = 746;
  inline const ::std::string& sparse_734_str() const;
  inline void set_sparse_734_str(const ::std::string& value);
  inline void set_sparse_734_str(const char* value);
  inline void set_sparse_734_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_734_str();
  inline ::std::string* release_sparse_734_str();
  inline void set_allocated_sparse_734_str(::std::string* sparse_734_str);

  // optional string sparse_735_str = 747;
  inline bool has_sparse_735_str() const;
  inline void clear_sparse_735_str();
  static const int kSparse735StrFieldNumber = 747;
  inline const ::std::string& sparse_735_str() const;
  inline void set_sparse_735_str(const ::std::string& value);
  inline void set_sparse_735_str(const char* value);
  inline void set_sparse_735_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_735_str();
  inline ::std::string* release_sparse_735_str();
  inline void set_allocated_sparse_735_str(::std::string* sparse_735_str);

  // optional string sparse_736_str = 748;
  inline bool has_sparse_736_str() const;
  inline void clear_sparse_736_str();
  static const int kSparse736StrFieldNumber = 748;
  inline const ::std::string& sparse_736_str() const;
  inline void set_sparse_736_str(const ::std::string& value);
  inline void set_sparse_736_str(const char* value);
  inline void set_sparse_736_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_736_str();
  inline ::std::string* release_sparse_736_str();
  inline void set_allocated_sparse_736_str(::std::string* sparse_736_str);

  // optional string sparse_737_str = 749;
  inline bool has_sparse_737_str() const;
  inline void clear_sparse_737_str();
  static const int kSparse737StrFieldNumber = 749;
  inline const ::std::string& sparse_737_str() const;
  inline void set_sparse_737_str(const ::std::string& value);
  inline void set_sparse_737_str(const char* value);
  inline void set_sparse_737_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_737_str();
  inline ::std::string* release_sparse_737_str();
  inline void set_allocated_sparse_737_str(::std::string* sparse_737_str);

  // optional string sparse_738_str = 750;
  inline bool has_sparse_738_str() const;
  inline void clear_sparse_738_str();
  static const int kSparse738StrFieldNumber = 750;
  inline const ::std::string& sparse_738_str() const;
  inline void set_sparse_738_str(const ::std::string& value);
  inline void set_sparse_738_str(const char* value);
  inline void set_sparse_738_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_738_str();
  inline ::std::string* release_sparse_738_str();
  inline void set_allocated_sparse_738_str(::std::string* sparse_738_str);

  // optional string sparse_739_str = 751;
  inline bool has_sparse_739_str() const;
  inline void clear_sparse_739_str();
  static const int kSparse739StrFieldNumber = 751;
  inline const ::std::string& sparse_739_str() const;
  inline void set_sparse_739_str(const ::std::string& value);
  inline void set_sparse_739_str(const char* value);
  inline void set_sparse_739_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_739_str();
  inline ::std::string* release_sparse_739_str();
  inline void set_allocated_sparse_739_str(::std::string* sparse_739_str);

  // optional string sparse_740_str = 752;
  inline bool has_sparse_740_str() const;
  inline void clear_sparse_740_str();
  static const int kSparse740StrFieldNumber = 752;
  inline const ::std::string& sparse_740_str() const;
  inline void set_sparse_740_str(const ::std::string& value);
  inline void set_sparse_740_str(const char* value);
  inline void set_sparse_740_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_740_str();
  inline ::std::string* release_sparse_740_str();
  inline void set_allocated_sparse_740_str(::std::string* sparse_740_str);

  // optional string sparse_741_str = 753;
  inline bool has_sparse_741_str() const;
  inline void clear_sparse_741_str();
  static const int kSparse741StrFieldNumber = 753;
  inline const ::std::string& sparse_741_str() const;
  inline void set_sparse_741_str(const ::std::string& value);
  inline void set_sparse_741_str(const char* value);
  inline void set_sparse_741_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_741_str();
  inline ::std::string* release_sparse_741_str();
  inline void set_allocated_sparse_741_str(::std::string* sparse_741_str);

  // optional string sparse_742_str = 754;
  inline bool has_sparse_742_str() const;
  inline void clear_sparse_742_str();
  static const int kSparse742StrFieldNumber = 754;
  inline const ::std::string& sparse_742_str() const;
  inline void set_sparse_742_str(const ::std::string& value);
  inline void set_sparse_742_str(const char* value);
  inline void set_sparse_742_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_742_str();
  inline ::std::string* release_sparse_742_str();
  inline void set_allocated_sparse_742_str(::std::string* sparse_742_str);

  // optional string sparse_743_str = 755;
  inline bool has_sparse_743_str() const;
  inline void clear_sparse_743_str();
  static const int kSparse743StrFieldNumber = 755;
  inline const ::std::string& sparse_743_str() const;
  inline void set_sparse_743_str(const ::std::string& value);
  inline void set_sparse_743_str(const char* value);
  inline void set_sparse_743_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_743_str();
  inline ::std::string* release_sparse_743_str();
  inline void set_allocated_sparse_743_str(::std::string* sparse_743_str);

  // optional string sparse_744_str = 756;
  inline bool has_sparse_744_str() const;
  inline void clear_sparse_744_str();
  static const int kSparse744StrFieldNumber = 756;
  inline const ::std::string& sparse_744_str() const;
  inline void set_sparse_744_str(const ::std::string& value);
  inline void set_sparse_744_str(const char* value);
  inline void set_sparse_744_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_744_str();
  inline ::std::string* release_sparse_744_str();
  inline void set_allocated_sparse_744_str(::std::string* sparse_744_str);

  // optional string sparse_745_str = 757;
  inline bool has_sparse_745_str() const;
  inline void clear_sparse_745_str();
  static const int kSparse745StrFieldNumber = 757;
  inline const ::std::string& sparse_745_str() const;
  inline void set_sparse_745_str(const ::std::string& value);
  inline void set_sparse_745_str(const char* value);
  inline void set_sparse_745_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_745_str();
  inline ::std::string* release_sparse_745_str();
  inline void set_allocated_sparse_745_str(::std::string* sparse_745_str);

  // optional string sparse_746_str = 758;
  inline bool has_sparse_746_str() const;
  inline void clear_sparse_746_str();
  static const int kSparse746StrFieldNumber = 758;
  inline const ::std::string& sparse_746_str() const;
  inline void set_sparse_746_str(const ::std::string& value);
  inline void set_sparse_746_str(const char* value);
  inline void set_sparse_746_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_746_str();
  inline ::std::string* release_sparse_746_str();
  inline void set_allocated_sparse_746_str(::std::string* sparse_746_str);

  // optional string sparse_747_str = 759;
  inline bool has_sparse_747_str() const;
  inline void clear_sparse_747_str();
  static const int kSparse747StrFieldNumber = 759;
  inline const ::std::string& sparse_747_str() const;
  inline void set_sparse_747_str(const ::std::string& value);
  inline void set_sparse_747_str(const char* value);
  inline void set_sparse_747_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_747_str();
  inline ::std::string* release_sparse_747_str();
  inline void set_allocated_sparse_747_str(::std::string* sparse_747_str);

  // optional string sparse_748_str = 760;
  inline bool has_sparse_748_str() const;
  inline void clear_sparse_748_str();
  static const int kSparse748StrFieldNumber = 760;
  inline const ::std::string& sparse_748_str() const;
  inline void set_sparse_748_str(const ::std::string& value);
  inline void set_sparse_748_str(const char* value);
  inline void set_sparse_748_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_748_str();
  inline ::std::string* release_sparse_748_str();
  inline void set_allocated_sparse_748_str(::std::string* sparse_748_str);

  // optional string sparse_749_str = 761;
  inline bool has_sparse_749_str() const;
  inline void clear_sparse_749_str();
  static const int kSparse749StrFieldNumber = 761;
  inline const ::std::string& sparse_749_str() const;
  inline void set_sparse_749_str(const ::std::string& value);
  inline void set_sparse_749_str(const char* value);
  inline void set_sparse_749_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_749_str();
  inline ::std::string* release_sparse_749_str();
  inline void set_allocated_sparse_749_str(::std::string* sparse_749_str);

  // optional string sparse_750_str = 762;
  inline bool has_sparse_750_str() const;
  inline void clear_sparse_750_str();
  static const int kSparse750StrFieldNumber = 762;
  inline const ::std::string& sparse_750_str() const;
  inline void set_sparse_750_str(const ::std::string& value);
  inline void set_sparse_750_str(const char* value);
  inline void set_sparse_750_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_750_str();
  inline ::std::string* release_sparse_750_str();
  inline void set_allocated_sparse_750_str(::std::string* sparse_750_str);

  // optional string sparse_751_str = 763;
  inline bool has_sparse_751_str() const;
  inline void clear_sparse_751_str();
  static const int kSparse751StrFieldNumber = 763;
  inline const ::std::string& sparse_751_str() const;
  inline void set_sparse_751_str(const ::std::string& value);
  inline void set_sparse_751_str(const char* value);
  inline void set_sparse_751_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_751_str();
  inline ::std::string* release_sparse_751_str();
  inline void set_allocated_sparse_751_str(::std::string* sparse_751_str);

  // optional string sparse_752_str = 764;
  inline bool has_sparse_752_str() const;
  inline void clear_sparse_752_str();
  static const int kSparse752StrFieldNumber = 764;
  inline const ::std::string& sparse_752_str() const;
  inline void set_sparse_752_str(const ::std::string& value);
  inline void set_sparse_752_str(const char* value);
  inline void set_sparse_752_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_752_str();
  inline ::std::string* release_sparse_752_str();
  inline void set_allocated_sparse_752_str(::std::string* sparse_752_str);

  // optional string sparse_753_str = 765;
  inline bool has_sparse_753_str() const;
  inline void clear_sparse_753_str();
  static const int kSparse753StrFieldNumber = 765;
  inline const ::std::string& sparse_753_str() const;
  inline void set_sparse_753_str(const ::std::string& value);
  inline void set_sparse_753_str(const char* value);
  inline void set_sparse_753_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_753_str();
  inline ::std::string* release_sparse_753_str();
  inline void set_allocated_sparse_753_str(::std::string* sparse_753_str);

  // optional string sparse_754_str = 766;
  inline bool has_sparse_754_str() const;
  inline void clear_sparse_754_str();
  static const int kSparse754StrFieldNumber = 766;
  inline const ::std::string& sparse_754_str() const;
  inline void set_sparse_754_str(const ::std::string& value);
  inline void set_sparse_754_str(const char* value);
  inline void set_sparse_754_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_754_str();
  inline ::std::string* release_sparse_754_str();
  inline void set_allocated_sparse_754_str(::std::string* sparse_754_str);

  // optional string sparse_755_str = 767;
  inline bool has_sparse_755_str() const;
  inline void clear_sparse_755_str();
  static const int kSparse755StrFieldNumber = 767;
  inline const ::std::string& sparse_755_str() const;
  inline void set_sparse_755_str(const ::std::string& value);
  inline void set_sparse_755_str(const char* value);
  inline void set_sparse_755_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_755_str();
  inline ::std::string* release_sparse_755_str();
  inline void set_allocated_sparse_755_str(::std::string* sparse_755_str);

  // optional string sparse_756_str = 768;
  inline bool has_sparse_756_str() const;
  inline void clear_sparse_756_str();
  static const int kSparse756StrFieldNumber = 768;
  inline const ::std::string& sparse_756_str() const;
  inline void set_sparse_756_str(const ::std::string& value);
  inline void set_sparse_756_str(const char* value);
  inline void set_sparse_756_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_756_str();
  inline ::std::string* release_sparse_756_str();
  inline void set_allocated_sparse_756_str(::std::string* sparse_756_str);

  // optional string sparse_757_str = 769;
  inline bool has_sparse_757_str() const;
  inline void clear_sparse_757_str();
  static const int kSparse757StrFieldNumber = 769;
  inline const ::std::string& sparse_757_str() const;
  inline void set_sparse_757_str(const ::std::string& value);
  inline void set_sparse_757_str(const char* value);
  inline void set_sparse_757_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_757_str();
  inline ::std::string* release_sparse_757_str();
  inline void set_allocated_sparse_757_str(::std::string* sparse_757_str);

  // optional string sparse_758_str = 770;
  inline bool has_sparse_758_str() const;
  inline void clear_sparse_758_str();
  static const int kSparse758StrFieldNumber = 770;
  inline const ::std::string& sparse_758_str() const;
  inline void set_sparse_758_str(const ::std::string& value);
  inline void set_sparse_758_str(const char* value);
  inline void set_sparse_758_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_758_str();
  inline ::std::string* release_sparse_758_str();
  inline void set_allocated_sparse_758_str(::std::string* sparse_758_str);

  // optional string sparse_759_str = 771;
  inline bool has_sparse_759_str() const;
  inline void clear_sparse_759_str();
  static const int kSparse759StrFieldNumber = 771;
  inline const ::std::string& sparse_759_str() const;
  inline void set_sparse_759_str(const ::std::string& value);
  inline void set_sparse_759_str(const char* value);
  inline void set_sparse_759_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_759_str();
  inline ::std::string* release_sparse_759_str();
  inline void set_allocated_sparse_759_str(::std::string* sparse_759_str);

  // optional string sparse_760_str = 772;
  inline bool has_sparse_760_str() const;
  inline void clear_sparse_760_str();
  static const int kSparse760StrFieldNumber = 772;
  inline const ::std::string& sparse_760_str() const;
  inline void set_sparse_760_str(const ::std::string& value);
  inline void set_sparse_760_str(const char* value);
  inline void set_sparse_760_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_760_str();
  inline ::std::string* release_sparse_760_str();
  inline void set_allocated_sparse_760_str(::std::string* sparse_760_str);

  // optional string sparse_761_str = 773;
  inline bool has_sparse_761_str() const;
  inline void clear_sparse_761_str();
  static const int kSparse761StrFieldNumber = 773;
  inline const ::std::string& sparse_761_str() const;
  inline void set_sparse_761_str(const ::std::string& value);
  inline void set_sparse_761_str(const char* value);
  inline void set_sparse_761_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_761_str();
  inline ::std::string* release_sparse_761_str();
  inline void set_allocated_sparse_761_str(::std::string* sparse_761_str);

  // optional string sparse_762_str = 774;
  inline bool has_sparse_762_str() const;
  inline void clear_sparse_762_str();
  static const int kSparse762StrFieldNumber = 774;
  inline const ::std::string& sparse_762_str() const;
  inline void set_sparse_762_str(const ::std::string& value);
  inline void set_sparse_762_str(const char* value);
  inline void set_sparse_762_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_762_str();
  inline ::std::string* release_sparse_762_str();
  inline void set_allocated_sparse_762_str(::std::string* sparse_762_str);

  // optional string sparse_763_str = 775;
  inline bool has_sparse_763_str() const;
  inline void clear_sparse_763_str();
  static const int kSparse763StrFieldNumber = 775;
  inline const ::std::string& sparse_763_str() const;
  inline void set_sparse_763_str(const ::std::string& value);
  inline void set_sparse_763_str(const char* value);
  inline void set_sparse_763_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_763_str();
  inline ::std::string* release_sparse_763_str();
  inline void set_allocated_sparse_763_str(::std::string* sparse_763_str);

  // optional string sparse_764_str = 776;
  inline bool has_sparse_764_str() const;
  inline void clear_sparse_764_str();
  static const int kSparse764StrFieldNumber = 776;
  inline const ::std::string& sparse_764_str() const;
  inline void set_sparse_764_str(const ::std::string& value);
  inline void set_sparse_764_str(const char* value);
  inline void set_sparse_764_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_764_str();
  inline ::std::string* release_sparse_764_str();
  inline void set_allocated_sparse_764_str(::std::string* sparse_764_str);

  // optional string sparse_765_str = 777;
  inline bool has_sparse_765_str() const;
  inline void clear_sparse_765_str();
  static const int kSparse765StrFieldNumber = 777;
  inline const ::std::string& sparse_765_str() const;
  inline void set_sparse_765_str(const ::std::string& value);
  inline void set_sparse_765_str(const char* value);
  inline void set_sparse_765_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_765_str();
  inline ::std::string* release_sparse_765_str();
  inline void set_allocated_sparse_765_str(::std::string* sparse_765_str);

  // optional string sparse_766_str = 778;
  inline bool has_sparse_766_str() const;
  inline void clear_sparse_766_str();
  static const int kSparse766StrFieldNumber = 778;
  inline const ::std::string& sparse_766_str() const;
  inline void set_sparse_766_str(const ::std::string& value);
  inline void set_sparse_766_str(const char* value);
  inline void set_sparse_766_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_766_str();
  inline ::std::string* release_sparse_766_str();
  inline void set_allocated_sparse_766_str(::std::string* sparse_766_str);

  // optional string sparse_767_str = 779;
  inline bool has_sparse_767_str() const;
  inline void clear_sparse_767_str();
  static const int kSparse767StrFieldNumber = 779;
  inline const ::std::string& sparse_767_str() const;
  inline void set_sparse_767_str(const ::std::string& value);
  inline void set_sparse_767_str(const char* value);
  inline void set_sparse_767_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_767_str();
  inline ::std::string* release_sparse_767_str();
  inline void set_allocated_sparse_767_str(::std::string* sparse_767_str);

  // optional string sparse_768_str = 780;
  inline bool has_sparse_768_str() const;
  inline void clear_sparse_768_str();
  static const int kSparse768StrFieldNumber = 780;
  inline const ::std::string& sparse_768_str() const;
  inline void set_sparse_768_str(const ::std::string& value);
  inline void set_sparse_768_str(const char* value);
  inline void set_sparse_768_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_768_str();
  inline ::std::string* release_sparse_768_str();
  inline void set_allocated_sparse_768_str(::std::string* sparse_768_str);

  // optional string sparse_769_str = 781;
  inline bool has_sparse_769_str() const;
  inline void clear_sparse_769_str();
  static const int kSparse769StrFieldNumber = 781;
  inline const ::std::string& sparse_769_str() const;
  inline void set_sparse_769_str(const ::std::string& value);
  inline void set_sparse_769_str(const char* value);
  inline void set_sparse_769_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_769_str();
  inline ::std::string* release_sparse_769_str();
  inline void set_allocated_sparse_769_str(::std::string* sparse_769_str);

  // optional string sparse_770_str = 782;
  inline bool has_sparse_770_str() const;
  inline void clear_sparse_770_str();
  static const int kSparse770StrFieldNumber = 782;
  inline const ::std::string& sparse_770_str() const;
  inline void set_sparse_770_str(const ::std::string& value);
  inline void set_sparse_770_str(const char* value);
  inline void set_sparse_770_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_770_str();
  inline ::std::string* release_sparse_770_str();
  inline void set_allocated_sparse_770_str(::std::string* sparse_770_str);

  // optional string sparse_771_str = 783;
  inline bool has_sparse_771_str() const;
  inline void clear_sparse_771_str();
  static const int kSparse771StrFieldNumber = 783;
  inline const ::std::string& sparse_771_str() const;
  inline void set_sparse_771_str(const ::std::string& value);
  inline void set_sparse_771_str(const char* value);
  inline void set_sparse_771_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_771_str();
  inline ::std::string* release_sparse_771_str();
  inline void set_allocated_sparse_771_str(::std::string* sparse_771_str);

  // optional string sparse_772_str = 784;
  inline bool has_sparse_772_str() const;
  inline void clear_sparse_772_str();
  static const int kSparse772StrFieldNumber = 784;
  inline const ::std::string& sparse_772_str() const;
  inline void set_sparse_772_str(const ::std::string& value);
  inline void set_sparse_772_str(const char* value);
  inline void set_sparse_772_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_772_str();
  inline ::std::string* release_sparse_772_str();
  inline void set_allocated_sparse_772_str(::std::string* sparse_772_str);

  // optional string sparse_773_str = 785;
  inline bool has_sparse_773_str() const;
  inline void clear_sparse_773_str();
  static const int kSparse773StrFieldNumber = 785;
  inline const ::std::string& sparse_773_str() const;
  inline void set_sparse_773_str(const ::std::string& value);
  inline void set_sparse_773_str(const char* value);
  inline void set_sparse_773_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_773_str();
  inline ::std::string* release_sparse_773_str();
  inline void set_allocated_sparse_773_str(::std::string* sparse_773_str);

  // optional string sparse_774_str = 786;
  inline bool has_sparse_774_str() const;
  inline void clear_sparse_774_str();
  static const int kSparse774StrFieldNumber = 786;
  inline const ::std::string& sparse_774_str() const;
  inline void set_sparse_774_str(const ::std::string& value);
  inline void set_sparse_774_str(const char* value);
  inline void set_sparse_774_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_774_str();
  inline ::std::string* release_sparse_774_str();
  inline void set_allocated_sparse_774_str(::std::string* sparse_774_str);

  // optional string sparse_775_str = 787;
  inline bool has_sparse_775_str() const;
  inline void clear_sparse_775_str();
  static const int kSparse775StrFieldNumber = 787;
  inline const ::std::string& sparse_775_str() const;
  inline void set_sparse_775_str(const ::std::string& value);
  inline void set_sparse_775_str(const char* value);
  inline void set_sparse_775_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_775_str();
  inline ::std::string* release_sparse_775_str();
  inline void set_allocated_sparse_775_str(::std::string* sparse_775_str);

  // optional string sparse_776_str = 788;
  inline bool has_sparse_776_str() const;
  inline void clear_sparse_776_str();
  static const int kSparse776StrFieldNumber = 788;
  inline const ::std::string& sparse_776_str() const;
  inline void set_sparse_776_str(const ::std::string& value);
  inline void set_sparse_776_str(const char* value);
  inline void set_sparse_776_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_776_str();
  inline ::std::string* release_sparse_776_str();
  inline void set_allocated_sparse_776_str(::std::string* sparse_776_str);

  // optional string sparse_777_str = 789;
  inline bool has_sparse_777_str() const;
  inline void clear_sparse_777_str();
  static const int kSparse777StrFieldNumber = 789;
  inline const ::std::string& sparse_777_str() const;
  inline void set_sparse_777_str(const ::std::string& value);
  inline void set_sparse_777_str(const char* value);
  inline void set_sparse_777_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_777_str();
  inline ::std::string* release_sparse_777_str();
  inline void set_allocated_sparse_777_str(::std::string* sparse_777_str);

  // optional string sparse_778_str = 790;
  inline bool has_sparse_778_str() const;
  inline void clear_sparse_778_str();
  static const int kSparse778StrFieldNumber = 790;
  inline const ::std::string& sparse_778_str() const;
  inline void set_sparse_778_str(const ::std::string& value);
  inline void set_sparse_778_str(const char* value);
  inline void set_sparse_778_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_778_str();
  inline ::std::string* release_sparse_778_str();
  inline void set_allocated_sparse_778_str(::std::string* sparse_778_str);

  // optional string sparse_779_str = 791;
  inline bool has_sparse_779_str() const;
  inline void clear_sparse_779_str();
  static const int kSparse779StrFieldNumber = 791;
  inline const ::std::string& sparse_779_str() const;
  inline void set_sparse_779_str(const ::std::string& value);
  inline void set_sparse_779_str(const char* value);
  inline void set_sparse_779_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_779_str();
  inline ::std::string* release_sparse_779_str();
  inline void set_allocated_sparse_779_str(::std::string* sparse_779_str);

  // optional string sparse_780_str = 792;
  inline bool has_sparse_780_str() const;
  inline void clear_sparse_780_str();
  static const int kSparse780StrFieldNumber = 792;
  inline const ::std::string& sparse_780_str() const;
  inline void set_sparse_780_str(const ::std::string& value);
  inline void set_sparse_780_str(const char* value);
  inline void set_sparse_780_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_780_str();
  inline ::std::string* release_sparse_780_str();
  inline void set_allocated_sparse_780_str(::std::string* sparse_780_str);

  // optional string sparse_781_str = 793;
  inline bool has_sparse_781_str() const;
  inline void clear_sparse_781_str();
  static const int kSparse781StrFieldNumber = 793;
  inline const ::std::string& sparse_781_str() const;
  inline void set_sparse_781_str(const ::std::string& value);
  inline void set_sparse_781_str(const char* value);
  inline void set_sparse_781_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_781_str();
  inline ::std::string* release_sparse_781_str();
  inline void set_allocated_sparse_781_str(::std::string* sparse_781_str);

  // optional string sparse_782_str = 794;
  inline bool has_sparse_782_str() const;
  inline void clear_sparse_782_str();
  static const int kSparse782StrFieldNumber = 794;
  inline const ::std::string& sparse_782_str() const;
  inline void set_sparse_782_str(const ::std::string& value);
  inline void set_sparse_782_str(const char* value);
  inline void set_sparse_782_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_782_str();
  inline ::std::string* release_sparse_782_str();
  inline void set_allocated_sparse_782_str(::std::string* sparse_782_str);

  // optional string sparse_783_str = 795;
  inline bool has_sparse_783_str() const;
  inline void clear_sparse_783_str();
  static const int kSparse783StrFieldNumber = 795;
  inline const ::std::string& sparse_783_str() const;
  inline void set_sparse_783_str(const ::std::string& value);
  inline void set_sparse_783_str(const char* value);
  inline void set_sparse_783_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_783_str();
  inline ::std::string* release_sparse_783_str();
  inline void set_allocated_sparse_783_str(::std::string* sparse_783_str);

  // optional string sparse_784_str = 796;
  inline bool has_sparse_784_str() const;
  inline void clear_sparse_784_str();
  static const int kSparse784StrFieldNumber = 796;
  inline const ::std::string& sparse_784_str() const;
  inline void set_sparse_784_str(const ::std::string& value);
  inline void set_sparse_784_str(const char* value);
  inline void set_sparse_784_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_784_str();
  inline ::std::string* release_sparse_784_str();
  inline void set_allocated_sparse_784_str(::std::string* sparse_784_str);

  // optional string sparse_785_str = 797;
  inline bool has_sparse_785_str() const;
  inline void clear_sparse_785_str();
  static const int kSparse785StrFieldNumber = 797;
  inline const ::std::string& sparse_785_str() const;
  inline void set_sparse_785_str(const ::std::string& value);
  inline void set_sparse_785_str(const char* value);
  inline void set_sparse_785_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_785_str();
  inline ::std::string* release_sparse_785_str();
  inline void set_allocated_sparse_785_str(::std::string* sparse_785_str);

  // optional string sparse_786_str = 798;
  inline bool has_sparse_786_str() const;
  inline void clear_sparse_786_str();
  static const int kSparse786StrFieldNumber = 798;
  inline const ::std::string& sparse_786_str() const;
  inline void set_sparse_786_str(const ::std::string& value);
  inline void set_sparse_786_str(const char* value);
  inline void set_sparse_786_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_786_str();
  inline ::std::string* release_sparse_786_str();
  inline void set_allocated_sparse_786_str(::std::string* sparse_786_str);

  // optional string sparse_787_str = 799;
  inline bool has_sparse_787_str() const;
  inline void clear_sparse_787_str();
  static const int kSparse787StrFieldNumber = 799;
  inline const ::std::string& sparse_787_str() const;
  inline void set_sparse_787_str(const ::std::string& value);
  inline void set_sparse_787_str(const char* value);
  inline void set_sparse_787_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_787_str();
  inline ::std::string* release_sparse_787_str();
  inline void set_allocated_sparse_787_str(::std::string* sparse_787_str);

  // optional string sparse_788_str = 800;
  inline bool has_sparse_788_str() const;
  inline void clear_sparse_788_str();
  static const int kSparse788StrFieldNumber = 800;
  inline const ::std::string& sparse_788_str() const;
  inline void set_sparse_788_str(const ::std::string& value);
  inline void set_sparse_788_str(const char* value);
  inline void set_sparse_788_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_788_str();
  inline ::std::string* release_sparse_788_str();
  inline void set_allocated_sparse_788_str(::std::string* sparse_788_str);

  // optional string sparse_789_str = 801;
  inline bool has_sparse_789_str() const;
  inline void clear_sparse_789_str();
  static const int kSparse789StrFieldNumber = 801;
  inline const ::std::string& sparse_789_str() const;
  inline void set_sparse_789_str(const ::std::string& value);
  inline void set_sparse_789_str(const char* value);
  inline void set_sparse_789_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_789_str();
  inline ::std::string* release_sparse_789_str();
  inline void set_allocated_sparse_789_str(::std::string* sparse_789_str);

  // optional string sparse_790_str = 802;
  inline bool has_sparse_790_str() const;
  inline void clear_sparse_790_str();
  static const int kSparse790StrFieldNumber = 802;
  inline const ::std::string& sparse_790_str() const;
  inline void set_sparse_790_str(const ::std::string& value);
  inline void set_sparse_790_str(const char* value);
  inline void set_sparse_790_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_790_str();
  inline ::std::string* release_sparse_790_str();
  inline void set_allocated_sparse_790_str(::std::string* sparse_790_str);

  // optional string sparse_791_str = 803;
  inline bool has_sparse_791_str() const;
  inline void clear_sparse_791_str();
  static const int kSparse791StrFieldNumber = 803;
  inline const ::std::string& sparse_791_str() const;
  inline void set_sparse_791_str(const ::std::string& value);
  inline void set_sparse_791_str(const char* value);
  inline void set_sparse_791_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_791_str();
  inline ::std::string* release_sparse_791_str();
  inline void set_allocated_sparse_791_str(::std::string* sparse_791_str);

  // optional string sparse_792_str = 804;
  inline bool has_sparse_792_str() const;
  inline void clear_sparse_792_str();
  static const int kSparse792StrFieldNumber = 804;
  inline const ::std::string& sparse_792_str() const;
  inline void set_sparse_792_str(const ::std::string& value);
  inline void set_sparse_792_str(const char* value);
  inline void set_sparse_792_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_792_str();
  inline ::std::string* release_sparse_792_str();
  inline void set_allocated_sparse_792_str(::std::string* sparse_792_str);

  // optional string sparse_793_str = 805;
  inline bool has_sparse_793_str() const;
  inline void clear_sparse_793_str();
  static const int kSparse793StrFieldNumber = 805;
  inline const ::std::string& sparse_793_str() const;
  inline void set_sparse_793_str(const ::std::string& value);
  inline void set_sparse_793_str(const char* value);
  inline void set_sparse_793_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_793_str();
  inline ::std::string* release_sparse_793_str();
  inline void set_allocated_sparse_793_str(::std::string* sparse_793_str);

  // optional string sparse_794_str = 806;
  inline bool has_sparse_794_str() const;
  inline void clear_sparse_794_str();
  static const int kSparse794StrFieldNumber = 806;
  inline const ::std::string& sparse_794_str() const;
  inline void set_sparse_794_str(const ::std::string& value);
  inline void set_sparse_794_str(const char* value);
  inline void set_sparse_794_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_794_str();
  inline ::std::string* release_sparse_794_str();
  inline void set_allocated_sparse_794_str(::std::string* sparse_794_str);

  // optional string sparse_795_str = 807;
  inline bool has_sparse_795_str() const;
  inline void clear_sparse_795_str();
  static const int kSparse795StrFieldNumber = 807;
  inline const ::std::string& sparse_795_str() const;
  inline void set_sparse_795_str(const ::std::string& value);
  inline void set_sparse_795_str(const char* value);
  inline void set_sparse_795_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_795_str();
  inline ::std::string* release_sparse_795_str();
  inline void set_allocated_sparse_795_str(::std::string* sparse_795_str);

  // optional string sparse_796_str = 808;
  inline bool has_sparse_796_str() const;
  inline void clear_sparse_796_str();
  static const int kSparse796StrFieldNumber = 808;
  inline const ::std::string& sparse_796_str() const;
  inline void set_sparse_796_str(const ::std::string& value);
  inline void set_sparse_796_str(const char* value);
  inline void set_sparse_796_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_796_str();
  inline ::std::string* release_sparse_796_str();
  inline void set_allocated_sparse_796_str(::std::string* sparse_796_str);

  // optional string sparse_797_str = 809;
  inline bool has_sparse_797_str() const;
  inline void clear_sparse_797_str();
  static const int kSparse797StrFieldNumber = 809;
  inline const ::std::string& sparse_797_str() const;
  inline void set_sparse_797_str(const ::std::string& value);
  inline void set_sparse_797_str(const char* value);
  inline void set_sparse_797_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_797_str();
  inline ::std::string* release_sparse_797_str();
  inline void set_allocated_sparse_797_str(::std::string* sparse_797_str);

  // optional string sparse_798_str = 810;
  inline bool has_sparse_798_str() const;
  inline void clear_sparse_798_str();
  static const int kSparse798StrFieldNumber = 810;
  inline const ::std::string& sparse_798_str() const;
  inline void set_sparse_798_str(const ::std::string& value);
  inline void set_sparse_798_str(const char* value);
  inline void set_sparse_798_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_798_str();
  inline ::std::string* release_sparse_798_str();
  inline void set_allocated_sparse_798_str(::std::string* sparse_798_str);

  // optional string sparse_799_str = 811;
  inline bool has_sparse_799_str() const;
  inline void clear_sparse_799_str();
  static const int kSparse799StrFieldNumber = 811;
  inline const ::std::string& sparse_799_str() const;
  inline void set_sparse_799_str(const ::std::string& value);
  inline void set_sparse_799_str(const char* value);
  inline void set_sparse_799_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_799_str();
  inline ::std::string* release_sparse_799_str();
  inline void set_allocated_sparse_799_str(::std::string* sparse_799_str);

  // optional string sparse_800_str = 812;
  inline bool has_sparse_800_str() const;
  inline void clear_sparse_800_str();
  static const int kSparse800StrFieldNumber = 812;
  inline const ::std::string& sparse_800_str() const;
  inline void set_sparse_800_str(const ::std::string& value);
  inline void set_sparse_800_str(const char* value);
  inline void set_sparse_800_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_800_str();
  inline ::std::string* release_sparse_800_str();
  inline void set_allocated_sparse_800_str(::std::string* sparse_800_str);

  // optional string sparse_801_str = 813;
  inline bool has_sparse_801_str() const;
  inline void clear_sparse_801_str();
  static const int kSparse801StrFieldNumber = 813;
  inline const ::std::string& sparse_801_str() const;
  inline void set_sparse_801_str(const ::std::string& value);
  inline void set_sparse_801_str(const char* value);
  inline void set_sparse_801_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_801_str();
  inline ::std::string* release_sparse_801_str();
  inline void set_allocated_sparse_801_str(::std::string* sparse_801_str);

  // optional string sparse_802_str = 814;
  inline bool has_sparse_802_str() const;
  inline void clear_sparse_802_str();
  static const int kSparse802StrFieldNumber = 814;
  inline const ::std::string& sparse_802_str() const;
  inline void set_sparse_802_str(const ::std::string& value);
  inline void set_sparse_802_str(const char* value);
  inline void set_sparse_802_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_802_str();
  inline ::std::string* release_sparse_802_str();
  inline void set_allocated_sparse_802_str(::std::string* sparse_802_str);

  // optional string sparse_803_str = 815;
  inline bool has_sparse_803_str() const;
  inline void clear_sparse_803_str();
  static const int kSparse803StrFieldNumber = 815;
  inline const ::std::string& sparse_803_str() const;
  inline void set_sparse_803_str(const ::std::string& value);
  inline void set_sparse_803_str(const char* value);
  inline void set_sparse_803_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_803_str();
  inline ::std::string* release_sparse_803_str();
  inline void set_allocated_sparse_803_str(::std::string* sparse_803_str);

  // optional string sparse_804_str = 816;
  inline bool has_sparse_804_str() const;
  inline void clear_sparse_804_str();
  static const int kSparse804StrFieldNumber = 816;
  inline const ::std::string& sparse_804_str() const;
  inline void set_sparse_804_str(const ::std::string& value);
  inline void set_sparse_804_str(const char* value);
  inline void set_sparse_804_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_804_str();
  inline ::std::string* release_sparse_804_str();
  inline void set_allocated_sparse_804_str(::std::string* sparse_804_str);

  // optional string sparse_805_str = 817;
  inline bool has_sparse_805_str() const;
  inline void clear_sparse_805_str();
  static const int kSparse805StrFieldNumber = 817;
  inline const ::std::string& sparse_805_str() const;
  inline void set_sparse_805_str(const ::std::string& value);
  inline void set_sparse_805_str(const char* value);
  inline void set_sparse_805_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_805_str();
  inline ::std::string* release_sparse_805_str();
  inline void set_allocated_sparse_805_str(::std::string* sparse_805_str);

  // optional string sparse_806_str = 818;
  inline bool has_sparse_806_str() const;
  inline void clear_sparse_806_str();
  static const int kSparse806StrFieldNumber = 818;
  inline const ::std::string& sparse_806_str() const;
  inline void set_sparse_806_str(const ::std::string& value);
  inline void set_sparse_806_str(const char* value);
  inline void set_sparse_806_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_806_str();
  inline ::std::string* release_sparse_806_str();
  inline void set_allocated_sparse_806_str(::std::string* sparse_806_str);

  // optional string sparse_807_str = 819;
  inline bool has_sparse_807_str() const;
  inline void clear_sparse_807_str();
  static const int kSparse807StrFieldNumber = 819;
  inline const ::std::string& sparse_807_str() const;
  inline void set_sparse_807_str(const ::std::string& value);
  inline void set_sparse_807_str(const char* value);
  inline void set_sparse_807_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_807_str();
  inline ::std::string* release_sparse_807_str();
  inline void set_allocated_sparse_807_str(::std::string* sparse_807_str);

  // optional string sparse_808_str = 820;
  inline bool has_sparse_808_str() const;
  inline void clear_sparse_808_str();
  static const int kSparse808StrFieldNumber = 820;
  inline const ::std::string& sparse_808_str() const;
  inline void set_sparse_808_str(const ::std::string& value);
  inline void set_sparse_808_str(const char* value);
  inline void set_sparse_808_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_808_str();
  inline ::std::string* release_sparse_808_str();
  inline void set_allocated_sparse_808_str(::std::string* sparse_808_str);

  // optional string sparse_809_str = 821;
  inline bool has_sparse_809_str() const;
  inline void clear_sparse_809_str();
  static const int kSparse809StrFieldNumber = 821;
  inline const ::std::string& sparse_809_str() const;
  inline void set_sparse_809_str(const ::std::string& value);
  inline void set_sparse_809_str(const char* value);
  inline void set_sparse_809_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_809_str();
  inline ::std::string* release_sparse_809_str();
  inline void set_allocated_sparse_809_str(::std::string* sparse_809_str);

  // optional string sparse_810_str = 822;
  inline bool has_sparse_810_str() const;
  inline void clear_sparse_810_str();
  static const int kSparse810StrFieldNumber = 822;
  inline const ::std::string& sparse_810_str() const;
  inline void set_sparse_810_str(const ::std::string& value);
  inline void set_sparse_810_str(const char* value);
  inline void set_sparse_810_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_810_str();
  inline ::std::string* release_sparse_810_str();
  inline void set_allocated_sparse_810_str(::std::string* sparse_810_str);

  // optional string sparse_811_str = 823;
  inline bool has_sparse_811_str() const;
  inline void clear_sparse_811_str();
  static const int kSparse811StrFieldNumber = 823;
  inline const ::std::string& sparse_811_str() const;
  inline void set_sparse_811_str(const ::std::string& value);
  inline void set_sparse_811_str(const char* value);
  inline void set_sparse_811_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_811_str();
  inline ::std::string* release_sparse_811_str();
  inline void set_allocated_sparse_811_str(::std::string* sparse_811_str);

  // optional string sparse_812_str = 824;
  inline bool has_sparse_812_str() const;
  inline void clear_sparse_812_str();
  static const int kSparse812StrFieldNumber = 824;
  inline const ::std::string& sparse_812_str() const;
  inline void set_sparse_812_str(const ::std::string& value);
  inline void set_sparse_812_str(const char* value);
  inline void set_sparse_812_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_812_str();
  inline ::std::string* release_sparse_812_str();
  inline void set_allocated_sparse_812_str(::std::string* sparse_812_str);

  // optional string sparse_813_str = 825;
  inline bool has_sparse_813_str() const;
  inline void clear_sparse_813_str();
  static const int kSparse813StrFieldNumber = 825;
  inline const ::std::string& sparse_813_str() const;
  inline void set_sparse_813_str(const ::std::string& value);
  inline void set_sparse_813_str(const char* value);
  inline void set_sparse_813_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_813_str();
  inline ::std::string* release_sparse_813_str();
  inline void set_allocated_sparse_813_str(::std::string* sparse_813_str);

  // optional string sparse_814_str = 826;
  inline bool has_sparse_814_str() const;
  inline void clear_sparse_814_str();
  static const int kSparse814StrFieldNumber = 826;
  inline const ::std::string& sparse_814_str() const;
  inline void set_sparse_814_str(const ::std::string& value);
  inline void set_sparse_814_str(const char* value);
  inline void set_sparse_814_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_814_str();
  inline ::std::string* release_sparse_814_str();
  inline void set_allocated_sparse_814_str(::std::string* sparse_814_str);

  // optional string sparse_815_str = 827;
  inline bool has_sparse_815_str() const;
  inline void clear_sparse_815_str();
  static const int kSparse815StrFieldNumber = 827;
  inline const ::std::string& sparse_815_str() const;
  inline void set_sparse_815_str(const ::std::string& value);
  inline void set_sparse_815_str(const char* value);
  inline void set_sparse_815_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_815_str();
  inline ::std::string* release_sparse_815_str();
  inline void set_allocated_sparse_815_str(::std::string* sparse_815_str);

  // optional string sparse_816_str = 828;
  inline bool has_sparse_816_str() const;
  inline void clear_sparse_816_str();
  static const int kSparse816StrFieldNumber = 828;
  inline const ::std::string& sparse_816_str() const;
  inline void set_sparse_816_str(const ::std::string& value);
  inline void set_sparse_816_str(const char* value);
  inline void set_sparse_816_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_816_str();
  inline ::std::string* release_sparse_816_str();
  inline void set_allocated_sparse_816_str(::std::string* sparse_816_str);

  // optional string sparse_817_str = 829;
  inline bool has_sparse_817_str() const;
  inline void clear_sparse_817_str();
  static const int kSparse817StrFieldNumber = 829;
  inline const ::std::string& sparse_817_str() const;
  inline void set_sparse_817_str(const ::std::string& value);
  inline void set_sparse_817_str(const char* value);
  inline void set_sparse_817_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_817_str();
  inline ::std::string* release_sparse_817_str();
  inline void set_allocated_sparse_817_str(::std::string* sparse_817_str);

  // optional string sparse_818_str = 830;
  inline bool has_sparse_818_str() const;
  inline void clear_sparse_818_str();
  static const int kSparse818StrFieldNumber = 830;
  inline const ::std::string& sparse_818_str() const;
  inline void set_sparse_818_str(const ::std::string& value);
  inline void set_sparse_818_str(const char* value);
  inline void set_sparse_818_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_818_str();
  inline ::std::string* release_sparse_818_str();
  inline void set_allocated_sparse_818_str(::std::string* sparse_818_str);

  // optional string sparse_819_str = 831;
  inline bool has_sparse_819_str() const;
  inline void clear_sparse_819_str();
  static const int kSparse819StrFieldNumber = 831;
  inline const ::std::string& sparse_819_str() const;
  inline void set_sparse_819_str(const ::std::string& value);
  inline void set_sparse_819_str(const char* value);
  inline void set_sparse_819_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_819_str();
  inline ::std::string* release_sparse_819_str();
  inline void set_allocated_sparse_819_str(::std::string* sparse_819_str);

  // optional string sparse_820_str = 832;
  inline bool has_sparse_820_str() const;
  inline void clear_sparse_820_str();
  static const int kSparse820StrFieldNumber = 832;
  inline const ::std::string& sparse_820_str() const;
  inline void set_sparse_820_str(const ::std::string& value);
  inline void set_sparse_820_str(const char* value);
  inline void set_sparse_820_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_820_str();
  inline ::std::string* release_sparse_820_str();
  inline void set_allocated_sparse_820_str(::std::string* sparse_820_str);

  // optional string sparse_821_str = 833;
  inline bool has_sparse_821_str() const;
  inline void clear_sparse_821_str();
  static const int kSparse821StrFieldNumber = 833;
  inline const ::std::string& sparse_821_str() const;
  inline void set_sparse_821_str(const ::std::string& value);
  inline void set_sparse_821_str(const char* value);
  inline void set_sparse_821_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_821_str();
  inline ::std::string* release_sparse_821_str();
  inline void set_allocated_sparse_821_str(::std::string* sparse_821_str);

  // optional string sparse_822_str = 834;
  inline bool has_sparse_822_str() const;
  inline void clear_sparse_822_str();
  static const int kSparse822StrFieldNumber = 834;
  inline const ::std::string& sparse_822_str() const;
  inline void set_sparse_822_str(const ::std::string& value);
  inline void set_sparse_822_str(const char* value);
  inline void set_sparse_822_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_822_str();
  inline ::std::string* release_sparse_822_str();
  inline void set_allocated_sparse_822_str(::std::string* sparse_822_str);

  // optional string sparse_823_str = 835;
  inline bool has_sparse_823_str() const;
  inline void clear_sparse_823_str();
  static const int kSparse823StrFieldNumber = 835;
  inline const ::std::string& sparse_823_str() const;
  inline void set_sparse_823_str(const ::std::string& value);
  inline void set_sparse_823_str(const char* value);
  inline void set_sparse_823_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_823_str();
  inline ::std::string* release_sparse_823_str();
  inline void set_allocated_sparse_823_str(::std::string* sparse_823_str);

  // optional string sparse_824_str = 836;
  inline bool has_sparse_824_str() const;
  inline void clear_sparse_824_str();
  static const int kSparse824StrFieldNumber = 836;
  inline const ::std::string& sparse_824_str() const;
  inline void set_sparse_824_str(const ::std::string& value);
  inline void set_sparse_824_str(const char* value);
  inline void set_sparse_824_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_824_str();
  inline ::std::string* release_sparse_824_str();
  inline void set_allocated_sparse_824_str(::std::string* sparse_824_str);

  // optional string sparse_825_str = 837;
  inline bool has_sparse_825_str() const;
  inline void clear_sparse_825_str();
  static const int kSparse825StrFieldNumber = 837;
  inline const ::std::string& sparse_825_str() const;
  inline void set_sparse_825_str(const ::std::string& value);
  inline void set_sparse_825_str(const char* value);
  inline void set_sparse_825_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_825_str();
  inline ::std::string* release_sparse_825_str();
  inline void set_allocated_sparse_825_str(::std::string* sparse_825_str);

  // optional string sparse_826_str = 838;
  inline bool has_sparse_826_str() const;
  inline void clear_sparse_826_str();
  static const int kSparse826StrFieldNumber = 838;
  inline const ::std::string& sparse_826_str() const;
  inline void set_sparse_826_str(const ::std::string& value);
  inline void set_sparse_826_str(const char* value);
  inline void set_sparse_826_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_826_str();
  inline ::std::string* release_sparse_826_str();
  inline void set_allocated_sparse_826_str(::std::string* sparse_826_str);

  // optional string sparse_827_str = 839;
  inline bool has_sparse_827_str() const;
  inline void clear_sparse_827_str();
  static const int kSparse827StrFieldNumber = 839;
  inline const ::std::string& sparse_827_str() const;
  inline void set_sparse_827_str(const ::std::string& value);
  inline void set_sparse_827_str(const char* value);
  inline void set_sparse_827_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_827_str();
  inline ::std::string* release_sparse_827_str();
  inline void set_allocated_sparse_827_str(::std::string* sparse_827_str);

  // optional string sparse_828_str = 840;
  inline bool has_sparse_828_str() const;
  inline void clear_sparse_828_str();
  static const int kSparse828StrFieldNumber = 840;
  inline const ::std::string& sparse_828_str() const;
  inline void set_sparse_828_str(const ::std::string& value);
  inline void set_sparse_828_str(const char* value);
  inline void set_sparse_828_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_828_str();
  inline ::std::string* release_sparse_828_str();
  inline void set_allocated_sparse_828_str(::std::string* sparse_828_str);

  // optional string sparse_829_str = 841;
  inline bool has_sparse_829_str() const;
  inline void clear_sparse_829_str();
  static const int kSparse829StrFieldNumber = 841;
  inline const ::std::string& sparse_829_str() const;
  inline void set_sparse_829_str(const ::std::string& value);
  inline void set_sparse_829_str(const char* value);
  inline void set_sparse_829_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_829_str();
  inline ::std::string* release_sparse_829_str();
  inline void set_allocated_sparse_829_str(::std::string* sparse_829_str);

  // optional string sparse_830_str = 842;
  inline bool has_sparse_830_str() const;
  inline void clear_sparse_830_str();
  static const int kSparse830StrFieldNumber = 842;
  inline const ::std::string& sparse_830_str() const;
  inline void set_sparse_830_str(const ::std::string& value);
  inline void set_sparse_830_str(const char* value);
  inline void set_sparse_830_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_830_str();
  inline ::std::string* release_sparse_830_str();
  inline void set_allocated_sparse_830_str(::std::string* sparse_830_str);

  // optional string sparse_831_str = 843;
  inline bool has_sparse_831_str() const;
  inline void clear_sparse_831_str();
  static const int kSparse831StrFieldNumber = 843;
  inline const ::std::string& sparse_831_str() const;
  inline void set_sparse_831_str(const ::std::string& value);
  inline void set_sparse_831_str(const char* value);
  inline void set_sparse_831_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_831_str();
  inline ::std::string* release_sparse_831_str();
  inline void set_allocated_sparse_831_str(::std::string* sparse_831_str);

  // optional string sparse_832_str = 844;
  inline bool has_sparse_832_str() const;
  inline void clear_sparse_832_str();
  static const int kSparse832StrFieldNumber = 844;
  inline const ::std::string& sparse_832_str() const;
  inline void set_sparse_832_str(const ::std::string& value);
  inline void set_sparse_832_str(const char* value);
  inline void set_sparse_832_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_832_str();
  inline ::std::string* release_sparse_832_str();
  inline void set_allocated_sparse_832_str(::std::string* sparse_832_str);

  // optional string sparse_833_str = 845;
  inline bool has_sparse_833_str() const;
  inline void clear_sparse_833_str();
  static const int kSparse833StrFieldNumber = 845;
  inline const ::std::string& sparse_833_str() const;
  inline void set_sparse_833_str(const ::std::string& value);
  inline void set_sparse_833_str(const char* value);
  inline void set_sparse_833_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_833_str();
  inline ::std::string* release_sparse_833_str();
  inline void set_allocated_sparse_833_str(::std::string* sparse_833_str);

  // optional string sparse_834_str = 846;
  inline bool has_sparse_834_str() const;
  inline void clear_sparse_834_str();
  static const int kSparse834StrFieldNumber = 846;
  inline const ::std::string& sparse_834_str() const;
  inline void set_sparse_834_str(const ::std::string& value);
  inline void set_sparse_834_str(const char* value);
  inline void set_sparse_834_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_834_str();
  inline ::std::string* release_sparse_834_str();
  inline void set_allocated_sparse_834_str(::std::string* sparse_834_str);

  // optional string sparse_835_str = 847;
  inline bool has_sparse_835_str() const;
  inline void clear_sparse_835_str();
  static const int kSparse835StrFieldNumber = 847;
  inline const ::std::string& sparse_835_str() const;
  inline void set_sparse_835_str(const ::std::string& value);
  inline void set_sparse_835_str(const char* value);
  inline void set_sparse_835_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_835_str();
  inline ::std::string* release_sparse_835_str();
  inline void set_allocated_sparse_835_str(::std::string* sparse_835_str);

  // optional string sparse_836_str = 848;
  inline bool has_sparse_836_str() const;
  inline void clear_sparse_836_str();
  static const int kSparse836StrFieldNumber = 848;
  inline const ::std::string& sparse_836_str() const;
  inline void set_sparse_836_str(const ::std::string& value);
  inline void set_sparse_836_str(const char* value);
  inline void set_sparse_836_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_836_str();
  inline ::std::string* release_sparse_836_str();
  inline void set_allocated_sparse_836_str(::std::string* sparse_836_str);

  // optional string sparse_837_str = 849;
  inline bool has_sparse_837_str() const;
  inline void clear_sparse_837_str();
  static const int kSparse837StrFieldNumber = 849;
  inline const ::std::string& sparse_837_str() const;
  inline void set_sparse_837_str(const ::std::string& value);
  inline void set_sparse_837_str(const char* value);
  inline void set_sparse_837_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_837_str();
  inline ::std::string* release_sparse_837_str();
  inline void set_allocated_sparse_837_str(::std::string* sparse_837_str);

  // optional string sparse_838_str = 850;
  inline bool has_sparse_838_str() const;
  inline void clear_sparse_838_str();
  static const int kSparse838StrFieldNumber = 850;
  inline const ::std::string& sparse_838_str() const;
  inline void set_sparse_838_str(const ::std::string& value);
  inline void set_sparse_838_str(const char* value);
  inline void set_sparse_838_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_838_str();
  inline ::std::string* release_sparse_838_str();
  inline void set_allocated_sparse_838_str(::std::string* sparse_838_str);

  // optional string sparse_839_str = 851;
  inline bool has_sparse_839_str() const;
  inline void clear_sparse_839_str();
  static const int kSparse839StrFieldNumber = 851;
  inline const ::std::string& sparse_839_str() const;
  inline void set_sparse_839_str(const ::std::string& value);
  inline void set_sparse_839_str(const char* value);
  inline void set_sparse_839_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_839_str();
  inline ::std::string* release_sparse_839_str();
  inline void set_allocated_sparse_839_str(::std::string* sparse_839_str);

  // optional string sparse_840_str = 852;
  inline bool has_sparse_840_str() const;
  inline void clear_sparse_840_str();
  static const int kSparse840StrFieldNumber = 852;
  inline const ::std::string& sparse_840_str() const;
  inline void set_sparse_840_str(const ::std::string& value);
  inline void set_sparse_840_str(const char* value);
  inline void set_sparse_840_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_840_str();
  inline ::std::string* release_sparse_840_str();
  inline void set_allocated_sparse_840_str(::std::string* sparse_840_str);

  // optional string sparse_841_str = 853;
  inline bool has_sparse_841_str() const;
  inline void clear_sparse_841_str();
  static const int kSparse841StrFieldNumber = 853;
  inline const ::std::string& sparse_841_str() const;
  inline void set_sparse_841_str(const ::std::string& value);
  inline void set_sparse_841_str(const char* value);
  inline void set_sparse_841_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_841_str();
  inline ::std::string* release_sparse_841_str();
  inline void set_allocated_sparse_841_str(::std::string* sparse_841_str);

  // optional string sparse_842_str = 854;
  inline bool has_sparse_842_str() const;
  inline void clear_sparse_842_str();
  static const int kSparse842StrFieldNumber = 854;
  inline const ::std::string& sparse_842_str() const;
  inline void set_sparse_842_str(const ::std::string& value);
  inline void set_sparse_842_str(const char* value);
  inline void set_sparse_842_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_842_str();
  inline ::std::string* release_sparse_842_str();
  inline void set_allocated_sparse_842_str(::std::string* sparse_842_str);

  // optional string sparse_843_str = 855;
  inline bool has_sparse_843_str() const;
  inline void clear_sparse_843_str();
  static const int kSparse843StrFieldNumber = 855;
  inline const ::std::string& sparse_843_str() const;
  inline void set_sparse_843_str(const ::std::string& value);
  inline void set_sparse_843_str(const char* value);
  inline void set_sparse_843_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_843_str();
  inline ::std::string* release_sparse_843_str();
  inline void set_allocated_sparse_843_str(::std::string* sparse_843_str);

  // optional string sparse_844_str = 856;
  inline bool has_sparse_844_str() const;
  inline void clear_sparse_844_str();
  static const int kSparse844StrFieldNumber = 856;
  inline const ::std::string& sparse_844_str() const;
  inline void set_sparse_844_str(const ::std::string& value);
  inline void set_sparse_844_str(const char* value);
  inline void set_sparse_844_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_844_str();
  inline ::std::string* release_sparse_844_str();
  inline void set_allocated_sparse_844_str(::std::string* sparse_844_str);

  // optional string sparse_845_str = 857;
  inline bool has_sparse_845_str() const;
  inline void clear_sparse_845_str();
  static const int kSparse845StrFieldNumber = 857;
  inline const ::std::string& sparse_845_str() const;
  inline void set_sparse_845_str(const ::std::string& value);
  inline void set_sparse_845_str(const char* value);
  inline void set_sparse_845_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_845_str();
  inline ::std::string* release_sparse_845_str();
  inline void set_allocated_sparse_845_str(::std::string* sparse_845_str);

  // optional string sparse_846_str = 858;
  inline bool has_sparse_846_str() const;
  inline void clear_sparse_846_str();
  static const int kSparse846StrFieldNumber = 858;
  inline const ::std::string& sparse_846_str() const;
  inline void set_sparse_846_str(const ::std::string& value);
  inline void set_sparse_846_str(const char* value);
  inline void set_sparse_846_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_846_str();
  inline ::std::string* release_sparse_846_str();
  inline void set_allocated_sparse_846_str(::std::string* sparse_846_str);

  // optional string sparse_847_str = 859;
  inline bool has_sparse_847_str() const;
  inline void clear_sparse_847_str();
  static const int kSparse847StrFieldNumber = 859;
  inline const ::std::string& sparse_847_str() const;
  inline void set_sparse_847_str(const ::std::string& value);
  inline void set_sparse_847_str(const char* value);
  inline void set_sparse_847_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_847_str();
  inline ::std::string* release_sparse_847_str();
  inline void set_allocated_sparse_847_str(::std::string* sparse_847_str);

  // optional string sparse_848_str = 860;
  inline bool has_sparse_848_str() const;
  inline void clear_sparse_848_str();
  static const int kSparse848StrFieldNumber = 860;
  inline const ::std::string& sparse_848_str() const;
  inline void set_sparse_848_str(const ::std::string& value);
  inline void set_sparse_848_str(const char* value);
  inline void set_sparse_848_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_848_str();
  inline ::std::string* release_sparse_848_str();
  inline void set_allocated_sparse_848_str(::std::string* sparse_848_str);

  // optional string sparse_849_str = 861;
  inline bool has_sparse_849_str() const;
  inline void clear_sparse_849_str();
  static const int kSparse849StrFieldNumber = 861;
  inline const ::std::string& sparse_849_str() const;
  inline void set_sparse_849_str(const ::std::string& value);
  inline void set_sparse_849_str(const char* value);
  inline void set_sparse_849_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_849_str();
  inline ::std::string* release_sparse_849_str();
  inline void set_allocated_sparse_849_str(::std::string* sparse_849_str);

  // optional string sparse_850_str = 862;
  inline bool has_sparse_850_str() const;
  inline void clear_sparse_850_str();
  static const int kSparse850StrFieldNumber = 862;
  inline const ::std::string& sparse_850_str() const;
  inline void set_sparse_850_str(const ::std::string& value);
  inline void set_sparse_850_str(const char* value);
  inline void set_sparse_850_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_850_str();
  inline ::std::string* release_sparse_850_str();
  inline void set_allocated_sparse_850_str(::std::string* sparse_850_str);

  // optional string sparse_851_str = 863;
  inline bool has_sparse_851_str() const;
  inline void clear_sparse_851_str();
  static const int kSparse851StrFieldNumber = 863;
  inline const ::std::string& sparse_851_str() const;
  inline void set_sparse_851_str(const ::std::string& value);
  inline void set_sparse_851_str(const char* value);
  inline void set_sparse_851_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_851_str();
  inline ::std::string* release_sparse_851_str();
  inline void set_allocated_sparse_851_str(::std::string* sparse_851_str);

  // optional string sparse_852_str = 864;
  inline bool has_sparse_852_str() const;
  inline void clear_sparse_852_str();
  static const int kSparse852StrFieldNumber = 864;
  inline const ::std::string& sparse_852_str() const;
  inline void set_sparse_852_str(const ::std::string& value);
  inline void set_sparse_852_str(const char* value);
  inline void set_sparse_852_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_852_str();
  inline ::std::string* release_sparse_852_str();
  inline void set_allocated_sparse_852_str(::std::string* sparse_852_str);

  // optional string sparse_853_str = 865;
  inline bool has_sparse_853_str() const;
  inline void clear_sparse_853_str();
  static const int kSparse853StrFieldNumber = 865;
  inline const ::std::string& sparse_853_str() const;
  inline void set_sparse_853_str(const ::std::string& value);
  inline void set_sparse_853_str(const char* value);
  inline void set_sparse_853_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_853_str();
  inline ::std::string* release_sparse_853_str();
  inline void set_allocated_sparse_853_str(::std::string* sparse_853_str);

  // optional string sparse_854_str = 866;
  inline bool has_sparse_854_str() const;
  inline void clear_sparse_854_str();
  static const int kSparse854StrFieldNumber = 866;
  inline const ::std::string& sparse_854_str() const;
  inline void set_sparse_854_str(const ::std::string& value);
  inline void set_sparse_854_str(const char* value);
  inline void set_sparse_854_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_854_str();
  inline ::std::string* release_sparse_854_str();
  inline void set_allocated_sparse_854_str(::std::string* sparse_854_str);

  // optional string sparse_855_str = 867;
  inline bool has_sparse_855_str() const;
  inline void clear_sparse_855_str();
  static const int kSparse855StrFieldNumber = 867;
  inline const ::std::string& sparse_855_str() const;
  inline void set_sparse_855_str(const ::std::string& value);
  inline void set_sparse_855_str(const char* value);
  inline void set_sparse_855_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_855_str();
  inline ::std::string* release_sparse_855_str();
  inline void set_allocated_sparse_855_str(::std::string* sparse_855_str);

  // optional string sparse_856_str = 868;
  inline bool has_sparse_856_str() const;
  inline void clear_sparse_856_str();
  static const int kSparse856StrFieldNumber = 868;
  inline const ::std::string& sparse_856_str() const;
  inline void set_sparse_856_str(const ::std::string& value);
  inline void set_sparse_856_str(const char* value);
  inline void set_sparse_856_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_856_str();
  inline ::std::string* release_sparse_856_str();
  inline void set_allocated_sparse_856_str(::std::string* sparse_856_str);

  // optional string sparse_857_str = 869;
  inline bool has_sparse_857_str() const;
  inline void clear_sparse_857_str();
  static const int kSparse857StrFieldNumber = 869;
  inline const ::std::string& sparse_857_str() const;
  inline void set_sparse_857_str(const ::std::string& value);
  inline void set_sparse_857_str(const char* value);
  inline void set_sparse_857_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_857_str();
  inline ::std::string* release_sparse_857_str();
  inline void set_allocated_sparse_857_str(::std::string* sparse_857_str);

  // optional string sparse_858_str = 870;
  inline bool has_sparse_858_str() const;
  inline void clear_sparse_858_str();
  static const int kSparse858StrFieldNumber = 870;
  inline const ::std::string& sparse_858_str() const;
  inline void set_sparse_858_str(const ::std::string& value);
  inline void set_sparse_858_str(const char* value);
  inline void set_sparse_858_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_858_str();
  inline ::std::string* release_sparse_858_str();
  inline void set_allocated_sparse_858_str(::std::string* sparse_858_str);

  // optional string sparse_859_str = 871;
  inline bool has_sparse_859_str() const;
  inline void clear_sparse_859_str();
  static const int kSparse859StrFieldNumber = 871;
  inline const ::std::string& sparse_859_str() const;
  inline void set_sparse_859_str(const ::std::string& value);
  inline void set_sparse_859_str(const char* value);
  inline void set_sparse_859_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_859_str();
  inline ::std::string* release_sparse_859_str();
  inline void set_allocated_sparse_859_str(::std::string* sparse_859_str);

  // optional string sparse_860_str = 872;
  inline bool has_sparse_860_str() const;
  inline void clear_sparse_860_str();
  static const int kSparse860StrFieldNumber = 872;
  inline const ::std::string& sparse_860_str() const;
  inline void set_sparse_860_str(const ::std::string& value);
  inline void set_sparse_860_str(const char* value);
  inline void set_sparse_860_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_860_str();
  inline ::std::string* release_sparse_860_str();
  inline void set_allocated_sparse_860_str(::std::string* sparse_860_str);

  // optional string sparse_861_str = 873;
  inline bool has_sparse_861_str() const;
  inline void clear_sparse_861_str();
  static const int kSparse861StrFieldNumber = 873;
  inline const ::std::string& sparse_861_str() const;
  inline void set_sparse_861_str(const ::std::string& value);
  inline void set_sparse_861_str(const char* value);
  inline void set_sparse_861_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_861_str();
  inline ::std::string* release_sparse_861_str();
  inline void set_allocated_sparse_861_str(::std::string* sparse_861_str);

  // optional string sparse_862_str = 874;
  inline bool has_sparse_862_str() const;
  inline void clear_sparse_862_str();
  static const int kSparse862StrFieldNumber = 874;
  inline const ::std::string& sparse_862_str() const;
  inline void set_sparse_862_str(const ::std::string& value);
  inline void set_sparse_862_str(const char* value);
  inline void set_sparse_862_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_862_str();
  inline ::std::string* release_sparse_862_str();
  inline void set_allocated_sparse_862_str(::std::string* sparse_862_str);

  // optional string sparse_863_str = 875;
  inline bool has_sparse_863_str() const;
  inline void clear_sparse_863_str();
  static const int kSparse863StrFieldNumber = 875;
  inline const ::std::string& sparse_863_str() const;
  inline void set_sparse_863_str(const ::std::string& value);
  inline void set_sparse_863_str(const char* value);
  inline void set_sparse_863_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_863_str();
  inline ::std::string* release_sparse_863_str();
  inline void set_allocated_sparse_863_str(::std::string* sparse_863_str);

  // optional string sparse_864_str = 876;
  inline bool has_sparse_864_str() const;
  inline void clear_sparse_864_str();
  static const int kSparse864StrFieldNumber = 876;
  inline const ::std::string& sparse_864_str() const;
  inline void set_sparse_864_str(const ::std::string& value);
  inline void set_sparse_864_str(const char* value);
  inline void set_sparse_864_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_864_str();
  inline ::std::string* release_sparse_864_str();
  inline void set_allocated_sparse_864_str(::std::string* sparse_864_str);

  // optional string sparse_865_str = 877;
  inline bool has_sparse_865_str() const;
  inline void clear_sparse_865_str();
  static const int kSparse865StrFieldNumber = 877;
  inline const ::std::string& sparse_865_str() const;
  inline void set_sparse_865_str(const ::std::string& value);
  inline void set_sparse_865_str(const char* value);
  inline void set_sparse_865_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_865_str();
  inline ::std::string* release_sparse_865_str();
  inline void set_allocated_sparse_865_str(::std::string* sparse_865_str);

  // optional string sparse_866_str = 878;
  inline bool has_sparse_866_str() const;
  inline void clear_sparse_866_str();
  static const int kSparse866StrFieldNumber = 878;
  inline const ::std::string& sparse_866_str() const;
  inline void set_sparse_866_str(const ::std::string& value);
  inline void set_sparse_866_str(const char* value);
  inline void set_sparse_866_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_866_str();
  inline ::std::string* release_sparse_866_str();
  inline void set_allocated_sparse_866_str(::std::string* sparse_866_str);

  // optional string sparse_867_str = 879;
  inline bool has_sparse_867_str() const;
  inline void clear_sparse_867_str();
  static const int kSparse867StrFieldNumber = 879;
  inline const ::std::string& sparse_867_str() const;
  inline void set_sparse_867_str(const ::std::string& value);
  inline void set_sparse_867_str(const char* value);
  inline void set_sparse_867_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_867_str();
  inline ::std::string* release_sparse_867_str();
  inline void set_allocated_sparse_867_str(::std::string* sparse_867_str);

  // optional string sparse_868_str = 880;
  inline bool has_sparse_868_str() const;
  inline void clear_sparse_868_str();
  static const int kSparse868StrFieldNumber = 880;
  inline const ::std::string& sparse_868_str() const;
  inline void set_sparse_868_str(const ::std::string& value);
  inline void set_sparse_868_str(const char* value);
  inline void set_sparse_868_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_868_str();
  inline ::std::string* release_sparse_868_str();
  inline void set_allocated_sparse_868_str(::std::string* sparse_868_str);

  // optional string sparse_869_str = 881;
  inline bool has_sparse_869_str() const;
  inline void clear_sparse_869_str();
  static const int kSparse869StrFieldNumber = 881;
  inline const ::std::string& sparse_869_str() const;
  inline void set_sparse_869_str(const ::std::string& value);
  inline void set_sparse_869_str(const char* value);
  inline void set_sparse_869_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_869_str();
  inline ::std::string* release_sparse_869_str();
  inline void set_allocated_sparse_869_str(::std::string* sparse_869_str);

  // optional string sparse_870_str = 882;
  inline bool has_sparse_870_str() const;
  inline void clear_sparse_870_str();
  static const int kSparse870StrFieldNumber = 882;
  inline const ::std::string& sparse_870_str() const;
  inline void set_sparse_870_str(const ::std::string& value);
  inline void set_sparse_870_str(const char* value);
  inline void set_sparse_870_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_870_str();
  inline ::std::string* release_sparse_870_str();
  inline void set_allocated_sparse_870_str(::std::string* sparse_870_str);

  // optional string sparse_871_str = 883;
  inline bool has_sparse_871_str() const;
  inline void clear_sparse_871_str();
  static const int kSparse871StrFieldNumber = 883;
  inline const ::std::string& sparse_871_str() const;
  inline void set_sparse_871_str(const ::std::string& value);
  inline void set_sparse_871_str(const char* value);
  inline void set_sparse_871_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_871_str();
  inline ::std::string* release_sparse_871_str();
  inline void set_allocated_sparse_871_str(::std::string* sparse_871_str);

  // optional string sparse_872_str = 884;
  inline bool has_sparse_872_str() const;
  inline void clear_sparse_872_str();
  static const int kSparse872StrFieldNumber = 884;
  inline const ::std::string& sparse_872_str() const;
  inline void set_sparse_872_str(const ::std::string& value);
  inline void set_sparse_872_str(const char* value);
  inline void set_sparse_872_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_872_str();
  inline ::std::string* release_sparse_872_str();
  inline void set_allocated_sparse_872_str(::std::string* sparse_872_str);

  // optional string sparse_873_str = 885;
  inline bool has_sparse_873_str() const;
  inline void clear_sparse_873_str();
  static const int kSparse873StrFieldNumber = 885;
  inline const ::std::string& sparse_873_str() const;
  inline void set_sparse_873_str(const ::std::string& value);
  inline void set_sparse_873_str(const char* value);
  inline void set_sparse_873_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_873_str();
  inline ::std::string* release_sparse_873_str();
  inline void set_allocated_sparse_873_str(::std::string* sparse_873_str);

  // optional string sparse_874_str = 886;
  inline bool has_sparse_874_str() const;
  inline void clear_sparse_874_str();
  static const int kSparse874StrFieldNumber = 886;
  inline const ::std::string& sparse_874_str() const;
  inline void set_sparse_874_str(const ::std::string& value);
  inline void set_sparse_874_str(const char* value);
  inline void set_sparse_874_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_874_str();
  inline ::std::string* release_sparse_874_str();
  inline void set_allocated_sparse_874_str(::std::string* sparse_874_str);

  // optional string sparse_875_str = 887;
  inline bool has_sparse_875_str() const;
  inline void clear_sparse_875_str();
  static const int kSparse875StrFieldNumber = 887;
  inline const ::std::string& sparse_875_str() const;
  inline void set_sparse_875_str(const ::std::string& value);
  inline void set_sparse_875_str(const char* value);
  inline void set_sparse_875_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_875_str();
  inline ::std::string* release_sparse_875_str();
  inline void set_allocated_sparse_875_str(::std::string* sparse_875_str);

  // optional string sparse_876_str = 888;
  inline bool has_sparse_876_str() const;
  inline void clear_sparse_876_str();
  static const int kSparse876StrFieldNumber = 888;
  inline const ::std::string& sparse_876_str() const;
  inline void set_sparse_876_str(const ::std::string& value);
  inline void set_sparse_876_str(const char* value);
  inline void set_sparse_876_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_876_str();
  inline ::std::string* release_sparse_876_str();
  inline void set_allocated_sparse_876_str(::std::string* sparse_876_str);

  // optional string sparse_877_str = 889;
  inline bool has_sparse_877_str() const;
  inline void clear_sparse_877_str();
  static const int kSparse877StrFieldNumber = 889;
  inline const ::std::string& sparse_877_str() const;
  inline void set_sparse_877_str(const ::std::string& value);
  inline void set_sparse_877_str(const char* value);
  inline void set_sparse_877_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_877_str();
  inline ::std::string* release_sparse_877_str();
  inline void set_allocated_sparse_877_str(::std::string* sparse_877_str);

  // optional string sparse_878_str = 890;
  inline bool has_sparse_878_str() const;
  inline void clear_sparse_878_str();
  static const int kSparse878StrFieldNumber = 890;
  inline const ::std::string& sparse_878_str() const;
  inline void set_sparse_878_str(const ::std::string& value);
  inline void set_sparse_878_str(const char* value);
  inline void set_sparse_878_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_878_str();
  inline ::std::string* release_sparse_878_str();
  inline void set_allocated_sparse_878_str(::std::string* sparse_878_str);

  // optional string sparse_879_str = 891;
  inline bool has_sparse_879_str() const;
  inline void clear_sparse_879_str();
  static const int kSparse879StrFieldNumber = 891;
  inline const ::std::string& sparse_879_str() const;
  inline void set_sparse_879_str(const ::std::string& value);
  inline void set_sparse_879_str(const char* value);
  inline void set_sparse_879_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_879_str();
  inline ::std::string* release_sparse_879_str();
  inline void set_allocated_sparse_879_str(::std::string* sparse_879_str);

  // optional string sparse_880_str = 892;
  inline bool has_sparse_880_str() const;
  inline void clear_sparse_880_str();
  static const int kSparse880StrFieldNumber = 892;
  inline const ::std::string& sparse_880_str() const;
  inline void set_sparse_880_str(const ::std::string& value);
  inline void set_sparse_880_str(const char* value);
  inline void set_sparse_880_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_880_str();
  inline ::std::string* release_sparse_880_str();
  inline void set_allocated_sparse_880_str(::std::string* sparse_880_str);

  // optional string sparse_881_str = 893;
  inline bool has_sparse_881_str() const;
  inline void clear_sparse_881_str();
  static const int kSparse881StrFieldNumber = 893;
  inline const ::std::string& sparse_881_str() const;
  inline void set_sparse_881_str(const ::std::string& value);
  inline void set_sparse_881_str(const char* value);
  inline void set_sparse_881_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_881_str();
  inline ::std::string* release_sparse_881_str();
  inline void set_allocated_sparse_881_str(::std::string* sparse_881_str);

  // optional string sparse_882_str = 894;
  inline bool has_sparse_882_str() const;
  inline void clear_sparse_882_str();
  static const int kSparse882StrFieldNumber = 894;
  inline const ::std::string& sparse_882_str() const;
  inline void set_sparse_882_str(const ::std::string& value);
  inline void set_sparse_882_str(const char* value);
  inline void set_sparse_882_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_882_str();
  inline ::std::string* release_sparse_882_str();
  inline void set_allocated_sparse_882_str(::std::string* sparse_882_str);

  // optional string sparse_883_str = 895;
  inline bool has_sparse_883_str() const;
  inline void clear_sparse_883_str();
  static const int kSparse883StrFieldNumber = 895;
  inline const ::std::string& sparse_883_str() const;
  inline void set_sparse_883_str(const ::std::string& value);
  inline void set_sparse_883_str(const char* value);
  inline void set_sparse_883_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_883_str();
  inline ::std::string* release_sparse_883_str();
  inline void set_allocated_sparse_883_str(::std::string* sparse_883_str);

  // optional string sparse_884_str = 896;
  inline bool has_sparse_884_str() const;
  inline void clear_sparse_884_str();
  static const int kSparse884StrFieldNumber = 896;
  inline const ::std::string& sparse_884_str() const;
  inline void set_sparse_884_str(const ::std::string& value);
  inline void set_sparse_884_str(const char* value);
  inline void set_sparse_884_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_884_str();
  inline ::std::string* release_sparse_884_str();
  inline void set_allocated_sparse_884_str(::std::string* sparse_884_str);

  // optional string sparse_885_str = 897;
  inline bool has_sparse_885_str() const;
  inline void clear_sparse_885_str();
  static const int kSparse885StrFieldNumber = 897;
  inline const ::std::string& sparse_885_str() const;
  inline void set_sparse_885_str(const ::std::string& value);
  inline void set_sparse_885_str(const char* value);
  inline void set_sparse_885_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_885_str();
  inline ::std::string* release_sparse_885_str();
  inline void set_allocated_sparse_885_str(::std::string* sparse_885_str);

  // optional string sparse_886_str = 898;
  inline bool has_sparse_886_str() const;
  inline void clear_sparse_886_str();
  static const int kSparse886StrFieldNumber = 898;
  inline const ::std::string& sparse_886_str() const;
  inline void set_sparse_886_str(const ::std::string& value);
  inline void set_sparse_886_str(const char* value);
  inline void set_sparse_886_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_886_str();
  inline ::std::string* release_sparse_886_str();
  inline void set_allocated_sparse_886_str(::std::string* sparse_886_str);

  // optional string sparse_887_str = 899;
  inline bool has_sparse_887_str() const;
  inline void clear_sparse_887_str();
  static const int kSparse887StrFieldNumber = 899;
  inline const ::std::string& sparse_887_str() const;
  inline void set_sparse_887_str(const ::std::string& value);
  inline void set_sparse_887_str(const char* value);
  inline void set_sparse_887_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_887_str();
  inline ::std::string* release_sparse_887_str();
  inline void set_allocated_sparse_887_str(::std::string* sparse_887_str);

  // optional string sparse_888_str = 900;
  inline bool has_sparse_888_str() const;
  inline void clear_sparse_888_str();
  static const int kSparse888StrFieldNumber = 900;
  inline const ::std::string& sparse_888_str() const;
  inline void set_sparse_888_str(const ::std::string& value);
  inline void set_sparse_888_str(const char* value);
  inline void set_sparse_888_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_888_str();
  inline ::std::string* release_sparse_888_str();
  inline void set_allocated_sparse_888_str(::std::string* sparse_888_str);

  // optional string sparse_889_str = 901;
  inline bool has_sparse_889_str() const;
  inline void clear_sparse_889_str();
  static const int kSparse889StrFieldNumber = 901;
  inline const ::std::string& sparse_889_str() const;
  inline void set_sparse_889_str(const ::std::string& value);
  inline void set_sparse_889_str(const char* value);
  inline void set_sparse_889_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_889_str();
  inline ::std::string* release_sparse_889_str();
  inline void set_allocated_sparse_889_str(::std::string* sparse_889_str);

  // optional string sparse_890_str = 902;
  inline bool has_sparse_890_str() const;
  inline void clear_sparse_890_str();
  static const int kSparse890StrFieldNumber = 902;
  inline const ::std::string& sparse_890_str() const;
  inline void set_sparse_890_str(const ::std::string& value);
  inline void set_sparse_890_str(const char* value);
  inline void set_sparse_890_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_890_str();
  inline ::std::string* release_sparse_890_str();
  inline void set_allocated_sparse_890_str(::std::string* sparse_890_str);

  // optional string sparse_891_str = 903;
  inline bool has_sparse_891_str() const;
  inline void clear_sparse_891_str();
  static const int kSparse891StrFieldNumber = 903;
  inline const ::std::string& sparse_891_str() const;
  inline void set_sparse_891_str(const ::std::string& value);
  inline void set_sparse_891_str(const char* value);
  inline void set_sparse_891_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_891_str();
  inline ::std::string* release_sparse_891_str();
  inline void set_allocated_sparse_891_str(::std::string* sparse_891_str);

  // optional string sparse_892_str = 904;
  inline bool has_sparse_892_str() const;
  inline void clear_sparse_892_str();
  static const int kSparse892StrFieldNumber = 904;
  inline const ::std::string& sparse_892_str() const;
  inline void set_sparse_892_str(const ::std::string& value);
  inline void set_sparse_892_str(const char* value);
  inline void set_sparse_892_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_892_str();
  inline ::std::string* release_sparse_892_str();
  inline void set_allocated_sparse_892_str(::std::string* sparse_892_str);

  // optional string sparse_893_str = 905;
  inline bool has_sparse_893_str() const;
  inline void clear_sparse_893_str();
  static const int kSparse893StrFieldNumber = 905;
  inline const ::std::string& sparse_893_str() const;
  inline void set_sparse_893_str(const ::std::string& value);
  inline void set_sparse_893_str(const char* value);
  inline void set_sparse_893_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_893_str();
  inline ::std::string* release_sparse_893_str();
  inline void set_allocated_sparse_893_str(::std::string* sparse_893_str);

  // optional string sparse_894_str = 906;
  inline bool has_sparse_894_str() const;
  inline void clear_sparse_894_str();
  static const int kSparse894StrFieldNumber = 906;
  inline const ::std::string& sparse_894_str() const;
  inline void set_sparse_894_str(const ::std::string& value);
  inline void set_sparse_894_str(const char* value);
  inline void set_sparse_894_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_894_str();
  inline ::std::string* release_sparse_894_str();
  inline void set_allocated_sparse_894_str(::std::string* sparse_894_str);

  // optional string sparse_895_str = 907;
  inline bool has_sparse_895_str() const;
  inline void clear_sparse_895_str();
  static const int kSparse895StrFieldNumber = 907;
  inline const ::std::string& sparse_895_str() const;
  inline void set_sparse_895_str(const ::std::string& value);
  inline void set_sparse_895_str(const char* value);
  inline void set_sparse_895_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_895_str();
  inline ::std::string* release_sparse_895_str();
  inline void set_allocated_sparse_895_str(::std::string* sparse_895_str);

  // optional string sparse_896_str = 908;
  inline bool has_sparse_896_str() const;
  inline void clear_sparse_896_str();
  static const int kSparse896StrFieldNumber = 908;
  inline const ::std::string& sparse_896_str() const;
  inline void set_sparse_896_str(const ::std::string& value);
  inline void set_sparse_896_str(const char* value);
  inline void set_sparse_896_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_896_str();
  inline ::std::string* release_sparse_896_str();
  inline void set_allocated_sparse_896_str(::std::string* sparse_896_str);

  // optional string sparse_897_str = 909;
  inline bool has_sparse_897_str() const;
  inline void clear_sparse_897_str();
  static const int kSparse897StrFieldNumber = 909;
  inline const ::std::string& sparse_897_str() const;
  inline void set_sparse_897_str(const ::std::string& value);
  inline void set_sparse_897_str(const char* value);
  inline void set_sparse_897_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_897_str();
  inline ::std::string* release_sparse_897_str();
  inline void set_allocated_sparse_897_str(::std::string* sparse_897_str);

  // optional string sparse_898_str = 910;
  inline bool has_sparse_898_str() const;
  inline void clear_sparse_898_str();
  static const int kSparse898StrFieldNumber = 910;
  inline const ::std::string& sparse_898_str() const;
  inline void set_sparse_898_str(const ::std::string& value);
  inline void set_sparse_898_str(const char* value);
  inline void set_sparse_898_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_898_str();
  inline ::std::string* release_sparse_898_str();
  inline void set_allocated_sparse_898_str(::std::string* sparse_898_str);

  // optional string sparse_899_str = 911;
  inline bool has_sparse_899_str() const;
  inline void clear_sparse_899_str();
  static const int kSparse899StrFieldNumber = 911;
  inline const ::std::string& sparse_899_str() const;
  inline void set_sparse_899_str(const ::std::string& value);
  inline void set_sparse_899_str(const char* value);
  inline void set_sparse_899_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_899_str();
  inline ::std::string* release_sparse_899_str();
  inline void set_allocated_sparse_899_str(::std::string* sparse_899_str);

  // optional string sparse_900_str = 912;
  inline bool has_sparse_900_str() const;
  inline void clear_sparse_900_str();
  static const int kSparse900StrFieldNumber = 912;
  inline const ::std::string& sparse_900_str() const;
  inline void set_sparse_900_str(const ::std::string& value);
  inline void set_sparse_900_str(const char* value);
  inline void set_sparse_900_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_900_str();
  inline ::std::string* release_sparse_900_str();
  inline void set_allocated_sparse_900_str(::std::string* sparse_900_str);

  // optional string sparse_901_str = 913;
  inline bool has_sparse_901_str() const;
  inline void clear_sparse_901_str();
  static const int kSparse901StrFieldNumber = 913;
  inline const ::std::string& sparse_901_str() const;
  inline void set_sparse_901_str(const ::std::string& value);
  inline void set_sparse_901_str(const char* value);
  inline void set_sparse_901_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_901_str();
  inline ::std::string* release_sparse_901_str();
  inline void set_allocated_sparse_901_str(::std::string* sparse_901_str);

  // optional string sparse_902_str = 914;
  inline bool has_sparse_902_str() const;
  inline void clear_sparse_902_str();
  static const int kSparse902StrFieldNumber = 914;
  inline const ::std::string& sparse_902_str() const;
  inline void set_sparse_902_str(const ::std::string& value);
  inline void set_sparse_902_str(const char* value);
  inline void set_sparse_902_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_902_str();
  inline ::std::string* release_sparse_902_str();
  inline void set_allocated_sparse_902_str(::std::string* sparse_902_str);

  // optional string sparse_903_str = 915;
  inline bool has_sparse_903_str() const;
  inline void clear_sparse_903_str();
  static const int kSparse903StrFieldNumber = 915;
  inline const ::std::string& sparse_903_str() const;
  inline void set_sparse_903_str(const ::std::string& value);
  inline void set_sparse_903_str(const char* value);
  inline void set_sparse_903_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_903_str();
  inline ::std::string* release_sparse_903_str();
  inline void set_allocated_sparse_903_str(::std::string* sparse_903_str);

  // optional string sparse_904_str = 916;
  inline bool has_sparse_904_str() const;
  inline void clear_sparse_904_str();
  static const int kSparse904StrFieldNumber = 916;
  inline const ::std::string& sparse_904_str() const;
  inline void set_sparse_904_str(const ::std::string& value);
  inline void set_sparse_904_str(const char* value);
  inline void set_sparse_904_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_904_str();
  inline ::std::string* release_sparse_904_str();
  inline void set_allocated_sparse_904_str(::std::string* sparse_904_str);

  // optional string sparse_905_str = 917;
  inline bool has_sparse_905_str() const;
  inline void clear_sparse_905_str();
  static const int kSparse905StrFieldNumber = 917;
  inline const ::std::string& sparse_905_str() const;
  inline void set_sparse_905_str(const ::std::string& value);
  inline void set_sparse_905_str(const char* value);
  inline void set_sparse_905_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_905_str();
  inline ::std::string* release_sparse_905_str();
  inline void set_allocated_sparse_905_str(::std::string* sparse_905_str);

  // optional string sparse_906_str = 918;
  inline bool has_sparse_906_str() const;
  inline void clear_sparse_906_str();
  static const int kSparse906StrFieldNumber = 918;
  inline const ::std::string& sparse_906_str() const;
  inline void set_sparse_906_str(const ::std::string& value);
  inline void set_sparse_906_str(const char* value);
  inline void set_sparse_906_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_906_str();
  inline ::std::string* release_sparse_906_str();
  inline void set_allocated_sparse_906_str(::std::string* sparse_906_str);

  // optional string sparse_907_str = 919;
  inline bool has_sparse_907_str() const;
  inline void clear_sparse_907_str();
  static const int kSparse907StrFieldNumber = 919;
  inline const ::std::string& sparse_907_str() const;
  inline void set_sparse_907_str(const ::std::string& value);
  inline void set_sparse_907_str(const char* value);
  inline void set_sparse_907_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_907_str();
  inline ::std::string* release_sparse_907_str();
  inline void set_allocated_sparse_907_str(::std::string* sparse_907_str);

  // optional string sparse_908_str = 920;
  inline bool has_sparse_908_str() const;
  inline void clear_sparse_908_str();
  static const int kSparse908StrFieldNumber = 920;
  inline const ::std::string& sparse_908_str() const;
  inline void set_sparse_908_str(const ::std::string& value);
  inline void set_sparse_908_str(const char* value);
  inline void set_sparse_908_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_908_str();
  inline ::std::string* release_sparse_908_str();
  inline void set_allocated_sparse_908_str(::std::string* sparse_908_str);

  // optional string sparse_909_str = 921;
  inline bool has_sparse_909_str() const;
  inline void clear_sparse_909_str();
  static const int kSparse909StrFieldNumber = 921;
  inline const ::std::string& sparse_909_str() const;
  inline void set_sparse_909_str(const ::std::string& value);
  inline void set_sparse_909_str(const char* value);
  inline void set_sparse_909_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_909_str();
  inline ::std::string* release_sparse_909_str();
  inline void set_allocated_sparse_909_str(::std::string* sparse_909_str);

  // optional string sparse_910_str = 922;
  inline bool has_sparse_910_str() const;
  inline void clear_sparse_910_str();
  static const int kSparse910StrFieldNumber = 922;
  inline const ::std::string& sparse_910_str() const;
  inline void set_sparse_910_str(const ::std::string& value);
  inline void set_sparse_910_str(const char* value);
  inline void set_sparse_910_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_910_str();
  inline ::std::string* release_sparse_910_str();
  inline void set_allocated_sparse_910_str(::std::string* sparse_910_str);

  // optional string sparse_911_str = 923;
  inline bool has_sparse_911_str() const;
  inline void clear_sparse_911_str();
  static const int kSparse911StrFieldNumber = 923;
  inline const ::std::string& sparse_911_str() const;
  inline void set_sparse_911_str(const ::std::string& value);
  inline void set_sparse_911_str(const char* value);
  inline void set_sparse_911_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_911_str();
  inline ::std::string* release_sparse_911_str();
  inline void set_allocated_sparse_911_str(::std::string* sparse_911_str);

  // optional string sparse_912_str = 924;
  inline bool has_sparse_912_str() const;
  inline void clear_sparse_912_str();
  static const int kSparse912StrFieldNumber = 924;
  inline const ::std::string& sparse_912_str() const;
  inline void set_sparse_912_str(const ::std::string& value);
  inline void set_sparse_912_str(const char* value);
  inline void set_sparse_912_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_912_str();
  inline ::std::string* release_sparse_912_str();
  inline void set_allocated_sparse_912_str(::std::string* sparse_912_str);

  // optional string sparse_913_str = 925;
  inline bool has_sparse_913_str() const;
  inline void clear_sparse_913_str();
  static const int kSparse913StrFieldNumber = 925;
  inline const ::std::string& sparse_913_str() const;
  inline void set_sparse_913_str(const ::std::string& value);
  inline void set_sparse_913_str(const char* value);
  inline void set_sparse_913_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_913_str();
  inline ::std::string* release_sparse_913_str();
  inline void set_allocated_sparse_913_str(::std::string* sparse_913_str);

  // optional string sparse_914_str = 926;
  inline bool has_sparse_914_str() const;
  inline void clear_sparse_914_str();
  static const int kSparse914StrFieldNumber = 926;
  inline const ::std::string& sparse_914_str() const;
  inline void set_sparse_914_str(const ::std::string& value);
  inline void set_sparse_914_str(const char* value);
  inline void set_sparse_914_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_914_str();
  inline ::std::string* release_sparse_914_str();
  inline void set_allocated_sparse_914_str(::std::string* sparse_914_str);

  // optional string sparse_915_str = 927;
  inline bool has_sparse_915_str() const;
  inline void clear_sparse_915_str();
  static const int kSparse915StrFieldNumber = 927;
  inline const ::std::string& sparse_915_str() const;
  inline void set_sparse_915_str(const ::std::string& value);
  inline void set_sparse_915_str(const char* value);
  inline void set_sparse_915_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_915_str();
  inline ::std::string* release_sparse_915_str();
  inline void set_allocated_sparse_915_str(::std::string* sparse_915_str);

  // optional string sparse_916_str = 928;
  inline bool has_sparse_916_str() const;
  inline void clear_sparse_916_str();
  static const int kSparse916StrFieldNumber = 928;
  inline const ::std::string& sparse_916_str() const;
  inline void set_sparse_916_str(const ::std::string& value);
  inline void set_sparse_916_str(const char* value);
  inline void set_sparse_916_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_916_str();
  inline ::std::string* release_sparse_916_str();
  inline void set_allocated_sparse_916_str(::std::string* sparse_916_str);

  // optional string sparse_917_str = 929;
  inline bool has_sparse_917_str() const;
  inline void clear_sparse_917_str();
  static const int kSparse917StrFieldNumber = 929;
  inline const ::std::string& sparse_917_str() const;
  inline void set_sparse_917_str(const ::std::string& value);
  inline void set_sparse_917_str(const char* value);
  inline void set_sparse_917_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_917_str();
  inline ::std::string* release_sparse_917_str();
  inline void set_allocated_sparse_917_str(::std::string* sparse_917_str);

  // optional string sparse_918_str = 930;
  inline bool has_sparse_918_str() const;
  inline void clear_sparse_918_str();
  static const int kSparse918StrFieldNumber = 930;
  inline const ::std::string& sparse_918_str() const;
  inline void set_sparse_918_str(const ::std::string& value);
  inline void set_sparse_918_str(const char* value);
  inline void set_sparse_918_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_918_str();
  inline ::std::string* release_sparse_918_str();
  inline void set_allocated_sparse_918_str(::std::string* sparse_918_str);

  // optional string sparse_919_str = 931;
  inline bool has_sparse_919_str() const;
  inline void clear_sparse_919_str();
  static const int kSparse919StrFieldNumber = 931;
  inline const ::std::string& sparse_919_str() const;
  inline void set_sparse_919_str(const ::std::string& value);
  inline void set_sparse_919_str(const char* value);
  inline void set_sparse_919_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_919_str();
  inline ::std::string* release_sparse_919_str();
  inline void set_allocated_sparse_919_str(::std::string* sparse_919_str);

  // optional string sparse_920_str = 932;
  inline bool has_sparse_920_str() const;
  inline void clear_sparse_920_str();
  static const int kSparse920StrFieldNumber = 932;
  inline const ::std::string& sparse_920_str() const;
  inline void set_sparse_920_str(const ::std::string& value);
  inline void set_sparse_920_str(const char* value);
  inline void set_sparse_920_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_920_str();
  inline ::std::string* release_sparse_920_str();
  inline void set_allocated_sparse_920_str(::std::string* sparse_920_str);

  // optional string sparse_921_str = 933;
  inline bool has_sparse_921_str() const;
  inline void clear_sparse_921_str();
  static const int kSparse921StrFieldNumber = 933;
  inline const ::std::string& sparse_921_str() const;
  inline void set_sparse_921_str(const ::std::string& value);
  inline void set_sparse_921_str(const char* value);
  inline void set_sparse_921_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_921_str();
  inline ::std::string* release_sparse_921_str();
  inline void set_allocated_sparse_921_str(::std::string* sparse_921_str);

  // optional string sparse_922_str = 934;
  inline bool has_sparse_922_str() const;
  inline void clear_sparse_922_str();
  static const int kSparse922StrFieldNumber = 934;
  inline const ::std::string& sparse_922_str() const;
  inline void set_sparse_922_str(const ::std::string& value);
  inline void set_sparse_922_str(const char* value);
  inline void set_sparse_922_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_922_str();
  inline ::std::string* release_sparse_922_str();
  inline void set_allocated_sparse_922_str(::std::string* sparse_922_str);

  // optional string sparse_923_str = 935;
  inline bool has_sparse_923_str() const;
  inline void clear_sparse_923_str();
  static const int kSparse923StrFieldNumber = 935;
  inline const ::std::string& sparse_923_str() const;
  inline void set_sparse_923_str(const ::std::string& value);
  inline void set_sparse_923_str(const char* value);
  inline void set_sparse_923_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_923_str();
  inline ::std::string* release_sparse_923_str();
  inline void set_allocated_sparse_923_str(::std::string* sparse_923_str);

  // optional string sparse_924_str = 936;
  inline bool has_sparse_924_str() const;
  inline void clear_sparse_924_str();
  static const int kSparse924StrFieldNumber = 936;
  inline const ::std::string& sparse_924_str() const;
  inline void set_sparse_924_str(const ::std::string& value);
  inline void set_sparse_924_str(const char* value);
  inline void set_sparse_924_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_924_str();
  inline ::std::string* release_sparse_924_str();
  inline void set_allocated_sparse_924_str(::std::string* sparse_924_str);

  // optional string sparse_925_str = 937;
  inline bool has_sparse_925_str() const;
  inline void clear_sparse_925_str();
  static const int kSparse925StrFieldNumber = 937;
  inline const ::std::string& sparse_925_str() const;
  inline void set_sparse_925_str(const ::std::string& value);
  inline void set_sparse_925_str(const char* value);
  inline void set_sparse_925_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_925_str();
  inline ::std::string* release_sparse_925_str();
  inline void set_allocated_sparse_925_str(::std::string* sparse_925_str);

  // optional string sparse_926_str = 938;
  inline bool has_sparse_926_str() const;
  inline void clear_sparse_926_str();
  static const int kSparse926StrFieldNumber = 938;
  inline const ::std::string& sparse_926_str() const;
  inline void set_sparse_926_str(const ::std::string& value);
  inline void set_sparse_926_str(const char* value);
  inline void set_sparse_926_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_926_str();
  inline ::std::string* release_sparse_926_str();
  inline void set_allocated_sparse_926_str(::std::string* sparse_926_str);

  // optional string sparse_927_str = 939;
  inline bool has_sparse_927_str() const;
  inline void clear_sparse_927_str();
  static const int kSparse927StrFieldNumber = 939;
  inline const ::std::string& sparse_927_str() const;
  inline void set_sparse_927_str(const ::std::string& value);
  inline void set_sparse_927_str(const char* value);
  inline void set_sparse_927_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_927_str();
  inline ::std::string* release_sparse_927_str();
  inline void set_allocated_sparse_927_str(::std::string* sparse_927_str);

  // optional string sparse_928_str = 940;
  inline bool has_sparse_928_str() const;
  inline void clear_sparse_928_str();
  static const int kSparse928StrFieldNumber = 940;
  inline const ::std::string& sparse_928_str() const;
  inline void set_sparse_928_str(const ::std::string& value);
  inline void set_sparse_928_str(const char* value);
  inline void set_sparse_928_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_928_str();
  inline ::std::string* release_sparse_928_str();
  inline void set_allocated_sparse_928_str(::std::string* sparse_928_str);

  // optional string sparse_929_str = 941;
  inline bool has_sparse_929_str() const;
  inline void clear_sparse_929_str();
  static const int kSparse929StrFieldNumber = 941;
  inline const ::std::string& sparse_929_str() const;
  inline void set_sparse_929_str(const ::std::string& value);
  inline void set_sparse_929_str(const char* value);
  inline void set_sparse_929_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_929_str();
  inline ::std::string* release_sparse_929_str();
  inline void set_allocated_sparse_929_str(::std::string* sparse_929_str);

  // optional string sparse_930_str = 942;
  inline bool has_sparse_930_str() const;
  inline void clear_sparse_930_str();
  static const int kSparse930StrFieldNumber = 942;
  inline const ::std::string& sparse_930_str() const;
  inline void set_sparse_930_str(const ::std::string& value);
  inline void set_sparse_930_str(const char* value);
  inline void set_sparse_930_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_930_str();
  inline ::std::string* release_sparse_930_str();
  inline void set_allocated_sparse_930_str(::std::string* sparse_930_str);

  // optional string sparse_931_str = 943;
  inline bool has_sparse_931_str() const;
  inline void clear_sparse_931_str();
  static const int kSparse931StrFieldNumber = 943;
  inline const ::std::string& sparse_931_str() const;
  inline void set_sparse_931_str(const ::std::string& value);
  inline void set_sparse_931_str(const char* value);
  inline void set_sparse_931_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_931_str();
  inline ::std::string* release_sparse_931_str();
  inline void set_allocated_sparse_931_str(::std::string* sparse_931_str);

  // optional string sparse_932_str = 944;
  inline bool has_sparse_932_str() const;
  inline void clear_sparse_932_str();
  static const int kSparse932StrFieldNumber = 944;
  inline const ::std::string& sparse_932_str() const;
  inline void set_sparse_932_str(const ::std::string& value);
  inline void set_sparse_932_str(const char* value);
  inline void set_sparse_932_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_932_str();
  inline ::std::string* release_sparse_932_str();
  inline void set_allocated_sparse_932_str(::std::string* sparse_932_str);

  // optional string sparse_933_str = 945;
  inline bool has_sparse_933_str() const;
  inline void clear_sparse_933_str();
  static const int kSparse933StrFieldNumber = 945;
  inline const ::std::string& sparse_933_str() const;
  inline void set_sparse_933_str(const ::std::string& value);
  inline void set_sparse_933_str(const char* value);
  inline void set_sparse_933_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_933_str();
  inline ::std::string* release_sparse_933_str();
  inline void set_allocated_sparse_933_str(::std::string* sparse_933_str);

  // optional string sparse_934_str = 946;
  inline bool has_sparse_934_str() const;
  inline void clear_sparse_934_str();
  static const int kSparse934StrFieldNumber = 946;
  inline const ::std::string& sparse_934_str() const;
  inline void set_sparse_934_str(const ::std::string& value);
  inline void set_sparse_934_str(const char* value);
  inline void set_sparse_934_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_934_str();
  inline ::std::string* release_sparse_934_str();
  inline void set_allocated_sparse_934_str(::std::string* sparse_934_str);

  // optional string sparse_935_str = 947;
  inline bool has_sparse_935_str() const;
  inline void clear_sparse_935_str();
  static const int kSparse935StrFieldNumber = 947;
  inline const ::std::string& sparse_935_str() const;
  inline void set_sparse_935_str(const ::std::string& value);
  inline void set_sparse_935_str(const char* value);
  inline void set_sparse_935_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_935_str();
  inline ::std::string* release_sparse_935_str();
  inline void set_allocated_sparse_935_str(::std::string* sparse_935_str);

  // optional string sparse_936_str = 948;
  inline bool has_sparse_936_str() const;
  inline void clear_sparse_936_str();
  static const int kSparse936StrFieldNumber = 948;
  inline const ::std::string& sparse_936_str() const;
  inline void set_sparse_936_str(const ::std::string& value);
  inline void set_sparse_936_str(const char* value);
  inline void set_sparse_936_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_936_str();
  inline ::std::string* release_sparse_936_str();
  inline void set_allocated_sparse_936_str(::std::string* sparse_936_str);

  // optional string sparse_937_str = 949;
  inline bool has_sparse_937_str() const;
  inline void clear_sparse_937_str();
  static const int kSparse937StrFieldNumber = 949;
  inline const ::std::string& sparse_937_str() const;
  inline void set_sparse_937_str(const ::std::string& value);
  inline void set_sparse_937_str(const char* value);
  inline void set_sparse_937_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_937_str();
  inline ::std::string* release_sparse_937_str();
  inline void set_allocated_sparse_937_str(::std::string* sparse_937_str);

  // optional string sparse_938_str = 950;
  inline bool has_sparse_938_str() const;
  inline void clear_sparse_938_str();
  static const int kSparse938StrFieldNumber = 950;
  inline const ::std::string& sparse_938_str() const;
  inline void set_sparse_938_str(const ::std::string& value);
  inline void set_sparse_938_str(const char* value);
  inline void set_sparse_938_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_938_str();
  inline ::std::string* release_sparse_938_str();
  inline void set_allocated_sparse_938_str(::std::string* sparse_938_str);

  // optional string sparse_939_str = 951;
  inline bool has_sparse_939_str() const;
  inline void clear_sparse_939_str();
  static const int kSparse939StrFieldNumber = 951;
  inline const ::std::string& sparse_939_str() const;
  inline void set_sparse_939_str(const ::std::string& value);
  inline void set_sparse_939_str(const char* value);
  inline void set_sparse_939_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_939_str();
  inline ::std::string* release_sparse_939_str();
  inline void set_allocated_sparse_939_str(::std::string* sparse_939_str);

  // optional string sparse_940_str = 952;
  inline bool has_sparse_940_str() const;
  inline void clear_sparse_940_str();
  static const int kSparse940StrFieldNumber = 952;
  inline const ::std::string& sparse_940_str() const;
  inline void set_sparse_940_str(const ::std::string& value);
  inline void set_sparse_940_str(const char* value);
  inline void set_sparse_940_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_940_str();
  inline ::std::string* release_sparse_940_str();
  inline void set_allocated_sparse_940_str(::std::string* sparse_940_str);

  // optional string sparse_941_str = 953;
  inline bool has_sparse_941_str() const;
  inline void clear_sparse_941_str();
  static const int kSparse941StrFieldNumber = 953;
  inline const ::std::string& sparse_941_str() const;
  inline void set_sparse_941_str(const ::std::string& value);
  inline void set_sparse_941_str(const char* value);
  inline void set_sparse_941_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_941_str();
  inline ::std::string* release_sparse_941_str();
  inline void set_allocated_sparse_941_str(::std::string* sparse_941_str);

  // optional string sparse_942_str = 954;
  inline bool has_sparse_942_str() const;
  inline void clear_sparse_942_str();
  static const int kSparse942StrFieldNumber = 954;
  inline const ::std::string& sparse_942_str() const;
  inline void set_sparse_942_str(const ::std::string& value);
  inline void set_sparse_942_str(const char* value);
  inline void set_sparse_942_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_942_str();
  inline ::std::string* release_sparse_942_str();
  inline void set_allocated_sparse_942_str(::std::string* sparse_942_str);

  // optional string sparse_943_str = 955;
  inline bool has_sparse_943_str() const;
  inline void clear_sparse_943_str();
  static const int kSparse943StrFieldNumber = 955;
  inline const ::std::string& sparse_943_str() const;
  inline void set_sparse_943_str(const ::std::string& value);
  inline void set_sparse_943_str(const char* value);
  inline void set_sparse_943_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_943_str();
  inline ::std::string* release_sparse_943_str();
  inline void set_allocated_sparse_943_str(::std::string* sparse_943_str);

  // optional string sparse_944_str = 956;
  inline bool has_sparse_944_str() const;
  inline void clear_sparse_944_str();
  static const int kSparse944StrFieldNumber = 956;
  inline const ::std::string& sparse_944_str() const;
  inline void set_sparse_944_str(const ::std::string& value);
  inline void set_sparse_944_str(const char* value);
  inline void set_sparse_944_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_944_str();
  inline ::std::string* release_sparse_944_str();
  inline void set_allocated_sparse_944_str(::std::string* sparse_944_str);

  // optional string sparse_945_str = 957;
  inline bool has_sparse_945_str() const;
  inline void clear_sparse_945_str();
  static const int kSparse945StrFieldNumber = 957;
  inline const ::std::string& sparse_945_str() const;
  inline void set_sparse_945_str(const ::std::string& value);
  inline void set_sparse_945_str(const char* value);
  inline void set_sparse_945_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_945_str();
  inline ::std::string* release_sparse_945_str();
  inline void set_allocated_sparse_945_str(::std::string* sparse_945_str);

  // optional string sparse_946_str = 958;
  inline bool has_sparse_946_str() const;
  inline void clear_sparse_946_str();
  static const int kSparse946StrFieldNumber = 958;
  inline const ::std::string& sparse_946_str() const;
  inline void set_sparse_946_str(const ::std::string& value);
  inline void set_sparse_946_str(const char* value);
  inline void set_sparse_946_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_946_str();
  inline ::std::string* release_sparse_946_str();
  inline void set_allocated_sparse_946_str(::std::string* sparse_946_str);

  // optional string sparse_947_str = 959;
  inline bool has_sparse_947_str() const;
  inline void clear_sparse_947_str();
  static const int kSparse947StrFieldNumber = 959;
  inline const ::std::string& sparse_947_str() const;
  inline void set_sparse_947_str(const ::std::string& value);
  inline void set_sparse_947_str(const char* value);
  inline void set_sparse_947_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_947_str();
  inline ::std::string* release_sparse_947_str();
  inline void set_allocated_sparse_947_str(::std::string* sparse_947_str);

  // optional string sparse_948_str = 960;
  inline bool has_sparse_948_str() const;
  inline void clear_sparse_948_str();
  static const int kSparse948StrFieldNumber = 960;
  inline const ::std::string& sparse_948_str() const;
  inline void set_sparse_948_str(const ::std::string& value);
  inline void set_sparse_948_str(const char* value);
  inline void set_sparse_948_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_948_str();
  inline ::std::string* release_sparse_948_str();
  inline void set_allocated_sparse_948_str(::std::string* sparse_948_str);

  // optional string sparse_949_str = 961;
  inline bool has_sparse_949_str() const;
  inline void clear_sparse_949_str();
  static const int kSparse949StrFieldNumber = 961;
  inline const ::std::string& sparse_949_str() const;
  inline void set_sparse_949_str(const ::std::string& value);
  inline void set_sparse_949_str(const char* value);
  inline void set_sparse_949_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_949_str();
  inline ::std::string* release_sparse_949_str();
  inline void set_allocated_sparse_949_str(::std::string* sparse_949_str);

  // optional string sparse_950_str = 962;
  inline bool has_sparse_950_str() const;
  inline void clear_sparse_950_str();
  static const int kSparse950StrFieldNumber = 962;
  inline const ::std::string& sparse_950_str() const;
  inline void set_sparse_950_str(const ::std::string& value);
  inline void set_sparse_950_str(const char* value);
  inline void set_sparse_950_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_950_str();
  inline ::std::string* release_sparse_950_str();
  inline void set_allocated_sparse_950_str(::std::string* sparse_950_str);

  // optional string sparse_951_str = 963;
  inline bool has_sparse_951_str() const;
  inline void clear_sparse_951_str();
  static const int kSparse951StrFieldNumber = 963;
  inline const ::std::string& sparse_951_str() const;
  inline void set_sparse_951_str(const ::std::string& value);
  inline void set_sparse_951_str(const char* value);
  inline void set_sparse_951_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_951_str();
  inline ::std::string* release_sparse_951_str();
  inline void set_allocated_sparse_951_str(::std::string* sparse_951_str);

  // optional string sparse_952_str = 964;
  inline bool has_sparse_952_str() const;
  inline void clear_sparse_952_str();
  static const int kSparse952StrFieldNumber = 964;
  inline const ::std::string& sparse_952_str() const;
  inline void set_sparse_952_str(const ::std::string& value);
  inline void set_sparse_952_str(const char* value);
  inline void set_sparse_952_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_952_str();
  inline ::std::string* release_sparse_952_str();
  inline void set_allocated_sparse_952_str(::std::string* sparse_952_str);

  // optional string sparse_953_str = 965;
  inline bool has_sparse_953_str() const;
  inline void clear_sparse_953_str();
  static const int kSparse953StrFieldNumber = 965;
  inline const ::std::string& sparse_953_str() const;
  inline void set_sparse_953_str(const ::std::string& value);
  inline void set_sparse_953_str(const char* value);
  inline void set_sparse_953_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_953_str();
  inline ::std::string* release_sparse_953_str();
  inline void set_allocated_sparse_953_str(::std::string* sparse_953_str);

  // optional string sparse_954_str = 966;
  inline bool has_sparse_954_str() const;
  inline void clear_sparse_954_str();
  static const int kSparse954StrFieldNumber = 966;
  inline const ::std::string& sparse_954_str() const;
  inline void set_sparse_954_str(const ::std::string& value);
  inline void set_sparse_954_str(const char* value);
  inline void set_sparse_954_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_954_str();
  inline ::std::string* release_sparse_954_str();
  inline void set_allocated_sparse_954_str(::std::string* sparse_954_str);

  // optional string sparse_955_str = 967;
  inline bool has_sparse_955_str() const;
  inline void clear_sparse_955_str();
  static const int kSparse955StrFieldNumber = 967;
  inline const ::std::string& sparse_955_str() const;
  inline void set_sparse_955_str(const ::std::string& value);
  inline void set_sparse_955_str(const char* value);
  inline void set_sparse_955_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_955_str();
  inline ::std::string* release_sparse_955_str();
  inline void set_allocated_sparse_955_str(::std::string* sparse_955_str);

  // optional string sparse_956_str = 968;
  inline bool has_sparse_956_str() const;
  inline void clear_sparse_956_str();
  static const int kSparse956StrFieldNumber = 968;
  inline const ::std::string& sparse_956_str() const;
  inline void set_sparse_956_str(const ::std::string& value);
  inline void set_sparse_956_str(const char* value);
  inline void set_sparse_956_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_956_str();
  inline ::std::string* release_sparse_956_str();
  inline void set_allocated_sparse_956_str(::std::string* sparse_956_str);

  // optional string sparse_957_str = 969;
  inline bool has_sparse_957_str() const;
  inline void clear_sparse_957_str();
  static const int kSparse957StrFieldNumber = 969;
  inline const ::std::string& sparse_957_str() const;
  inline void set_sparse_957_str(const ::std::string& value);
  inline void set_sparse_957_str(const char* value);
  inline void set_sparse_957_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_957_str();
  inline ::std::string* release_sparse_957_str();
  inline void set_allocated_sparse_957_str(::std::string* sparse_957_str);

  // optional string sparse_958_str = 970;
  inline bool has_sparse_958_str() const;
  inline void clear_sparse_958_str();
  static const int kSparse958StrFieldNumber = 970;
  inline const ::std::string& sparse_958_str() const;
  inline void set_sparse_958_str(const ::std::string& value);
  inline void set_sparse_958_str(const char* value);
  inline void set_sparse_958_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_958_str();
  inline ::std::string* release_sparse_958_str();
  inline void set_allocated_sparse_958_str(::std::string* sparse_958_str);

  // optional string sparse_959_str = 971;
  inline bool has_sparse_959_str() const;
  inline void clear_sparse_959_str();
  static const int kSparse959StrFieldNumber = 971;
  inline const ::std::string& sparse_959_str() const;
  inline void set_sparse_959_str(const ::std::string& value);
  inline void set_sparse_959_str(const char* value);
  inline void set_sparse_959_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_959_str();
  inline ::std::string* release_sparse_959_str();
  inline void set_allocated_sparse_959_str(::std::string* sparse_959_str);

  // optional string sparse_960_str = 972;
  inline bool has_sparse_960_str() const;
  inline void clear_sparse_960_str();
  static const int kSparse960StrFieldNumber = 972;
  inline const ::std::string& sparse_960_str() const;
  inline void set_sparse_960_str(const ::std::string& value);
  inline void set_sparse_960_str(const char* value);
  inline void set_sparse_960_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_960_str();
  inline ::std::string* release_sparse_960_str();
  inline void set_allocated_sparse_960_str(::std::string* sparse_960_str);

  // optional string sparse_961_str = 973;
  inline bool has_sparse_961_str() const;
  inline void clear_sparse_961_str();
  static const int kSparse961StrFieldNumber = 973;
  inline const ::std::string& sparse_961_str() const;
  inline void set_sparse_961_str(const ::std::string& value);
  inline void set_sparse_961_str(const char* value);
  inline void set_sparse_961_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_961_str();
  inline ::std::string* release_sparse_961_str();
  inline void set_allocated_sparse_961_str(::std::string* sparse_961_str);

  // optional string sparse_962_str = 974;
  inline bool has_sparse_962_str() const;
  inline void clear_sparse_962_str();
  static const int kSparse962StrFieldNumber = 974;
  inline const ::std::string& sparse_962_str() const;
  inline void set_sparse_962_str(const ::std::string& value);
  inline void set_sparse_962_str(const char* value);
  inline void set_sparse_962_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_962_str();
  inline ::std::string* release_sparse_962_str();
  inline void set_allocated_sparse_962_str(::std::string* sparse_962_str);

  // optional string sparse_963_str = 975;
  inline bool has_sparse_963_str() const;
  inline void clear_sparse_963_str();
  static const int kSparse963StrFieldNumber = 975;
  inline const ::std::string& sparse_963_str() const;
  inline void set_sparse_963_str(const ::std::string& value);
  inline void set_sparse_963_str(const char* value);
  inline void set_sparse_963_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_963_str();
  inline ::std::string* release_sparse_963_str();
  inline void set_allocated_sparse_963_str(::std::string* sparse_963_str);

  // optional string sparse_964_str = 976;
  inline bool has_sparse_964_str() const;
  inline void clear_sparse_964_str();
  static const int kSparse964StrFieldNumber = 976;
  inline const ::std::string& sparse_964_str() const;
  inline void set_sparse_964_str(const ::std::string& value);
  inline void set_sparse_964_str(const char* value);
  inline void set_sparse_964_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_964_str();
  inline ::std::string* release_sparse_964_str();
  inline void set_allocated_sparse_964_str(::std::string* sparse_964_str);

  // optional string sparse_965_str = 977;
  inline bool has_sparse_965_str() const;
  inline void clear_sparse_965_str();
  static const int kSparse965StrFieldNumber = 977;
  inline const ::std::string& sparse_965_str() const;
  inline void set_sparse_965_str(const ::std::string& value);
  inline void set_sparse_965_str(const char* value);
  inline void set_sparse_965_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_965_str();
  inline ::std::string* release_sparse_965_str();
  inline void set_allocated_sparse_965_str(::std::string* sparse_965_str);

  // optional string sparse_966_str = 978;
  inline bool has_sparse_966_str() const;
  inline void clear_sparse_966_str();
  static const int kSparse966StrFieldNumber = 978;
  inline const ::std::string& sparse_966_str() const;
  inline void set_sparse_966_str(const ::std::string& value);
  inline void set_sparse_966_str(const char* value);
  inline void set_sparse_966_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_966_str();
  inline ::std::string* release_sparse_966_str();
  inline void set_allocated_sparse_966_str(::std::string* sparse_966_str);

  // optional string sparse_967_str = 979;
  inline bool has_sparse_967_str() const;
  inline void clear_sparse_967_str();
  static const int kSparse967StrFieldNumber = 979;
  inline const ::std::string& sparse_967_str() const;
  inline void set_sparse_967_str(const ::std::string& value);
  inline void set_sparse_967_str(const char* value);
  inline void set_sparse_967_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_967_str();
  inline ::std::string* release_sparse_967_str();
  inline void set_allocated_sparse_967_str(::std::string* sparse_967_str);

  // optional string sparse_968_str = 980;
  inline bool has_sparse_968_str() const;
  inline void clear_sparse_968_str();
  static const int kSparse968StrFieldNumber = 980;
  inline const ::std::string& sparse_968_str() const;
  inline void set_sparse_968_str(const ::std::string& value);
  inline void set_sparse_968_str(const char* value);
  inline void set_sparse_968_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_968_str();
  inline ::std::string* release_sparse_968_str();
  inline void set_allocated_sparse_968_str(::std::string* sparse_968_str);

  // optional string sparse_969_str = 981;
  inline bool has_sparse_969_str() const;
  inline void clear_sparse_969_str();
  static const int kSparse969StrFieldNumber = 981;
  inline const ::std::string& sparse_969_str() const;
  inline void set_sparse_969_str(const ::std::string& value);
  inline void set_sparse_969_str(const char* value);
  inline void set_sparse_969_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_969_str();
  inline ::std::string* release_sparse_969_str();
  inline void set_allocated_sparse_969_str(::std::string* sparse_969_str);

  // optional string sparse_970_str = 982;
  inline bool has_sparse_970_str() const;
  inline void clear_sparse_970_str();
  static const int kSparse970StrFieldNumber = 982;
  inline const ::std::string& sparse_970_str() const;
  inline void set_sparse_970_str(const ::std::string& value);
  inline void set_sparse_970_str(const char* value);
  inline void set_sparse_970_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_970_str();
  inline ::std::string* release_sparse_970_str();
  inline void set_allocated_sparse_970_str(::std::string* sparse_970_str);

  // optional string sparse_971_str = 983;
  inline bool has_sparse_971_str() const;
  inline void clear_sparse_971_str();
  static const int kSparse971StrFieldNumber = 983;
  inline const ::std::string& sparse_971_str() const;
  inline void set_sparse_971_str(const ::std::string& value);
  inline void set_sparse_971_str(const char* value);
  inline void set_sparse_971_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_971_str();
  inline ::std::string* release_sparse_971_str();
  inline void set_allocated_sparse_971_str(::std::string* sparse_971_str);

  // optional string sparse_972_str = 984;
  inline bool has_sparse_972_str() const;
  inline void clear_sparse_972_str();
  static const int kSparse972StrFieldNumber = 984;
  inline const ::std::string& sparse_972_str() const;
  inline void set_sparse_972_str(const ::std::string& value);
  inline void set_sparse_972_str(const char* value);
  inline void set_sparse_972_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_972_str();
  inline ::std::string* release_sparse_972_str();
  inline void set_allocated_sparse_972_str(::std::string* sparse_972_str);

  // optional string sparse_973_str = 985;
  inline bool has_sparse_973_str() const;
  inline void clear_sparse_973_str();
  static const int kSparse973StrFieldNumber = 985;
  inline const ::std::string& sparse_973_str() const;
  inline void set_sparse_973_str(const ::std::string& value);
  inline void set_sparse_973_str(const char* value);
  inline void set_sparse_973_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_973_str();
  inline ::std::string* release_sparse_973_str();
  inline void set_allocated_sparse_973_str(::std::string* sparse_973_str);

  // optional string sparse_974_str = 986;
  inline bool has_sparse_974_str() const;
  inline void clear_sparse_974_str();
  static const int kSparse974StrFieldNumber = 986;
  inline const ::std::string& sparse_974_str() const;
  inline void set_sparse_974_str(const ::std::string& value);
  inline void set_sparse_974_str(const char* value);
  inline void set_sparse_974_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_974_str();
  inline ::std::string* release_sparse_974_str();
  inline void set_allocated_sparse_974_str(::std::string* sparse_974_str);

  // optional string sparse_975_str = 987;
  inline bool has_sparse_975_str() const;
  inline void clear_sparse_975_str();
  static const int kSparse975StrFieldNumber = 987;
  inline const ::std::string& sparse_975_str() const;
  inline void set_sparse_975_str(const ::std::string& value);
  inline void set_sparse_975_str(const char* value);
  inline void set_sparse_975_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_975_str();
  inline ::std::string* release_sparse_975_str();
  inline void set_allocated_sparse_975_str(::std::string* sparse_975_str);

  // optional string sparse_976_str = 988;
  inline bool has_sparse_976_str() const;
  inline void clear_sparse_976_str();
  static const int kSparse976StrFieldNumber = 988;
  inline const ::std::string& sparse_976_str() const;
  inline void set_sparse_976_str(const ::std::string& value);
  inline void set_sparse_976_str(const char* value);
  inline void set_sparse_976_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_976_str();
  inline ::std::string* release_sparse_976_str();
  inline void set_allocated_sparse_976_str(::std::string* sparse_976_str);

  // optional string sparse_977_str = 989;
  inline bool has_sparse_977_str() const;
  inline void clear_sparse_977_str();
  static const int kSparse977StrFieldNumber = 989;
  inline const ::std::string& sparse_977_str() const;
  inline void set_sparse_977_str(const ::std::string& value);
  inline void set_sparse_977_str(const char* value);
  inline void set_sparse_977_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_977_str();
  inline ::std::string* release_sparse_977_str();
  inline void set_allocated_sparse_977_str(::std::string* sparse_977_str);

  // optional string sparse_978_str = 990;
  inline bool has_sparse_978_str() const;
  inline void clear_sparse_978_str();
  static const int kSparse978StrFieldNumber = 990;
  inline const ::std::string& sparse_978_str() const;
  inline void set_sparse_978_str(const ::std::string& value);
  inline void set_sparse_978_str(const char* value);
  inline void set_sparse_978_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_978_str();
  inline ::std::string* release_sparse_978_str();
  inline void set_allocated_sparse_978_str(::std::string* sparse_978_str);

  // optional string sparse_979_str = 991;
  inline bool has_sparse_979_str() const;
  inline void clear_sparse_979_str();
  static const int kSparse979StrFieldNumber = 991;
  inline const ::std::string& sparse_979_str() const;
  inline void set_sparse_979_str(const ::std::string& value);
  inline void set_sparse_979_str(const char* value);
  inline void set_sparse_979_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_979_str();
  inline ::std::string* release_sparse_979_str();
  inline void set_allocated_sparse_979_str(::std::string* sparse_979_str);

  // optional string sparse_980_str = 992;
  inline bool has_sparse_980_str() const;
  inline void clear_sparse_980_str();
  static const int kSparse980StrFieldNumber = 992;
  inline const ::std::string& sparse_980_str() const;
  inline void set_sparse_980_str(const ::std::string& value);
  inline void set_sparse_980_str(const char* value);
  inline void set_sparse_980_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_980_str();
  inline ::std::string* release_sparse_980_str();
  inline void set_allocated_sparse_980_str(::std::string* sparse_980_str);

  // optional string sparse_981_str = 993;
  inline bool has_sparse_981_str() const;
  inline void clear_sparse_981_str();
  static const int kSparse981StrFieldNumber = 993;
  inline const ::std::string& sparse_981_str() const;
  inline void set_sparse_981_str(const ::std::string& value);
  inline void set_sparse_981_str(const char* value);
  inline void set_sparse_981_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_981_str();
  inline ::std::string* release_sparse_981_str();
  inline void set_allocated_sparse_981_str(::std::string* sparse_981_str);

  // optional string sparse_982_str = 994;
  inline bool has_sparse_982_str() const;
  inline void clear_sparse_982_str();
  static const int kSparse982StrFieldNumber = 994;
  inline const ::std::string& sparse_982_str() const;
  inline void set_sparse_982_str(const ::std::string& value);
  inline void set_sparse_982_str(const char* value);
  inline void set_sparse_982_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_982_str();
  inline ::std::string* release_sparse_982_str();
  inline void set_allocated_sparse_982_str(::std::string* sparse_982_str);

  // optional string sparse_983_str = 995;
  inline bool has_sparse_983_str() const;
  inline void clear_sparse_983_str();
  static const int kSparse983StrFieldNumber = 995;
  inline const ::std::string& sparse_983_str() const;
  inline void set_sparse_983_str(const ::std::string& value);
  inline void set_sparse_983_str(const char* value);
  inline void set_sparse_983_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_983_str();
  inline ::std::string* release_sparse_983_str();
  inline void set_allocated_sparse_983_str(::std::string* sparse_983_str);

  // optional string sparse_984_str = 996;
  inline bool has_sparse_984_str() const;
  inline void clear_sparse_984_str();
  static const int kSparse984StrFieldNumber = 996;
  inline const ::std::string& sparse_984_str() const;
  inline void set_sparse_984_str(const ::std::string& value);
  inline void set_sparse_984_str(const char* value);
  inline void set_sparse_984_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_984_str();
  inline ::std::string* release_sparse_984_str();
  inline void set_allocated_sparse_984_str(::std::string* sparse_984_str);

  // optional string sparse_985_str = 997;
  inline bool has_sparse_985_str() const;
  inline void clear_sparse_985_str();
  static const int kSparse985StrFieldNumber = 997;
  inline const ::std::string& sparse_985_str() const;
  inline void set_sparse_985_str(const ::std::string& value);
  inline void set_sparse_985_str(const char* value);
  inline void set_sparse_985_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_985_str();
  inline ::std::string* release_sparse_985_str();
  inline void set_allocated_sparse_985_str(::std::string* sparse_985_str);

  // optional string sparse_986_str = 998;
  inline bool has_sparse_986_str() const;
  inline void clear_sparse_986_str();
  static const int kSparse986StrFieldNumber = 998;
  inline const ::std::string& sparse_986_str() const;
  inline void set_sparse_986_str(const ::std::string& value);
  inline void set_sparse_986_str(const char* value);
  inline void set_sparse_986_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_986_str();
  inline ::std::string* release_sparse_986_str();
  inline void set_allocated_sparse_986_str(::std::string* sparse_986_str);

  // optional string sparse_987_str = 999;
  inline bool has_sparse_987_str() const;
  inline void clear_sparse_987_str();
  static const int kSparse987StrFieldNumber = 999;
  inline const ::std::string& sparse_987_str() const;
  inline void set_sparse_987_str(const ::std::string& value);
  inline void set_sparse_987_str(const char* value);
  inline void set_sparse_987_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_987_str();
  inline ::std::string* release_sparse_987_str();
  inline void set_allocated_sparse_987_str(::std::string* sparse_987_str);

  // optional string sparse_988_str = 1000;
  inline bool has_sparse_988_str() const;
  inline void clear_sparse_988_str();
  static const int kSparse988StrFieldNumber = 1000;
  inline const ::std::string& sparse_988_str() const;
  inline void set_sparse_988_str(const ::std::string& value);
  inline void set_sparse_988_str(const char* value);
  inline void set_sparse_988_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_988_str();
  inline ::std::string* release_sparse_988_str();
  inline void set_allocated_sparse_988_str(::std::string* sparse_988_str);

  // optional string sparse_989_str = 1001;
  inline bool has_sparse_989_str() const;
  inline void clear_sparse_989_str();
  static const int kSparse989StrFieldNumber = 1001;
  inline const ::std::string& sparse_989_str() const;
  inline void set_sparse_989_str(const ::std::string& value);
  inline void set_sparse_989_str(const char* value);
  inline void set_sparse_989_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_989_str();
  inline ::std::string* release_sparse_989_str();
  inline void set_allocated_sparse_989_str(::std::string* sparse_989_str);

  // optional string sparse_990_str = 1002;
  inline bool has_sparse_990_str() const;
  inline void clear_sparse_990_str();
  static const int kSparse990StrFieldNumber = 1002;
  inline const ::std::string& sparse_990_str() const;
  inline void set_sparse_990_str(const ::std::string& value);
  inline void set_sparse_990_str(const char* value);
  inline void set_sparse_990_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_990_str();
  inline ::std::string* release_sparse_990_str();
  inline void set_allocated_sparse_990_str(::std::string* sparse_990_str);

  // optional string sparse_991_str = 1003;
  inline bool has_sparse_991_str() const;
  inline void clear_sparse_991_str();
  static const int kSparse991StrFieldNumber = 1003;
  inline const ::std::string& sparse_991_str() const;
  inline void set_sparse_991_str(const ::std::string& value);
  inline void set_sparse_991_str(const char* value);
  inline void set_sparse_991_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_991_str();
  inline ::std::string* release_sparse_991_str();
  inline void set_allocated_sparse_991_str(::std::string* sparse_991_str);

  // optional string sparse_992_str = 1004;
  inline bool has_sparse_992_str() const;
  inline void clear_sparse_992_str();
  static const int kSparse992StrFieldNumber = 1004;
  inline const ::std::string& sparse_992_str() const;
  inline void set_sparse_992_str(const ::std::string& value);
  inline void set_sparse_992_str(const char* value);
  inline void set_sparse_992_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_992_str();
  inline ::std::string* release_sparse_992_str();
  inline void set_allocated_sparse_992_str(::std::string* sparse_992_str);

  // optional string sparse_993_str = 1005;
  inline bool has_sparse_993_str() const;
  inline void clear_sparse_993_str();
  static const int kSparse993StrFieldNumber = 1005;
  inline const ::std::string& sparse_993_str() const;
  inline void set_sparse_993_str(const ::std::string& value);
  inline void set_sparse_993_str(const char* value);
  inline void set_sparse_993_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_993_str();
  inline ::std::string* release_sparse_993_str();
  inline void set_allocated_sparse_993_str(::std::string* sparse_993_str);

  // optional string sparse_994_str = 1006;
  inline bool has_sparse_994_str() const;
  inline void clear_sparse_994_str();
  static const int kSparse994StrFieldNumber = 1006;
  inline const ::std::string& sparse_994_str() const;
  inline void set_sparse_994_str(const ::std::string& value);
  inline void set_sparse_994_str(const char* value);
  inline void set_sparse_994_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_994_str();
  inline ::std::string* release_sparse_994_str();
  inline void set_allocated_sparse_994_str(::std::string* sparse_994_str);

  // optional string sparse_995_str = 1007;
  inline bool has_sparse_995_str() const;
  inline void clear_sparse_995_str();
  static const int kSparse995StrFieldNumber = 1007;
  inline const ::std::string& sparse_995_str() const;
  inline void set_sparse_995_str(const ::std::string& value);
  inline void set_sparse_995_str(const char* value);
  inline void set_sparse_995_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_995_str();
  inline ::std::string* release_sparse_995_str();
  inline void set_allocated_sparse_995_str(::std::string* sparse_995_str);

  // optional string sparse_996_str = 1008;
  inline bool has_sparse_996_str() const;
  inline void clear_sparse_996_str();
  static const int kSparse996StrFieldNumber = 1008;
  inline const ::std::string& sparse_996_str() const;
  inline void set_sparse_996_str(const ::std::string& value);
  inline void set_sparse_996_str(const char* value);
  inline void set_sparse_996_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_996_str();
  inline ::std::string* release_sparse_996_str();
  inline void set_allocated_sparse_996_str(::std::string* sparse_996_str);

  // optional string sparse_997_str = 1009;
  inline bool has_sparse_997_str() const;
  inline void clear_sparse_997_str();
  static const int kSparse997StrFieldNumber = 1009;
  inline const ::std::string& sparse_997_str() const;
  inline void set_sparse_997_str(const ::std::string& value);
  inline void set_sparse_997_str(const char* value);
  inline void set_sparse_997_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_997_str();
  inline ::std::string* release_sparse_997_str();
  inline void set_allocated_sparse_997_str(::std::string* sparse_997_str);

  // optional string sparse_998_str = 1010;
  inline bool has_sparse_998_str() const;
  inline void clear_sparse_998_str();
  static const int kSparse998StrFieldNumber = 1010;
  inline const ::std::string& sparse_998_str() const;
  inline void set_sparse_998_str(const ::std::string& value);
  inline void set_sparse_998_str(const char* value);
  inline void set_sparse_998_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_998_str();
  inline ::std::string* release_sparse_998_str();
  inline void set_allocated_sparse_998_str(::std::string* sparse_998_str);

  // optional string sparse_999_str = 1011;
  inline bool has_sparse_999_str() const;
  inline void clear_sparse_999_str();
  static const int kSparse999StrFieldNumber = 1011;
  inline const ::std::string& sparse_999_str() const;
  inline void set_sparse_999_str(const ::std::string& value);
  inline void set_sparse_999_str(const char* value);
  inline void set_sparse_999_str(const char* value, size_t size);
  inline ::std::string* mutable_sparse_999_str();
  inline ::std::string* release_sparse_999_str();
  inline void set_allocated_sparse_999_str(::std::string* sparse_999_str);

  // @@protoc_insertion_point(class_scope:Database.NoBench)
 private:
  inline void set_has_str1_str();
  inline void clear_has_str1_str();
  inline void set_has_str2_str();
  inline void clear_has_str2_str();
  inline void set_has_num_int();
  inline void clear_has_num_int();
  inline void set_has_bool_bool();
  inline void clear_has_bool_bool();
  inline void set_has_dyn1_int();
  inline void clear_has_dyn1_int();
  inline void set_has_dyn1_str();
  inline void clear_has_dyn1_str();
  inline void set_has_dyn2_int();
  inline void clear_has_dyn2_int();
  inline void set_has_dyn2_str();
  inline void clear_has_dyn2_str();
  inline void set_has_dyn2_bool();
  inline void clear_has_dyn2_bool();
  inline void set_has_nested_obj_obj();
  inline void clear_has_nested_obj_obj();
  inline void set_has_thousandth();
  inline void clear_has_thousandth();
  inline void set_has_sparse_000_str();
  inline void clear_has_sparse_000_str();
  inline void set_has_sparse_001_str();
  inline void clear_has_sparse_001_str();
  inline void set_has_sparse_002_str();
  inline void clear_has_sparse_002_str();
  inline void set_has_sparse_003_str();
  inline void clear_has_sparse_003_str();
  inline void set_has_sparse_004_str();
  inline void clear_has_sparse_004_str();
  inline void set_has_sparse_005_str();
  inline void clear_has_sparse_005_str();
  inline void set_has_sparse_006_str();
  inline void clear_has_sparse_006_str();
  inline void set_has_sparse_007_str();
  inline void clear_has_sparse_007_str();
  inline void set_has_sparse_008_str();
  inline void clear_has_sparse_008_str();
  inline void set_has_sparse_009_str();
  inline void clear_has_sparse_009_str();
  inline void set_has_sparse_010_str();
  inline void clear_has_sparse_010_str();
  inline void set_has_sparse_011_str();
  inline void clear_has_sparse_011_str();
  inline void set_has_sparse_012_str();
  inline void clear_has_sparse_012_str();
  inline void set_has_sparse_013_str();
  inline void clear_has_sparse_013_str();
  inline void set_has_sparse_014_str();
  inline void clear_has_sparse_014_str();
  inline void set_has_sparse_015_str();
  inline void clear_has_sparse_015_str();
  inline void set_has_sparse_016_str();
  inline void clear_has_sparse_016_str();
  inline void set_has_sparse_017_str();
  inline void clear_has_sparse_017_str();
  inline void set_has_sparse_018_str();
  inline void clear_has_sparse_018_str();
  inline void set_has_sparse_019_str();
  inline void clear_has_sparse_019_str();
  inline void set_has_sparse_020_str();
  inline void clear_has_sparse_020_str();
  inline void set_has_sparse_021_str();
  inline void clear_has_sparse_021_str();
  inline void set_has_sparse_022_str();
  inline void clear_has_sparse_022_str();
  inline void set_has_sparse_023_str();
  inline void clear_has_sparse_023_str();
  inline void set_has_sparse_024_str();
  inline void clear_has_sparse_024_str();
  inline void set_has_sparse_025_str();
  inline void clear_has_sparse_025_str();
  inline void set_has_sparse_026_str();
  inline void clear_has_sparse_026_str();
  inline void set_has_sparse_027_str();
  inline void clear_has_sparse_027_str();
  inline void set_has_sparse_028_str();
  inline void clear_has_sparse_028_str();
  inline void set_has_sparse_029_str();
  inline void clear_has_sparse_029_str();
  inline void set_has_sparse_030_str();
  inline void clear_has_sparse_030_str();
  inline void set_has_sparse_031_str();
  inline void clear_has_sparse_031_str();
  inline void set_has_sparse_032_str();
  inline void clear_has_sparse_032_str();
  inline void set_has_sparse_033_str();
  inline void clear_has_sparse_033_str();
  inline void set_has_sparse_034_str();
  inline void clear_has_sparse_034_str();
  inline void set_has_sparse_035_str();
  inline void clear_has_sparse_035_str();
  inline void set_has_sparse_036_str();
  inline void clear_has_sparse_036_str();
  inline void set_has_sparse_037_str();
  inline void clear_has_sparse_037_str();
  inline void set_has_sparse_038_str();
  inline void clear_has_sparse_038_str();
  inline void set_has_sparse_039_str();
  inline void clear_has_sparse_039_str();
  inline void set_has_sparse_040_str();
  inline void clear_has_sparse_040_str();
  inline void set_has_sparse_041_str();
  inline void clear_has_sparse_041_str();
  inline void set_has_sparse_042_str();
  inline void clear_has_sparse_042_str();
  inline void set_has_sparse_043_str();
  inline void clear_has_sparse_043_str();
  inline void set_has_sparse_044_str();
  inline void clear_has_sparse_044_str();
  inline void set_has_sparse_045_str();
  inline void clear_has_sparse_045_str();
  inline void set_has_sparse_046_str();
  inline void clear_has_sparse_046_str();
  inline void set_has_sparse_047_str();
  inline void clear_has_sparse_047_str();
  inline void set_has_sparse_048_str();
  inline void clear_has_sparse_048_str();
  inline void set_has_sparse_049_str();
  inline void clear_has_sparse_049_str();
  inline void set_has_sparse_050_str();
  inline void clear_has_sparse_050_str();
  inline void set_has_sparse_051_str();
  inline void clear_has_sparse_051_str();
  inline void set_has_sparse_052_str();
  inline void clear_has_sparse_052_str();
  inline void set_has_sparse_053_str();
  inline void clear_has_sparse_053_str();
  inline void set_has_sparse_054_str();
  inline void clear_has_sparse_054_str();
  inline void set_has_sparse_055_str();
  inline void clear_has_sparse_055_str();
  inline void set_has_sparse_056_str();
  inline void clear_has_sparse_056_str();
  inline void set_has_sparse_057_str();
  inline void clear_has_sparse_057_str();
  inline void set_has_sparse_058_str();
  inline void clear_has_sparse_058_str();
  inline void set_has_sparse_059_str();
  inline void clear_has_sparse_059_str();
  inline void set_has_sparse_060_str();
  inline void clear_has_sparse_060_str();
  inline void set_has_sparse_061_str();
  inline void clear_has_sparse_061_str();
  inline void set_has_sparse_062_str();
  inline void clear_has_sparse_062_str();
  inline void set_has_sparse_063_str();
  inline void clear_has_sparse_063_str();
  inline void set_has_sparse_064_str();
  inline void clear_has_sparse_064_str();
  inline void set_has_sparse_065_str();
  inline void clear_has_sparse_065_str();
  inline void set_has_sparse_066_str();
  inline void clear_has_sparse_066_str();
  inline void set_has_sparse_067_str();
  inline void clear_has_sparse_067_str();
  inline void set_has_sparse_068_str();
  inline void clear_has_sparse_068_str();
  inline void set_has_sparse_069_str();
  inline void clear_has_sparse_069_str();
  inline void set_has_sparse_070_str();
  inline void clear_has_sparse_070_str();
  inline void set_has_sparse_071_str();
  inline void clear_has_sparse_071_str();
  inline void set_has_sparse_072_str();
  inline void clear_has_sparse_072_str();
  inline void set_has_sparse_073_str();
  inline void clear_has_sparse_073_str();
  inline void set_has_sparse_074_str();
  inline void clear_has_sparse_074_str();
  inline void set_has_sparse_075_str();
  inline void clear_has_sparse_075_str();
  inline void set_has_sparse_076_str();
  inline void clear_has_sparse_076_str();
  inline void set_has_sparse_077_str();
  inline void clear_has_sparse_077_str();
  inline void set_has_sparse_078_str();
  inline void clear_has_sparse_078_str();
  inline void set_has_sparse_079_str();
  inline void clear_has_sparse_079_str();
  inline void set_has_sparse_080_str();
  inline void clear_has_sparse_080_str();
  inline void set_has_sparse_081_str();
  inline void clear_has_sparse_081_str();
  inline void set_has_sparse_082_str();
  inline void clear_has_sparse_082_str();
  inline void set_has_sparse_083_str();
  inline void clear_has_sparse_083_str();
  inline void set_has_sparse_084_str();
  inline void clear_has_sparse_084_str();
  inline void set_has_sparse_085_str();
  inline void clear_has_sparse_085_str();
  inline void set_has_sparse_086_str();
  inline void clear_has_sparse_086_str();
  inline void set_has_sparse_087_str();
  inline void clear_has_sparse_087_str();
  inline void set_has_sparse_088_str();
  inline void clear_has_sparse_088_str();
  inline void set_has_sparse_089_str();
  inline void clear_has_sparse_089_str();
  inline void set_has_sparse_090_str();
  inline void clear_has_sparse_090_str();
  inline void set_has_sparse_091_str();
  inline void clear_has_sparse_091_str();
  inline void set_has_sparse_092_str();
  inline void clear_has_sparse_092_str();
  inline void set_has_sparse_093_str();
  inline void clear_has_sparse_093_str();
  inline void set_has_sparse_094_str();
  inline void clear_has_sparse_094_str();
  inline void set_has_sparse_095_str();
  inline void clear_has_sparse_095_str();
  inline void set_has_sparse_096_str();
  inline void clear_has_sparse_096_str();
  inline void set_has_sparse_097_str();
  inline void clear_has_sparse_097_str();
  inline void set_has_sparse_098_str();
  inline void clear_has_sparse_098_str();
  inline void set_has_sparse_099_str();
  inline void clear_has_sparse_099_str();
  inline void set_has_sparse_100_str();
  inline void clear_has_sparse_100_str();
  inline void set_has_sparse_101_str();
  inline void clear_has_sparse_101_str();
  inline void set_has_sparse_102_str();
  inline void clear_has_sparse_102_str();
  inline void set_has_sparse_103_str();
  inline void clear_has_sparse_103_str();
  inline void set_has_sparse_104_str();
  inline void clear_has_sparse_104_str();
  inline void set_has_sparse_105_str();
  inline void clear_has_sparse_105_str();
  inline void set_has_sparse_106_str();
  inline void clear_has_sparse_106_str();
  inline void set_has_sparse_107_str();
  inline void clear_has_sparse_107_str();
  inline void set_has_sparse_108_str();
  inline void clear_has_sparse_108_str();
  inline void set_has_sparse_109_str();
  inline void clear_has_sparse_109_str();
  inline void set_has_sparse_110_str();
  inline void clear_has_sparse_110_str();
  inline void set_has_sparse_111_str();
  inline void clear_has_sparse_111_str();
  inline void set_has_sparse_112_str();
  inline void clear_has_sparse_112_str();
  inline void set_has_sparse_113_str();
  inline void clear_has_sparse_113_str();
  inline void set_has_sparse_114_str();
  inline void clear_has_sparse_114_str();
  inline void set_has_sparse_115_str();
  inline void clear_has_sparse_115_str();
  inline void set_has_sparse_116_str();
  inline void clear_has_sparse_116_str();
  inline void set_has_sparse_117_str();
  inline void clear_has_sparse_117_str();
  inline void set_has_sparse_118_str();
  inline void clear_has_sparse_118_str();
  inline void set_has_sparse_119_str();
  inline void clear_has_sparse_119_str();
  inline void set_has_sparse_120_str();
  inline void clear_has_sparse_120_str();
  inline void set_has_sparse_121_str();
  inline void clear_has_sparse_121_str();
  inline void set_has_sparse_122_str();
  inline void clear_has_sparse_122_str();
  inline void set_has_sparse_123_str();
  inline void clear_has_sparse_123_str();
  inline void set_has_sparse_124_str();
  inline void clear_has_sparse_124_str();
  inline void set_has_sparse_125_str();
  inline void clear_has_sparse_125_str();
  inline void set_has_sparse_126_str();
  inline void clear_has_sparse_126_str();
  inline void set_has_sparse_127_str();
  inline void clear_has_sparse_127_str();
  inline void set_has_sparse_128_str();
  inline void clear_has_sparse_128_str();
  inline void set_has_sparse_129_str();
  inline void clear_has_sparse_129_str();
  inline void set_has_sparse_130_str();
  inline void clear_has_sparse_130_str();
  inline void set_has_sparse_131_str();
  inline void clear_has_sparse_131_str();
  inline void set_has_sparse_132_str();
  inline void clear_has_sparse_132_str();
  inline void set_has_sparse_133_str();
  inline void clear_has_sparse_133_str();
  inline void set_has_sparse_134_str();
  inline void clear_has_sparse_134_str();
  inline void set_has_sparse_135_str();
  inline void clear_has_sparse_135_str();
  inline void set_has_sparse_136_str();
  inline void clear_has_sparse_136_str();
  inline void set_has_sparse_137_str();
  inline void clear_has_sparse_137_str();
  inline void set_has_sparse_138_str();
  inline void clear_has_sparse_138_str();
  inline void set_has_sparse_139_str();
  inline void clear_has_sparse_139_str();
  inline void set_has_sparse_140_str();
  inline void clear_has_sparse_140_str();
  inline void set_has_sparse_141_str();
  inline void clear_has_sparse_141_str();
  inline void set_has_sparse_142_str();
  inline void clear_has_sparse_142_str();
  inline void set_has_sparse_143_str();
  inline void clear_has_sparse_143_str();
  inline void set_has_sparse_144_str();
  inline void clear_has_sparse_144_str();
  inline void set_has_sparse_145_str();
  inline void clear_has_sparse_145_str();
  inline void set_has_sparse_146_str();
  inline void clear_has_sparse_146_str();
  inline void set_has_sparse_147_str();
  inline void clear_has_sparse_147_str();
  inline void set_has_sparse_148_str();
  inline void clear_has_sparse_148_str();
  inline void set_has_sparse_149_str();
  inline void clear_has_sparse_149_str();
  inline void set_has_sparse_150_str();
  inline void clear_has_sparse_150_str();
  inline void set_has_sparse_151_str();
  inline void clear_has_sparse_151_str();
  inline void set_has_sparse_152_str();
  inline void clear_has_sparse_152_str();
  inline void set_has_sparse_153_str();
  inline void clear_has_sparse_153_str();
  inline void set_has_sparse_154_str();
  inline void clear_has_sparse_154_str();
  inline void set_has_sparse_155_str();
  inline void clear_has_sparse_155_str();
  inline void set_has_sparse_156_str();
  inline void clear_has_sparse_156_str();
  inline void set_has_sparse_157_str();
  inline void clear_has_sparse_157_str();
  inline void set_has_sparse_158_str();
  inline void clear_has_sparse_158_str();
  inline void set_has_sparse_159_str();
  inline void clear_has_sparse_159_str();
  inline void set_has_sparse_160_str();
  inline void clear_has_sparse_160_str();
  inline void set_has_sparse_161_str();
  inline void clear_has_sparse_161_str();
  inline void set_has_sparse_162_str();
  inline void clear_has_sparse_162_str();
  inline void set_has_sparse_163_str();
  inline void clear_has_sparse_163_str();
  inline void set_has_sparse_164_str();
  inline void clear_has_sparse_164_str();
  inline void set_has_sparse_165_str();
  inline void clear_has_sparse_165_str();
  inline void set_has_sparse_166_str();
  inline void clear_has_sparse_166_str();
  inline void set_has_sparse_167_str();
  inline void clear_has_sparse_167_str();
  inline void set_has_sparse_168_str();
  inline void clear_has_sparse_168_str();
  inline void set_has_sparse_169_str();
  inline void clear_has_sparse_169_str();
  inline void set_has_sparse_170_str();
  inline void clear_has_sparse_170_str();
  inline void set_has_sparse_171_str();
  inline void clear_has_sparse_171_str();
  inline void set_has_sparse_172_str();
  inline void clear_has_sparse_172_str();
  inline void set_has_sparse_173_str();
  inline void clear_has_sparse_173_str();
  inline void set_has_sparse_174_str();
  inline void clear_has_sparse_174_str();
  inline void set_has_sparse_175_str();
  inline void clear_has_sparse_175_str();
  inline void set_has_sparse_176_str();
  inline void clear_has_sparse_176_str();
  inline void set_has_sparse_177_str();
  inline void clear_has_sparse_177_str();
  inline void set_has_sparse_178_str();
  inline void clear_has_sparse_178_str();
  inline void set_has_sparse_179_str();
  inline void clear_has_sparse_179_str();
  inline void set_has_sparse_180_str();
  inline void clear_has_sparse_180_str();
  inline void set_has_sparse_181_str();
  inline void clear_has_sparse_181_str();
  inline void set_has_sparse_182_str();
  inline void clear_has_sparse_182_str();
  inline void set_has_sparse_183_str();
  inline void clear_has_sparse_183_str();
  inline void set_has_sparse_184_str();
  inline void clear_has_sparse_184_str();
  inline void set_has_sparse_185_str();
  inline void clear_has_sparse_185_str();
  inline void set_has_sparse_186_str();
  inline void clear_has_sparse_186_str();
  inline void set_has_sparse_187_str();
  inline void clear_has_sparse_187_str();
  inline void set_has_sparse_188_str();
  inline void clear_has_sparse_188_str();
  inline void set_has_sparse_189_str();
  inline void clear_has_sparse_189_str();
  inline void set_has_sparse_190_str();
  inline void clear_has_sparse_190_str();
  inline void set_has_sparse_191_str();
  inline void clear_has_sparse_191_str();
  inline void set_has_sparse_192_str();
  inline void clear_has_sparse_192_str();
  inline void set_has_sparse_193_str();
  inline void clear_has_sparse_193_str();
  inline void set_has_sparse_194_str();
  inline void clear_has_sparse_194_str();
  inline void set_has_sparse_195_str();
  inline void clear_has_sparse_195_str();
  inline void set_has_sparse_196_str();
  inline void clear_has_sparse_196_str();
  inline void set_has_sparse_197_str();
  inline void clear_has_sparse_197_str();
  inline void set_has_sparse_198_str();
  inline void clear_has_sparse_198_str();
  inline void set_has_sparse_199_str();
  inline void clear_has_sparse_199_str();
  inline void set_has_sparse_200_str();
  inline void clear_has_sparse_200_str();
  inline void set_has_sparse_201_str();
  inline void clear_has_sparse_201_str();
  inline void set_has_sparse_202_str();
  inline void clear_has_sparse_202_str();
  inline void set_has_sparse_203_str();
  inline void clear_has_sparse_203_str();
  inline void set_has_sparse_204_str();
  inline void clear_has_sparse_204_str();
  inline void set_has_sparse_205_str();
  inline void clear_has_sparse_205_str();
  inline void set_has_sparse_206_str();
  inline void clear_has_sparse_206_str();
  inline void set_has_sparse_207_str();
  inline void clear_has_sparse_207_str();
  inline void set_has_sparse_208_str();
  inline void clear_has_sparse_208_str();
  inline void set_has_sparse_209_str();
  inline void clear_has_sparse_209_str();
  inline void set_has_sparse_210_str();
  inline void clear_has_sparse_210_str();
  inline void set_has_sparse_211_str();
  inline void clear_has_sparse_211_str();
  inline void set_has_sparse_212_str();
  inline void clear_has_sparse_212_str();
  inline void set_has_sparse_213_str();
  inline void clear_has_sparse_213_str();
  inline void set_has_sparse_214_str();
  inline void clear_has_sparse_214_str();
  inline void set_has_sparse_215_str();
  inline void clear_has_sparse_215_str();
  inline void set_has_sparse_216_str();
  inline void clear_has_sparse_216_str();
  inline void set_has_sparse_217_str();
  inline void clear_has_sparse_217_str();
  inline void set_has_sparse_218_str();
  inline void clear_has_sparse_218_str();
  inline void set_has_sparse_219_str();
  inline void clear_has_sparse_219_str();
  inline void set_has_sparse_220_str();
  inline void clear_has_sparse_220_str();
  inline void set_has_sparse_221_str();
  inline void clear_has_sparse_221_str();
  inline void set_has_sparse_222_str();
  inline void clear_has_sparse_222_str();
  inline void set_has_sparse_223_str();
  inline void clear_has_sparse_223_str();
  inline void set_has_sparse_224_str();
  inline void clear_has_sparse_224_str();
  inline void set_has_sparse_225_str();
  inline void clear_has_sparse_225_str();
  inline void set_has_sparse_226_str();
  inline void clear_has_sparse_226_str();
  inline void set_has_sparse_227_str();
  inline void clear_has_sparse_227_str();
  inline void set_has_sparse_228_str();
  inline void clear_has_sparse_228_str();
  inline void set_has_sparse_229_str();
  inline void clear_has_sparse_229_str();
  inline void set_has_sparse_230_str();
  inline void clear_has_sparse_230_str();
  inline void set_has_sparse_231_str();
  inline void clear_has_sparse_231_str();
  inline void set_has_sparse_232_str();
  inline void clear_has_sparse_232_str();
  inline void set_has_sparse_233_str();
  inline void clear_has_sparse_233_str();
  inline void set_has_sparse_234_str();
  inline void clear_has_sparse_234_str();
  inline void set_has_sparse_235_str();
  inline void clear_has_sparse_235_str();
  inline void set_has_sparse_236_str();
  inline void clear_has_sparse_236_str();
  inline void set_has_sparse_237_str();
  inline void clear_has_sparse_237_str();
  inline void set_has_sparse_238_str();
  inline void clear_has_sparse_238_str();
  inline void set_has_sparse_239_str();
  inline void clear_has_sparse_239_str();
  inline void set_has_sparse_240_str();
  inline void clear_has_sparse_240_str();
  inline void set_has_sparse_241_str();
  inline void clear_has_sparse_241_str();
  inline void set_has_sparse_242_str();
  inline void clear_has_sparse_242_str();
  inline void set_has_sparse_243_str();
  inline void clear_has_sparse_243_str();
  inline void set_has_sparse_244_str();
  inline void clear_has_sparse_244_str();
  inline void set_has_sparse_245_str();
  inline void clear_has_sparse_245_str();
  inline void set_has_sparse_246_str();
  inline void clear_has_sparse_246_str();
  inline void set_has_sparse_247_str();
  inline void clear_has_sparse_247_str();
  inline void set_has_sparse_248_str();
  inline void clear_has_sparse_248_str();
  inline void set_has_sparse_249_str();
  inline void clear_has_sparse_249_str();
  inline void set_has_sparse_250_str();
  inline void clear_has_sparse_250_str();
  inline void set_has_sparse_251_str();
  inline void clear_has_sparse_251_str();
  inline void set_has_sparse_252_str();
  inline void clear_has_sparse_252_str();
  inline void set_has_sparse_253_str();
  inline void clear_has_sparse_253_str();
  inline void set_has_sparse_254_str();
  inline void clear_has_sparse_254_str();
  inline void set_has_sparse_255_str();
  inline void clear_has_sparse_255_str();
  inline void set_has_sparse_256_str();
  inline void clear_has_sparse_256_str();
  inline void set_has_sparse_257_str();
  inline void clear_has_sparse_257_str();
  inline void set_has_sparse_258_str();
  inline void clear_has_sparse_258_str();
  inline void set_has_sparse_259_str();
  inline void clear_has_sparse_259_str();
  inline void set_has_sparse_260_str();
  inline void clear_has_sparse_260_str();
  inline void set_has_sparse_261_str();
  inline void clear_has_sparse_261_str();
  inline void set_has_sparse_262_str();
  inline void clear_has_sparse_262_str();
  inline void set_has_sparse_263_str();
  inline void clear_has_sparse_263_str();
  inline void set_has_sparse_264_str();
  inline void clear_has_sparse_264_str();
  inline void set_has_sparse_265_str();
  inline void clear_has_sparse_265_str();
  inline void set_has_sparse_266_str();
  inline void clear_has_sparse_266_str();
  inline void set_has_sparse_267_str();
  inline void clear_has_sparse_267_str();
  inline void set_has_sparse_268_str();
  inline void clear_has_sparse_268_str();
  inline void set_has_sparse_269_str();
  inline void clear_has_sparse_269_str();
  inline void set_has_sparse_270_str();
  inline void clear_has_sparse_270_str();
  inline void set_has_sparse_271_str();
  inline void clear_has_sparse_271_str();
  inline void set_has_sparse_272_str();
  inline void clear_has_sparse_272_str();
  inline void set_has_sparse_273_str();
  inline void clear_has_sparse_273_str();
  inline void set_has_sparse_274_str();
  inline void clear_has_sparse_274_str();
  inline void set_has_sparse_275_str();
  inline void clear_has_sparse_275_str();
  inline void set_has_sparse_276_str();
  inline void clear_has_sparse_276_str();
  inline void set_has_sparse_277_str();
  inline void clear_has_sparse_277_str();
  inline void set_has_sparse_278_str();
  inline void clear_has_sparse_278_str();
  inline void set_has_sparse_279_str();
  inline void clear_has_sparse_279_str();
  inline void set_has_sparse_280_str();
  inline void clear_has_sparse_280_str();
  inline void set_has_sparse_281_str();
  inline void clear_has_sparse_281_str();
  inline void set_has_sparse_282_str();
  inline void clear_has_sparse_282_str();
  inline void set_has_sparse_283_str();
  inline void clear_has_sparse_283_str();
  inline void set_has_sparse_284_str();
  inline void clear_has_sparse_284_str();
  inline void set_has_sparse_285_str();
  inline void clear_has_sparse_285_str();
  inline void set_has_sparse_286_str();
  inline void clear_has_sparse_286_str();
  inline void set_has_sparse_287_str();
  inline void clear_has_sparse_287_str();
  inline void set_has_sparse_288_str();
  inline void clear_has_sparse_288_str();
  inline void set_has_sparse_289_str();
  inline void clear_has_sparse_289_str();
  inline void set_has_sparse_290_str();
  inline void clear_has_sparse_290_str();
  inline void set_has_sparse_291_str();
  inline void clear_has_sparse_291_str();
  inline void set_has_sparse_292_str();
  inline void clear_has_sparse_292_str();
  inline void set_has_sparse_293_str();
  inline void clear_has_sparse_293_str();
  inline void set_has_sparse_294_str();
  inline void clear_has_sparse_294_str();
  inline void set_has_sparse_295_str();
  inline void clear_has_sparse_295_str();
  inline void set_has_sparse_296_str();
  inline void clear_has_sparse_296_str();
  inline void set_has_sparse_297_str();
  inline void clear_has_sparse_297_str();
  inline void set_has_sparse_298_str();
  inline void clear_has_sparse_298_str();
  inline void set_has_sparse_299_str();
  inline void clear_has_sparse_299_str();
  inline void set_has_sparse_300_str();
  inline void clear_has_sparse_300_str();
  inline void set_has_sparse_301_str();
  inline void clear_has_sparse_301_str();
  inline void set_has_sparse_302_str();
  inline void clear_has_sparse_302_str();
  inline void set_has_sparse_303_str();
  inline void clear_has_sparse_303_str();
  inline void set_has_sparse_304_str();
  inline void clear_has_sparse_304_str();
  inline void set_has_sparse_305_str();
  inline void clear_has_sparse_305_str();
  inline void set_has_sparse_306_str();
  inline void clear_has_sparse_306_str();
  inline void set_has_sparse_307_str();
  inline void clear_has_sparse_307_str();
  inline void set_has_sparse_308_str();
  inline void clear_has_sparse_308_str();
  inline void set_has_sparse_309_str();
  inline void clear_has_sparse_309_str();
  inline void set_has_sparse_310_str();
  inline void clear_has_sparse_310_str();
  inline void set_has_sparse_311_str();
  inline void clear_has_sparse_311_str();
  inline void set_has_sparse_312_str();
  inline void clear_has_sparse_312_str();
  inline void set_has_sparse_313_str();
  inline void clear_has_sparse_313_str();
  inline void set_has_sparse_314_str();
  inline void clear_has_sparse_314_str();
  inline void set_has_sparse_315_str();
  inline void clear_has_sparse_315_str();
  inline void set_has_sparse_316_str();
  inline void clear_has_sparse_316_str();
  inline void set_has_sparse_317_str();
  inline void clear_has_sparse_317_str();
  inline void set_has_sparse_318_str();
  inline void clear_has_sparse_318_str();
  inline void set_has_sparse_319_str();
  inline void clear_has_sparse_319_str();
  inline void set_has_sparse_320_str();
  inline void clear_has_sparse_320_str();
  inline void set_has_sparse_321_str();
  inline void clear_has_sparse_321_str();
  inline void set_has_sparse_322_str();
  inline void clear_has_sparse_322_str();
  inline void set_has_sparse_323_str();
  inline void clear_has_sparse_323_str();
  inline void set_has_sparse_324_str();
  inline void clear_has_sparse_324_str();
  inline void set_has_sparse_325_str();
  inline void clear_has_sparse_325_str();
  inline void set_has_sparse_326_str();
  inline void clear_has_sparse_326_str();
  inline void set_has_sparse_327_str();
  inline void clear_has_sparse_327_str();
  inline void set_has_sparse_328_str();
  inline void clear_has_sparse_328_str();
  inline void set_has_sparse_329_str();
  inline void clear_has_sparse_329_str();
  inline void set_has_sparse_330_str();
  inline void clear_has_sparse_330_str();
  inline void set_has_sparse_331_str();
  inline void clear_has_sparse_331_str();
  inline void set_has_sparse_332_str();
  inline void clear_has_sparse_332_str();
  inline void set_has_sparse_333_str();
  inline void clear_has_sparse_333_str();
  inline void set_has_sparse_334_str();
  inline void clear_has_sparse_334_str();
  inline void set_has_sparse_335_str();
  inline void clear_has_sparse_335_str();
  inline void set_has_sparse_336_str();
  inline void clear_has_sparse_336_str();
  inline void set_has_sparse_337_str();
  inline void clear_has_sparse_337_str();
  inline void set_has_sparse_338_str();
  inline void clear_has_sparse_338_str();
  inline void set_has_sparse_339_str();
  inline void clear_has_sparse_339_str();
  inline void set_has_sparse_340_str();
  inline void clear_has_sparse_340_str();
  inline void set_has_sparse_341_str();
  inline void clear_has_sparse_341_str();
  inline void set_has_sparse_342_str();
  inline void clear_has_sparse_342_str();
  inline void set_has_sparse_343_str();
  inline void clear_has_sparse_343_str();
  inline void set_has_sparse_344_str();
  inline void clear_has_sparse_344_str();
  inline void set_has_sparse_345_str();
  inline void clear_has_sparse_345_str();
  inline void set_has_sparse_346_str();
  inline void clear_has_sparse_346_str();
  inline void set_has_sparse_347_str();
  inline void clear_has_sparse_347_str();
  inline void set_has_sparse_348_str();
  inline void clear_has_sparse_348_str();
  inline void set_has_sparse_349_str();
  inline void clear_has_sparse_349_str();
  inline void set_has_sparse_350_str();
  inline void clear_has_sparse_350_str();
  inline void set_has_sparse_351_str();
  inline void clear_has_sparse_351_str();
  inline void set_has_sparse_352_str();
  inline void clear_has_sparse_352_str();
  inline void set_has_sparse_353_str();
  inline void clear_has_sparse_353_str();
  inline void set_has_sparse_354_str();
  inline void clear_has_sparse_354_str();
  inline void set_has_sparse_355_str();
  inline void clear_has_sparse_355_str();
  inline void set_has_sparse_356_str();
  inline void clear_has_sparse_356_str();
  inline void set_has_sparse_357_str();
  inline void clear_has_sparse_357_str();
  inline void set_has_sparse_358_str();
  inline void clear_has_sparse_358_str();
  inline void set_has_sparse_359_str();
  inline void clear_has_sparse_359_str();
  inline void set_has_sparse_360_str();
  inline void clear_has_sparse_360_str();
  inline void set_has_sparse_361_str();
  inline void clear_has_sparse_361_str();
  inline void set_has_sparse_362_str();
  inline void clear_has_sparse_362_str();
  inline void set_has_sparse_363_str();
  inline void clear_has_sparse_363_str();
  inline void set_has_sparse_364_str();
  inline void clear_has_sparse_364_str();
  inline void set_has_sparse_365_str();
  inline void clear_has_sparse_365_str();
  inline void set_has_sparse_366_str();
  inline void clear_has_sparse_366_str();
  inline void set_has_sparse_367_str();
  inline void clear_has_sparse_367_str();
  inline void set_has_sparse_368_str();
  inline void clear_has_sparse_368_str();
  inline void set_has_sparse_369_str();
  inline void clear_has_sparse_369_str();
  inline void set_has_sparse_370_str();
  inline void clear_has_sparse_370_str();
  inline void set_has_sparse_371_str();
  inline void clear_has_sparse_371_str();
  inline void set_has_sparse_372_str();
  inline void clear_has_sparse_372_str();
  inline void set_has_sparse_373_str();
  inline void clear_has_sparse_373_str();
  inline void set_has_sparse_374_str();
  inline void clear_has_sparse_374_str();
  inline void set_has_sparse_375_str();
  inline void clear_has_sparse_375_str();
  inline void set_has_sparse_376_str();
  inline void clear_has_sparse_376_str();
  inline void set_has_sparse_377_str();
  inline void clear_has_sparse_377_str();
  inline void set_has_sparse_378_str();
  inline void clear_has_sparse_378_str();
  inline void set_has_sparse_379_str();
  inline void clear_has_sparse_379_str();
  inline void set_has_sparse_380_str();
  inline void clear_has_sparse_380_str();
  inline void set_has_sparse_381_str();
  inline void clear_has_sparse_381_str();
  inline void set_has_sparse_382_str();
  inline void clear_has_sparse_382_str();
  inline void set_has_sparse_383_str();
  inline void clear_has_sparse_383_str();
  inline void set_has_sparse_384_str();
  inline void clear_has_sparse_384_str();
  inline void set_has_sparse_385_str();
  inline void clear_has_sparse_385_str();
  inline void set_has_sparse_386_str();
  inline void clear_has_sparse_386_str();
  inline void set_has_sparse_387_str();
  inline void clear_has_sparse_387_str();
  inline void set_has_sparse_388_str();
  inline void clear_has_sparse_388_str();
  inline void set_has_sparse_389_str();
  inline void clear_has_sparse_389_str();
  inline void set_has_sparse_390_str();
  inline void clear_has_sparse_390_str();
  inline void set_has_sparse_391_str();
  inline void clear_has_sparse_391_str();
  inline void set_has_sparse_392_str();
  inline void clear_has_sparse_392_str();
  inline void set_has_sparse_393_str();
  inline void clear_has_sparse_393_str();
  inline void set_has_sparse_394_str();
  inline void clear_has_sparse_394_str();
  inline void set_has_sparse_395_str();
  inline void clear_has_sparse_395_str();
  inline void set_has_sparse_396_str();
  inline void clear_has_sparse_396_str();
  inline void set_has_sparse_397_str();
  inline void clear_has_sparse_397_str();
  inline void set_has_sparse_398_str();
  inline void clear_has_sparse_398_str();
  inline void set_has_sparse_399_str();
  inline void clear_has_sparse_399_str();
  inline void set_has_sparse_400_str();
  inline void clear_has_sparse_400_str();
  inline void set_has_sparse_401_str();
  inline void clear_has_sparse_401_str();
  inline void set_has_sparse_402_str();
  inline void clear_has_sparse_402_str();
  inline void set_has_sparse_403_str();
  inline void clear_has_sparse_403_str();
  inline void set_has_sparse_404_str();
  inline void clear_has_sparse_404_str();
  inline void set_has_sparse_405_str();
  inline void clear_has_sparse_405_str();
  inline void set_has_sparse_406_str();
  inline void clear_has_sparse_406_str();
  inline void set_has_sparse_407_str();
  inline void clear_has_sparse_407_str();
  inline void set_has_sparse_408_str();
  inline void clear_has_sparse_408_str();
  inline void set_has_sparse_409_str();
  inline void clear_has_sparse_409_str();
  inline void set_has_sparse_410_str();
  inline void clear_has_sparse_410_str();
  inline void set_has_sparse_411_str();
  inline void clear_has_sparse_411_str();
  inline void set_has_sparse_412_str();
  inline void clear_has_sparse_412_str();
  inline void set_has_sparse_413_str();
  inline void clear_has_sparse_413_str();
  inline void set_has_sparse_414_str();
  inline void clear_has_sparse_414_str();
  inline void set_has_sparse_415_str();
  inline void clear_has_sparse_415_str();
  inline void set_has_sparse_416_str();
  inline void clear_has_sparse_416_str();
  inline void set_has_sparse_417_str();
  inline void clear_has_sparse_417_str();
  inline void set_has_sparse_418_str();
  inline void clear_has_sparse_418_str();
  inline void set_has_sparse_419_str();
  inline void clear_has_sparse_419_str();
  inline void set_has_sparse_420_str();
  inline void clear_has_sparse_420_str();
  inline void set_has_sparse_421_str();
  inline void clear_has_sparse_421_str();
  inline void set_has_sparse_422_str();
  inline void clear_has_sparse_422_str();
  inline void set_has_sparse_423_str();
  inline void clear_has_sparse_423_str();
  inline void set_has_sparse_424_str();
  inline void clear_has_sparse_424_str();
  inline void set_has_sparse_425_str();
  inline void clear_has_sparse_425_str();
  inline void set_has_sparse_426_str();
  inline void clear_has_sparse_426_str();
  inline void set_has_sparse_427_str();
  inline void clear_has_sparse_427_str();
  inline void set_has_sparse_428_str();
  inline void clear_has_sparse_428_str();
  inline void set_has_sparse_429_str();
  inline void clear_has_sparse_429_str();
  inline void set_has_sparse_430_str();
  inline void clear_has_sparse_430_str();
  inline void set_has_sparse_431_str();
  inline void clear_has_sparse_431_str();
  inline void set_has_sparse_432_str();
  inline void clear_has_sparse_432_str();
  inline void set_has_sparse_433_str();
  inline void clear_has_sparse_433_str();
  inline void set_has_sparse_434_str();
  inline void clear_has_sparse_434_str();
  inline void set_has_sparse_435_str();
  inline void clear_has_sparse_435_str();
  inline void set_has_sparse_436_str();
  inline void clear_has_sparse_436_str();
  inline void set_has_sparse_437_str();
  inline void clear_has_sparse_437_str();
  inline void set_has_sparse_438_str();
  inline void clear_has_sparse_438_str();
  inline void set_has_sparse_439_str();
  inline void clear_has_sparse_439_str();
  inline void set_has_sparse_440_str();
  inline void clear_has_sparse_440_str();
  inline void set_has_sparse_441_str();
  inline void clear_has_sparse_441_str();
  inline void set_has_sparse_442_str();
  inline void clear_has_sparse_442_str();
  inline void set_has_sparse_443_str();
  inline void clear_has_sparse_443_str();
  inline void set_has_sparse_444_str();
  inline void clear_has_sparse_444_str();
  inline void set_has_sparse_445_str();
  inline void clear_has_sparse_445_str();
  inline void set_has_sparse_446_str();
  inline void clear_has_sparse_446_str();
  inline void set_has_sparse_447_str();
  inline void clear_has_sparse_447_str();
  inline void set_has_sparse_448_str();
  inline void clear_has_sparse_448_str();
  inline void set_has_sparse_449_str();
  inline void clear_has_sparse_449_str();
  inline void set_has_sparse_450_str();
  inline void clear_has_sparse_450_str();
  inline void set_has_sparse_451_str();
  inline void clear_has_sparse_451_str();
  inline void set_has_sparse_452_str();
  inline void clear_has_sparse_452_str();
  inline void set_has_sparse_453_str();
  inline void clear_has_sparse_453_str();
  inline void set_has_sparse_454_str();
  inline void clear_has_sparse_454_str();
  inline void set_has_sparse_455_str();
  inline void clear_has_sparse_455_str();
  inline void set_has_sparse_456_str();
  inline void clear_has_sparse_456_str();
  inline void set_has_sparse_457_str();
  inline void clear_has_sparse_457_str();
  inline void set_has_sparse_458_str();
  inline void clear_has_sparse_458_str();
  inline void set_has_sparse_459_str();
  inline void clear_has_sparse_459_str();
  inline void set_has_sparse_460_str();
  inline void clear_has_sparse_460_str();
  inline void set_has_sparse_461_str();
  inline void clear_has_sparse_461_str();
  inline void set_has_sparse_462_str();
  inline void clear_has_sparse_462_str();
  inline void set_has_sparse_463_str();
  inline void clear_has_sparse_463_str();
  inline void set_has_sparse_464_str();
  inline void clear_has_sparse_464_str();
  inline void set_has_sparse_465_str();
  inline void clear_has_sparse_465_str();
  inline void set_has_sparse_466_str();
  inline void clear_has_sparse_466_str();
  inline void set_has_sparse_467_str();
  inline void clear_has_sparse_467_str();
  inline void set_has_sparse_468_str();
  inline void clear_has_sparse_468_str();
  inline void set_has_sparse_469_str();
  inline void clear_has_sparse_469_str();
  inline void set_has_sparse_470_str();
  inline void clear_has_sparse_470_str();
  inline void set_has_sparse_471_str();
  inline void clear_has_sparse_471_str();
  inline void set_has_sparse_472_str();
  inline void clear_has_sparse_472_str();
  inline void set_has_sparse_473_str();
  inline void clear_has_sparse_473_str();
  inline void set_has_sparse_474_str();
  inline void clear_has_sparse_474_str();
  inline void set_has_sparse_475_str();
  inline void clear_has_sparse_475_str();
  inline void set_has_sparse_476_str();
  inline void clear_has_sparse_476_str();
  inline void set_has_sparse_477_str();
  inline void clear_has_sparse_477_str();
  inline void set_has_sparse_478_str();
  inline void clear_has_sparse_478_str();
  inline void set_has_sparse_479_str();
  inline void clear_has_sparse_479_str();
  inline void set_has_sparse_480_str();
  inline void clear_has_sparse_480_str();
  inline void set_has_sparse_481_str();
  inline void clear_has_sparse_481_str();
  inline void set_has_sparse_482_str();
  inline void clear_has_sparse_482_str();
  inline void set_has_sparse_483_str();
  inline void clear_has_sparse_483_str();
  inline void set_has_sparse_484_str();
  inline void clear_has_sparse_484_str();
  inline void set_has_sparse_485_str();
  inline void clear_has_sparse_485_str();
  inline void set_has_sparse_486_str();
  inline void clear_has_sparse_486_str();
  inline void set_has_sparse_487_str();
  inline void clear_has_sparse_487_str();
  inline void set_has_sparse_488_str();
  inline void clear_has_sparse_488_str();
  inline void set_has_sparse_489_str();
  inline void clear_has_sparse_489_str();
  inline void set_has_sparse_490_str();
  inline void clear_has_sparse_490_str();
  inline void set_has_sparse_491_str();
  inline void clear_has_sparse_491_str();
  inline void set_has_sparse_492_str();
  inline void clear_has_sparse_492_str();
  inline void set_has_sparse_493_str();
  inline void clear_has_sparse_493_str();
  inline void set_has_sparse_494_str();
  inline void clear_has_sparse_494_str();
  inline void set_has_sparse_495_str();
  inline void clear_has_sparse_495_str();
  inline void set_has_sparse_496_str();
  inline void clear_has_sparse_496_str();
  inline void set_has_sparse_497_str();
  inline void clear_has_sparse_497_str();
  inline void set_has_sparse_498_str();
  inline void clear_has_sparse_498_str();
  inline void set_has_sparse_499_str();
  inline void clear_has_sparse_499_str();
  inline void set_has_sparse_500_str();
  inline void clear_has_sparse_500_str();
  inline void set_has_sparse_501_str();
  inline void clear_has_sparse_501_str();
  inline void set_has_sparse_502_str();
  inline void clear_has_sparse_502_str();
  inline void set_has_sparse_503_str();
  inline void clear_has_sparse_503_str();
  inline void set_has_sparse_504_str();
  inline void clear_has_sparse_504_str();
  inline void set_has_sparse_505_str();
  inline void clear_has_sparse_505_str();
  inline void set_has_sparse_506_str();
  inline void clear_has_sparse_506_str();
  inline void set_has_sparse_507_str();
  inline void clear_has_sparse_507_str();
  inline void set_has_sparse_508_str();
  inline void clear_has_sparse_508_str();
  inline void set_has_sparse_509_str();
  inline void clear_has_sparse_509_str();
  inline void set_has_sparse_510_str();
  inline void clear_has_sparse_510_str();
  inline void set_has_sparse_511_str();
  inline void clear_has_sparse_511_str();
  inline void set_has_sparse_512_str();
  inline void clear_has_sparse_512_str();
  inline void set_has_sparse_513_str();
  inline void clear_has_sparse_513_str();
  inline void set_has_sparse_514_str();
  inline void clear_has_sparse_514_str();
  inline void set_has_sparse_515_str();
  inline void clear_has_sparse_515_str();
  inline void set_has_sparse_516_str();
  inline void clear_has_sparse_516_str();
  inline void set_has_sparse_517_str();
  inline void clear_has_sparse_517_str();
  inline void set_has_sparse_518_str();
  inline void clear_has_sparse_518_str();
  inline void set_has_sparse_519_str();
  inline void clear_has_sparse_519_str();
  inline void set_has_sparse_520_str();
  inline void clear_has_sparse_520_str();
  inline void set_has_sparse_521_str();
  inline void clear_has_sparse_521_str();
  inline void set_has_sparse_522_str();
  inline void clear_has_sparse_522_str();
  inline void set_has_sparse_523_str();
  inline void clear_has_sparse_523_str();
  inline void set_has_sparse_524_str();
  inline void clear_has_sparse_524_str();
  inline void set_has_sparse_525_str();
  inline void clear_has_sparse_525_str();
  inline void set_has_sparse_526_str();
  inline void clear_has_sparse_526_str();
  inline void set_has_sparse_527_str();
  inline void clear_has_sparse_527_str();
  inline void set_has_sparse_528_str();
  inline void clear_has_sparse_528_str();
  inline void set_has_sparse_529_str();
  inline void clear_has_sparse_529_str();
  inline void set_has_sparse_530_str();
  inline void clear_has_sparse_530_str();
  inline void set_has_sparse_531_str();
  inline void clear_has_sparse_531_str();
  inline void set_has_sparse_532_str();
  inline void clear_has_sparse_532_str();
  inline void set_has_sparse_533_str();
  inline void clear_has_sparse_533_str();
  inline void set_has_sparse_534_str();
  inline void clear_has_sparse_534_str();
  inline void set_has_sparse_535_str();
  inline void clear_has_sparse_535_str();
  inline void set_has_sparse_536_str();
  inline void clear_has_sparse_536_str();
  inline void set_has_sparse_537_str();
  inline void clear_has_sparse_537_str();
  inline void set_has_sparse_538_str();
  inline void clear_has_sparse_538_str();
  inline void set_has_sparse_539_str();
  inline void clear_has_sparse_539_str();
  inline void set_has_sparse_540_str();
  inline void clear_has_sparse_540_str();
  inline void set_has_sparse_541_str();
  inline void clear_has_sparse_541_str();
  inline void set_has_sparse_542_str();
  inline void clear_has_sparse_542_str();
  inline void set_has_sparse_543_str();
  inline void clear_has_sparse_543_str();
  inline void set_has_sparse_544_str();
  inline void clear_has_sparse_544_str();
  inline void set_has_sparse_545_str();
  inline void clear_has_sparse_545_str();
  inline void set_has_sparse_546_str();
  inline void clear_has_sparse_546_str();
  inline void set_has_sparse_547_str();
  inline void clear_has_sparse_547_str();
  inline void set_has_sparse_548_str();
  inline void clear_has_sparse_548_str();
  inline void set_has_sparse_549_str();
  inline void clear_has_sparse_549_str();
  inline void set_has_sparse_550_str();
  inline void clear_has_sparse_550_str();
  inline void set_has_sparse_551_str();
  inline void clear_has_sparse_551_str();
  inline void set_has_sparse_552_str();
  inline void clear_has_sparse_552_str();
  inline void set_has_sparse_553_str();
  inline void clear_has_sparse_553_str();
  inline void set_has_sparse_554_str();
  inline void clear_has_sparse_554_str();
  inline void set_has_sparse_555_str();
  inline void clear_has_sparse_555_str();
  inline void set_has_sparse_556_str();
  inline void clear_has_sparse_556_str();
  inline void set_has_sparse_557_str();
  inline void clear_has_sparse_557_str();
  inline void set_has_sparse_558_str();
  inline void clear_has_sparse_558_str();
  inline void set_has_sparse_559_str();
  inline void clear_has_sparse_559_str();
  inline void set_has_sparse_560_str();
  inline void clear_has_sparse_560_str();
  inline void set_has_sparse_561_str();
  inline void clear_has_sparse_561_str();
  inline void set_has_sparse_562_str();
  inline void clear_has_sparse_562_str();
  inline void set_has_sparse_563_str();
  inline void clear_has_sparse_563_str();
  inline void set_has_sparse_564_str();
  inline void clear_has_sparse_564_str();
  inline void set_has_sparse_565_str();
  inline void clear_has_sparse_565_str();
  inline void set_has_sparse_566_str();
  inline void clear_has_sparse_566_str();
  inline void set_has_sparse_567_str();
  inline void clear_has_sparse_567_str();
  inline void set_has_sparse_568_str();
  inline void clear_has_sparse_568_str();
  inline void set_has_sparse_569_str();
  inline void clear_has_sparse_569_str();
  inline void set_has_sparse_570_str();
  inline void clear_has_sparse_570_str();
  inline void set_has_sparse_571_str();
  inline void clear_has_sparse_571_str();
  inline void set_has_sparse_572_str();
  inline void clear_has_sparse_572_str();
  inline void set_has_sparse_573_str();
  inline void clear_has_sparse_573_str();
  inline void set_has_sparse_574_str();
  inline void clear_has_sparse_574_str();
  inline void set_has_sparse_575_str();
  inline void clear_has_sparse_575_str();
  inline void set_has_sparse_576_str();
  inline void clear_has_sparse_576_str();
  inline void set_has_sparse_577_str();
  inline void clear_has_sparse_577_str();
  inline void set_has_sparse_578_str();
  inline void clear_has_sparse_578_str();
  inline void set_has_sparse_579_str();
  inline void clear_has_sparse_579_str();
  inline void set_has_sparse_580_str();
  inline void clear_has_sparse_580_str();
  inline void set_has_sparse_581_str();
  inline void clear_has_sparse_581_str();
  inline void set_has_sparse_582_str();
  inline void clear_has_sparse_582_str();
  inline void set_has_sparse_583_str();
  inline void clear_has_sparse_583_str();
  inline void set_has_sparse_584_str();
  inline void clear_has_sparse_584_str();
  inline void set_has_sparse_585_str();
  inline void clear_has_sparse_585_str();
  inline void set_has_sparse_586_str();
  inline void clear_has_sparse_586_str();
  inline void set_has_sparse_587_str();
  inline void clear_has_sparse_587_str();
  inline void set_has_sparse_588_str();
  inline void clear_has_sparse_588_str();
  inline void set_has_sparse_589_str();
  inline void clear_has_sparse_589_str();
  inline void set_has_sparse_590_str();
  inline void clear_has_sparse_590_str();
  inline void set_has_sparse_591_str();
  inline void clear_has_sparse_591_str();
  inline void set_has_sparse_592_str();
  inline void clear_has_sparse_592_str();
  inline void set_has_sparse_593_str();
  inline void clear_has_sparse_593_str();
  inline void set_has_sparse_594_str();
  inline void clear_has_sparse_594_str();
  inline void set_has_sparse_595_str();
  inline void clear_has_sparse_595_str();
  inline void set_has_sparse_596_str();
  inline void clear_has_sparse_596_str();
  inline void set_has_sparse_597_str();
  inline void clear_has_sparse_597_str();
  inline void set_has_sparse_598_str();
  inline void clear_has_sparse_598_str();
  inline void set_has_sparse_599_str();
  inline void clear_has_sparse_599_str();
  inline void set_has_sparse_600_str();
  inline void clear_has_sparse_600_str();
  inline void set_has_sparse_601_str();
  inline void clear_has_sparse_601_str();
  inline void set_has_sparse_602_str();
  inline void clear_has_sparse_602_str();
  inline void set_has_sparse_603_str();
  inline void clear_has_sparse_603_str();
  inline void set_has_sparse_604_str();
  inline void clear_has_sparse_604_str();
  inline void set_has_sparse_605_str();
  inline void clear_has_sparse_605_str();
  inline void set_has_sparse_606_str();
  inline void clear_has_sparse_606_str();
  inline void set_has_sparse_607_str();
  inline void clear_has_sparse_607_str();
  inline void set_has_sparse_608_str();
  inline void clear_has_sparse_608_str();
  inline void set_has_sparse_609_str();
  inline void clear_has_sparse_609_str();
  inline void set_has_sparse_610_str();
  inline void clear_has_sparse_610_str();
  inline void set_has_sparse_611_str();
  inline void clear_has_sparse_611_str();
  inline void set_has_sparse_612_str();
  inline void clear_has_sparse_612_str();
  inline void set_has_sparse_613_str();
  inline void clear_has_sparse_613_str();
  inline void set_has_sparse_614_str();
  inline void clear_has_sparse_614_str();
  inline void set_has_sparse_615_str();
  inline void clear_has_sparse_615_str();
  inline void set_has_sparse_616_str();
  inline void clear_has_sparse_616_str();
  inline void set_has_sparse_617_str();
  inline void clear_has_sparse_617_str();
  inline void set_has_sparse_618_str();
  inline void clear_has_sparse_618_str();
  inline void set_has_sparse_619_str();
  inline void clear_has_sparse_619_str();
  inline void set_has_sparse_620_str();
  inline void clear_has_sparse_620_str();
  inline void set_has_sparse_621_str();
  inline void clear_has_sparse_621_str();
  inline void set_has_sparse_622_str();
  inline void clear_has_sparse_622_str();
  inline void set_has_sparse_623_str();
  inline void clear_has_sparse_623_str();
  inline void set_has_sparse_624_str();
  inline void clear_has_sparse_624_str();
  inline void set_has_sparse_625_str();
  inline void clear_has_sparse_625_str();
  inline void set_has_sparse_626_str();
  inline void clear_has_sparse_626_str();
  inline void set_has_sparse_627_str();
  inline void clear_has_sparse_627_str();
  inline void set_has_sparse_628_str();
  inline void clear_has_sparse_628_str();
  inline void set_has_sparse_629_str();
  inline void clear_has_sparse_629_str();
  inline void set_has_sparse_630_str();
  inline void clear_has_sparse_630_str();
  inline void set_has_sparse_631_str();
  inline void clear_has_sparse_631_str();
  inline void set_has_sparse_632_str();
  inline void clear_has_sparse_632_str();
  inline void set_has_sparse_633_str();
  inline void clear_has_sparse_633_str();
  inline void set_has_sparse_634_str();
  inline void clear_has_sparse_634_str();
  inline void set_has_sparse_635_str();
  inline void clear_has_sparse_635_str();
  inline void set_has_sparse_636_str();
  inline void clear_has_sparse_636_str();
  inline void set_has_sparse_637_str();
  inline void clear_has_sparse_637_str();
  inline void set_has_sparse_638_str();
  inline void clear_has_sparse_638_str();
  inline void set_has_sparse_639_str();
  inline void clear_has_sparse_639_str();
  inline void set_has_sparse_640_str();
  inline void clear_has_sparse_640_str();
  inline void set_has_sparse_641_str();
  inline void clear_has_sparse_641_str();
  inline void set_has_sparse_642_str();
  inline void clear_has_sparse_642_str();
  inline void set_has_sparse_643_str();
  inline void clear_has_sparse_643_str();
  inline void set_has_sparse_644_str();
  inline void clear_has_sparse_644_str();
  inline void set_has_sparse_645_str();
  inline void clear_has_sparse_645_str();
  inline void set_has_sparse_646_str();
  inline void clear_has_sparse_646_str();
  inline void set_has_sparse_647_str();
  inline void clear_has_sparse_647_str();
  inline void set_has_sparse_648_str();
  inline void clear_has_sparse_648_str();
  inline void set_has_sparse_649_str();
  inline void clear_has_sparse_649_str();
  inline void set_has_sparse_650_str();
  inline void clear_has_sparse_650_str();
  inline void set_has_sparse_651_str();
  inline void clear_has_sparse_651_str();
  inline void set_has_sparse_652_str();
  inline void clear_has_sparse_652_str();
  inline void set_has_sparse_653_str();
  inline void clear_has_sparse_653_str();
  inline void set_has_sparse_654_str();
  inline void clear_has_sparse_654_str();
  inline void set_has_sparse_655_str();
  inline void clear_has_sparse_655_str();
  inline void set_has_sparse_656_str();
  inline void clear_has_sparse_656_str();
  inline void set_has_sparse_657_str();
  inline void clear_has_sparse_657_str();
  inline void set_has_sparse_658_str();
  inline void clear_has_sparse_658_str();
  inline void set_has_sparse_659_str();
  inline void clear_has_sparse_659_str();
  inline void set_has_sparse_660_str();
  inline void clear_has_sparse_660_str();
  inline void set_has_sparse_661_str();
  inline void clear_has_sparse_661_str();
  inline void set_has_sparse_662_str();
  inline void clear_has_sparse_662_str();
  inline void set_has_sparse_663_str();
  inline void clear_has_sparse_663_str();
  inline void set_has_sparse_664_str();
  inline void clear_has_sparse_664_str();
  inline void set_has_sparse_665_str();
  inline void clear_has_sparse_665_str();
  inline void set_has_sparse_666_str();
  inline void clear_has_sparse_666_str();
  inline void set_has_sparse_667_str();
  inline void clear_has_sparse_667_str();
  inline void set_has_sparse_668_str();
  inline void clear_has_sparse_668_str();
  inline void set_has_sparse_669_str();
  inline void clear_has_sparse_669_str();
  inline void set_has_sparse_670_str();
  inline void clear_has_sparse_670_str();
  inline void set_has_sparse_671_str();
  inline void clear_has_sparse_671_str();
  inline void set_has_sparse_672_str();
  inline void clear_has_sparse_672_str();
  inline void set_has_sparse_673_str();
  inline void clear_has_sparse_673_str();
  inline void set_has_sparse_674_str();
  inline void clear_has_sparse_674_str();
  inline void set_has_sparse_675_str();
  inline void clear_has_sparse_675_str();
  inline void set_has_sparse_676_str();
  inline void clear_has_sparse_676_str();
  inline void set_has_sparse_677_str();
  inline void clear_has_sparse_677_str();
  inline void set_has_sparse_678_str();
  inline void clear_has_sparse_678_str();
  inline void set_has_sparse_679_str();
  inline void clear_has_sparse_679_str();
  inline void set_has_sparse_680_str();
  inline void clear_has_sparse_680_str();
  inline void set_has_sparse_681_str();
  inline void clear_has_sparse_681_str();
  inline void set_has_sparse_682_str();
  inline void clear_has_sparse_682_str();
  inline void set_has_sparse_683_str();
  inline void clear_has_sparse_683_str();
  inline void set_has_sparse_684_str();
  inline void clear_has_sparse_684_str();
  inline void set_has_sparse_685_str();
  inline void clear_has_sparse_685_str();
  inline void set_has_sparse_686_str();
  inline void clear_has_sparse_686_str();
  inline void set_has_sparse_687_str();
  inline void clear_has_sparse_687_str();
  inline void set_has_sparse_688_str();
  inline void clear_has_sparse_688_str();
  inline void set_has_sparse_689_str();
  inline void clear_has_sparse_689_str();
  inline void set_has_sparse_690_str();
  inline void clear_has_sparse_690_str();
  inline void set_has_sparse_691_str();
  inline void clear_has_sparse_691_str();
  inline void set_has_sparse_692_str();
  inline void clear_has_sparse_692_str();
  inline void set_has_sparse_693_str();
  inline void clear_has_sparse_693_str();
  inline void set_has_sparse_694_str();
  inline void clear_has_sparse_694_str();
  inline void set_has_sparse_695_str();
  inline void clear_has_sparse_695_str();
  inline void set_has_sparse_696_str();
  inline void clear_has_sparse_696_str();
  inline void set_has_sparse_697_str();
  inline void clear_has_sparse_697_str();
  inline void set_has_sparse_698_str();
  inline void clear_has_sparse_698_str();
  inline void set_has_sparse_699_str();
  inline void clear_has_sparse_699_str();
  inline void set_has_sparse_700_str();
  inline void clear_has_sparse_700_str();
  inline void set_has_sparse_701_str();
  inline void clear_has_sparse_701_str();
  inline void set_has_sparse_702_str();
  inline void clear_has_sparse_702_str();
  inline void set_has_sparse_703_str();
  inline void clear_has_sparse_703_str();
  inline void set_has_sparse_704_str();
  inline void clear_has_sparse_704_str();
  inline void set_has_sparse_705_str();
  inline void clear_has_sparse_705_str();
  inline void set_has_sparse_706_str();
  inline void clear_has_sparse_706_str();
  inline void set_has_sparse_707_str();
  inline void clear_has_sparse_707_str();
  inline void set_has_sparse_708_str();
  inline void clear_has_sparse_708_str();
  inline void set_has_sparse_709_str();
  inline void clear_has_sparse_709_str();
  inline void set_has_sparse_710_str();
  inline void clear_has_sparse_710_str();
  inline void set_has_sparse_711_str();
  inline void clear_has_sparse_711_str();
  inline void set_has_sparse_712_str();
  inline void clear_has_sparse_712_str();
  inline void set_has_sparse_713_str();
  inline void clear_has_sparse_713_str();
  inline void set_has_sparse_714_str();
  inline void clear_has_sparse_714_str();
  inline void set_has_sparse_715_str();
  inline void clear_has_sparse_715_str();
  inline void set_has_sparse_716_str();
  inline void clear_has_sparse_716_str();
  inline void set_has_sparse_717_str();
  inline void clear_has_sparse_717_str();
  inline void set_has_sparse_718_str();
  inline void clear_has_sparse_718_str();
  inline void set_has_sparse_719_str();
  inline void clear_has_sparse_719_str();
  inline void set_has_sparse_720_str();
  inline void clear_has_sparse_720_str();
  inline void set_has_sparse_721_str();
  inline void clear_has_sparse_721_str();
  inline void set_has_sparse_722_str();
  inline void clear_has_sparse_722_str();
  inline void set_has_sparse_723_str();
  inline void clear_has_sparse_723_str();
  inline void set_has_sparse_724_str();
  inline void clear_has_sparse_724_str();
  inline void set_has_sparse_725_str();
  inline void clear_has_sparse_725_str();
  inline void set_has_sparse_726_str();
  inline void clear_has_sparse_726_str();
  inline void set_has_sparse_727_str();
  inline void clear_has_sparse_727_str();
  inline void set_has_sparse_728_str();
  inline void clear_has_sparse_728_str();
  inline void set_has_sparse_729_str();
  inline void clear_has_sparse_729_str();
  inline void set_has_sparse_730_str();
  inline void clear_has_sparse_730_str();
  inline void set_has_sparse_731_str();
  inline void clear_has_sparse_731_str();
  inline void set_has_sparse_732_str();
  inline void clear_has_sparse_732_str();
  inline void set_has_sparse_733_str();
  inline void clear_has_sparse_733_str();
  inline void set_has_sparse_734_str();
  inline void clear_has_sparse_734_str();
  inline void set_has_sparse_735_str();
  inline void clear_has_sparse_735_str();
  inline void set_has_sparse_736_str();
  inline void clear_has_sparse_736_str();
  inline void set_has_sparse_737_str();
  inline void clear_has_sparse_737_str();
  inline void set_has_sparse_738_str();
  inline void clear_has_sparse_738_str();
  inline void set_has_sparse_739_str();
  inline void clear_has_sparse_739_str();
  inline void set_has_sparse_740_str();
  inline void clear_has_sparse_740_str();
  inline void set_has_sparse_741_str();
  inline void clear_has_sparse_741_str();
  inline void set_has_sparse_742_str();
  inline void clear_has_sparse_742_str();
  inline void set_has_sparse_743_str();
  inline void clear_has_sparse_743_str();
  inline void set_has_sparse_744_str();
  inline void clear_has_sparse_744_str();
  inline void set_has_sparse_745_str();
  inline void clear_has_sparse_745_str();
  inline void set_has_sparse_746_str();
  inline void clear_has_sparse_746_str();
  inline void set_has_sparse_747_str();
  inline void clear_has_sparse_747_str();
  inline void set_has_sparse_748_str();
  inline void clear_has_sparse_748_str();
  inline void set_has_sparse_749_str();
  inline void clear_has_sparse_749_str();
  inline void set_has_sparse_750_str();
  inline void clear_has_sparse_750_str();
  inline void set_has_sparse_751_str();
  inline void clear_has_sparse_751_str();
  inline void set_has_sparse_752_str();
  inline void clear_has_sparse_752_str();
  inline void set_has_sparse_753_str();
  inline void clear_has_sparse_753_str();
  inline void set_has_sparse_754_str();
  inline void clear_has_sparse_754_str();
  inline void set_has_sparse_755_str();
  inline void clear_has_sparse_755_str();
  inline void set_has_sparse_756_str();
  inline void clear_has_sparse_756_str();
  inline void set_has_sparse_757_str();
  inline void clear_has_sparse_757_str();
  inline void set_has_sparse_758_str();
  inline void clear_has_sparse_758_str();
  inline void set_has_sparse_759_str();
  inline void clear_has_sparse_759_str();
  inline void set_has_sparse_760_str();
  inline void clear_has_sparse_760_str();
  inline void set_has_sparse_761_str();
  inline void clear_has_sparse_761_str();
  inline void set_has_sparse_762_str();
  inline void clear_has_sparse_762_str();
  inline void set_has_sparse_763_str();
  inline void clear_has_sparse_763_str();
  inline void set_has_sparse_764_str();
  inline void clear_has_sparse_764_str();
  inline void set_has_sparse_765_str();
  inline void clear_has_sparse_765_str();
  inline void set_has_sparse_766_str();
  inline void clear_has_sparse_766_str();
  inline void set_has_sparse_767_str();
  inline void clear_has_sparse_767_str();
  inline void set_has_sparse_768_str();
  inline void clear_has_sparse_768_str();
  inline void set_has_sparse_769_str();
  inline void clear_has_sparse_769_str();
  inline void set_has_sparse_770_str();
  inline void clear_has_sparse_770_str();
  inline void set_has_sparse_771_str();
  inline void clear_has_sparse_771_str();
  inline void set_has_sparse_772_str();
  inline void clear_has_sparse_772_str();
  inline void set_has_sparse_773_str();
  inline void clear_has_sparse_773_str();
  inline void set_has_sparse_774_str();
  inline void clear_has_sparse_774_str();
  inline void set_has_sparse_775_str();
  inline void clear_has_sparse_775_str();
  inline void set_has_sparse_776_str();
  inline void clear_has_sparse_776_str();
  inline void set_has_sparse_777_str();
  inline void clear_has_sparse_777_str();
  inline void set_has_sparse_778_str();
  inline void clear_has_sparse_778_str();
  inline void set_has_sparse_779_str();
  inline void clear_has_sparse_779_str();
  inline void set_has_sparse_780_str();
  inline void clear_has_sparse_780_str();
  inline void set_has_sparse_781_str();
  inline void clear_has_sparse_781_str();
  inline void set_has_sparse_782_str();
  inline void clear_has_sparse_782_str();
  inline void set_has_sparse_783_str();
  inline void clear_has_sparse_783_str();
  inline void set_has_sparse_784_str();
  inline void clear_has_sparse_784_str();
  inline void set_has_sparse_785_str();
  inline void clear_has_sparse_785_str();
  inline void set_has_sparse_786_str();
  inline void clear_has_sparse_786_str();
  inline void set_has_sparse_787_str();
  inline void clear_has_sparse_787_str();
  inline void set_has_sparse_788_str();
  inline void clear_has_sparse_788_str();
  inline void set_has_sparse_789_str();
  inline void clear_has_sparse_789_str();
  inline void set_has_sparse_790_str();
  inline void clear_has_sparse_790_str();
  inline void set_has_sparse_791_str();
  inline void clear_has_sparse_791_str();
  inline void set_has_sparse_792_str();
  inline void clear_has_sparse_792_str();
  inline void set_has_sparse_793_str();
  inline void clear_has_sparse_793_str();
  inline void set_has_sparse_794_str();
  inline void clear_has_sparse_794_str();
  inline void set_has_sparse_795_str();
  inline void clear_has_sparse_795_str();
  inline void set_has_sparse_796_str();
  inline void clear_has_sparse_796_str();
  inline void set_has_sparse_797_str();
  inline void clear_has_sparse_797_str();
  inline void set_has_sparse_798_str();
  inline void clear_has_sparse_798_str();
  inline void set_has_sparse_799_str();
  inline void clear_has_sparse_799_str();
  inline void set_has_sparse_800_str();
  inline void clear_has_sparse_800_str();
  inline void set_has_sparse_801_str();
  inline void clear_has_sparse_801_str();
  inline void set_has_sparse_802_str();
  inline void clear_has_sparse_802_str();
  inline void set_has_sparse_803_str();
  inline void clear_has_sparse_803_str();
  inline void set_has_sparse_804_str();
  inline void clear_has_sparse_804_str();
  inline void set_has_sparse_805_str();
  inline void clear_has_sparse_805_str();
  inline void set_has_sparse_806_str();
  inline void clear_has_sparse_806_str();
  inline void set_has_sparse_807_str();
  inline void clear_has_sparse_807_str();
  inline void set_has_sparse_808_str();
  inline void clear_has_sparse_808_str();
  inline void set_has_sparse_809_str();
  inline void clear_has_sparse_809_str();
  inline void set_has_sparse_810_str();
  inline void clear_has_sparse_810_str();
  inline void set_has_sparse_811_str();
  inline void clear_has_sparse_811_str();
  inline void set_has_sparse_812_str();
  inline void clear_has_sparse_812_str();
  inline void set_has_sparse_813_str();
  inline void clear_has_sparse_813_str();
  inline void set_has_sparse_814_str();
  inline void clear_has_sparse_814_str();
  inline void set_has_sparse_815_str();
  inline void clear_has_sparse_815_str();
  inline void set_has_sparse_816_str();
  inline void clear_has_sparse_816_str();
  inline void set_has_sparse_817_str();
  inline void clear_has_sparse_817_str();
  inline void set_has_sparse_818_str();
  inline void clear_has_sparse_818_str();
  inline void set_has_sparse_819_str();
  inline void clear_has_sparse_819_str();
  inline void set_has_sparse_820_str();
  inline void clear_has_sparse_820_str();
  inline void set_has_sparse_821_str();
  inline void clear_has_sparse_821_str();
  inline void set_has_sparse_822_str();
  inline void clear_has_sparse_822_str();
  inline void set_has_sparse_823_str();
  inline void clear_has_sparse_823_str();
  inline void set_has_sparse_824_str();
  inline void clear_has_sparse_824_str();
  inline void set_has_sparse_825_str();
  inline void clear_has_sparse_825_str();
  inline void set_has_sparse_826_str();
  inline void clear_has_sparse_826_str();
  inline void set_has_sparse_827_str();
  inline void clear_has_sparse_827_str();
  inline void set_has_sparse_828_str();
  inline void clear_has_sparse_828_str();
  inline void set_has_sparse_829_str();
  inline void clear_has_sparse_829_str();
  inline void set_has_sparse_830_str();
  inline void clear_has_sparse_830_str();
  inline void set_has_sparse_831_str();
  inline void clear_has_sparse_831_str();
  inline void set_has_sparse_832_str();
  inline void clear_has_sparse_832_str();
  inline void set_has_sparse_833_str();
  inline void clear_has_sparse_833_str();
  inline void set_has_sparse_834_str();
  inline void clear_has_sparse_834_str();
  inline void set_has_sparse_835_str();
  inline void clear_has_sparse_835_str();
  inline void set_has_sparse_836_str();
  inline void clear_has_sparse_836_str();
  inline void set_has_sparse_837_str();
  inline void clear_has_sparse_837_str();
  inline void set_has_sparse_838_str();
  inline void clear_has_sparse_838_str();
  inline void set_has_sparse_839_str();
  inline void clear_has_sparse_839_str();
  inline void set_has_sparse_840_str();
  inline void clear_has_sparse_840_str();
  inline void set_has_sparse_841_str();
  inline void clear_has_sparse_841_str();
  inline void set_has_sparse_842_str();
  inline void clear_has_sparse_842_str();
  inline void set_has_sparse_843_str();
  inline void clear_has_sparse_843_str();
  inline void set_has_sparse_844_str();
  inline void clear_has_sparse_844_str();
  inline void set_has_sparse_845_str();
  inline void clear_has_sparse_845_str();
  inline void set_has_sparse_846_str();
  inline void clear_has_sparse_846_str();
  inline void set_has_sparse_847_str();
  inline void clear_has_sparse_847_str();
  inline void set_has_sparse_848_str();
  inline void clear_has_sparse_848_str();
  inline void set_has_sparse_849_str();
  inline void clear_has_sparse_849_str();
  inline void set_has_sparse_850_str();
  inline void clear_has_sparse_850_str();
  inline void set_has_sparse_851_str();
  inline void clear_has_sparse_851_str();
  inline void set_has_sparse_852_str();
  inline void clear_has_sparse_852_str();
  inline void set_has_sparse_853_str();
  inline void clear_has_sparse_853_str();
  inline void set_has_sparse_854_str();
  inline void clear_has_sparse_854_str();
  inline void set_has_sparse_855_str();
  inline void clear_has_sparse_855_str();
  inline void set_has_sparse_856_str();
  inline void clear_has_sparse_856_str();
  inline void set_has_sparse_857_str();
  inline void clear_has_sparse_857_str();
  inline void set_has_sparse_858_str();
  inline void clear_has_sparse_858_str();
  inline void set_has_sparse_859_str();
  inline void clear_has_sparse_859_str();
  inline void set_has_sparse_860_str();
  inline void clear_has_sparse_860_str();
  inline void set_has_sparse_861_str();
  inline void clear_has_sparse_861_str();
  inline void set_has_sparse_862_str();
  inline void clear_has_sparse_862_str();
  inline void set_has_sparse_863_str();
  inline void clear_has_sparse_863_str();
  inline void set_has_sparse_864_str();
  inline void clear_has_sparse_864_str();
  inline void set_has_sparse_865_str();
  inline void clear_has_sparse_865_str();
  inline void set_has_sparse_866_str();
  inline void clear_has_sparse_866_str();
  inline void set_has_sparse_867_str();
  inline void clear_has_sparse_867_str();
  inline void set_has_sparse_868_str();
  inline void clear_has_sparse_868_str();
  inline void set_has_sparse_869_str();
  inline void clear_has_sparse_869_str();
  inline void set_has_sparse_870_str();
  inline void clear_has_sparse_870_str();
  inline void set_has_sparse_871_str();
  inline void clear_has_sparse_871_str();
  inline void set_has_sparse_872_str();
  inline void clear_has_sparse_872_str();
  inline void set_has_sparse_873_str();
  inline void clear_has_sparse_873_str();
  inline void set_has_sparse_874_str();
  inline void clear_has_sparse_874_str();
  inline void set_has_sparse_875_str();
  inline void clear_has_sparse_875_str();
  inline void set_has_sparse_876_str();
  inline void clear_has_sparse_876_str();
  inline void set_has_sparse_877_str();
  inline void clear_has_sparse_877_str();
  inline void set_has_sparse_878_str();
  inline void clear_has_sparse_878_str();
  inline void set_has_sparse_879_str();
  inline void clear_has_sparse_879_str();
  inline void set_has_sparse_880_str();
  inline void clear_has_sparse_880_str();
  inline void set_has_sparse_881_str();
  inline void clear_has_sparse_881_str();
  inline void set_has_sparse_882_str();
  inline void clear_has_sparse_882_str();
  inline void set_has_sparse_883_str();
  inline void clear_has_sparse_883_str();
  inline void set_has_sparse_884_str();
  inline void clear_has_sparse_884_str();
  inline void set_has_sparse_885_str();
  inline void clear_has_sparse_885_str();
  inline void set_has_sparse_886_str();
  inline void clear_has_sparse_886_str();
  inline void set_has_sparse_887_str();
  inline void clear_has_sparse_887_str();
  inline void set_has_sparse_888_str();
  inline void clear_has_sparse_888_str();
  inline void set_has_sparse_889_str();
  inline void clear_has_sparse_889_str();
  inline void set_has_sparse_890_str();
  inline void clear_has_sparse_890_str();
  inline void set_has_sparse_891_str();
  inline void clear_has_sparse_891_str();
  inline void set_has_sparse_892_str();
  inline void clear_has_sparse_892_str();
  inline void set_has_sparse_893_str();
  inline void clear_has_sparse_893_str();
  inline void set_has_sparse_894_str();
  inline void clear_has_sparse_894_str();
  inline void set_has_sparse_895_str();
  inline void clear_has_sparse_895_str();
  inline void set_has_sparse_896_str();
  inline void clear_has_sparse_896_str();
  inline void set_has_sparse_897_str();
  inline void clear_has_sparse_897_str();
  inline void set_has_sparse_898_str();
  inline void clear_has_sparse_898_str();
  inline void set_has_sparse_899_str();
  inline void clear_has_sparse_899_str();
  inline void set_has_sparse_900_str();
  inline void clear_has_sparse_900_str();
  inline void set_has_sparse_901_str();
  inline void clear_has_sparse_901_str();
  inline void set_has_sparse_902_str();
  inline void clear_has_sparse_902_str();
  inline void set_has_sparse_903_str();
  inline void clear_has_sparse_903_str();
  inline void set_has_sparse_904_str();
  inline void clear_has_sparse_904_str();
  inline void set_has_sparse_905_str();
  inline void clear_has_sparse_905_str();
  inline void set_has_sparse_906_str();
  inline void clear_has_sparse_906_str();
  inline void set_has_sparse_907_str();
  inline void clear_has_sparse_907_str();
  inline void set_has_sparse_908_str();
  inline void clear_has_sparse_908_str();
  inline void set_has_sparse_909_str();
  inline void clear_has_sparse_909_str();
  inline void set_has_sparse_910_str();
  inline void clear_has_sparse_910_str();
  inline void set_has_sparse_911_str();
  inline void clear_has_sparse_911_str();
  inline void set_has_sparse_912_str();
  inline void clear_has_sparse_912_str();
  inline void set_has_sparse_913_str();
  inline void clear_has_sparse_913_str();
  inline void set_has_sparse_914_str();
  inline void clear_has_sparse_914_str();
  inline void set_has_sparse_915_str();
  inline void clear_has_sparse_915_str();
  inline void set_has_sparse_916_str();
  inline void clear_has_sparse_916_str();
  inline void set_has_sparse_917_str();
  inline void clear_has_sparse_917_str();
  inline void set_has_sparse_918_str();
  inline void clear_has_sparse_918_str();
  inline void set_has_sparse_919_str();
  inline void clear_has_sparse_919_str();
  inline void set_has_sparse_920_str();
  inline void clear_has_sparse_920_str();
  inline void set_has_sparse_921_str();
  inline void clear_has_sparse_921_str();
  inline void set_has_sparse_922_str();
  inline void clear_has_sparse_922_str();
  inline void set_has_sparse_923_str();
  inline void clear_has_sparse_923_str();
  inline void set_has_sparse_924_str();
  inline void clear_has_sparse_924_str();
  inline void set_has_sparse_925_str();
  inline void clear_has_sparse_925_str();
  inline void set_has_sparse_926_str();
  inline void clear_has_sparse_926_str();
  inline void set_has_sparse_927_str();
  inline void clear_has_sparse_927_str();
  inline void set_has_sparse_928_str();
  inline void clear_has_sparse_928_str();
  inline void set_has_sparse_929_str();
  inline void clear_has_sparse_929_str();
  inline void set_has_sparse_930_str();
  inline void clear_has_sparse_930_str();
  inline void set_has_sparse_931_str();
  inline void clear_has_sparse_931_str();
  inline void set_has_sparse_932_str();
  inline void clear_has_sparse_932_str();
  inline void set_has_sparse_933_str();
  inline void clear_has_sparse_933_str();
  inline void set_has_sparse_934_str();
  inline void clear_has_sparse_934_str();
  inline void set_has_sparse_935_str();
  inline void clear_has_sparse_935_str();
  inline void set_has_sparse_936_str();
  inline void clear_has_sparse_936_str();
  inline void set_has_sparse_937_str();
  inline void clear_has_sparse_937_str();
  inline void set_has_sparse_938_str();
  inline void clear_has_sparse_938_str();
  inline void set_has_sparse_939_str();
  inline void clear_has_sparse_939_str();
  inline void set_has_sparse_940_str();
  inline void clear_has_sparse_940_str();
  inline void set_has_sparse_941_str();
  inline void clear_has_sparse_941_str();
  inline void set_has_sparse_942_str();
  inline void clear_has_sparse_942_str();
  inline void set_has_sparse_943_str();
  inline void clear_has_sparse_943_str();
  inline void set_has_sparse_944_str();
  inline void clear_has_sparse_944_str();
  inline void set_has_sparse_945_str();
  inline void clear_has_sparse_945_str();
  inline void set_has_sparse_946_str();
  inline void clear_has_sparse_946_str();
  inline void set_has_sparse_947_str();
  inline void clear_has_sparse_947_str();
  inline void set_has_sparse_948_str();
  inline void clear_has_sparse_948_str();
  inline void set_has_sparse_949_str();
  inline void clear_has_sparse_949_str();
  inline void set_has_sparse_950_str();
  inline void clear_has_sparse_950_str();
  inline void set_has_sparse_951_str();
  inline void clear_has_sparse_951_str();
  inline void set_has_sparse_952_str();
  inline void clear_has_sparse_952_str();
  inline void set_has_sparse_953_str();
  inline void clear_has_sparse_953_str();
  inline void set_has_sparse_954_str();
  inline void clear_has_sparse_954_str();
  inline void set_has_sparse_955_str();
  inline void clear_has_sparse_955_str();
  inline void set_has_sparse_956_str();
  inline void clear_has_sparse_956_str();
  inline void set_has_sparse_957_str();
  inline void clear_has_sparse_957_str();
  inline void set_has_sparse_958_str();
  inline void clear_has_sparse_958_str();
  inline void set_has_sparse_959_str();
  inline void clear_has_sparse_959_str();
  inline void set_has_sparse_960_str();
  inline void clear_has_sparse_960_str();
  inline void set_has_sparse_961_str();
  inline void clear_has_sparse_961_str();
  inline void set_has_sparse_962_str();
  inline void clear_has_sparse_962_str();
  inline void set_has_sparse_963_str();
  inline void clear_has_sparse_963_str();
  inline void set_has_sparse_964_str();
  inline void clear_has_sparse_964_str();
  inline void set_has_sparse_965_str();
  inline void clear_has_sparse_965_str();
  inline void set_has_sparse_966_str();
  inline void clear_has_sparse_966_str();
  inline void set_has_sparse_967_str();
  inline void clear_has_sparse_967_str();
  inline void set_has_sparse_968_str();
  inline void clear_has_sparse_968_str();
  inline void set_has_sparse_969_str();
  inline void clear_has_sparse_969_str();
  inline void set_has_sparse_970_str();
  inline void clear_has_sparse_970_str();
  inline void set_has_sparse_971_str();
  inline void clear_has_sparse_971_str();
  inline void set_has_sparse_972_str();
  inline void clear_has_sparse_972_str();
  inline void set_has_sparse_973_str();
  inline void clear_has_sparse_973_str();
  inline void set_has_sparse_974_str();
  inline void clear_has_sparse_974_str();
  inline void set_has_sparse_975_str();
  inline void clear_has_sparse_975_str();
  inline void set_has_sparse_976_str();
  inline void clear_has_sparse_976_str();
  inline void set_has_sparse_977_str();
  inline void clear_has_sparse_977_str();
  inline void set_has_sparse_978_str();
  inline void clear_has_sparse_978_str();
  inline void set_has_sparse_979_str();
  inline void clear_has_sparse_979_str();
  inline void set_has_sparse_980_str();
  inline void clear_has_sparse_980_str();
  inline void set_has_sparse_981_str();
  inline void clear_has_sparse_981_str();
  inline void set_has_sparse_982_str();
  inline void clear_has_sparse_982_str();
  inline void set_has_sparse_983_str();
  inline void clear_has_sparse_983_str();
  inline void set_has_sparse_984_str();
  inline void clear_has_sparse_984_str();
  inline void set_has_sparse_985_str();
  inline void clear_has_sparse_985_str();
  inline void set_has_sparse_986_str();
  inline void clear_has_sparse_986_str();
  inline void set_has_sparse_987_str();
  inline void clear_has_sparse_987_str();
  inline void set_has_sparse_988_str();
  inline void clear_has_sparse_988_str();
  inline void set_has_sparse_989_str();
  inline void clear_has_sparse_989_str();
  inline void set_has_sparse_990_str();
  inline void clear_has_sparse_990_str();
  inline void set_has_sparse_991_str();
  inline void clear_has_sparse_991_str();
  inline void set_has_sparse_992_str();
  inline void clear_has_sparse_992_str();
  inline void set_has_sparse_993_str();
  inline void clear_has_sparse_993_str();
  inline void set_has_sparse_994_str();
  inline void clear_has_sparse_994_str();
  inline void set_has_sparse_995_str();
  inline void clear_has_sparse_995_str();
  inline void set_has_sparse_996_str();
  inline void clear_has_sparse_996_str();
  inline void set_has_sparse_997_str();
  inline void clear_has_sparse_997_str();
  inline void set_has_sparse_998_str();
  inline void clear_has_sparse_998_str();
  inline void set_has_sparse_999_str();
  inline void clear_has_sparse_999_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* str1_str_;
  ::std::string* str2_str_;
  ::google::protobuf::int64 num_int_;
  ::google::protobuf::int64 dyn1_int_;
  ::std::string* dyn1_str_;
  ::google::protobuf::int64 dyn2_int_;
  ::std::string* dyn2_str_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nested_arr_str_;
  ::Database_NoBench_NestedObj* nested_obj_obj_;
  ::google::protobuf::int64 thousandth_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sparse_str_;
  ::std::string* sparse_000_str_;
  ::std::string* sparse_001_str_;
  ::std::string* sparse_002_str_;
  ::std::string* sparse_003_str_;
  ::std::string* sparse_004_str_;
  ::std::string* sparse_005_str_;
  ::std::string* sparse_006_str_;
  ::std::string* sparse_007_str_;
  ::std::string* sparse_008_str_;
  ::std::string* sparse_009_str_;
  ::std::string* sparse_010_str_;
  ::std::string* sparse_011_str_;
  ::std::string* sparse_012_str_;
  ::std::string* sparse_013_str_;
  ::std::string* sparse_014_str_;
  ::std::string* sparse_015_str_;
  ::std::string* sparse_016_str_;
  ::std::string* sparse_017_str_;
  ::std::string* sparse_018_str_;
  ::std::string* sparse_019_str_;
  ::std::string* sparse_020_str_;
  ::std::string* sparse_021_str_;
  ::std::string* sparse_022_str_;
  ::std::string* sparse_023_str_;
  ::std::string* sparse_024_str_;
  ::std::string* sparse_025_str_;
  ::std::string* sparse_026_str_;
  ::std::string* sparse_027_str_;
  ::std::string* sparse_028_str_;
  ::std::string* sparse_029_str_;
  ::std::string* sparse_030_str_;
  ::std::string* sparse_031_str_;
  ::std::string* sparse_032_str_;
  ::std::string* sparse_033_str_;
  ::std::string* sparse_034_str_;
  ::std::string* sparse_035_str_;
  ::std::string* sparse_036_str_;
  ::std::string* sparse_037_str_;
  ::std::string* sparse_038_str_;
  ::std::string* sparse_039_str_;
  ::std::string* sparse_040_str_;
  ::std::string* sparse_041_str_;
  ::std::string* sparse_042_str_;
  ::std::string* sparse_043_str_;
  ::std::string* sparse_044_str_;
  ::std::string* sparse_045_str_;
  ::std::string* sparse_046_str_;
  ::std::string* sparse_047_str_;
  ::std::string* sparse_048_str_;
  ::std::string* sparse_049_str_;
  ::std::string* sparse_050_str_;
  ::std::string* sparse_051_str_;
  ::std::string* sparse_052_str_;
  ::std::string* sparse_053_str_;
  ::std::string* sparse_054_str_;
  ::std::string* sparse_055_str_;
  ::std::string* sparse_056_str_;
  ::std::string* sparse_057_str_;
  ::std::string* sparse_058_str_;
  ::std::string* sparse_059_str_;
  ::std::string* sparse_060_str_;
  ::std::string* sparse_061_str_;
  ::std::string* sparse_062_str_;
  ::std::string* sparse_063_str_;
  ::std::string* sparse_064_str_;
  ::std::string* sparse_065_str_;
  ::std::string* sparse_066_str_;
  ::std::string* sparse_067_str_;
  ::std::string* sparse_068_str_;
  ::std::string* sparse_069_str_;
  ::std::string* sparse_070_str_;
  ::std::string* sparse_071_str_;
  ::std::string* sparse_072_str_;
  ::std::string* sparse_073_str_;
  ::std::string* sparse_074_str_;
  ::std::string* sparse_075_str_;
  ::std::string* sparse_076_str_;
  ::std::string* sparse_077_str_;
  ::std::string* sparse_078_str_;
  ::std::string* sparse_079_str_;
  ::std::string* sparse_080_str_;
  ::std::string* sparse_081_str_;
  ::std::string* sparse_082_str_;
  ::std::string* sparse_083_str_;
  ::std::string* sparse_084_str_;
  ::std::string* sparse_085_str_;
  ::std::string* sparse_086_str_;
  ::std::string* sparse_087_str_;
  ::std::string* sparse_088_str_;
  ::std::string* sparse_089_str_;
  ::std::string* sparse_090_str_;
  ::std::string* sparse_091_str_;
  ::std::string* sparse_092_str_;
  ::std::string* sparse_093_str_;
  ::std::string* sparse_094_str_;
  ::std::string* sparse_095_str_;
  ::std::string* sparse_096_str_;
  ::std::string* sparse_097_str_;
  ::std::string* sparse_098_str_;
  ::std::string* sparse_099_str_;
  ::std::string* sparse_100_str_;
  ::std::string* sparse_101_str_;
  ::std::string* sparse_102_str_;
  ::std::string* sparse_103_str_;
  ::std::string* sparse_104_str_;
  ::std::string* sparse_105_str_;
  ::std::string* sparse_106_str_;
  ::std::string* sparse_107_str_;
  ::std::string* sparse_108_str_;
  ::std::string* sparse_109_str_;
  ::std::string* sparse_110_str_;
  ::std::string* sparse_111_str_;
  ::std::string* sparse_112_str_;
  ::std::string* sparse_113_str_;
  ::std::string* sparse_114_str_;
  ::std::string* sparse_115_str_;
  ::std::string* sparse_116_str_;
  ::std::string* sparse_117_str_;
  ::std::string* sparse_118_str_;
  ::std::string* sparse_119_str_;
  ::std::string* sparse_120_str_;
  ::std::string* sparse_121_str_;
  ::std::string* sparse_122_str_;
  ::std::string* sparse_123_str_;
  ::std::string* sparse_124_str_;
  ::std::string* sparse_125_str_;
  ::std::string* sparse_126_str_;
  ::std::string* sparse_127_str_;
  ::std::string* sparse_128_str_;
  ::std::string* sparse_129_str_;
  ::std::string* sparse_130_str_;
  ::std::string* sparse_131_str_;
  ::std::string* sparse_132_str_;
  ::std::string* sparse_133_str_;
  ::std::string* sparse_134_str_;
  ::std::string* sparse_135_str_;
  ::std::string* sparse_136_str_;
  ::std::string* sparse_137_str_;
  ::std::string* sparse_138_str_;
  ::std::string* sparse_139_str_;
  ::std::string* sparse_140_str_;
  ::std::string* sparse_141_str_;
  ::std::string* sparse_142_str_;
  ::std::string* sparse_143_str_;
  ::std::string* sparse_144_str_;
  ::std::string* sparse_145_str_;
  ::std::string* sparse_146_str_;
  ::std::string* sparse_147_str_;
  ::std::string* sparse_148_str_;
  ::std::string* sparse_149_str_;
  ::std::string* sparse_150_str_;
  ::std::string* sparse_151_str_;
  ::std::string* sparse_152_str_;
  ::std::string* sparse_153_str_;
  ::std::string* sparse_154_str_;
  ::std::string* sparse_155_str_;
  ::std::string* sparse_156_str_;
  ::std::string* sparse_157_str_;
  ::std::string* sparse_158_str_;
  ::std::string* sparse_159_str_;
  ::std::string* sparse_160_str_;
  ::std::string* sparse_161_str_;
  ::std::string* sparse_162_str_;
  ::std::string* sparse_163_str_;
  ::std::string* sparse_164_str_;
  ::std::string* sparse_165_str_;
  ::std::string* sparse_166_str_;
  ::std::string* sparse_167_str_;
  ::std::string* sparse_168_str_;
  ::std::string* sparse_169_str_;
  ::std::string* sparse_170_str_;
  ::std::string* sparse_171_str_;
  ::std::string* sparse_172_str_;
  ::std::string* sparse_173_str_;
  ::std::string* sparse_174_str_;
  ::std::string* sparse_175_str_;
  ::std::string* sparse_176_str_;
  ::std::string* sparse_177_str_;
  ::std::string* sparse_178_str_;
  ::std::string* sparse_179_str_;
  ::std::string* sparse_180_str_;
  ::std::string* sparse_181_str_;
  ::std::string* sparse_182_str_;
  ::std::string* sparse_183_str_;
  ::std::string* sparse_184_str_;
  ::std::string* sparse_185_str_;
  ::std::string* sparse_186_str_;
  ::std::string* sparse_187_str_;
  ::std::string* sparse_188_str_;
  ::std::string* sparse_189_str_;
  ::std::string* sparse_190_str_;
  ::std::string* sparse_191_str_;
  ::std::string* sparse_192_str_;
  ::std::string* sparse_193_str_;
  ::std::string* sparse_194_str_;
  ::std::string* sparse_195_str_;
  ::std::string* sparse_196_str_;
  ::std::string* sparse_197_str_;
  ::std::string* sparse_198_str_;
  ::std::string* sparse_199_str_;
  ::std::string* sparse_200_str_;
  ::std::string* sparse_201_str_;
  ::std::string* sparse_202_str_;
  ::std::string* sparse_203_str_;
  ::std::string* sparse_204_str_;
  ::std::string* sparse_205_str_;
  ::std::string* sparse_206_str_;
  ::std::string* sparse_207_str_;
  ::std::string* sparse_208_str_;
  ::std::string* sparse_209_str_;
  ::std::string* sparse_210_str_;
  ::std::string* sparse_211_str_;
  ::std::string* sparse_212_str_;
  ::std::string* sparse_213_str_;
  ::std::string* sparse_214_str_;
  ::std::string* sparse_215_str_;
  ::std::string* sparse_216_str_;
  ::std::string* sparse_217_str_;
  ::std::string* sparse_218_str_;
  ::std::string* sparse_219_str_;
  ::std::string* sparse_220_str_;
  ::std::string* sparse_221_str_;
  ::std::string* sparse_222_str_;
  ::std::string* sparse_223_str_;
  ::std::string* sparse_224_str_;
  ::std::string* sparse_225_str_;
  ::std::string* sparse_226_str_;
  ::std::string* sparse_227_str_;
  ::std::string* sparse_228_str_;
  ::std::string* sparse_229_str_;
  ::std::string* sparse_230_str_;
  ::std::string* sparse_231_str_;
  ::std::string* sparse_232_str_;
  ::std::string* sparse_233_str_;
  ::std::string* sparse_234_str_;
  ::std::string* sparse_235_str_;
  ::std::string* sparse_236_str_;
  ::std::string* sparse_237_str_;
  ::std::string* sparse_238_str_;
  ::std::string* sparse_239_str_;
  ::std::string* sparse_240_str_;
  ::std::string* sparse_241_str_;
  ::std::string* sparse_242_str_;
  ::std::string* sparse_243_str_;
  ::std::string* sparse_244_str_;
  ::std::string* sparse_245_str_;
  ::std::string* sparse_246_str_;
  ::std::string* sparse_247_str_;
  ::std::string* sparse_248_str_;
  ::std::string* sparse_249_str_;
  ::std::string* sparse_250_str_;
  ::std::string* sparse_251_str_;
  ::std::string* sparse_252_str_;
  ::std::string* sparse_253_str_;
  ::std::string* sparse_254_str_;
  ::std::string* sparse_255_str_;
  ::std::string* sparse_256_str_;
  ::std::string* sparse_257_str_;
  ::std::string* sparse_258_str_;
  ::std::string* sparse_259_str_;
  ::std::string* sparse_260_str_;
  ::std::string* sparse_261_str_;
  ::std::string* sparse_262_str_;
  ::std::string* sparse_263_str_;
  ::std::string* sparse_264_str_;
  ::std::string* sparse_265_str_;
  ::std::string* sparse_266_str_;
  ::std::string* sparse_267_str_;
  ::std::string* sparse_268_str_;
  ::std::string* sparse_269_str_;
  ::std::string* sparse_270_str_;
  ::std::string* sparse_271_str_;
  ::std::string* sparse_272_str_;
  ::std::string* sparse_273_str_;
  ::std::string* sparse_274_str_;
  ::std::string* sparse_275_str_;
  ::std::string* sparse_276_str_;
  ::std::string* sparse_277_str_;
  ::std::string* sparse_278_str_;
  ::std::string* sparse_279_str_;
  ::std::string* sparse_280_str_;
  ::std::string* sparse_281_str_;
  ::std::string* sparse_282_str_;
  ::std::string* sparse_283_str_;
  ::std::string* sparse_284_str_;
  ::std::string* sparse_285_str_;
  ::std::string* sparse_286_str_;
  ::std::string* sparse_287_str_;
  ::std::string* sparse_288_str_;
  ::std::string* sparse_289_str_;
  ::std::string* sparse_290_str_;
  ::std::string* sparse_291_str_;
  ::std::string* sparse_292_str_;
  ::std::string* sparse_293_str_;
  ::std::string* sparse_294_str_;
  ::std::string* sparse_295_str_;
  ::std::string* sparse_296_str_;
  ::std::string* sparse_297_str_;
  ::std::string* sparse_298_str_;
  ::std::string* sparse_299_str_;
  ::std::string* sparse_300_str_;
  ::std::string* sparse_301_str_;
  ::std::string* sparse_302_str_;
  ::std::string* sparse_303_str_;
  ::std::string* sparse_304_str_;
  ::std::string* sparse_305_str_;
  ::std::string* sparse_306_str_;
  ::std::string* sparse_307_str_;
  ::std::string* sparse_308_str_;
  ::std::string* sparse_309_str_;
  ::std::string* sparse_310_str_;
  ::std::string* sparse_311_str_;
  ::std::string* sparse_312_str_;
  ::std::string* sparse_313_str_;
  ::std::string* sparse_314_str_;
  ::std::string* sparse_315_str_;
  ::std::string* sparse_316_str_;
  ::std::string* sparse_317_str_;
  ::std::string* sparse_318_str_;
  ::std::string* sparse_319_str_;
  ::std::string* sparse_320_str_;
  ::std::string* sparse_321_str_;
  ::std::string* sparse_322_str_;
  ::std::string* sparse_323_str_;
  ::std::string* sparse_324_str_;
  ::std::string* sparse_325_str_;
  ::std::string* sparse_326_str_;
  ::std::string* sparse_327_str_;
  ::std::string* sparse_328_str_;
  ::std::string* sparse_329_str_;
  ::std::string* sparse_330_str_;
  ::std::string* sparse_331_str_;
  ::std::string* sparse_332_str_;
  ::std::string* sparse_333_str_;
  ::std::string* sparse_334_str_;
  ::std::string* sparse_335_str_;
  ::std::string* sparse_336_str_;
  ::std::string* sparse_337_str_;
  ::std::string* sparse_338_str_;
  ::std::string* sparse_339_str_;
  ::std::string* sparse_340_str_;
  ::std::string* sparse_341_str_;
  ::std::string* sparse_342_str_;
  ::std::string* sparse_343_str_;
  ::std::string* sparse_344_str_;
  ::std::string* sparse_345_str_;
  ::std::string* sparse_346_str_;
  ::std::string* sparse_347_str_;
  ::std::string* sparse_348_str_;
  ::std::string* sparse_349_str_;
  ::std::string* sparse_350_str_;
  ::std::string* sparse_351_str_;
  ::std::string* sparse_352_str_;
  ::std::string* sparse_353_str_;
  ::std::string* sparse_354_str_;
  ::std::string* sparse_355_str_;
  ::std::string* sparse_356_str_;
  ::std::string* sparse_357_str_;
  ::std::string* sparse_358_str_;
  ::std::string* sparse_359_str_;
  ::std::string* sparse_360_str_;
  ::std::string* sparse_361_str_;
  ::std::string* sparse_362_str_;
  ::std::string* sparse_363_str_;
  ::std::string* sparse_364_str_;
  ::std::string* sparse_365_str_;
  ::std::string* sparse_366_str_;
  ::std::string* sparse_367_str_;
  ::std::string* sparse_368_str_;
  ::std::string* sparse_369_str_;
  ::std::string* sparse_370_str_;
  ::std::string* sparse_371_str_;
  ::std::string* sparse_372_str_;
  ::std::string* sparse_373_str_;
  ::std::string* sparse_374_str_;
  ::std::string* sparse_375_str_;
  ::std::string* sparse_376_str_;
  ::std::string* sparse_377_str_;
  ::std::string* sparse_378_str_;
  ::std::string* sparse_379_str_;
  ::std::string* sparse_380_str_;
  ::std::string* sparse_381_str_;
  ::std::string* sparse_382_str_;
  ::std::string* sparse_383_str_;
  ::std::string* sparse_384_str_;
  ::std::string* sparse_385_str_;
  ::std::string* sparse_386_str_;
  ::std::string* sparse_387_str_;
  ::std::string* sparse_388_str_;
  ::std::string* sparse_389_str_;
  ::std::string* sparse_390_str_;
  ::std::string* sparse_391_str_;
  ::std::string* sparse_392_str_;
  ::std::string* sparse_393_str_;
  ::std::string* sparse_394_str_;
  ::std::string* sparse_395_str_;
  ::std::string* sparse_396_str_;
  ::std::string* sparse_397_str_;
  ::std::string* sparse_398_str_;
  ::std::string* sparse_399_str_;
  ::std::string* sparse_400_str_;
  ::std::string* sparse_401_str_;
  ::std::string* sparse_402_str_;
  ::std::string* sparse_403_str_;
  ::std::string* sparse_404_str_;
  ::std::string* sparse_405_str_;
  ::std::string* sparse_406_str_;
  ::std::string* sparse_407_str_;
  ::std::string* sparse_408_str_;
  ::std::string* sparse_409_str_;
  ::std::string* sparse_410_str_;
  ::std::string* sparse_411_str_;
  ::std::string* sparse_412_str_;
  ::std::string* sparse_413_str_;
  ::std::string* sparse_414_str_;
  ::std::string* sparse_415_str_;
  ::std::string* sparse_416_str_;
  ::std::string* sparse_417_str_;
  ::std::string* sparse_418_str_;
  ::std::string* sparse_419_str_;
  ::std::string* sparse_420_str_;
  ::std::string* sparse_421_str_;
  ::std::string* sparse_422_str_;
  ::std::string* sparse_423_str_;
  ::std::string* sparse_424_str_;
  ::std::string* sparse_425_str_;
  ::std::string* sparse_426_str_;
  ::std::string* sparse_427_str_;
  ::std::string* sparse_428_str_;
  ::std::string* sparse_429_str_;
  ::std::string* sparse_430_str_;
  ::std::string* sparse_431_str_;
  ::std::string* sparse_432_str_;
  ::std::string* sparse_433_str_;
  ::std::string* sparse_434_str_;
  ::std::string* sparse_435_str_;
  ::std::string* sparse_436_str_;
  ::std::string* sparse_437_str_;
  ::std::string* sparse_438_str_;
  ::std::string* sparse_439_str_;
  ::std::string* sparse_440_str_;
  ::std::string* sparse_441_str_;
  ::std::string* sparse_442_str_;
  ::std::string* sparse_443_str_;
  ::std::string* sparse_444_str_;
  ::std::string* sparse_445_str_;
  ::std::string* sparse_446_str_;
  ::std::string* sparse_447_str_;
  ::std::string* sparse_448_str_;
  ::std::string* sparse_449_str_;
  ::std::string* sparse_450_str_;
  ::std::string* sparse_451_str_;
  ::std::string* sparse_452_str_;
  ::std::string* sparse_453_str_;
  ::std::string* sparse_454_str_;
  ::std::string* sparse_455_str_;
  ::std::string* sparse_456_str_;
  ::std::string* sparse_457_str_;
  ::std::string* sparse_458_str_;
  ::std::string* sparse_459_str_;
  ::std::string* sparse_460_str_;
  ::std::string* sparse_461_str_;
  ::std::string* sparse_462_str_;
  ::std::string* sparse_463_str_;
  ::std::string* sparse_464_str_;
  ::std::string* sparse_465_str_;
  ::std::string* sparse_466_str_;
  ::std::string* sparse_467_str_;
  ::std::string* sparse_468_str_;
  ::std::string* sparse_469_str_;
  ::std::string* sparse_470_str_;
  ::std::string* sparse_471_str_;
  ::std::string* sparse_472_str_;
  ::std::string* sparse_473_str_;
  ::std::string* sparse_474_str_;
  ::std::string* sparse_475_str_;
  ::std::string* sparse_476_str_;
  ::std::string* sparse_477_str_;
  ::std::string* sparse_478_str_;
  ::std::string* sparse_479_str_;
  ::std::string* sparse_480_str_;
  ::std::string* sparse_481_str_;
  ::std::string* sparse_482_str_;
  ::std::string* sparse_483_str_;
  ::std::string* sparse_484_str_;
  ::std::string* sparse_485_str_;
  ::std::string* sparse_486_str_;
  ::std::string* sparse_487_str_;
  ::std::string* sparse_488_str_;
  ::std::string* sparse_489_str_;
  ::std::string* sparse_490_str_;
  ::std::string* sparse_491_str_;
  ::std::string* sparse_492_str_;
  ::std::string* sparse_493_str_;
  ::std::string* sparse_494_str_;
  ::std::string* sparse_495_str_;
  ::std::string* sparse_496_str_;
  ::std::string* sparse_497_str_;
  ::std::string* sparse_498_str_;
  ::std::string* sparse_499_str_;
  ::std::string* sparse_500_str_;
  ::std::string* sparse_501_str_;
  ::std::string* sparse_502_str_;
  ::std::string* sparse_503_str_;
  ::std::string* sparse_504_str_;
  ::std::string* sparse_505_str_;
  ::std::string* sparse_506_str_;
  ::std::string* sparse_507_str_;
  ::std::string* sparse_508_str_;
  ::std::string* sparse_509_str_;
  ::std::string* sparse_510_str_;
  ::std::string* sparse_511_str_;
  ::std::string* sparse_512_str_;
  ::std::string* sparse_513_str_;
  ::std::string* sparse_514_str_;
  ::std::string* sparse_515_str_;
  ::std::string* sparse_516_str_;
  ::std::string* sparse_517_str_;
  ::std::string* sparse_518_str_;
  ::std::string* sparse_519_str_;
  ::std::string* sparse_520_str_;
  ::std::string* sparse_521_str_;
  ::std::string* sparse_522_str_;
  ::std::string* sparse_523_str_;
  ::std::string* sparse_524_str_;
  ::std::string* sparse_525_str_;
  ::std::string* sparse_526_str_;
  ::std::string* sparse_527_str_;
  ::std::string* sparse_528_str_;
  ::std::string* sparse_529_str_;
  ::std::string* sparse_530_str_;
  ::std::string* sparse_531_str_;
  ::std::string* sparse_532_str_;
  ::std::string* sparse_533_str_;
  ::std::string* sparse_534_str_;
  ::std::string* sparse_535_str_;
  ::std::string* sparse_536_str_;
  ::std::string* sparse_537_str_;
  ::std::string* sparse_538_str_;
  ::std::string* sparse_539_str_;
  ::std::string* sparse_540_str_;
  ::std::string* sparse_541_str_;
  ::std::string* sparse_542_str_;
  ::std::string* sparse_543_str_;
  ::std::string* sparse_544_str_;
  ::std::string* sparse_545_str_;
  ::std::string* sparse_546_str_;
  ::std::string* sparse_547_str_;
  ::std::string* sparse_548_str_;
  ::std::string* sparse_549_str_;
  ::std::string* sparse_550_str_;
  ::std::string* sparse_551_str_;
  ::std::string* sparse_552_str_;
  ::std::string* sparse_553_str_;
  ::std::string* sparse_554_str_;
  ::std::string* sparse_555_str_;
  ::std::string* sparse_556_str_;
  ::std::string* sparse_557_str_;
  ::std::string* sparse_558_str_;
  ::std::string* sparse_559_str_;
  ::std::string* sparse_560_str_;
  ::std::string* sparse_561_str_;
  ::std::string* sparse_562_str_;
  ::std::string* sparse_563_str_;
  ::std::string* sparse_564_str_;
  ::std::string* sparse_565_str_;
  ::std::string* sparse_566_str_;
  ::std::string* sparse_567_str_;
  ::std::string* sparse_568_str_;
  ::std::string* sparse_569_str_;
  ::std::string* sparse_570_str_;
  ::std::string* sparse_571_str_;
  ::std::string* sparse_572_str_;
  ::std::string* sparse_573_str_;
  ::std::string* sparse_574_str_;
  ::std::string* sparse_575_str_;
  ::std::string* sparse_576_str_;
  ::std::string* sparse_577_str_;
  ::std::string* sparse_578_str_;
  ::std::string* sparse_579_str_;
  ::std::string* sparse_580_str_;
  ::std::string* sparse_581_str_;
  ::std::string* sparse_582_str_;
  ::std::string* sparse_583_str_;
  ::std::string* sparse_584_str_;
  ::std::string* sparse_585_str_;
  ::std::string* sparse_586_str_;
  ::std::string* sparse_587_str_;
  ::std::string* sparse_588_str_;
  ::std::string* sparse_589_str_;
  ::std::string* sparse_590_str_;
  ::std::string* sparse_591_str_;
  ::std::string* sparse_592_str_;
  ::std::string* sparse_593_str_;
  ::std::string* sparse_594_str_;
  ::std::string* sparse_595_str_;
  ::std::string* sparse_596_str_;
  ::std::string* sparse_597_str_;
  ::std::string* sparse_598_str_;
  ::std::string* sparse_599_str_;
  ::std::string* sparse_600_str_;
  ::std::string* sparse_601_str_;
  ::std::string* sparse_602_str_;
  ::std::string* sparse_603_str_;
  ::std::string* sparse_604_str_;
  ::std::string* sparse_605_str_;
  ::std::string* sparse_606_str_;
  ::std::string* sparse_607_str_;
  ::std::string* sparse_608_str_;
  ::std::string* sparse_609_str_;
  ::std::string* sparse_610_str_;
  ::std::string* sparse_611_str_;
  ::std::string* sparse_612_str_;
  ::std::string* sparse_613_str_;
  ::std::string* sparse_614_str_;
  ::std::string* sparse_615_str_;
  ::std::string* sparse_616_str_;
  ::std::string* sparse_617_str_;
  ::std::string* sparse_618_str_;
  ::std::string* sparse_619_str_;
  ::std::string* sparse_620_str_;
  ::std::string* sparse_621_str_;
  ::std::string* sparse_622_str_;
  ::std::string* sparse_623_str_;
  ::std::string* sparse_624_str_;
  ::std::string* sparse_625_str_;
  ::std::string* sparse_626_str_;
  ::std::string* sparse_627_str_;
  ::std::string* sparse_628_str_;
  ::std::string* sparse_629_str_;
  ::std::string* sparse_630_str_;
  ::std::string* sparse_631_str_;
  ::std::string* sparse_632_str_;
  ::std::string* sparse_633_str_;
  ::std::string* sparse_634_str_;
  ::std::string* sparse_635_str_;
  ::std::string* sparse_636_str_;
  ::std::string* sparse_637_str_;
  ::std::string* sparse_638_str_;
  ::std::string* sparse_639_str_;
  ::std::string* sparse_640_str_;
  ::std::string* sparse_641_str_;
  ::std::string* sparse_642_str_;
  ::std::string* sparse_643_str_;
  ::std::string* sparse_644_str_;
  ::std::string* sparse_645_str_;
  ::std::string* sparse_646_str_;
  ::std::string* sparse_647_str_;
  ::std::string* sparse_648_str_;
  ::std::string* sparse_649_str_;
  ::std::string* sparse_650_str_;
  ::std::string* sparse_651_str_;
  ::std::string* sparse_652_str_;
  ::std::string* sparse_653_str_;
  ::std::string* sparse_654_str_;
  ::std::string* sparse_655_str_;
  ::std::string* sparse_656_str_;
  ::std::string* sparse_657_str_;
  ::std::string* sparse_658_str_;
  ::std::string* sparse_659_str_;
  ::std::string* sparse_660_str_;
  ::std::string* sparse_661_str_;
  ::std::string* sparse_662_str_;
  ::std::string* sparse_663_str_;
  ::std::string* sparse_664_str_;
  ::std::string* sparse_665_str_;
  ::std::string* sparse_666_str_;
  ::std::string* sparse_667_str_;
  ::std::string* sparse_668_str_;
  ::std::string* sparse_669_str_;
  ::std::string* sparse_670_str_;
  ::std::string* sparse_671_str_;
  ::std::string* sparse_672_str_;
  ::std::string* sparse_673_str_;
  ::std::string* sparse_674_str_;
  ::std::string* sparse_675_str_;
  ::std::string* sparse_676_str_;
  ::std::string* sparse_677_str_;
  ::std::string* sparse_678_str_;
  ::std::string* sparse_679_str_;
  ::std::string* sparse_680_str_;
  ::std::string* sparse_681_str_;
  ::std::string* sparse_682_str_;
  ::std::string* sparse_683_str_;
  ::std::string* sparse_684_str_;
  ::std::string* sparse_685_str_;
  ::std::string* sparse_686_str_;
  ::std::string* sparse_687_str_;
  ::std::string* sparse_688_str_;
  ::std::string* sparse_689_str_;
  ::std::string* sparse_690_str_;
  ::std::string* sparse_691_str_;
  ::std::string* sparse_692_str_;
  ::std::string* sparse_693_str_;
  ::std::string* sparse_694_str_;
  ::std::string* sparse_695_str_;
  ::std::string* sparse_696_str_;
  ::std::string* sparse_697_str_;
  ::std::string* sparse_698_str_;
  ::std::string* sparse_699_str_;
  ::std::string* sparse_700_str_;
  ::std::string* sparse_701_str_;
  ::std::string* sparse_702_str_;
  ::std::string* sparse_703_str_;
  ::std::string* sparse_704_str_;
  ::std::string* sparse_705_str_;
  ::std::string* sparse_706_str_;
  ::std::string* sparse_707_str_;
  ::std::string* sparse_708_str_;
  ::std::string* sparse_709_str_;
  ::std::string* sparse_710_str_;
  ::std::string* sparse_711_str_;
  ::std::string* sparse_712_str_;
  ::std::string* sparse_713_str_;
  ::std::string* sparse_714_str_;
  ::std::string* sparse_715_str_;
  ::std::string* sparse_716_str_;
  ::std::string* sparse_717_str_;
  ::std::string* sparse_718_str_;
  ::std::string* sparse_719_str_;
  ::std::string* sparse_720_str_;
  ::std::string* sparse_721_str_;
  ::std::string* sparse_722_str_;
  ::std::string* sparse_723_str_;
  ::std::string* sparse_724_str_;
  ::std::string* sparse_725_str_;
  ::std::string* sparse_726_str_;
  ::std::string* sparse_727_str_;
  ::std::string* sparse_728_str_;
  ::std::string* sparse_729_str_;
  ::std::string* sparse_730_str_;
  ::std::string* sparse_731_str_;
  ::std::string* sparse_732_str_;
  ::std::string* sparse_733_str_;
  ::std::string* sparse_734_str_;
  ::std::string* sparse_735_str_;
  ::std::string* sparse_736_str_;
  ::std::string* sparse_737_str_;
  ::std::string* sparse_738_str_;
  ::std::string* sparse_739_str_;
  ::std::string* sparse_740_str_;
  ::std::string* sparse_741_str_;
  ::std::string* sparse_742_str_;
  ::std::string* sparse_743_str_;
  ::std::string* sparse_744_str_;
  ::std::string* sparse_745_str_;
  ::std::string* sparse_746_str_;
  ::std::string* sparse_747_str_;
  ::std::string* sparse_748_str_;
  ::std::string* sparse_749_str_;
  ::std::string* sparse_750_str_;
  ::std::string* sparse_751_str_;
  ::std::string* sparse_752_str_;
  ::std::string* sparse_753_str_;
  ::std::string* sparse_754_str_;
  ::std::string* sparse_755_str_;
  ::std::string* sparse_756_str_;
  ::std::string* sparse_757_str_;
  ::std::string* sparse_758_str_;
  ::std::string* sparse_759_str_;
  ::std::string* sparse_760_str_;
  ::std::string* sparse_761_str_;
  ::std::string* sparse_762_str_;
  ::std::string* sparse_763_str_;
  ::std::string* sparse_764_str_;
  ::std::string* sparse_765_str_;
  ::std::string* sparse_766_str_;
  ::std::string* sparse_767_str_;
  ::std::string* sparse_768_str_;
  ::std::string* sparse_769_str_;
  ::std::string* sparse_770_str_;
  ::std::string* sparse_771_str_;
  ::std::string* sparse_772_str_;
  ::std::string* sparse_773_str_;
  ::std::string* sparse_774_str_;
  ::std::string* sparse_775_str_;
  ::std::string* sparse_776_str_;
  ::std::string* sparse_777_str_;
  ::std::string* sparse_778_str_;
  ::std::string* sparse_779_str_;
  ::std::string* sparse_780_str_;
  ::std::string* sparse_781_str_;
  ::std::string* sparse_782_str_;
  ::std::string* sparse_783_str_;
  ::std::string* sparse_784_str_;
  ::std::string* sparse_785_str_;
  ::std::string* sparse_786_str_;
  ::std::string* sparse_787_str_;
  ::std::string* sparse_788_str_;
  ::std::string* sparse_789_str_;
  ::std::string* sparse_790_str_;
  ::std::string* sparse_791_str_;
  ::std::string* sparse_792_str_;
  ::std::string* sparse_793_str_;
  ::std::string* sparse_794_str_;
  ::std::string* sparse_795_str_;
  ::std::string* sparse_796_str_;
  ::std::string* sparse_797_str_;
  ::std::string* sparse_798_str_;
  ::std::string* sparse_799_str_;
  ::std::string* sparse_800_str_;
  ::std::string* sparse_801_str_;
  ::std::string* sparse_802_str_;
  ::std::string* sparse_803_str_;
  ::std::string* sparse_804_str_;
  ::std::string* sparse_805_str_;
  ::std::string* sparse_806_str_;
  ::std::string* sparse_807_str_;
  ::std::string* sparse_808_str_;
  ::std::string* sparse_809_str_;
  ::std::string* sparse_810_str_;
  ::std::string* sparse_811_str_;
  ::std::string* sparse_812_str_;
  ::std::string* sparse_813_str_;
  ::std::string* sparse_814_str_;
  ::std::string* sparse_815_str_;
  ::std::string* sparse_816_str_;
  ::std::string* sparse_817_str_;
  ::std::string* sparse_818_str_;
  ::std::string* sparse_819_str_;
  ::std::string* sparse_820_str_;
  ::std::string* sparse_821_str_;
  ::std::string* sparse_822_str_;
  ::std::string* sparse_823_str_;
  ::std::string* sparse_824_str_;
  ::std::string* sparse_825_str_;
  ::std::string* sparse_826_str_;
  ::std::string* sparse_827_str_;
  ::std::string* sparse_828_str_;
  ::std::string* sparse_829_str_;
  ::std::string* sparse_830_str_;
  ::std::string* sparse_831_str_;
  ::std::string* sparse_832_str_;
  ::std::string* sparse_833_str_;
  ::std::string* sparse_834_str_;
  ::std::string* sparse_835_str_;
  ::std::string* sparse_836_str_;
  ::std::string* sparse_837_str_;
  ::std::string* sparse_838_str_;
  ::std::string* sparse_839_str_;
  ::std::string* sparse_840_str_;
  ::std::string* sparse_841_str_;
  ::std::string* sparse_842_str_;
  ::std::string* sparse_843_str_;
  ::std::string* sparse_844_str_;
  ::std::string* sparse_845_str_;
  ::std::string* sparse_846_str_;
  ::std::string* sparse_847_str_;
  ::std::string* sparse_848_str_;
  ::std::string* sparse_849_str_;
  ::std::string* sparse_850_str_;
  ::std::string* sparse_851_str_;
  ::std::string* sparse_852_str_;
  ::std::string* sparse_853_str_;
  ::std::string* sparse_854_str_;
  ::std::string* sparse_855_str_;
  ::std::string* sparse_856_str_;
  ::std::string* sparse_857_str_;
  ::std::string* sparse_858_str_;
  ::std::string* sparse_859_str_;
  ::std::string* sparse_860_str_;
  ::std::string* sparse_861_str_;
  ::std::string* sparse_862_str_;
  ::std::string* sparse_863_str_;
  ::std::string* sparse_864_str_;
  ::std::string* sparse_865_str_;
  ::std::string* sparse_866_str_;
  ::std::string* sparse_867_str_;
  ::std::string* sparse_868_str_;
  ::std::string* sparse_869_str_;
  ::std::string* sparse_870_str_;
  ::std::string* sparse_871_str_;
  ::std::string* sparse_872_str_;
  ::std::string* sparse_873_str_;
  ::std::string* sparse_874_str_;
  ::std::string* sparse_875_str_;
  ::std::string* sparse_876_str_;
  ::std::string* sparse_877_str_;
  ::std::string* sparse_878_str_;
  ::std::string* sparse_879_str_;
  ::std::string* sparse_880_str_;
  ::std::string* sparse_881_str_;
  ::std::string* sparse_882_str_;
  ::std::string* sparse_883_str_;
  ::std::string* sparse_884_str_;
  ::std::string* sparse_885_str_;
  ::std::string* sparse_886_str_;
  ::std::string* sparse_887_str_;
  ::std::string* sparse_888_str_;
  ::std::string* sparse_889_str_;
  ::std::string* sparse_890_str_;
  ::std::string* sparse_891_str_;
  ::std::string* sparse_892_str_;
  ::std::string* sparse_893_str_;
  ::std::string* sparse_894_str_;
  ::std::string* sparse_895_str_;
  ::std::string* sparse_896_str_;
  ::std::string* sparse_897_str_;
  ::std::string* sparse_898_str_;
  ::std::string* sparse_899_str_;
  ::std::string* sparse_900_str_;
  ::std::string* sparse_901_str_;
  ::std::string* sparse_902_str_;
  ::std::string* sparse_903_str_;
  ::std::string* sparse_904_str_;
  ::std::string* sparse_905_str_;
  ::std::string* sparse_906_str_;
  ::std::string* sparse_907_str_;
  ::std::string* sparse_908_str_;
  ::std::string* sparse_909_str_;
  ::std::string* sparse_910_str_;
  ::std::string* sparse_911_str_;
  ::std::string* sparse_912_str_;
  ::std::string* sparse_913_str_;
  ::std::string* sparse_914_str_;
  ::std::string* sparse_915_str_;
  ::std::string* sparse_916_str_;
  ::std::string* sparse_917_str_;
  ::std::string* sparse_918_str_;
  ::std::string* sparse_919_str_;
  ::std::string* sparse_920_str_;
  ::std::string* sparse_921_str_;
  ::std::string* sparse_922_str_;
  ::std::string* sparse_923_str_;
  ::std::string* sparse_924_str_;
  ::std::string* sparse_925_str_;
  ::std::string* sparse_926_str_;
  ::std::string* sparse_927_str_;
  ::std::string* sparse_928_str_;
  ::std::string* sparse_929_str_;
  ::std::string* sparse_930_str_;
  ::std::string* sparse_931_str_;
  ::std::string* sparse_932_str_;
  ::std::string* sparse_933_str_;
  ::std::string* sparse_934_str_;
  ::std::string* sparse_935_str_;
  ::std::string* sparse_936_str_;
  ::std::string* sparse_937_str_;
  ::std::string* sparse_938_str_;
  ::std::string* sparse_939_str_;
  ::std::string* sparse_940_str_;
  ::std::string* sparse_941_str_;
  ::std::string* sparse_942_str_;
  ::std::string* sparse_943_str_;
  ::std::string* sparse_944_str_;
  ::std::string* sparse_945_str_;
  ::std::string* sparse_946_str_;
  ::std::string* sparse_947_str_;
  ::std::string* sparse_948_str_;
  ::std::string* sparse_949_str_;
  ::std::string* sparse_950_str_;
  ::std::string* sparse_951_str_;
  ::std::string* sparse_952_str_;
  ::std::string* sparse_953_str_;
  ::std::string* sparse_954_str_;
  ::std::string* sparse_955_str_;
  ::std::string* sparse_956_str_;
  ::std::string* sparse_957_str_;
  ::std::string* sparse_958_str_;
  ::std::string* sparse_959_str_;
  ::std::string* sparse_960_str_;
  ::std::string* sparse_961_str_;
  ::std::string* sparse_962_str_;
  ::std::string* sparse_963_str_;
  ::std::string* sparse_964_str_;
  ::std::string* sparse_965_str_;
  ::std::string* sparse_966_str_;
  ::std::string* sparse_967_str_;
  ::std::string* sparse_968_str_;
  ::std::string* sparse_969_str_;
  ::std::string* sparse_970_str_;
  ::std::string* sparse_971_str_;
  ::std::string* sparse_972_str_;
  ::std::string* sparse_973_str_;
  ::std::string* sparse_974_str_;
  ::std::string* sparse_975_str_;
  ::std::string* sparse_976_str_;
  ::std::string* sparse_977_str_;
  ::std::string* sparse_978_str_;
  ::std::string* sparse_979_str_;
  ::std::string* sparse_980_str_;
  ::std::string* sparse_981_str_;
  ::std::string* sparse_982_str_;
  ::std::string* sparse_983_str_;
  ::std::string* sparse_984_str_;
  ::std::string* sparse_985_str_;
  ::std::string* sparse_986_str_;
  ::std::string* sparse_987_str_;
  ::std::string* sparse_988_str_;
  ::std::string* sparse_989_str_;
  ::std::string* sparse_990_str_;
  ::std::string* sparse_991_str_;
  ::std::string* sparse_992_str_;
  ::std::string* sparse_993_str_;
  ::std::string* sparse_994_str_;
  ::std::string* sparse_995_str_;
  ::std::string* sparse_996_str_;
  ::std::string* sparse_997_str_;
  ::std::string* sparse_998_str_;
  ::std::string* sparse_999_str_;
  bool bool_bool_;
  bool dyn2_bool_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1013 + 31) / 32];

  friend void  protobuf_AddDesc_nobench_2eproto();
  friend void protobuf_AssignDesc_nobench_2eproto();
  friend void protobuf_ShutdownFile_nobench_2eproto();

  void InitAsDefaultInstance();
  static Database_NoBench* default_instance_;
};
// -------------------------------------------------------------------

class Database : public ::google::protobuf::Message {
 public:
  Database();
  virtual ~Database();

  Database(const Database& from);

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Database& default_instance();

  void Swap(Database* other);

  // implements Message ----------------------------------------------

  Database* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Database_NoBench NoBench;

  // accessors -------------------------------------------------------

  // repeated .Database.NoBench nb = 1;
  inline int nb_size() const;
  inline void clear_nb();
  static const int kNbFieldNumber = 1;
  inline const ::Database_NoBench& nb(int index) const;
  inline ::Database_NoBench* mutable_nb(int index);
  inline ::Database_NoBench* add_nb();
  inline const ::google::protobuf::RepeatedPtrField< ::Database_NoBench >&
      nb() const;
  inline ::google::protobuf::RepeatedPtrField< ::Database_NoBench >*
      mutable_nb();

  // @@protoc_insertion_point(class_scope:Database)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Database_NoBench > nb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_nobench_2eproto();
  friend void protobuf_AssignDesc_nobench_2eproto();
  friend void protobuf_ShutdownFile_nobench_2eproto();

  void InitAsDefaultInstance();
  static Database* default_instance_;
};
// ===================================================================


// ===================================================================

// Database_NoBench_NestedObj

// optional string str_str = 1;
inline bool Database_NoBench_NestedObj::has_str_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Database_NoBench_NestedObj::set_has_str_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Database_NoBench_NestedObj::clear_has_str_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Database_NoBench_NestedObj::clear_str_str() {
  if (str_str_ != &::google::protobuf::internal::kEmptyString) {
    str_str_->clear();
  }
  clear_has_str_str();
}
inline const ::std::string& Database_NoBench_NestedObj::str_str() const {
  return *str_str_;
}
inline void Database_NoBench_NestedObj::set_str_str(const ::std::string& value) {
  set_has_str_str();
  if (str_str_ == &::google::protobuf::internal::kEmptyString) {
    str_str_ = new ::std::string;
  }
  str_str_->assign(value);
}
inline void Database_NoBench_NestedObj::set_str_str(const char* value) {
  set_has_str_str();
  if (str_str_ == &::google::protobuf::internal::kEmptyString) {
    str_str_ = new ::std::string;
  }
  str_str_->assign(value);
}
inline void Database_NoBench_NestedObj::set_str_str(const char* value, size_t size) {
  set_has_str_str();
  if (str_str_ == &::google::protobuf::internal::kEmptyString) {
    str_str_ = new ::std::string;
  }
  str_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench_NestedObj::mutable_str_str() {
  set_has_str_str();
  if (str_str_ == &::google::protobuf::internal::kEmptyString) {
    str_str_ = new ::std::string;
  }
  return str_str_;
}
inline ::std::string* Database_NoBench_NestedObj::release_str_str() {
  clear_has_str_str();
  if (str_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_str_;
    str_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench_NestedObj::set_allocated_str_str(::std::string* str_str) {
  if (str_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_str_;
  }
  if (str_str) {
    set_has_str_str();
    str_str_ = str_str;
  } else {
    clear_has_str_str();
    str_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 num_int = 2;
inline bool Database_NoBench_NestedObj::has_num_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Database_NoBench_NestedObj::set_has_num_int() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Database_NoBench_NestedObj::clear_has_num_int() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Database_NoBench_NestedObj::clear_num_int() {
  num_int_ = GOOGLE_LONGLONG(0);
  clear_has_num_int();
}
inline ::google::protobuf::int64 Database_NoBench_NestedObj::num_int() const {
  return num_int_;
}
inline void Database_NoBench_NestedObj::set_num_int(::google::protobuf::int64 value) {
  set_has_num_int();
  num_int_ = value;
}

// -------------------------------------------------------------------

// Database_NoBench

// optional string str1_str = 1;
inline bool Database_NoBench::has_str1_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_str1_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_str1_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Database_NoBench::clear_str1_str() {
  if (str1_str_ != &::google::protobuf::internal::kEmptyString) {
    str1_str_->clear();
  }
  clear_has_str1_str();
}
inline const ::std::string& Database_NoBench::str1_str() const {
  return *str1_str_;
}
inline void Database_NoBench::set_str1_str(const ::std::string& value) {
  set_has_str1_str();
  if (str1_str_ == &::google::protobuf::internal::kEmptyString) {
    str1_str_ = new ::std::string;
  }
  str1_str_->assign(value);
}
inline void Database_NoBench::set_str1_str(const char* value) {
  set_has_str1_str();
  if (str1_str_ == &::google::protobuf::internal::kEmptyString) {
    str1_str_ = new ::std::string;
  }
  str1_str_->assign(value);
}
inline void Database_NoBench::set_str1_str(const char* value, size_t size) {
  set_has_str1_str();
  if (str1_str_ == &::google::protobuf::internal::kEmptyString) {
    str1_str_ = new ::std::string;
  }
  str1_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_str1_str() {
  set_has_str1_str();
  if (str1_str_ == &::google::protobuf::internal::kEmptyString) {
    str1_str_ = new ::std::string;
  }
  return str1_str_;
}
inline ::std::string* Database_NoBench::release_str1_str() {
  clear_has_str1_str();
  if (str1_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str1_str_;
    str1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_str1_str(::std::string* str1_str) {
  if (str1_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_str_;
  }
  if (str1_str) {
    set_has_str1_str();
    str1_str_ = str1_str;
  } else {
    clear_has_str1_str();
    str1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string str2_str = 2;
inline bool Database_NoBench::has_str2_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_str2_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_str2_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Database_NoBench::clear_str2_str() {
  if (str2_str_ != &::google::protobuf::internal::kEmptyString) {
    str2_str_->clear();
  }
  clear_has_str2_str();
}
inline const ::std::string& Database_NoBench::str2_str() const {
  return *str2_str_;
}
inline void Database_NoBench::set_str2_str(const ::std::string& value) {
  set_has_str2_str();
  if (str2_str_ == &::google::protobuf::internal::kEmptyString) {
    str2_str_ = new ::std::string;
  }
  str2_str_->assign(value);
}
inline void Database_NoBench::set_str2_str(const char* value) {
  set_has_str2_str();
  if (str2_str_ == &::google::protobuf::internal::kEmptyString) {
    str2_str_ = new ::std::string;
  }
  str2_str_->assign(value);
}
inline void Database_NoBench::set_str2_str(const char* value, size_t size) {
  set_has_str2_str();
  if (str2_str_ == &::google::protobuf::internal::kEmptyString) {
    str2_str_ = new ::std::string;
  }
  str2_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_str2_str() {
  set_has_str2_str();
  if (str2_str_ == &::google::protobuf::internal::kEmptyString) {
    str2_str_ = new ::std::string;
  }
  return str2_str_;
}
inline ::std::string* Database_NoBench::release_str2_str() {
  clear_has_str2_str();
  if (str2_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str2_str_;
    str2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_str2_str(::std::string* str2_str) {
  if (str2_str_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_str_;
  }
  if (str2_str) {
    set_has_str2_str();
    str2_str_ = str2_str;
  } else {
    clear_has_str2_str();
    str2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 num_int = 3;
inline bool Database_NoBench::has_num_int() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_num_int() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_num_int() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Database_NoBench::clear_num_int() {
  num_int_ = GOOGLE_LONGLONG(0);
  clear_has_num_int();
}
inline ::google::protobuf::int64 Database_NoBench::num_int() const {
  return num_int_;
}
inline void Database_NoBench::set_num_int(::google::protobuf::int64 value) {
  set_has_num_int();
  num_int_ = value;
}

// optional bool bool_bool = 4;
inline bool Database_NoBench::has_bool_bool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_bool_bool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_bool_bool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Database_NoBench::clear_bool_bool() {
  bool_bool_ = false;
  clear_has_bool_bool();
}
inline bool Database_NoBench::bool_bool() const {
  return bool_bool_;
}
inline void Database_NoBench::set_bool_bool(bool value) {
  set_has_bool_bool();
  bool_bool_ = value;
}

// optional int64 dyn1_int = 5;
inline bool Database_NoBench::has_dyn1_int() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_dyn1_int() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_dyn1_int() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Database_NoBench::clear_dyn1_int() {
  dyn1_int_ = GOOGLE_LONGLONG(0);
  clear_has_dyn1_int();
}
inline ::google::protobuf::int64 Database_NoBench::dyn1_int() const {
  return dyn1_int_;
}
inline void Database_NoBench::set_dyn1_int(::google::protobuf::int64 value) {
  set_has_dyn1_int();
  dyn1_int_ = value;
}

// optional string dyn1_str = 6;
inline bool Database_NoBench::has_dyn1_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_dyn1_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_dyn1_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Database_NoBench::clear_dyn1_str() {
  if (dyn1_str_ != &::google::protobuf::internal::kEmptyString) {
    dyn1_str_->clear();
  }
  clear_has_dyn1_str();
}
inline const ::std::string& Database_NoBench::dyn1_str() const {
  return *dyn1_str_;
}
inline void Database_NoBench::set_dyn1_str(const ::std::string& value) {
  set_has_dyn1_str();
  if (dyn1_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn1_str_ = new ::std::string;
  }
  dyn1_str_->assign(value);
}
inline void Database_NoBench::set_dyn1_str(const char* value) {
  set_has_dyn1_str();
  if (dyn1_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn1_str_ = new ::std::string;
  }
  dyn1_str_->assign(value);
}
inline void Database_NoBench::set_dyn1_str(const char* value, size_t size) {
  set_has_dyn1_str();
  if (dyn1_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn1_str_ = new ::std::string;
  }
  dyn1_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_dyn1_str() {
  set_has_dyn1_str();
  if (dyn1_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn1_str_ = new ::std::string;
  }
  return dyn1_str_;
}
inline ::std::string* Database_NoBench::release_dyn1_str() {
  clear_has_dyn1_str();
  if (dyn1_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dyn1_str_;
    dyn1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_dyn1_str(::std::string* dyn1_str) {
  if (dyn1_str_ != &::google::protobuf::internal::kEmptyString) {
    delete dyn1_str_;
  }
  if (dyn1_str) {
    set_has_dyn1_str();
    dyn1_str_ = dyn1_str;
  } else {
    clear_has_dyn1_str();
    dyn1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 dyn2_int = 7;
inline bool Database_NoBench::has_dyn2_int() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_dyn2_int() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_dyn2_int() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Database_NoBench::clear_dyn2_int() {
  dyn2_int_ = GOOGLE_LONGLONG(0);
  clear_has_dyn2_int();
}
inline ::google::protobuf::int64 Database_NoBench::dyn2_int() const {
  return dyn2_int_;
}
inline void Database_NoBench::set_dyn2_int(::google::protobuf::int64 value) {
  set_has_dyn2_int();
  dyn2_int_ = value;
}

// optional string dyn2_str = 8;
inline bool Database_NoBench::has_dyn2_str() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_dyn2_str() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_dyn2_str() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Database_NoBench::clear_dyn2_str() {
  if (dyn2_str_ != &::google::protobuf::internal::kEmptyString) {
    dyn2_str_->clear();
  }
  clear_has_dyn2_str();
}
inline const ::std::string& Database_NoBench::dyn2_str() const {
  return *dyn2_str_;
}
inline void Database_NoBench::set_dyn2_str(const ::std::string& value) {
  set_has_dyn2_str();
  if (dyn2_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn2_str_ = new ::std::string;
  }
  dyn2_str_->assign(value);
}
inline void Database_NoBench::set_dyn2_str(const char* value) {
  set_has_dyn2_str();
  if (dyn2_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn2_str_ = new ::std::string;
  }
  dyn2_str_->assign(value);
}
inline void Database_NoBench::set_dyn2_str(const char* value, size_t size) {
  set_has_dyn2_str();
  if (dyn2_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn2_str_ = new ::std::string;
  }
  dyn2_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_dyn2_str() {
  set_has_dyn2_str();
  if (dyn2_str_ == &::google::protobuf::internal::kEmptyString) {
    dyn2_str_ = new ::std::string;
  }
  return dyn2_str_;
}
inline ::std::string* Database_NoBench::release_dyn2_str() {
  clear_has_dyn2_str();
  if (dyn2_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dyn2_str_;
    dyn2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_dyn2_str(::std::string* dyn2_str) {
  if (dyn2_str_ != &::google::protobuf::internal::kEmptyString) {
    delete dyn2_str_;
  }
  if (dyn2_str) {
    set_has_dyn2_str();
    dyn2_str_ = dyn2_str;
  } else {
    clear_has_dyn2_str();
    dyn2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool dyn2_bool = 9;
inline bool Database_NoBench::has_dyn2_bool() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_dyn2_bool() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_dyn2_bool() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Database_NoBench::clear_dyn2_bool() {
  dyn2_bool_ = false;
  clear_has_dyn2_bool();
}
inline bool Database_NoBench::dyn2_bool() const {
  return dyn2_bool_;
}
inline void Database_NoBench::set_dyn2_bool(bool value) {
  set_has_dyn2_bool();
  dyn2_bool_ = value;
}

// repeated string nested_arr_str = 10;
inline int Database_NoBench::nested_arr_str_size() const {
  return nested_arr_str_.size();
}
inline void Database_NoBench::clear_nested_arr_str() {
  nested_arr_str_.Clear();
}
inline const ::std::string& Database_NoBench::nested_arr_str(int index) const {
  return nested_arr_str_.Get(index);
}
inline ::std::string* Database_NoBench::mutable_nested_arr_str(int index) {
  return nested_arr_str_.Mutable(index);
}
inline void Database_NoBench::set_nested_arr_str(int index, const ::std::string& value) {
  nested_arr_str_.Mutable(index)->assign(value);
}
inline void Database_NoBench::set_nested_arr_str(int index, const char* value) {
  nested_arr_str_.Mutable(index)->assign(value);
}
inline void Database_NoBench::set_nested_arr_str(int index, const char* value, size_t size) {
  nested_arr_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::add_nested_arr_str() {
  return nested_arr_str_.Add();
}
inline void Database_NoBench::add_nested_arr_str(const ::std::string& value) {
  nested_arr_str_.Add()->assign(value);
}
inline void Database_NoBench::add_nested_arr_str(const char* value) {
  nested_arr_str_.Add()->assign(value);
}
inline void Database_NoBench::add_nested_arr_str(const char* value, size_t size) {
  nested_arr_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Database_NoBench::nested_arr_str() const {
  return nested_arr_str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Database_NoBench::mutable_nested_arr_str() {
  return &nested_arr_str_;
}

// optional .Database.NoBench.NestedObj nested_obj_obj = 11;
inline bool Database_NoBench::has_nested_obj_obj() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_nested_obj_obj() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_nested_obj_obj() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Database_NoBench::clear_nested_obj_obj() {
  if (nested_obj_obj_ != NULL) nested_obj_obj_->::Database_NoBench_NestedObj::Clear();
  clear_has_nested_obj_obj();
}
inline const ::Database_NoBench_NestedObj& Database_NoBench::nested_obj_obj() const {
  return nested_obj_obj_ != NULL ? *nested_obj_obj_ : *default_instance_->nested_obj_obj_;
}
inline ::Database_NoBench_NestedObj* Database_NoBench::mutable_nested_obj_obj() {
  set_has_nested_obj_obj();
  if (nested_obj_obj_ == NULL) nested_obj_obj_ = new ::Database_NoBench_NestedObj;
  return nested_obj_obj_;
}
inline ::Database_NoBench_NestedObj* Database_NoBench::release_nested_obj_obj() {
  clear_has_nested_obj_obj();
  ::Database_NoBench_NestedObj* temp = nested_obj_obj_;
  nested_obj_obj_ = NULL;
  return temp;
}
inline void Database_NoBench::set_allocated_nested_obj_obj(::Database_NoBench_NestedObj* nested_obj_obj) {
  delete nested_obj_obj_;
  nested_obj_obj_ = nested_obj_obj;
  if (nested_obj_obj) {
    set_has_nested_obj_obj();
  } else {
    clear_has_nested_obj_obj();
  }
}

// optional int64 thousandth = 1012;
inline bool Database_NoBench::has_thousandth() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_thousandth() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_thousandth() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Database_NoBench::clear_thousandth() {
  thousandth_ = GOOGLE_LONGLONG(0);
  clear_has_thousandth();
}
inline ::google::protobuf::int64 Database_NoBench::thousandth() const {
  return thousandth_;
}
inline void Database_NoBench::set_thousandth(::google::protobuf::int64 value) {
  set_has_thousandth();
  thousandth_ = value;
}

// repeated string sparse_str = 1013;
inline int Database_NoBench::sparse_str_size() const {
  return sparse_str_.size();
}
inline void Database_NoBench::clear_sparse_str() {
  sparse_str_.Clear();
}
inline const ::std::string& Database_NoBench::sparse_str(int index) const {
  return sparse_str_.Get(index);
}
inline ::std::string* Database_NoBench::mutable_sparse_str(int index) {
  return sparse_str_.Mutable(index);
}
inline void Database_NoBench::set_sparse_str(int index, const ::std::string& value) {
  sparse_str_.Mutable(index)->assign(value);
}
inline void Database_NoBench::set_sparse_str(int index, const char* value) {
  sparse_str_.Mutable(index)->assign(value);
}
inline void Database_NoBench::set_sparse_str(int index, const char* value, size_t size) {
  sparse_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::add_sparse_str() {
  return sparse_str_.Add();
}
inline void Database_NoBench::add_sparse_str(const ::std::string& value) {
  sparse_str_.Add()->assign(value);
}
inline void Database_NoBench::add_sparse_str(const char* value) {
  sparse_str_.Add()->assign(value);
}
inline void Database_NoBench::add_sparse_str(const char* value, size_t size) {
  sparse_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Database_NoBench::sparse_str() const {
  return sparse_str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Database_NoBench::mutable_sparse_str() {
  return &sparse_str_;
}

// optional string sparse_000_str = 12;
inline bool Database_NoBench::has_sparse_000_str() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_000_str() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_000_str() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_000_str() {
  if (sparse_000_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_000_str_->clear();
  }
  clear_has_sparse_000_str();
}
inline const ::std::string& Database_NoBench::sparse_000_str() const {
  return *sparse_000_str_;
}
inline void Database_NoBench::set_sparse_000_str(const ::std::string& value) {
  set_has_sparse_000_str();
  if (sparse_000_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_000_str_ = new ::std::string;
  }
  sparse_000_str_->assign(value);
}
inline void Database_NoBench::set_sparse_000_str(const char* value) {
  set_has_sparse_000_str();
  if (sparse_000_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_000_str_ = new ::std::string;
  }
  sparse_000_str_->assign(value);
}
inline void Database_NoBench::set_sparse_000_str(const char* value, size_t size) {
  set_has_sparse_000_str();
  if (sparse_000_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_000_str_ = new ::std::string;
  }
  sparse_000_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_000_str() {
  set_has_sparse_000_str();
  if (sparse_000_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_000_str_ = new ::std::string;
  }
  return sparse_000_str_;
}
inline ::std::string* Database_NoBench::release_sparse_000_str() {
  clear_has_sparse_000_str();
  if (sparse_000_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_000_str_;
    sparse_000_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_000_str(::std::string* sparse_000_str) {
  if (sparse_000_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_000_str_;
  }
  if (sparse_000_str) {
    set_has_sparse_000_str();
    sparse_000_str_ = sparse_000_str;
  } else {
    clear_has_sparse_000_str();
    sparse_000_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_001_str = 13;
inline bool Database_NoBench::has_sparse_001_str() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_001_str() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_001_str() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_001_str() {
  if (sparse_001_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_001_str_->clear();
  }
  clear_has_sparse_001_str();
}
inline const ::std::string& Database_NoBench::sparse_001_str() const {
  return *sparse_001_str_;
}
inline void Database_NoBench::set_sparse_001_str(const ::std::string& value) {
  set_has_sparse_001_str();
  if (sparse_001_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_001_str_ = new ::std::string;
  }
  sparse_001_str_->assign(value);
}
inline void Database_NoBench::set_sparse_001_str(const char* value) {
  set_has_sparse_001_str();
  if (sparse_001_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_001_str_ = new ::std::string;
  }
  sparse_001_str_->assign(value);
}
inline void Database_NoBench::set_sparse_001_str(const char* value, size_t size) {
  set_has_sparse_001_str();
  if (sparse_001_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_001_str_ = new ::std::string;
  }
  sparse_001_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_001_str() {
  set_has_sparse_001_str();
  if (sparse_001_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_001_str_ = new ::std::string;
  }
  return sparse_001_str_;
}
inline ::std::string* Database_NoBench::release_sparse_001_str() {
  clear_has_sparse_001_str();
  if (sparse_001_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_001_str_;
    sparse_001_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_001_str(::std::string* sparse_001_str) {
  if (sparse_001_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_001_str_;
  }
  if (sparse_001_str) {
    set_has_sparse_001_str();
    sparse_001_str_ = sparse_001_str;
  } else {
    clear_has_sparse_001_str();
    sparse_001_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_002_str = 14;
inline bool Database_NoBench::has_sparse_002_str() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_002_str() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_002_str() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_002_str() {
  if (sparse_002_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_002_str_->clear();
  }
  clear_has_sparse_002_str();
}
inline const ::std::string& Database_NoBench::sparse_002_str() const {
  return *sparse_002_str_;
}
inline void Database_NoBench::set_sparse_002_str(const ::std::string& value) {
  set_has_sparse_002_str();
  if (sparse_002_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_002_str_ = new ::std::string;
  }
  sparse_002_str_->assign(value);
}
inline void Database_NoBench::set_sparse_002_str(const char* value) {
  set_has_sparse_002_str();
  if (sparse_002_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_002_str_ = new ::std::string;
  }
  sparse_002_str_->assign(value);
}
inline void Database_NoBench::set_sparse_002_str(const char* value, size_t size) {
  set_has_sparse_002_str();
  if (sparse_002_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_002_str_ = new ::std::string;
  }
  sparse_002_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_002_str() {
  set_has_sparse_002_str();
  if (sparse_002_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_002_str_ = new ::std::string;
  }
  return sparse_002_str_;
}
inline ::std::string* Database_NoBench::release_sparse_002_str() {
  clear_has_sparse_002_str();
  if (sparse_002_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_002_str_;
    sparse_002_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_002_str(::std::string* sparse_002_str) {
  if (sparse_002_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_002_str_;
  }
  if (sparse_002_str) {
    set_has_sparse_002_str();
    sparse_002_str_ = sparse_002_str;
  } else {
    clear_has_sparse_002_str();
    sparse_002_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_003_str = 15;
inline bool Database_NoBench::has_sparse_003_str() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_003_str() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_003_str() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_003_str() {
  if (sparse_003_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_003_str_->clear();
  }
  clear_has_sparse_003_str();
}
inline const ::std::string& Database_NoBench::sparse_003_str() const {
  return *sparse_003_str_;
}
inline void Database_NoBench::set_sparse_003_str(const ::std::string& value) {
  set_has_sparse_003_str();
  if (sparse_003_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_003_str_ = new ::std::string;
  }
  sparse_003_str_->assign(value);
}
inline void Database_NoBench::set_sparse_003_str(const char* value) {
  set_has_sparse_003_str();
  if (sparse_003_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_003_str_ = new ::std::string;
  }
  sparse_003_str_->assign(value);
}
inline void Database_NoBench::set_sparse_003_str(const char* value, size_t size) {
  set_has_sparse_003_str();
  if (sparse_003_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_003_str_ = new ::std::string;
  }
  sparse_003_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_003_str() {
  set_has_sparse_003_str();
  if (sparse_003_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_003_str_ = new ::std::string;
  }
  return sparse_003_str_;
}
inline ::std::string* Database_NoBench::release_sparse_003_str() {
  clear_has_sparse_003_str();
  if (sparse_003_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_003_str_;
    sparse_003_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_003_str(::std::string* sparse_003_str) {
  if (sparse_003_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_003_str_;
  }
  if (sparse_003_str) {
    set_has_sparse_003_str();
    sparse_003_str_ = sparse_003_str;
  } else {
    clear_has_sparse_003_str();
    sparse_003_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_004_str = 16;
inline bool Database_NoBench::has_sparse_004_str() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_004_str() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_004_str() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_004_str() {
  if (sparse_004_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_004_str_->clear();
  }
  clear_has_sparse_004_str();
}
inline const ::std::string& Database_NoBench::sparse_004_str() const {
  return *sparse_004_str_;
}
inline void Database_NoBench::set_sparse_004_str(const ::std::string& value) {
  set_has_sparse_004_str();
  if (sparse_004_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_004_str_ = new ::std::string;
  }
  sparse_004_str_->assign(value);
}
inline void Database_NoBench::set_sparse_004_str(const char* value) {
  set_has_sparse_004_str();
  if (sparse_004_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_004_str_ = new ::std::string;
  }
  sparse_004_str_->assign(value);
}
inline void Database_NoBench::set_sparse_004_str(const char* value, size_t size) {
  set_has_sparse_004_str();
  if (sparse_004_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_004_str_ = new ::std::string;
  }
  sparse_004_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_004_str() {
  set_has_sparse_004_str();
  if (sparse_004_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_004_str_ = new ::std::string;
  }
  return sparse_004_str_;
}
inline ::std::string* Database_NoBench::release_sparse_004_str() {
  clear_has_sparse_004_str();
  if (sparse_004_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_004_str_;
    sparse_004_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_004_str(::std::string* sparse_004_str) {
  if (sparse_004_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_004_str_;
  }
  if (sparse_004_str) {
    set_has_sparse_004_str();
    sparse_004_str_ = sparse_004_str;
  } else {
    clear_has_sparse_004_str();
    sparse_004_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_005_str = 17;
inline bool Database_NoBench::has_sparse_005_str() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_005_str() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_005_str() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_005_str() {
  if (sparse_005_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_005_str_->clear();
  }
  clear_has_sparse_005_str();
}
inline const ::std::string& Database_NoBench::sparse_005_str() const {
  return *sparse_005_str_;
}
inline void Database_NoBench::set_sparse_005_str(const ::std::string& value) {
  set_has_sparse_005_str();
  if (sparse_005_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_005_str_ = new ::std::string;
  }
  sparse_005_str_->assign(value);
}
inline void Database_NoBench::set_sparse_005_str(const char* value) {
  set_has_sparse_005_str();
  if (sparse_005_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_005_str_ = new ::std::string;
  }
  sparse_005_str_->assign(value);
}
inline void Database_NoBench::set_sparse_005_str(const char* value, size_t size) {
  set_has_sparse_005_str();
  if (sparse_005_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_005_str_ = new ::std::string;
  }
  sparse_005_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_005_str() {
  set_has_sparse_005_str();
  if (sparse_005_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_005_str_ = new ::std::string;
  }
  return sparse_005_str_;
}
inline ::std::string* Database_NoBench::release_sparse_005_str() {
  clear_has_sparse_005_str();
  if (sparse_005_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_005_str_;
    sparse_005_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_005_str(::std::string* sparse_005_str) {
  if (sparse_005_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_005_str_;
  }
  if (sparse_005_str) {
    set_has_sparse_005_str();
    sparse_005_str_ = sparse_005_str;
  } else {
    clear_has_sparse_005_str();
    sparse_005_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_006_str = 18;
inline bool Database_NoBench::has_sparse_006_str() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_006_str() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_006_str() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_006_str() {
  if (sparse_006_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_006_str_->clear();
  }
  clear_has_sparse_006_str();
}
inline const ::std::string& Database_NoBench::sparse_006_str() const {
  return *sparse_006_str_;
}
inline void Database_NoBench::set_sparse_006_str(const ::std::string& value) {
  set_has_sparse_006_str();
  if (sparse_006_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_006_str_ = new ::std::string;
  }
  sparse_006_str_->assign(value);
}
inline void Database_NoBench::set_sparse_006_str(const char* value) {
  set_has_sparse_006_str();
  if (sparse_006_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_006_str_ = new ::std::string;
  }
  sparse_006_str_->assign(value);
}
inline void Database_NoBench::set_sparse_006_str(const char* value, size_t size) {
  set_has_sparse_006_str();
  if (sparse_006_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_006_str_ = new ::std::string;
  }
  sparse_006_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_006_str() {
  set_has_sparse_006_str();
  if (sparse_006_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_006_str_ = new ::std::string;
  }
  return sparse_006_str_;
}
inline ::std::string* Database_NoBench::release_sparse_006_str() {
  clear_has_sparse_006_str();
  if (sparse_006_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_006_str_;
    sparse_006_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_006_str(::std::string* sparse_006_str) {
  if (sparse_006_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_006_str_;
  }
  if (sparse_006_str) {
    set_has_sparse_006_str();
    sparse_006_str_ = sparse_006_str;
  } else {
    clear_has_sparse_006_str();
    sparse_006_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_007_str = 19;
inline bool Database_NoBench::has_sparse_007_str() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_007_str() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_007_str() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_007_str() {
  if (sparse_007_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_007_str_->clear();
  }
  clear_has_sparse_007_str();
}
inline const ::std::string& Database_NoBench::sparse_007_str() const {
  return *sparse_007_str_;
}
inline void Database_NoBench::set_sparse_007_str(const ::std::string& value) {
  set_has_sparse_007_str();
  if (sparse_007_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_007_str_ = new ::std::string;
  }
  sparse_007_str_->assign(value);
}
inline void Database_NoBench::set_sparse_007_str(const char* value) {
  set_has_sparse_007_str();
  if (sparse_007_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_007_str_ = new ::std::string;
  }
  sparse_007_str_->assign(value);
}
inline void Database_NoBench::set_sparse_007_str(const char* value, size_t size) {
  set_has_sparse_007_str();
  if (sparse_007_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_007_str_ = new ::std::string;
  }
  sparse_007_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_007_str() {
  set_has_sparse_007_str();
  if (sparse_007_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_007_str_ = new ::std::string;
  }
  return sparse_007_str_;
}
inline ::std::string* Database_NoBench::release_sparse_007_str() {
  clear_has_sparse_007_str();
  if (sparse_007_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_007_str_;
    sparse_007_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_007_str(::std::string* sparse_007_str) {
  if (sparse_007_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_007_str_;
  }
  if (sparse_007_str) {
    set_has_sparse_007_str();
    sparse_007_str_ = sparse_007_str;
  } else {
    clear_has_sparse_007_str();
    sparse_007_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_008_str = 20;
inline bool Database_NoBench::has_sparse_008_str() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_008_str() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_008_str() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_008_str() {
  if (sparse_008_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_008_str_->clear();
  }
  clear_has_sparse_008_str();
}
inline const ::std::string& Database_NoBench::sparse_008_str() const {
  return *sparse_008_str_;
}
inline void Database_NoBench::set_sparse_008_str(const ::std::string& value) {
  set_has_sparse_008_str();
  if (sparse_008_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_008_str_ = new ::std::string;
  }
  sparse_008_str_->assign(value);
}
inline void Database_NoBench::set_sparse_008_str(const char* value) {
  set_has_sparse_008_str();
  if (sparse_008_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_008_str_ = new ::std::string;
  }
  sparse_008_str_->assign(value);
}
inline void Database_NoBench::set_sparse_008_str(const char* value, size_t size) {
  set_has_sparse_008_str();
  if (sparse_008_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_008_str_ = new ::std::string;
  }
  sparse_008_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_008_str() {
  set_has_sparse_008_str();
  if (sparse_008_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_008_str_ = new ::std::string;
  }
  return sparse_008_str_;
}
inline ::std::string* Database_NoBench::release_sparse_008_str() {
  clear_has_sparse_008_str();
  if (sparse_008_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_008_str_;
    sparse_008_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_008_str(::std::string* sparse_008_str) {
  if (sparse_008_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_008_str_;
  }
  if (sparse_008_str) {
    set_has_sparse_008_str();
    sparse_008_str_ = sparse_008_str;
  } else {
    clear_has_sparse_008_str();
    sparse_008_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_009_str = 21;
inline bool Database_NoBench::has_sparse_009_str() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_009_str() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_009_str() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_009_str() {
  if (sparse_009_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_009_str_->clear();
  }
  clear_has_sparse_009_str();
}
inline const ::std::string& Database_NoBench::sparse_009_str() const {
  return *sparse_009_str_;
}
inline void Database_NoBench::set_sparse_009_str(const ::std::string& value) {
  set_has_sparse_009_str();
  if (sparse_009_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_009_str_ = new ::std::string;
  }
  sparse_009_str_->assign(value);
}
inline void Database_NoBench::set_sparse_009_str(const char* value) {
  set_has_sparse_009_str();
  if (sparse_009_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_009_str_ = new ::std::string;
  }
  sparse_009_str_->assign(value);
}
inline void Database_NoBench::set_sparse_009_str(const char* value, size_t size) {
  set_has_sparse_009_str();
  if (sparse_009_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_009_str_ = new ::std::string;
  }
  sparse_009_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_009_str() {
  set_has_sparse_009_str();
  if (sparse_009_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_009_str_ = new ::std::string;
  }
  return sparse_009_str_;
}
inline ::std::string* Database_NoBench::release_sparse_009_str() {
  clear_has_sparse_009_str();
  if (sparse_009_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_009_str_;
    sparse_009_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_009_str(::std::string* sparse_009_str) {
  if (sparse_009_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_009_str_;
  }
  if (sparse_009_str) {
    set_has_sparse_009_str();
    sparse_009_str_ = sparse_009_str;
  } else {
    clear_has_sparse_009_str();
    sparse_009_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_010_str = 22;
inline bool Database_NoBench::has_sparse_010_str() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_010_str() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_010_str() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_010_str() {
  if (sparse_010_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_010_str_->clear();
  }
  clear_has_sparse_010_str();
}
inline const ::std::string& Database_NoBench::sparse_010_str() const {
  return *sparse_010_str_;
}
inline void Database_NoBench::set_sparse_010_str(const ::std::string& value) {
  set_has_sparse_010_str();
  if (sparse_010_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_010_str_ = new ::std::string;
  }
  sparse_010_str_->assign(value);
}
inline void Database_NoBench::set_sparse_010_str(const char* value) {
  set_has_sparse_010_str();
  if (sparse_010_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_010_str_ = new ::std::string;
  }
  sparse_010_str_->assign(value);
}
inline void Database_NoBench::set_sparse_010_str(const char* value, size_t size) {
  set_has_sparse_010_str();
  if (sparse_010_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_010_str_ = new ::std::string;
  }
  sparse_010_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_010_str() {
  set_has_sparse_010_str();
  if (sparse_010_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_010_str_ = new ::std::string;
  }
  return sparse_010_str_;
}
inline ::std::string* Database_NoBench::release_sparse_010_str() {
  clear_has_sparse_010_str();
  if (sparse_010_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_010_str_;
    sparse_010_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_010_str(::std::string* sparse_010_str) {
  if (sparse_010_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_010_str_;
  }
  if (sparse_010_str) {
    set_has_sparse_010_str();
    sparse_010_str_ = sparse_010_str;
  } else {
    clear_has_sparse_010_str();
    sparse_010_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_011_str = 23;
inline bool Database_NoBench::has_sparse_011_str() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_011_str() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_011_str() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_011_str() {
  if (sparse_011_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_011_str_->clear();
  }
  clear_has_sparse_011_str();
}
inline const ::std::string& Database_NoBench::sparse_011_str() const {
  return *sparse_011_str_;
}
inline void Database_NoBench::set_sparse_011_str(const ::std::string& value) {
  set_has_sparse_011_str();
  if (sparse_011_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_011_str_ = new ::std::string;
  }
  sparse_011_str_->assign(value);
}
inline void Database_NoBench::set_sparse_011_str(const char* value) {
  set_has_sparse_011_str();
  if (sparse_011_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_011_str_ = new ::std::string;
  }
  sparse_011_str_->assign(value);
}
inline void Database_NoBench::set_sparse_011_str(const char* value, size_t size) {
  set_has_sparse_011_str();
  if (sparse_011_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_011_str_ = new ::std::string;
  }
  sparse_011_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_011_str() {
  set_has_sparse_011_str();
  if (sparse_011_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_011_str_ = new ::std::string;
  }
  return sparse_011_str_;
}
inline ::std::string* Database_NoBench::release_sparse_011_str() {
  clear_has_sparse_011_str();
  if (sparse_011_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_011_str_;
    sparse_011_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_011_str(::std::string* sparse_011_str) {
  if (sparse_011_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_011_str_;
  }
  if (sparse_011_str) {
    set_has_sparse_011_str();
    sparse_011_str_ = sparse_011_str;
  } else {
    clear_has_sparse_011_str();
    sparse_011_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_012_str = 24;
inline bool Database_NoBench::has_sparse_012_str() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_012_str() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_012_str() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_012_str() {
  if (sparse_012_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_012_str_->clear();
  }
  clear_has_sparse_012_str();
}
inline const ::std::string& Database_NoBench::sparse_012_str() const {
  return *sparse_012_str_;
}
inline void Database_NoBench::set_sparse_012_str(const ::std::string& value) {
  set_has_sparse_012_str();
  if (sparse_012_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_012_str_ = new ::std::string;
  }
  sparse_012_str_->assign(value);
}
inline void Database_NoBench::set_sparse_012_str(const char* value) {
  set_has_sparse_012_str();
  if (sparse_012_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_012_str_ = new ::std::string;
  }
  sparse_012_str_->assign(value);
}
inline void Database_NoBench::set_sparse_012_str(const char* value, size_t size) {
  set_has_sparse_012_str();
  if (sparse_012_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_012_str_ = new ::std::string;
  }
  sparse_012_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_012_str() {
  set_has_sparse_012_str();
  if (sparse_012_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_012_str_ = new ::std::string;
  }
  return sparse_012_str_;
}
inline ::std::string* Database_NoBench::release_sparse_012_str() {
  clear_has_sparse_012_str();
  if (sparse_012_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_012_str_;
    sparse_012_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_012_str(::std::string* sparse_012_str) {
  if (sparse_012_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_012_str_;
  }
  if (sparse_012_str) {
    set_has_sparse_012_str();
    sparse_012_str_ = sparse_012_str;
  } else {
    clear_has_sparse_012_str();
    sparse_012_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_013_str = 25;
inline bool Database_NoBench::has_sparse_013_str() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_013_str() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_013_str() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_013_str() {
  if (sparse_013_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_013_str_->clear();
  }
  clear_has_sparse_013_str();
}
inline const ::std::string& Database_NoBench::sparse_013_str() const {
  return *sparse_013_str_;
}
inline void Database_NoBench::set_sparse_013_str(const ::std::string& value) {
  set_has_sparse_013_str();
  if (sparse_013_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_013_str_ = new ::std::string;
  }
  sparse_013_str_->assign(value);
}
inline void Database_NoBench::set_sparse_013_str(const char* value) {
  set_has_sparse_013_str();
  if (sparse_013_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_013_str_ = new ::std::string;
  }
  sparse_013_str_->assign(value);
}
inline void Database_NoBench::set_sparse_013_str(const char* value, size_t size) {
  set_has_sparse_013_str();
  if (sparse_013_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_013_str_ = new ::std::string;
  }
  sparse_013_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_013_str() {
  set_has_sparse_013_str();
  if (sparse_013_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_013_str_ = new ::std::string;
  }
  return sparse_013_str_;
}
inline ::std::string* Database_NoBench::release_sparse_013_str() {
  clear_has_sparse_013_str();
  if (sparse_013_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_013_str_;
    sparse_013_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_013_str(::std::string* sparse_013_str) {
  if (sparse_013_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_013_str_;
  }
  if (sparse_013_str) {
    set_has_sparse_013_str();
    sparse_013_str_ = sparse_013_str;
  } else {
    clear_has_sparse_013_str();
    sparse_013_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_014_str = 26;
inline bool Database_NoBench::has_sparse_014_str() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_014_str() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_014_str() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_014_str() {
  if (sparse_014_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_014_str_->clear();
  }
  clear_has_sparse_014_str();
}
inline const ::std::string& Database_NoBench::sparse_014_str() const {
  return *sparse_014_str_;
}
inline void Database_NoBench::set_sparse_014_str(const ::std::string& value) {
  set_has_sparse_014_str();
  if (sparse_014_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_014_str_ = new ::std::string;
  }
  sparse_014_str_->assign(value);
}
inline void Database_NoBench::set_sparse_014_str(const char* value) {
  set_has_sparse_014_str();
  if (sparse_014_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_014_str_ = new ::std::string;
  }
  sparse_014_str_->assign(value);
}
inline void Database_NoBench::set_sparse_014_str(const char* value, size_t size) {
  set_has_sparse_014_str();
  if (sparse_014_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_014_str_ = new ::std::string;
  }
  sparse_014_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_014_str() {
  set_has_sparse_014_str();
  if (sparse_014_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_014_str_ = new ::std::string;
  }
  return sparse_014_str_;
}
inline ::std::string* Database_NoBench::release_sparse_014_str() {
  clear_has_sparse_014_str();
  if (sparse_014_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_014_str_;
    sparse_014_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_014_str(::std::string* sparse_014_str) {
  if (sparse_014_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_014_str_;
  }
  if (sparse_014_str) {
    set_has_sparse_014_str();
    sparse_014_str_ = sparse_014_str;
  } else {
    clear_has_sparse_014_str();
    sparse_014_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_015_str = 27;
inline bool Database_NoBench::has_sparse_015_str() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_015_str() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_015_str() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_015_str() {
  if (sparse_015_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_015_str_->clear();
  }
  clear_has_sparse_015_str();
}
inline const ::std::string& Database_NoBench::sparse_015_str() const {
  return *sparse_015_str_;
}
inline void Database_NoBench::set_sparse_015_str(const ::std::string& value) {
  set_has_sparse_015_str();
  if (sparse_015_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_015_str_ = new ::std::string;
  }
  sparse_015_str_->assign(value);
}
inline void Database_NoBench::set_sparse_015_str(const char* value) {
  set_has_sparse_015_str();
  if (sparse_015_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_015_str_ = new ::std::string;
  }
  sparse_015_str_->assign(value);
}
inline void Database_NoBench::set_sparse_015_str(const char* value, size_t size) {
  set_has_sparse_015_str();
  if (sparse_015_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_015_str_ = new ::std::string;
  }
  sparse_015_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_015_str() {
  set_has_sparse_015_str();
  if (sparse_015_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_015_str_ = new ::std::string;
  }
  return sparse_015_str_;
}
inline ::std::string* Database_NoBench::release_sparse_015_str() {
  clear_has_sparse_015_str();
  if (sparse_015_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_015_str_;
    sparse_015_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_015_str(::std::string* sparse_015_str) {
  if (sparse_015_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_015_str_;
  }
  if (sparse_015_str) {
    set_has_sparse_015_str();
    sparse_015_str_ = sparse_015_str;
  } else {
    clear_has_sparse_015_str();
    sparse_015_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_016_str = 28;
inline bool Database_NoBench::has_sparse_016_str() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_016_str() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_016_str() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_016_str() {
  if (sparse_016_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_016_str_->clear();
  }
  clear_has_sparse_016_str();
}
inline const ::std::string& Database_NoBench::sparse_016_str() const {
  return *sparse_016_str_;
}
inline void Database_NoBench::set_sparse_016_str(const ::std::string& value) {
  set_has_sparse_016_str();
  if (sparse_016_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_016_str_ = new ::std::string;
  }
  sparse_016_str_->assign(value);
}
inline void Database_NoBench::set_sparse_016_str(const char* value) {
  set_has_sparse_016_str();
  if (sparse_016_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_016_str_ = new ::std::string;
  }
  sparse_016_str_->assign(value);
}
inline void Database_NoBench::set_sparse_016_str(const char* value, size_t size) {
  set_has_sparse_016_str();
  if (sparse_016_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_016_str_ = new ::std::string;
  }
  sparse_016_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_016_str() {
  set_has_sparse_016_str();
  if (sparse_016_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_016_str_ = new ::std::string;
  }
  return sparse_016_str_;
}
inline ::std::string* Database_NoBench::release_sparse_016_str() {
  clear_has_sparse_016_str();
  if (sparse_016_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_016_str_;
    sparse_016_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_016_str(::std::string* sparse_016_str) {
  if (sparse_016_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_016_str_;
  }
  if (sparse_016_str) {
    set_has_sparse_016_str();
    sparse_016_str_ = sparse_016_str;
  } else {
    clear_has_sparse_016_str();
    sparse_016_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_017_str = 29;
inline bool Database_NoBench::has_sparse_017_str() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_017_str() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_017_str() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_017_str() {
  if (sparse_017_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_017_str_->clear();
  }
  clear_has_sparse_017_str();
}
inline const ::std::string& Database_NoBench::sparse_017_str() const {
  return *sparse_017_str_;
}
inline void Database_NoBench::set_sparse_017_str(const ::std::string& value) {
  set_has_sparse_017_str();
  if (sparse_017_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_017_str_ = new ::std::string;
  }
  sparse_017_str_->assign(value);
}
inline void Database_NoBench::set_sparse_017_str(const char* value) {
  set_has_sparse_017_str();
  if (sparse_017_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_017_str_ = new ::std::string;
  }
  sparse_017_str_->assign(value);
}
inline void Database_NoBench::set_sparse_017_str(const char* value, size_t size) {
  set_has_sparse_017_str();
  if (sparse_017_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_017_str_ = new ::std::string;
  }
  sparse_017_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_017_str() {
  set_has_sparse_017_str();
  if (sparse_017_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_017_str_ = new ::std::string;
  }
  return sparse_017_str_;
}
inline ::std::string* Database_NoBench::release_sparse_017_str() {
  clear_has_sparse_017_str();
  if (sparse_017_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_017_str_;
    sparse_017_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_017_str(::std::string* sparse_017_str) {
  if (sparse_017_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_017_str_;
  }
  if (sparse_017_str) {
    set_has_sparse_017_str();
    sparse_017_str_ = sparse_017_str;
  } else {
    clear_has_sparse_017_str();
    sparse_017_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_018_str = 30;
inline bool Database_NoBench::has_sparse_018_str() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_018_str() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_018_str() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_018_str() {
  if (sparse_018_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_018_str_->clear();
  }
  clear_has_sparse_018_str();
}
inline const ::std::string& Database_NoBench::sparse_018_str() const {
  return *sparse_018_str_;
}
inline void Database_NoBench::set_sparse_018_str(const ::std::string& value) {
  set_has_sparse_018_str();
  if (sparse_018_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_018_str_ = new ::std::string;
  }
  sparse_018_str_->assign(value);
}
inline void Database_NoBench::set_sparse_018_str(const char* value) {
  set_has_sparse_018_str();
  if (sparse_018_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_018_str_ = new ::std::string;
  }
  sparse_018_str_->assign(value);
}
inline void Database_NoBench::set_sparse_018_str(const char* value, size_t size) {
  set_has_sparse_018_str();
  if (sparse_018_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_018_str_ = new ::std::string;
  }
  sparse_018_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_018_str() {
  set_has_sparse_018_str();
  if (sparse_018_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_018_str_ = new ::std::string;
  }
  return sparse_018_str_;
}
inline ::std::string* Database_NoBench::release_sparse_018_str() {
  clear_has_sparse_018_str();
  if (sparse_018_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_018_str_;
    sparse_018_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_018_str(::std::string* sparse_018_str) {
  if (sparse_018_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_018_str_;
  }
  if (sparse_018_str) {
    set_has_sparse_018_str();
    sparse_018_str_ = sparse_018_str;
  } else {
    clear_has_sparse_018_str();
    sparse_018_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_019_str = 31;
inline bool Database_NoBench::has_sparse_019_str() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_019_str() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_019_str() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_019_str() {
  if (sparse_019_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_019_str_->clear();
  }
  clear_has_sparse_019_str();
}
inline const ::std::string& Database_NoBench::sparse_019_str() const {
  return *sparse_019_str_;
}
inline void Database_NoBench::set_sparse_019_str(const ::std::string& value) {
  set_has_sparse_019_str();
  if (sparse_019_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_019_str_ = new ::std::string;
  }
  sparse_019_str_->assign(value);
}
inline void Database_NoBench::set_sparse_019_str(const char* value) {
  set_has_sparse_019_str();
  if (sparse_019_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_019_str_ = new ::std::string;
  }
  sparse_019_str_->assign(value);
}
inline void Database_NoBench::set_sparse_019_str(const char* value, size_t size) {
  set_has_sparse_019_str();
  if (sparse_019_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_019_str_ = new ::std::string;
  }
  sparse_019_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_019_str() {
  set_has_sparse_019_str();
  if (sparse_019_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_019_str_ = new ::std::string;
  }
  return sparse_019_str_;
}
inline ::std::string* Database_NoBench::release_sparse_019_str() {
  clear_has_sparse_019_str();
  if (sparse_019_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_019_str_;
    sparse_019_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_019_str(::std::string* sparse_019_str) {
  if (sparse_019_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_019_str_;
  }
  if (sparse_019_str) {
    set_has_sparse_019_str();
    sparse_019_str_ = sparse_019_str;
  } else {
    clear_has_sparse_019_str();
    sparse_019_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_020_str = 32;
inline bool Database_NoBench::has_sparse_020_str() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_020_str() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_020_str() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_020_str() {
  if (sparse_020_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_020_str_->clear();
  }
  clear_has_sparse_020_str();
}
inline const ::std::string& Database_NoBench::sparse_020_str() const {
  return *sparse_020_str_;
}
inline void Database_NoBench::set_sparse_020_str(const ::std::string& value) {
  set_has_sparse_020_str();
  if (sparse_020_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_020_str_ = new ::std::string;
  }
  sparse_020_str_->assign(value);
}
inline void Database_NoBench::set_sparse_020_str(const char* value) {
  set_has_sparse_020_str();
  if (sparse_020_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_020_str_ = new ::std::string;
  }
  sparse_020_str_->assign(value);
}
inline void Database_NoBench::set_sparse_020_str(const char* value, size_t size) {
  set_has_sparse_020_str();
  if (sparse_020_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_020_str_ = new ::std::string;
  }
  sparse_020_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_020_str() {
  set_has_sparse_020_str();
  if (sparse_020_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_020_str_ = new ::std::string;
  }
  return sparse_020_str_;
}
inline ::std::string* Database_NoBench::release_sparse_020_str() {
  clear_has_sparse_020_str();
  if (sparse_020_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_020_str_;
    sparse_020_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_020_str(::std::string* sparse_020_str) {
  if (sparse_020_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_020_str_;
  }
  if (sparse_020_str) {
    set_has_sparse_020_str();
    sparse_020_str_ = sparse_020_str;
  } else {
    clear_has_sparse_020_str();
    sparse_020_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_021_str = 33;
inline bool Database_NoBench::has_sparse_021_str() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_021_str() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_021_str() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_021_str() {
  if (sparse_021_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_021_str_->clear();
  }
  clear_has_sparse_021_str();
}
inline const ::std::string& Database_NoBench::sparse_021_str() const {
  return *sparse_021_str_;
}
inline void Database_NoBench::set_sparse_021_str(const ::std::string& value) {
  set_has_sparse_021_str();
  if (sparse_021_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_021_str_ = new ::std::string;
  }
  sparse_021_str_->assign(value);
}
inline void Database_NoBench::set_sparse_021_str(const char* value) {
  set_has_sparse_021_str();
  if (sparse_021_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_021_str_ = new ::std::string;
  }
  sparse_021_str_->assign(value);
}
inline void Database_NoBench::set_sparse_021_str(const char* value, size_t size) {
  set_has_sparse_021_str();
  if (sparse_021_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_021_str_ = new ::std::string;
  }
  sparse_021_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_021_str() {
  set_has_sparse_021_str();
  if (sparse_021_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_021_str_ = new ::std::string;
  }
  return sparse_021_str_;
}
inline ::std::string* Database_NoBench::release_sparse_021_str() {
  clear_has_sparse_021_str();
  if (sparse_021_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_021_str_;
    sparse_021_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_021_str(::std::string* sparse_021_str) {
  if (sparse_021_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_021_str_;
  }
  if (sparse_021_str) {
    set_has_sparse_021_str();
    sparse_021_str_ = sparse_021_str;
  } else {
    clear_has_sparse_021_str();
    sparse_021_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_022_str = 34;
inline bool Database_NoBench::has_sparse_022_str() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_022_str() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_022_str() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_022_str() {
  if (sparse_022_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_022_str_->clear();
  }
  clear_has_sparse_022_str();
}
inline const ::std::string& Database_NoBench::sparse_022_str() const {
  return *sparse_022_str_;
}
inline void Database_NoBench::set_sparse_022_str(const ::std::string& value) {
  set_has_sparse_022_str();
  if (sparse_022_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_022_str_ = new ::std::string;
  }
  sparse_022_str_->assign(value);
}
inline void Database_NoBench::set_sparse_022_str(const char* value) {
  set_has_sparse_022_str();
  if (sparse_022_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_022_str_ = new ::std::string;
  }
  sparse_022_str_->assign(value);
}
inline void Database_NoBench::set_sparse_022_str(const char* value, size_t size) {
  set_has_sparse_022_str();
  if (sparse_022_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_022_str_ = new ::std::string;
  }
  sparse_022_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_022_str() {
  set_has_sparse_022_str();
  if (sparse_022_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_022_str_ = new ::std::string;
  }
  return sparse_022_str_;
}
inline ::std::string* Database_NoBench::release_sparse_022_str() {
  clear_has_sparse_022_str();
  if (sparse_022_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_022_str_;
    sparse_022_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_022_str(::std::string* sparse_022_str) {
  if (sparse_022_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_022_str_;
  }
  if (sparse_022_str) {
    set_has_sparse_022_str();
    sparse_022_str_ = sparse_022_str;
  } else {
    clear_has_sparse_022_str();
    sparse_022_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_023_str = 35;
inline bool Database_NoBench::has_sparse_023_str() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_023_str() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_023_str() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_023_str() {
  if (sparse_023_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_023_str_->clear();
  }
  clear_has_sparse_023_str();
}
inline const ::std::string& Database_NoBench::sparse_023_str() const {
  return *sparse_023_str_;
}
inline void Database_NoBench::set_sparse_023_str(const ::std::string& value) {
  set_has_sparse_023_str();
  if (sparse_023_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_023_str_ = new ::std::string;
  }
  sparse_023_str_->assign(value);
}
inline void Database_NoBench::set_sparse_023_str(const char* value) {
  set_has_sparse_023_str();
  if (sparse_023_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_023_str_ = new ::std::string;
  }
  sparse_023_str_->assign(value);
}
inline void Database_NoBench::set_sparse_023_str(const char* value, size_t size) {
  set_has_sparse_023_str();
  if (sparse_023_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_023_str_ = new ::std::string;
  }
  sparse_023_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_023_str() {
  set_has_sparse_023_str();
  if (sparse_023_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_023_str_ = new ::std::string;
  }
  return sparse_023_str_;
}
inline ::std::string* Database_NoBench::release_sparse_023_str() {
  clear_has_sparse_023_str();
  if (sparse_023_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_023_str_;
    sparse_023_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_023_str(::std::string* sparse_023_str) {
  if (sparse_023_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_023_str_;
  }
  if (sparse_023_str) {
    set_has_sparse_023_str();
    sparse_023_str_ = sparse_023_str;
  } else {
    clear_has_sparse_023_str();
    sparse_023_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_024_str = 36;
inline bool Database_NoBench::has_sparse_024_str() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_024_str() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_024_str() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_024_str() {
  if (sparse_024_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_024_str_->clear();
  }
  clear_has_sparse_024_str();
}
inline const ::std::string& Database_NoBench::sparse_024_str() const {
  return *sparse_024_str_;
}
inline void Database_NoBench::set_sparse_024_str(const ::std::string& value) {
  set_has_sparse_024_str();
  if (sparse_024_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_024_str_ = new ::std::string;
  }
  sparse_024_str_->assign(value);
}
inline void Database_NoBench::set_sparse_024_str(const char* value) {
  set_has_sparse_024_str();
  if (sparse_024_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_024_str_ = new ::std::string;
  }
  sparse_024_str_->assign(value);
}
inline void Database_NoBench::set_sparse_024_str(const char* value, size_t size) {
  set_has_sparse_024_str();
  if (sparse_024_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_024_str_ = new ::std::string;
  }
  sparse_024_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_024_str() {
  set_has_sparse_024_str();
  if (sparse_024_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_024_str_ = new ::std::string;
  }
  return sparse_024_str_;
}
inline ::std::string* Database_NoBench::release_sparse_024_str() {
  clear_has_sparse_024_str();
  if (sparse_024_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_024_str_;
    sparse_024_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_024_str(::std::string* sparse_024_str) {
  if (sparse_024_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_024_str_;
  }
  if (sparse_024_str) {
    set_has_sparse_024_str();
    sparse_024_str_ = sparse_024_str;
  } else {
    clear_has_sparse_024_str();
    sparse_024_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_025_str = 37;
inline bool Database_NoBench::has_sparse_025_str() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_025_str() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_025_str() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_025_str() {
  if (sparse_025_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_025_str_->clear();
  }
  clear_has_sparse_025_str();
}
inline const ::std::string& Database_NoBench::sparse_025_str() const {
  return *sparse_025_str_;
}
inline void Database_NoBench::set_sparse_025_str(const ::std::string& value) {
  set_has_sparse_025_str();
  if (sparse_025_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_025_str_ = new ::std::string;
  }
  sparse_025_str_->assign(value);
}
inline void Database_NoBench::set_sparse_025_str(const char* value) {
  set_has_sparse_025_str();
  if (sparse_025_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_025_str_ = new ::std::string;
  }
  sparse_025_str_->assign(value);
}
inline void Database_NoBench::set_sparse_025_str(const char* value, size_t size) {
  set_has_sparse_025_str();
  if (sparse_025_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_025_str_ = new ::std::string;
  }
  sparse_025_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_025_str() {
  set_has_sparse_025_str();
  if (sparse_025_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_025_str_ = new ::std::string;
  }
  return sparse_025_str_;
}
inline ::std::string* Database_NoBench::release_sparse_025_str() {
  clear_has_sparse_025_str();
  if (sparse_025_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_025_str_;
    sparse_025_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_025_str(::std::string* sparse_025_str) {
  if (sparse_025_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_025_str_;
  }
  if (sparse_025_str) {
    set_has_sparse_025_str();
    sparse_025_str_ = sparse_025_str;
  } else {
    clear_has_sparse_025_str();
    sparse_025_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_026_str = 38;
inline bool Database_NoBench::has_sparse_026_str() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_026_str() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_026_str() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_026_str() {
  if (sparse_026_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_026_str_->clear();
  }
  clear_has_sparse_026_str();
}
inline const ::std::string& Database_NoBench::sparse_026_str() const {
  return *sparse_026_str_;
}
inline void Database_NoBench::set_sparse_026_str(const ::std::string& value) {
  set_has_sparse_026_str();
  if (sparse_026_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_026_str_ = new ::std::string;
  }
  sparse_026_str_->assign(value);
}
inline void Database_NoBench::set_sparse_026_str(const char* value) {
  set_has_sparse_026_str();
  if (sparse_026_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_026_str_ = new ::std::string;
  }
  sparse_026_str_->assign(value);
}
inline void Database_NoBench::set_sparse_026_str(const char* value, size_t size) {
  set_has_sparse_026_str();
  if (sparse_026_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_026_str_ = new ::std::string;
  }
  sparse_026_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_026_str() {
  set_has_sparse_026_str();
  if (sparse_026_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_026_str_ = new ::std::string;
  }
  return sparse_026_str_;
}
inline ::std::string* Database_NoBench::release_sparse_026_str() {
  clear_has_sparse_026_str();
  if (sparse_026_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_026_str_;
    sparse_026_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_026_str(::std::string* sparse_026_str) {
  if (sparse_026_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_026_str_;
  }
  if (sparse_026_str) {
    set_has_sparse_026_str();
    sparse_026_str_ = sparse_026_str;
  } else {
    clear_has_sparse_026_str();
    sparse_026_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_027_str = 39;
inline bool Database_NoBench::has_sparse_027_str() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_027_str() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_027_str() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_027_str() {
  if (sparse_027_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_027_str_->clear();
  }
  clear_has_sparse_027_str();
}
inline const ::std::string& Database_NoBench::sparse_027_str() const {
  return *sparse_027_str_;
}
inline void Database_NoBench::set_sparse_027_str(const ::std::string& value) {
  set_has_sparse_027_str();
  if (sparse_027_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_027_str_ = new ::std::string;
  }
  sparse_027_str_->assign(value);
}
inline void Database_NoBench::set_sparse_027_str(const char* value) {
  set_has_sparse_027_str();
  if (sparse_027_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_027_str_ = new ::std::string;
  }
  sparse_027_str_->assign(value);
}
inline void Database_NoBench::set_sparse_027_str(const char* value, size_t size) {
  set_has_sparse_027_str();
  if (sparse_027_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_027_str_ = new ::std::string;
  }
  sparse_027_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_027_str() {
  set_has_sparse_027_str();
  if (sparse_027_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_027_str_ = new ::std::string;
  }
  return sparse_027_str_;
}
inline ::std::string* Database_NoBench::release_sparse_027_str() {
  clear_has_sparse_027_str();
  if (sparse_027_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_027_str_;
    sparse_027_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_027_str(::std::string* sparse_027_str) {
  if (sparse_027_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_027_str_;
  }
  if (sparse_027_str) {
    set_has_sparse_027_str();
    sparse_027_str_ = sparse_027_str;
  } else {
    clear_has_sparse_027_str();
    sparse_027_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_028_str = 40;
inline bool Database_NoBench::has_sparse_028_str() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_028_str() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_028_str() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_028_str() {
  if (sparse_028_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_028_str_->clear();
  }
  clear_has_sparse_028_str();
}
inline const ::std::string& Database_NoBench::sparse_028_str() const {
  return *sparse_028_str_;
}
inline void Database_NoBench::set_sparse_028_str(const ::std::string& value) {
  set_has_sparse_028_str();
  if (sparse_028_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_028_str_ = new ::std::string;
  }
  sparse_028_str_->assign(value);
}
inline void Database_NoBench::set_sparse_028_str(const char* value) {
  set_has_sparse_028_str();
  if (sparse_028_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_028_str_ = new ::std::string;
  }
  sparse_028_str_->assign(value);
}
inline void Database_NoBench::set_sparse_028_str(const char* value, size_t size) {
  set_has_sparse_028_str();
  if (sparse_028_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_028_str_ = new ::std::string;
  }
  sparse_028_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_028_str() {
  set_has_sparse_028_str();
  if (sparse_028_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_028_str_ = new ::std::string;
  }
  return sparse_028_str_;
}
inline ::std::string* Database_NoBench::release_sparse_028_str() {
  clear_has_sparse_028_str();
  if (sparse_028_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_028_str_;
    sparse_028_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_028_str(::std::string* sparse_028_str) {
  if (sparse_028_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_028_str_;
  }
  if (sparse_028_str) {
    set_has_sparse_028_str();
    sparse_028_str_ = sparse_028_str;
  } else {
    clear_has_sparse_028_str();
    sparse_028_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_029_str = 41;
inline bool Database_NoBench::has_sparse_029_str() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_029_str() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_029_str() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_029_str() {
  if (sparse_029_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_029_str_->clear();
  }
  clear_has_sparse_029_str();
}
inline const ::std::string& Database_NoBench::sparse_029_str() const {
  return *sparse_029_str_;
}
inline void Database_NoBench::set_sparse_029_str(const ::std::string& value) {
  set_has_sparse_029_str();
  if (sparse_029_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_029_str_ = new ::std::string;
  }
  sparse_029_str_->assign(value);
}
inline void Database_NoBench::set_sparse_029_str(const char* value) {
  set_has_sparse_029_str();
  if (sparse_029_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_029_str_ = new ::std::string;
  }
  sparse_029_str_->assign(value);
}
inline void Database_NoBench::set_sparse_029_str(const char* value, size_t size) {
  set_has_sparse_029_str();
  if (sparse_029_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_029_str_ = new ::std::string;
  }
  sparse_029_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_029_str() {
  set_has_sparse_029_str();
  if (sparse_029_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_029_str_ = new ::std::string;
  }
  return sparse_029_str_;
}
inline ::std::string* Database_NoBench::release_sparse_029_str() {
  clear_has_sparse_029_str();
  if (sparse_029_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_029_str_;
    sparse_029_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_029_str(::std::string* sparse_029_str) {
  if (sparse_029_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_029_str_;
  }
  if (sparse_029_str) {
    set_has_sparse_029_str();
    sparse_029_str_ = sparse_029_str;
  } else {
    clear_has_sparse_029_str();
    sparse_029_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_030_str = 42;
inline bool Database_NoBench::has_sparse_030_str() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_030_str() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_030_str() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_030_str() {
  if (sparse_030_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_030_str_->clear();
  }
  clear_has_sparse_030_str();
}
inline const ::std::string& Database_NoBench::sparse_030_str() const {
  return *sparse_030_str_;
}
inline void Database_NoBench::set_sparse_030_str(const ::std::string& value) {
  set_has_sparse_030_str();
  if (sparse_030_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_030_str_ = new ::std::string;
  }
  sparse_030_str_->assign(value);
}
inline void Database_NoBench::set_sparse_030_str(const char* value) {
  set_has_sparse_030_str();
  if (sparse_030_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_030_str_ = new ::std::string;
  }
  sparse_030_str_->assign(value);
}
inline void Database_NoBench::set_sparse_030_str(const char* value, size_t size) {
  set_has_sparse_030_str();
  if (sparse_030_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_030_str_ = new ::std::string;
  }
  sparse_030_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_030_str() {
  set_has_sparse_030_str();
  if (sparse_030_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_030_str_ = new ::std::string;
  }
  return sparse_030_str_;
}
inline ::std::string* Database_NoBench::release_sparse_030_str() {
  clear_has_sparse_030_str();
  if (sparse_030_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_030_str_;
    sparse_030_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_030_str(::std::string* sparse_030_str) {
  if (sparse_030_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_030_str_;
  }
  if (sparse_030_str) {
    set_has_sparse_030_str();
    sparse_030_str_ = sparse_030_str;
  } else {
    clear_has_sparse_030_str();
    sparse_030_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_031_str = 43;
inline bool Database_NoBench::has_sparse_031_str() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_031_str() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_031_str() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_031_str() {
  if (sparse_031_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_031_str_->clear();
  }
  clear_has_sparse_031_str();
}
inline const ::std::string& Database_NoBench::sparse_031_str() const {
  return *sparse_031_str_;
}
inline void Database_NoBench::set_sparse_031_str(const ::std::string& value) {
  set_has_sparse_031_str();
  if (sparse_031_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_031_str_ = new ::std::string;
  }
  sparse_031_str_->assign(value);
}
inline void Database_NoBench::set_sparse_031_str(const char* value) {
  set_has_sparse_031_str();
  if (sparse_031_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_031_str_ = new ::std::string;
  }
  sparse_031_str_->assign(value);
}
inline void Database_NoBench::set_sparse_031_str(const char* value, size_t size) {
  set_has_sparse_031_str();
  if (sparse_031_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_031_str_ = new ::std::string;
  }
  sparse_031_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_031_str() {
  set_has_sparse_031_str();
  if (sparse_031_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_031_str_ = new ::std::string;
  }
  return sparse_031_str_;
}
inline ::std::string* Database_NoBench::release_sparse_031_str() {
  clear_has_sparse_031_str();
  if (sparse_031_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_031_str_;
    sparse_031_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_031_str(::std::string* sparse_031_str) {
  if (sparse_031_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_031_str_;
  }
  if (sparse_031_str) {
    set_has_sparse_031_str();
    sparse_031_str_ = sparse_031_str;
  } else {
    clear_has_sparse_031_str();
    sparse_031_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_032_str = 44;
inline bool Database_NoBench::has_sparse_032_str() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_032_str() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_032_str() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_032_str() {
  if (sparse_032_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_032_str_->clear();
  }
  clear_has_sparse_032_str();
}
inline const ::std::string& Database_NoBench::sparse_032_str() const {
  return *sparse_032_str_;
}
inline void Database_NoBench::set_sparse_032_str(const ::std::string& value) {
  set_has_sparse_032_str();
  if (sparse_032_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_032_str_ = new ::std::string;
  }
  sparse_032_str_->assign(value);
}
inline void Database_NoBench::set_sparse_032_str(const char* value) {
  set_has_sparse_032_str();
  if (sparse_032_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_032_str_ = new ::std::string;
  }
  sparse_032_str_->assign(value);
}
inline void Database_NoBench::set_sparse_032_str(const char* value, size_t size) {
  set_has_sparse_032_str();
  if (sparse_032_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_032_str_ = new ::std::string;
  }
  sparse_032_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_032_str() {
  set_has_sparse_032_str();
  if (sparse_032_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_032_str_ = new ::std::string;
  }
  return sparse_032_str_;
}
inline ::std::string* Database_NoBench::release_sparse_032_str() {
  clear_has_sparse_032_str();
  if (sparse_032_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_032_str_;
    sparse_032_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_032_str(::std::string* sparse_032_str) {
  if (sparse_032_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_032_str_;
  }
  if (sparse_032_str) {
    set_has_sparse_032_str();
    sparse_032_str_ = sparse_032_str;
  } else {
    clear_has_sparse_032_str();
    sparse_032_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_033_str = 45;
inline bool Database_NoBench::has_sparse_033_str() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_033_str() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_033_str() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_033_str() {
  if (sparse_033_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_033_str_->clear();
  }
  clear_has_sparse_033_str();
}
inline const ::std::string& Database_NoBench::sparse_033_str() const {
  return *sparse_033_str_;
}
inline void Database_NoBench::set_sparse_033_str(const ::std::string& value) {
  set_has_sparse_033_str();
  if (sparse_033_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_033_str_ = new ::std::string;
  }
  sparse_033_str_->assign(value);
}
inline void Database_NoBench::set_sparse_033_str(const char* value) {
  set_has_sparse_033_str();
  if (sparse_033_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_033_str_ = new ::std::string;
  }
  sparse_033_str_->assign(value);
}
inline void Database_NoBench::set_sparse_033_str(const char* value, size_t size) {
  set_has_sparse_033_str();
  if (sparse_033_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_033_str_ = new ::std::string;
  }
  sparse_033_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_033_str() {
  set_has_sparse_033_str();
  if (sparse_033_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_033_str_ = new ::std::string;
  }
  return sparse_033_str_;
}
inline ::std::string* Database_NoBench::release_sparse_033_str() {
  clear_has_sparse_033_str();
  if (sparse_033_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_033_str_;
    sparse_033_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_033_str(::std::string* sparse_033_str) {
  if (sparse_033_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_033_str_;
  }
  if (sparse_033_str) {
    set_has_sparse_033_str();
    sparse_033_str_ = sparse_033_str;
  } else {
    clear_has_sparse_033_str();
    sparse_033_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_034_str = 46;
inline bool Database_NoBench::has_sparse_034_str() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_034_str() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_034_str() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_034_str() {
  if (sparse_034_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_034_str_->clear();
  }
  clear_has_sparse_034_str();
}
inline const ::std::string& Database_NoBench::sparse_034_str() const {
  return *sparse_034_str_;
}
inline void Database_NoBench::set_sparse_034_str(const ::std::string& value) {
  set_has_sparse_034_str();
  if (sparse_034_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_034_str_ = new ::std::string;
  }
  sparse_034_str_->assign(value);
}
inline void Database_NoBench::set_sparse_034_str(const char* value) {
  set_has_sparse_034_str();
  if (sparse_034_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_034_str_ = new ::std::string;
  }
  sparse_034_str_->assign(value);
}
inline void Database_NoBench::set_sparse_034_str(const char* value, size_t size) {
  set_has_sparse_034_str();
  if (sparse_034_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_034_str_ = new ::std::string;
  }
  sparse_034_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_034_str() {
  set_has_sparse_034_str();
  if (sparse_034_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_034_str_ = new ::std::string;
  }
  return sparse_034_str_;
}
inline ::std::string* Database_NoBench::release_sparse_034_str() {
  clear_has_sparse_034_str();
  if (sparse_034_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_034_str_;
    sparse_034_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_034_str(::std::string* sparse_034_str) {
  if (sparse_034_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_034_str_;
  }
  if (sparse_034_str) {
    set_has_sparse_034_str();
    sparse_034_str_ = sparse_034_str;
  } else {
    clear_has_sparse_034_str();
    sparse_034_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_035_str = 47;
inline bool Database_NoBench::has_sparse_035_str() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_035_str() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_035_str() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_035_str() {
  if (sparse_035_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_035_str_->clear();
  }
  clear_has_sparse_035_str();
}
inline const ::std::string& Database_NoBench::sparse_035_str() const {
  return *sparse_035_str_;
}
inline void Database_NoBench::set_sparse_035_str(const ::std::string& value) {
  set_has_sparse_035_str();
  if (sparse_035_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_035_str_ = new ::std::string;
  }
  sparse_035_str_->assign(value);
}
inline void Database_NoBench::set_sparse_035_str(const char* value) {
  set_has_sparse_035_str();
  if (sparse_035_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_035_str_ = new ::std::string;
  }
  sparse_035_str_->assign(value);
}
inline void Database_NoBench::set_sparse_035_str(const char* value, size_t size) {
  set_has_sparse_035_str();
  if (sparse_035_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_035_str_ = new ::std::string;
  }
  sparse_035_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_035_str() {
  set_has_sparse_035_str();
  if (sparse_035_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_035_str_ = new ::std::string;
  }
  return sparse_035_str_;
}
inline ::std::string* Database_NoBench::release_sparse_035_str() {
  clear_has_sparse_035_str();
  if (sparse_035_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_035_str_;
    sparse_035_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_035_str(::std::string* sparse_035_str) {
  if (sparse_035_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_035_str_;
  }
  if (sparse_035_str) {
    set_has_sparse_035_str();
    sparse_035_str_ = sparse_035_str;
  } else {
    clear_has_sparse_035_str();
    sparse_035_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_036_str = 48;
inline bool Database_NoBench::has_sparse_036_str() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_036_str() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_036_str() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_036_str() {
  if (sparse_036_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_036_str_->clear();
  }
  clear_has_sparse_036_str();
}
inline const ::std::string& Database_NoBench::sparse_036_str() const {
  return *sparse_036_str_;
}
inline void Database_NoBench::set_sparse_036_str(const ::std::string& value) {
  set_has_sparse_036_str();
  if (sparse_036_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_036_str_ = new ::std::string;
  }
  sparse_036_str_->assign(value);
}
inline void Database_NoBench::set_sparse_036_str(const char* value) {
  set_has_sparse_036_str();
  if (sparse_036_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_036_str_ = new ::std::string;
  }
  sparse_036_str_->assign(value);
}
inline void Database_NoBench::set_sparse_036_str(const char* value, size_t size) {
  set_has_sparse_036_str();
  if (sparse_036_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_036_str_ = new ::std::string;
  }
  sparse_036_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_036_str() {
  set_has_sparse_036_str();
  if (sparse_036_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_036_str_ = new ::std::string;
  }
  return sparse_036_str_;
}
inline ::std::string* Database_NoBench::release_sparse_036_str() {
  clear_has_sparse_036_str();
  if (sparse_036_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_036_str_;
    sparse_036_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_036_str(::std::string* sparse_036_str) {
  if (sparse_036_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_036_str_;
  }
  if (sparse_036_str) {
    set_has_sparse_036_str();
    sparse_036_str_ = sparse_036_str;
  } else {
    clear_has_sparse_036_str();
    sparse_036_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_037_str = 49;
inline bool Database_NoBench::has_sparse_037_str() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_037_str() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_037_str() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_037_str() {
  if (sparse_037_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_037_str_->clear();
  }
  clear_has_sparse_037_str();
}
inline const ::std::string& Database_NoBench::sparse_037_str() const {
  return *sparse_037_str_;
}
inline void Database_NoBench::set_sparse_037_str(const ::std::string& value) {
  set_has_sparse_037_str();
  if (sparse_037_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_037_str_ = new ::std::string;
  }
  sparse_037_str_->assign(value);
}
inline void Database_NoBench::set_sparse_037_str(const char* value) {
  set_has_sparse_037_str();
  if (sparse_037_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_037_str_ = new ::std::string;
  }
  sparse_037_str_->assign(value);
}
inline void Database_NoBench::set_sparse_037_str(const char* value, size_t size) {
  set_has_sparse_037_str();
  if (sparse_037_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_037_str_ = new ::std::string;
  }
  sparse_037_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_037_str() {
  set_has_sparse_037_str();
  if (sparse_037_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_037_str_ = new ::std::string;
  }
  return sparse_037_str_;
}
inline ::std::string* Database_NoBench::release_sparse_037_str() {
  clear_has_sparse_037_str();
  if (sparse_037_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_037_str_;
    sparse_037_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_037_str(::std::string* sparse_037_str) {
  if (sparse_037_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_037_str_;
  }
  if (sparse_037_str) {
    set_has_sparse_037_str();
    sparse_037_str_ = sparse_037_str;
  } else {
    clear_has_sparse_037_str();
    sparse_037_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_038_str = 50;
inline bool Database_NoBench::has_sparse_038_str() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_038_str() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_038_str() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_038_str() {
  if (sparse_038_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_038_str_->clear();
  }
  clear_has_sparse_038_str();
}
inline const ::std::string& Database_NoBench::sparse_038_str() const {
  return *sparse_038_str_;
}
inline void Database_NoBench::set_sparse_038_str(const ::std::string& value) {
  set_has_sparse_038_str();
  if (sparse_038_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_038_str_ = new ::std::string;
  }
  sparse_038_str_->assign(value);
}
inline void Database_NoBench::set_sparse_038_str(const char* value) {
  set_has_sparse_038_str();
  if (sparse_038_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_038_str_ = new ::std::string;
  }
  sparse_038_str_->assign(value);
}
inline void Database_NoBench::set_sparse_038_str(const char* value, size_t size) {
  set_has_sparse_038_str();
  if (sparse_038_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_038_str_ = new ::std::string;
  }
  sparse_038_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_038_str() {
  set_has_sparse_038_str();
  if (sparse_038_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_038_str_ = new ::std::string;
  }
  return sparse_038_str_;
}
inline ::std::string* Database_NoBench::release_sparse_038_str() {
  clear_has_sparse_038_str();
  if (sparse_038_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_038_str_;
    sparse_038_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_038_str(::std::string* sparse_038_str) {
  if (sparse_038_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_038_str_;
  }
  if (sparse_038_str) {
    set_has_sparse_038_str();
    sparse_038_str_ = sparse_038_str;
  } else {
    clear_has_sparse_038_str();
    sparse_038_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_039_str = 51;
inline bool Database_NoBench::has_sparse_039_str() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_039_str() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_039_str() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_039_str() {
  if (sparse_039_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_039_str_->clear();
  }
  clear_has_sparse_039_str();
}
inline const ::std::string& Database_NoBench::sparse_039_str() const {
  return *sparse_039_str_;
}
inline void Database_NoBench::set_sparse_039_str(const ::std::string& value) {
  set_has_sparse_039_str();
  if (sparse_039_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_039_str_ = new ::std::string;
  }
  sparse_039_str_->assign(value);
}
inline void Database_NoBench::set_sparse_039_str(const char* value) {
  set_has_sparse_039_str();
  if (sparse_039_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_039_str_ = new ::std::string;
  }
  sparse_039_str_->assign(value);
}
inline void Database_NoBench::set_sparse_039_str(const char* value, size_t size) {
  set_has_sparse_039_str();
  if (sparse_039_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_039_str_ = new ::std::string;
  }
  sparse_039_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_039_str() {
  set_has_sparse_039_str();
  if (sparse_039_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_039_str_ = new ::std::string;
  }
  return sparse_039_str_;
}
inline ::std::string* Database_NoBench::release_sparse_039_str() {
  clear_has_sparse_039_str();
  if (sparse_039_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_039_str_;
    sparse_039_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_039_str(::std::string* sparse_039_str) {
  if (sparse_039_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_039_str_;
  }
  if (sparse_039_str) {
    set_has_sparse_039_str();
    sparse_039_str_ = sparse_039_str;
  } else {
    clear_has_sparse_039_str();
    sparse_039_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_040_str = 52;
inline bool Database_NoBench::has_sparse_040_str() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_040_str() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_040_str() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_040_str() {
  if (sparse_040_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_040_str_->clear();
  }
  clear_has_sparse_040_str();
}
inline const ::std::string& Database_NoBench::sparse_040_str() const {
  return *sparse_040_str_;
}
inline void Database_NoBench::set_sparse_040_str(const ::std::string& value) {
  set_has_sparse_040_str();
  if (sparse_040_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_040_str_ = new ::std::string;
  }
  sparse_040_str_->assign(value);
}
inline void Database_NoBench::set_sparse_040_str(const char* value) {
  set_has_sparse_040_str();
  if (sparse_040_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_040_str_ = new ::std::string;
  }
  sparse_040_str_->assign(value);
}
inline void Database_NoBench::set_sparse_040_str(const char* value, size_t size) {
  set_has_sparse_040_str();
  if (sparse_040_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_040_str_ = new ::std::string;
  }
  sparse_040_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_040_str() {
  set_has_sparse_040_str();
  if (sparse_040_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_040_str_ = new ::std::string;
  }
  return sparse_040_str_;
}
inline ::std::string* Database_NoBench::release_sparse_040_str() {
  clear_has_sparse_040_str();
  if (sparse_040_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_040_str_;
    sparse_040_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_040_str(::std::string* sparse_040_str) {
  if (sparse_040_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_040_str_;
  }
  if (sparse_040_str) {
    set_has_sparse_040_str();
    sparse_040_str_ = sparse_040_str;
  } else {
    clear_has_sparse_040_str();
    sparse_040_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_041_str = 53;
inline bool Database_NoBench::has_sparse_041_str() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_041_str() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_041_str() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_041_str() {
  if (sparse_041_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_041_str_->clear();
  }
  clear_has_sparse_041_str();
}
inline const ::std::string& Database_NoBench::sparse_041_str() const {
  return *sparse_041_str_;
}
inline void Database_NoBench::set_sparse_041_str(const ::std::string& value) {
  set_has_sparse_041_str();
  if (sparse_041_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_041_str_ = new ::std::string;
  }
  sparse_041_str_->assign(value);
}
inline void Database_NoBench::set_sparse_041_str(const char* value) {
  set_has_sparse_041_str();
  if (sparse_041_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_041_str_ = new ::std::string;
  }
  sparse_041_str_->assign(value);
}
inline void Database_NoBench::set_sparse_041_str(const char* value, size_t size) {
  set_has_sparse_041_str();
  if (sparse_041_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_041_str_ = new ::std::string;
  }
  sparse_041_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_041_str() {
  set_has_sparse_041_str();
  if (sparse_041_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_041_str_ = new ::std::string;
  }
  return sparse_041_str_;
}
inline ::std::string* Database_NoBench::release_sparse_041_str() {
  clear_has_sparse_041_str();
  if (sparse_041_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_041_str_;
    sparse_041_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_041_str(::std::string* sparse_041_str) {
  if (sparse_041_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_041_str_;
  }
  if (sparse_041_str) {
    set_has_sparse_041_str();
    sparse_041_str_ = sparse_041_str;
  } else {
    clear_has_sparse_041_str();
    sparse_041_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_042_str = 54;
inline bool Database_NoBench::has_sparse_042_str() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_042_str() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_042_str() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_042_str() {
  if (sparse_042_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_042_str_->clear();
  }
  clear_has_sparse_042_str();
}
inline const ::std::string& Database_NoBench::sparse_042_str() const {
  return *sparse_042_str_;
}
inline void Database_NoBench::set_sparse_042_str(const ::std::string& value) {
  set_has_sparse_042_str();
  if (sparse_042_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_042_str_ = new ::std::string;
  }
  sparse_042_str_->assign(value);
}
inline void Database_NoBench::set_sparse_042_str(const char* value) {
  set_has_sparse_042_str();
  if (sparse_042_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_042_str_ = new ::std::string;
  }
  sparse_042_str_->assign(value);
}
inline void Database_NoBench::set_sparse_042_str(const char* value, size_t size) {
  set_has_sparse_042_str();
  if (sparse_042_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_042_str_ = new ::std::string;
  }
  sparse_042_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_042_str() {
  set_has_sparse_042_str();
  if (sparse_042_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_042_str_ = new ::std::string;
  }
  return sparse_042_str_;
}
inline ::std::string* Database_NoBench::release_sparse_042_str() {
  clear_has_sparse_042_str();
  if (sparse_042_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_042_str_;
    sparse_042_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_042_str(::std::string* sparse_042_str) {
  if (sparse_042_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_042_str_;
  }
  if (sparse_042_str) {
    set_has_sparse_042_str();
    sparse_042_str_ = sparse_042_str;
  } else {
    clear_has_sparse_042_str();
    sparse_042_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_043_str = 55;
inline bool Database_NoBench::has_sparse_043_str() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_043_str() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_043_str() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_043_str() {
  if (sparse_043_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_043_str_->clear();
  }
  clear_has_sparse_043_str();
}
inline const ::std::string& Database_NoBench::sparse_043_str() const {
  return *sparse_043_str_;
}
inline void Database_NoBench::set_sparse_043_str(const ::std::string& value) {
  set_has_sparse_043_str();
  if (sparse_043_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_043_str_ = new ::std::string;
  }
  sparse_043_str_->assign(value);
}
inline void Database_NoBench::set_sparse_043_str(const char* value) {
  set_has_sparse_043_str();
  if (sparse_043_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_043_str_ = new ::std::string;
  }
  sparse_043_str_->assign(value);
}
inline void Database_NoBench::set_sparse_043_str(const char* value, size_t size) {
  set_has_sparse_043_str();
  if (sparse_043_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_043_str_ = new ::std::string;
  }
  sparse_043_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_043_str() {
  set_has_sparse_043_str();
  if (sparse_043_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_043_str_ = new ::std::string;
  }
  return sparse_043_str_;
}
inline ::std::string* Database_NoBench::release_sparse_043_str() {
  clear_has_sparse_043_str();
  if (sparse_043_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_043_str_;
    sparse_043_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_043_str(::std::string* sparse_043_str) {
  if (sparse_043_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_043_str_;
  }
  if (sparse_043_str) {
    set_has_sparse_043_str();
    sparse_043_str_ = sparse_043_str;
  } else {
    clear_has_sparse_043_str();
    sparse_043_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_044_str = 56;
inline bool Database_NoBench::has_sparse_044_str() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_044_str() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_044_str() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_044_str() {
  if (sparse_044_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_044_str_->clear();
  }
  clear_has_sparse_044_str();
}
inline const ::std::string& Database_NoBench::sparse_044_str() const {
  return *sparse_044_str_;
}
inline void Database_NoBench::set_sparse_044_str(const ::std::string& value) {
  set_has_sparse_044_str();
  if (sparse_044_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_044_str_ = new ::std::string;
  }
  sparse_044_str_->assign(value);
}
inline void Database_NoBench::set_sparse_044_str(const char* value) {
  set_has_sparse_044_str();
  if (sparse_044_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_044_str_ = new ::std::string;
  }
  sparse_044_str_->assign(value);
}
inline void Database_NoBench::set_sparse_044_str(const char* value, size_t size) {
  set_has_sparse_044_str();
  if (sparse_044_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_044_str_ = new ::std::string;
  }
  sparse_044_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_044_str() {
  set_has_sparse_044_str();
  if (sparse_044_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_044_str_ = new ::std::string;
  }
  return sparse_044_str_;
}
inline ::std::string* Database_NoBench::release_sparse_044_str() {
  clear_has_sparse_044_str();
  if (sparse_044_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_044_str_;
    sparse_044_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_044_str(::std::string* sparse_044_str) {
  if (sparse_044_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_044_str_;
  }
  if (sparse_044_str) {
    set_has_sparse_044_str();
    sparse_044_str_ = sparse_044_str;
  } else {
    clear_has_sparse_044_str();
    sparse_044_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_045_str = 57;
inline bool Database_NoBench::has_sparse_045_str() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_045_str() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_045_str() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_045_str() {
  if (sparse_045_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_045_str_->clear();
  }
  clear_has_sparse_045_str();
}
inline const ::std::string& Database_NoBench::sparse_045_str() const {
  return *sparse_045_str_;
}
inline void Database_NoBench::set_sparse_045_str(const ::std::string& value) {
  set_has_sparse_045_str();
  if (sparse_045_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_045_str_ = new ::std::string;
  }
  sparse_045_str_->assign(value);
}
inline void Database_NoBench::set_sparse_045_str(const char* value) {
  set_has_sparse_045_str();
  if (sparse_045_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_045_str_ = new ::std::string;
  }
  sparse_045_str_->assign(value);
}
inline void Database_NoBench::set_sparse_045_str(const char* value, size_t size) {
  set_has_sparse_045_str();
  if (sparse_045_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_045_str_ = new ::std::string;
  }
  sparse_045_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_045_str() {
  set_has_sparse_045_str();
  if (sparse_045_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_045_str_ = new ::std::string;
  }
  return sparse_045_str_;
}
inline ::std::string* Database_NoBench::release_sparse_045_str() {
  clear_has_sparse_045_str();
  if (sparse_045_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_045_str_;
    sparse_045_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_045_str(::std::string* sparse_045_str) {
  if (sparse_045_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_045_str_;
  }
  if (sparse_045_str) {
    set_has_sparse_045_str();
    sparse_045_str_ = sparse_045_str;
  } else {
    clear_has_sparse_045_str();
    sparse_045_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_046_str = 58;
inline bool Database_NoBench::has_sparse_046_str() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_046_str() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_046_str() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_046_str() {
  if (sparse_046_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_046_str_->clear();
  }
  clear_has_sparse_046_str();
}
inline const ::std::string& Database_NoBench::sparse_046_str() const {
  return *sparse_046_str_;
}
inline void Database_NoBench::set_sparse_046_str(const ::std::string& value) {
  set_has_sparse_046_str();
  if (sparse_046_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_046_str_ = new ::std::string;
  }
  sparse_046_str_->assign(value);
}
inline void Database_NoBench::set_sparse_046_str(const char* value) {
  set_has_sparse_046_str();
  if (sparse_046_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_046_str_ = new ::std::string;
  }
  sparse_046_str_->assign(value);
}
inline void Database_NoBench::set_sparse_046_str(const char* value, size_t size) {
  set_has_sparse_046_str();
  if (sparse_046_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_046_str_ = new ::std::string;
  }
  sparse_046_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_046_str() {
  set_has_sparse_046_str();
  if (sparse_046_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_046_str_ = new ::std::string;
  }
  return sparse_046_str_;
}
inline ::std::string* Database_NoBench::release_sparse_046_str() {
  clear_has_sparse_046_str();
  if (sparse_046_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_046_str_;
    sparse_046_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_046_str(::std::string* sparse_046_str) {
  if (sparse_046_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_046_str_;
  }
  if (sparse_046_str) {
    set_has_sparse_046_str();
    sparse_046_str_ = sparse_046_str;
  } else {
    clear_has_sparse_046_str();
    sparse_046_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_047_str = 59;
inline bool Database_NoBench::has_sparse_047_str() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_047_str() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_047_str() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_047_str() {
  if (sparse_047_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_047_str_->clear();
  }
  clear_has_sparse_047_str();
}
inline const ::std::string& Database_NoBench::sparse_047_str() const {
  return *sparse_047_str_;
}
inline void Database_NoBench::set_sparse_047_str(const ::std::string& value) {
  set_has_sparse_047_str();
  if (sparse_047_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_047_str_ = new ::std::string;
  }
  sparse_047_str_->assign(value);
}
inline void Database_NoBench::set_sparse_047_str(const char* value) {
  set_has_sparse_047_str();
  if (sparse_047_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_047_str_ = new ::std::string;
  }
  sparse_047_str_->assign(value);
}
inline void Database_NoBench::set_sparse_047_str(const char* value, size_t size) {
  set_has_sparse_047_str();
  if (sparse_047_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_047_str_ = new ::std::string;
  }
  sparse_047_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_047_str() {
  set_has_sparse_047_str();
  if (sparse_047_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_047_str_ = new ::std::string;
  }
  return sparse_047_str_;
}
inline ::std::string* Database_NoBench::release_sparse_047_str() {
  clear_has_sparse_047_str();
  if (sparse_047_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_047_str_;
    sparse_047_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_047_str(::std::string* sparse_047_str) {
  if (sparse_047_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_047_str_;
  }
  if (sparse_047_str) {
    set_has_sparse_047_str();
    sparse_047_str_ = sparse_047_str;
  } else {
    clear_has_sparse_047_str();
    sparse_047_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_048_str = 60;
inline bool Database_NoBench::has_sparse_048_str() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_048_str() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_048_str() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_048_str() {
  if (sparse_048_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_048_str_->clear();
  }
  clear_has_sparse_048_str();
}
inline const ::std::string& Database_NoBench::sparse_048_str() const {
  return *sparse_048_str_;
}
inline void Database_NoBench::set_sparse_048_str(const ::std::string& value) {
  set_has_sparse_048_str();
  if (sparse_048_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_048_str_ = new ::std::string;
  }
  sparse_048_str_->assign(value);
}
inline void Database_NoBench::set_sparse_048_str(const char* value) {
  set_has_sparse_048_str();
  if (sparse_048_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_048_str_ = new ::std::string;
  }
  sparse_048_str_->assign(value);
}
inline void Database_NoBench::set_sparse_048_str(const char* value, size_t size) {
  set_has_sparse_048_str();
  if (sparse_048_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_048_str_ = new ::std::string;
  }
  sparse_048_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_048_str() {
  set_has_sparse_048_str();
  if (sparse_048_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_048_str_ = new ::std::string;
  }
  return sparse_048_str_;
}
inline ::std::string* Database_NoBench::release_sparse_048_str() {
  clear_has_sparse_048_str();
  if (sparse_048_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_048_str_;
    sparse_048_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_048_str(::std::string* sparse_048_str) {
  if (sparse_048_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_048_str_;
  }
  if (sparse_048_str) {
    set_has_sparse_048_str();
    sparse_048_str_ = sparse_048_str;
  } else {
    clear_has_sparse_048_str();
    sparse_048_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_049_str = 61;
inline bool Database_NoBench::has_sparse_049_str() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_049_str() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_049_str() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_049_str() {
  if (sparse_049_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_049_str_->clear();
  }
  clear_has_sparse_049_str();
}
inline const ::std::string& Database_NoBench::sparse_049_str() const {
  return *sparse_049_str_;
}
inline void Database_NoBench::set_sparse_049_str(const ::std::string& value) {
  set_has_sparse_049_str();
  if (sparse_049_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_049_str_ = new ::std::string;
  }
  sparse_049_str_->assign(value);
}
inline void Database_NoBench::set_sparse_049_str(const char* value) {
  set_has_sparse_049_str();
  if (sparse_049_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_049_str_ = new ::std::string;
  }
  sparse_049_str_->assign(value);
}
inline void Database_NoBench::set_sparse_049_str(const char* value, size_t size) {
  set_has_sparse_049_str();
  if (sparse_049_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_049_str_ = new ::std::string;
  }
  sparse_049_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_049_str() {
  set_has_sparse_049_str();
  if (sparse_049_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_049_str_ = new ::std::string;
  }
  return sparse_049_str_;
}
inline ::std::string* Database_NoBench::release_sparse_049_str() {
  clear_has_sparse_049_str();
  if (sparse_049_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_049_str_;
    sparse_049_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_049_str(::std::string* sparse_049_str) {
  if (sparse_049_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_049_str_;
  }
  if (sparse_049_str) {
    set_has_sparse_049_str();
    sparse_049_str_ = sparse_049_str;
  } else {
    clear_has_sparse_049_str();
    sparse_049_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_050_str = 62;
inline bool Database_NoBench::has_sparse_050_str() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_050_str() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_050_str() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_050_str() {
  if (sparse_050_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_050_str_->clear();
  }
  clear_has_sparse_050_str();
}
inline const ::std::string& Database_NoBench::sparse_050_str() const {
  return *sparse_050_str_;
}
inline void Database_NoBench::set_sparse_050_str(const ::std::string& value) {
  set_has_sparse_050_str();
  if (sparse_050_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_050_str_ = new ::std::string;
  }
  sparse_050_str_->assign(value);
}
inline void Database_NoBench::set_sparse_050_str(const char* value) {
  set_has_sparse_050_str();
  if (sparse_050_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_050_str_ = new ::std::string;
  }
  sparse_050_str_->assign(value);
}
inline void Database_NoBench::set_sparse_050_str(const char* value, size_t size) {
  set_has_sparse_050_str();
  if (sparse_050_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_050_str_ = new ::std::string;
  }
  sparse_050_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_050_str() {
  set_has_sparse_050_str();
  if (sparse_050_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_050_str_ = new ::std::string;
  }
  return sparse_050_str_;
}
inline ::std::string* Database_NoBench::release_sparse_050_str() {
  clear_has_sparse_050_str();
  if (sparse_050_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_050_str_;
    sparse_050_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_050_str(::std::string* sparse_050_str) {
  if (sparse_050_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_050_str_;
  }
  if (sparse_050_str) {
    set_has_sparse_050_str();
    sparse_050_str_ = sparse_050_str;
  } else {
    clear_has_sparse_050_str();
    sparse_050_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_051_str = 63;
inline bool Database_NoBench::has_sparse_051_str() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_051_str() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_051_str() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_051_str() {
  if (sparse_051_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_051_str_->clear();
  }
  clear_has_sparse_051_str();
}
inline const ::std::string& Database_NoBench::sparse_051_str() const {
  return *sparse_051_str_;
}
inline void Database_NoBench::set_sparse_051_str(const ::std::string& value) {
  set_has_sparse_051_str();
  if (sparse_051_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_051_str_ = new ::std::string;
  }
  sparse_051_str_->assign(value);
}
inline void Database_NoBench::set_sparse_051_str(const char* value) {
  set_has_sparse_051_str();
  if (sparse_051_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_051_str_ = new ::std::string;
  }
  sparse_051_str_->assign(value);
}
inline void Database_NoBench::set_sparse_051_str(const char* value, size_t size) {
  set_has_sparse_051_str();
  if (sparse_051_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_051_str_ = new ::std::string;
  }
  sparse_051_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_051_str() {
  set_has_sparse_051_str();
  if (sparse_051_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_051_str_ = new ::std::string;
  }
  return sparse_051_str_;
}
inline ::std::string* Database_NoBench::release_sparse_051_str() {
  clear_has_sparse_051_str();
  if (sparse_051_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_051_str_;
    sparse_051_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_051_str(::std::string* sparse_051_str) {
  if (sparse_051_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_051_str_;
  }
  if (sparse_051_str) {
    set_has_sparse_051_str();
    sparse_051_str_ = sparse_051_str;
  } else {
    clear_has_sparse_051_str();
    sparse_051_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_052_str = 64;
inline bool Database_NoBench::has_sparse_052_str() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_052_str() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_052_str() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_052_str() {
  if (sparse_052_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_052_str_->clear();
  }
  clear_has_sparse_052_str();
}
inline const ::std::string& Database_NoBench::sparse_052_str() const {
  return *sparse_052_str_;
}
inline void Database_NoBench::set_sparse_052_str(const ::std::string& value) {
  set_has_sparse_052_str();
  if (sparse_052_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_052_str_ = new ::std::string;
  }
  sparse_052_str_->assign(value);
}
inline void Database_NoBench::set_sparse_052_str(const char* value) {
  set_has_sparse_052_str();
  if (sparse_052_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_052_str_ = new ::std::string;
  }
  sparse_052_str_->assign(value);
}
inline void Database_NoBench::set_sparse_052_str(const char* value, size_t size) {
  set_has_sparse_052_str();
  if (sparse_052_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_052_str_ = new ::std::string;
  }
  sparse_052_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_052_str() {
  set_has_sparse_052_str();
  if (sparse_052_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_052_str_ = new ::std::string;
  }
  return sparse_052_str_;
}
inline ::std::string* Database_NoBench::release_sparse_052_str() {
  clear_has_sparse_052_str();
  if (sparse_052_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_052_str_;
    sparse_052_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_052_str(::std::string* sparse_052_str) {
  if (sparse_052_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_052_str_;
  }
  if (sparse_052_str) {
    set_has_sparse_052_str();
    sparse_052_str_ = sparse_052_str;
  } else {
    clear_has_sparse_052_str();
    sparse_052_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_053_str = 65;
inline bool Database_NoBench::has_sparse_053_str() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_053_str() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_053_str() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_053_str() {
  if (sparse_053_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_053_str_->clear();
  }
  clear_has_sparse_053_str();
}
inline const ::std::string& Database_NoBench::sparse_053_str() const {
  return *sparse_053_str_;
}
inline void Database_NoBench::set_sparse_053_str(const ::std::string& value) {
  set_has_sparse_053_str();
  if (sparse_053_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_053_str_ = new ::std::string;
  }
  sparse_053_str_->assign(value);
}
inline void Database_NoBench::set_sparse_053_str(const char* value) {
  set_has_sparse_053_str();
  if (sparse_053_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_053_str_ = new ::std::string;
  }
  sparse_053_str_->assign(value);
}
inline void Database_NoBench::set_sparse_053_str(const char* value, size_t size) {
  set_has_sparse_053_str();
  if (sparse_053_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_053_str_ = new ::std::string;
  }
  sparse_053_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_053_str() {
  set_has_sparse_053_str();
  if (sparse_053_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_053_str_ = new ::std::string;
  }
  return sparse_053_str_;
}
inline ::std::string* Database_NoBench::release_sparse_053_str() {
  clear_has_sparse_053_str();
  if (sparse_053_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_053_str_;
    sparse_053_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_053_str(::std::string* sparse_053_str) {
  if (sparse_053_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_053_str_;
  }
  if (sparse_053_str) {
    set_has_sparse_053_str();
    sparse_053_str_ = sparse_053_str;
  } else {
    clear_has_sparse_053_str();
    sparse_053_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_054_str = 66;
inline bool Database_NoBench::has_sparse_054_str() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_054_str() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_054_str() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_054_str() {
  if (sparse_054_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_054_str_->clear();
  }
  clear_has_sparse_054_str();
}
inline const ::std::string& Database_NoBench::sparse_054_str() const {
  return *sparse_054_str_;
}
inline void Database_NoBench::set_sparse_054_str(const ::std::string& value) {
  set_has_sparse_054_str();
  if (sparse_054_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_054_str_ = new ::std::string;
  }
  sparse_054_str_->assign(value);
}
inline void Database_NoBench::set_sparse_054_str(const char* value) {
  set_has_sparse_054_str();
  if (sparse_054_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_054_str_ = new ::std::string;
  }
  sparse_054_str_->assign(value);
}
inline void Database_NoBench::set_sparse_054_str(const char* value, size_t size) {
  set_has_sparse_054_str();
  if (sparse_054_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_054_str_ = new ::std::string;
  }
  sparse_054_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_054_str() {
  set_has_sparse_054_str();
  if (sparse_054_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_054_str_ = new ::std::string;
  }
  return sparse_054_str_;
}
inline ::std::string* Database_NoBench::release_sparse_054_str() {
  clear_has_sparse_054_str();
  if (sparse_054_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_054_str_;
    sparse_054_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_054_str(::std::string* sparse_054_str) {
  if (sparse_054_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_054_str_;
  }
  if (sparse_054_str) {
    set_has_sparse_054_str();
    sparse_054_str_ = sparse_054_str;
  } else {
    clear_has_sparse_054_str();
    sparse_054_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_055_str = 67;
inline bool Database_NoBench::has_sparse_055_str() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_055_str() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_055_str() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_055_str() {
  if (sparse_055_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_055_str_->clear();
  }
  clear_has_sparse_055_str();
}
inline const ::std::string& Database_NoBench::sparse_055_str() const {
  return *sparse_055_str_;
}
inline void Database_NoBench::set_sparse_055_str(const ::std::string& value) {
  set_has_sparse_055_str();
  if (sparse_055_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_055_str_ = new ::std::string;
  }
  sparse_055_str_->assign(value);
}
inline void Database_NoBench::set_sparse_055_str(const char* value) {
  set_has_sparse_055_str();
  if (sparse_055_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_055_str_ = new ::std::string;
  }
  sparse_055_str_->assign(value);
}
inline void Database_NoBench::set_sparse_055_str(const char* value, size_t size) {
  set_has_sparse_055_str();
  if (sparse_055_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_055_str_ = new ::std::string;
  }
  sparse_055_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_055_str() {
  set_has_sparse_055_str();
  if (sparse_055_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_055_str_ = new ::std::string;
  }
  return sparse_055_str_;
}
inline ::std::string* Database_NoBench::release_sparse_055_str() {
  clear_has_sparse_055_str();
  if (sparse_055_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_055_str_;
    sparse_055_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_055_str(::std::string* sparse_055_str) {
  if (sparse_055_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_055_str_;
  }
  if (sparse_055_str) {
    set_has_sparse_055_str();
    sparse_055_str_ = sparse_055_str;
  } else {
    clear_has_sparse_055_str();
    sparse_055_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_056_str = 68;
inline bool Database_NoBench::has_sparse_056_str() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_056_str() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_056_str() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_056_str() {
  if (sparse_056_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_056_str_->clear();
  }
  clear_has_sparse_056_str();
}
inline const ::std::string& Database_NoBench::sparse_056_str() const {
  return *sparse_056_str_;
}
inline void Database_NoBench::set_sparse_056_str(const ::std::string& value) {
  set_has_sparse_056_str();
  if (sparse_056_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_056_str_ = new ::std::string;
  }
  sparse_056_str_->assign(value);
}
inline void Database_NoBench::set_sparse_056_str(const char* value) {
  set_has_sparse_056_str();
  if (sparse_056_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_056_str_ = new ::std::string;
  }
  sparse_056_str_->assign(value);
}
inline void Database_NoBench::set_sparse_056_str(const char* value, size_t size) {
  set_has_sparse_056_str();
  if (sparse_056_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_056_str_ = new ::std::string;
  }
  sparse_056_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_056_str() {
  set_has_sparse_056_str();
  if (sparse_056_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_056_str_ = new ::std::string;
  }
  return sparse_056_str_;
}
inline ::std::string* Database_NoBench::release_sparse_056_str() {
  clear_has_sparse_056_str();
  if (sparse_056_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_056_str_;
    sparse_056_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_056_str(::std::string* sparse_056_str) {
  if (sparse_056_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_056_str_;
  }
  if (sparse_056_str) {
    set_has_sparse_056_str();
    sparse_056_str_ = sparse_056_str;
  } else {
    clear_has_sparse_056_str();
    sparse_056_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_057_str = 69;
inline bool Database_NoBench::has_sparse_057_str() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_057_str() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_057_str() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_057_str() {
  if (sparse_057_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_057_str_->clear();
  }
  clear_has_sparse_057_str();
}
inline const ::std::string& Database_NoBench::sparse_057_str() const {
  return *sparse_057_str_;
}
inline void Database_NoBench::set_sparse_057_str(const ::std::string& value) {
  set_has_sparse_057_str();
  if (sparse_057_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_057_str_ = new ::std::string;
  }
  sparse_057_str_->assign(value);
}
inline void Database_NoBench::set_sparse_057_str(const char* value) {
  set_has_sparse_057_str();
  if (sparse_057_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_057_str_ = new ::std::string;
  }
  sparse_057_str_->assign(value);
}
inline void Database_NoBench::set_sparse_057_str(const char* value, size_t size) {
  set_has_sparse_057_str();
  if (sparse_057_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_057_str_ = new ::std::string;
  }
  sparse_057_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_057_str() {
  set_has_sparse_057_str();
  if (sparse_057_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_057_str_ = new ::std::string;
  }
  return sparse_057_str_;
}
inline ::std::string* Database_NoBench::release_sparse_057_str() {
  clear_has_sparse_057_str();
  if (sparse_057_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_057_str_;
    sparse_057_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_057_str(::std::string* sparse_057_str) {
  if (sparse_057_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_057_str_;
  }
  if (sparse_057_str) {
    set_has_sparse_057_str();
    sparse_057_str_ = sparse_057_str;
  } else {
    clear_has_sparse_057_str();
    sparse_057_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_058_str = 70;
inline bool Database_NoBench::has_sparse_058_str() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_058_str() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_058_str() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_058_str() {
  if (sparse_058_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_058_str_->clear();
  }
  clear_has_sparse_058_str();
}
inline const ::std::string& Database_NoBench::sparse_058_str() const {
  return *sparse_058_str_;
}
inline void Database_NoBench::set_sparse_058_str(const ::std::string& value) {
  set_has_sparse_058_str();
  if (sparse_058_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_058_str_ = new ::std::string;
  }
  sparse_058_str_->assign(value);
}
inline void Database_NoBench::set_sparse_058_str(const char* value) {
  set_has_sparse_058_str();
  if (sparse_058_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_058_str_ = new ::std::string;
  }
  sparse_058_str_->assign(value);
}
inline void Database_NoBench::set_sparse_058_str(const char* value, size_t size) {
  set_has_sparse_058_str();
  if (sparse_058_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_058_str_ = new ::std::string;
  }
  sparse_058_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_058_str() {
  set_has_sparse_058_str();
  if (sparse_058_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_058_str_ = new ::std::string;
  }
  return sparse_058_str_;
}
inline ::std::string* Database_NoBench::release_sparse_058_str() {
  clear_has_sparse_058_str();
  if (sparse_058_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_058_str_;
    sparse_058_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_058_str(::std::string* sparse_058_str) {
  if (sparse_058_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_058_str_;
  }
  if (sparse_058_str) {
    set_has_sparse_058_str();
    sparse_058_str_ = sparse_058_str;
  } else {
    clear_has_sparse_058_str();
    sparse_058_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_059_str = 71;
inline bool Database_NoBench::has_sparse_059_str() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_059_str() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_059_str() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_059_str() {
  if (sparse_059_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_059_str_->clear();
  }
  clear_has_sparse_059_str();
}
inline const ::std::string& Database_NoBench::sparse_059_str() const {
  return *sparse_059_str_;
}
inline void Database_NoBench::set_sparse_059_str(const ::std::string& value) {
  set_has_sparse_059_str();
  if (sparse_059_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_059_str_ = new ::std::string;
  }
  sparse_059_str_->assign(value);
}
inline void Database_NoBench::set_sparse_059_str(const char* value) {
  set_has_sparse_059_str();
  if (sparse_059_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_059_str_ = new ::std::string;
  }
  sparse_059_str_->assign(value);
}
inline void Database_NoBench::set_sparse_059_str(const char* value, size_t size) {
  set_has_sparse_059_str();
  if (sparse_059_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_059_str_ = new ::std::string;
  }
  sparse_059_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_059_str() {
  set_has_sparse_059_str();
  if (sparse_059_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_059_str_ = new ::std::string;
  }
  return sparse_059_str_;
}
inline ::std::string* Database_NoBench::release_sparse_059_str() {
  clear_has_sparse_059_str();
  if (sparse_059_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_059_str_;
    sparse_059_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_059_str(::std::string* sparse_059_str) {
  if (sparse_059_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_059_str_;
  }
  if (sparse_059_str) {
    set_has_sparse_059_str();
    sparse_059_str_ = sparse_059_str;
  } else {
    clear_has_sparse_059_str();
    sparse_059_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_060_str = 72;
inline bool Database_NoBench::has_sparse_060_str() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_060_str() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_060_str() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_060_str() {
  if (sparse_060_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_060_str_->clear();
  }
  clear_has_sparse_060_str();
}
inline const ::std::string& Database_NoBench::sparse_060_str() const {
  return *sparse_060_str_;
}
inline void Database_NoBench::set_sparse_060_str(const ::std::string& value) {
  set_has_sparse_060_str();
  if (sparse_060_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_060_str_ = new ::std::string;
  }
  sparse_060_str_->assign(value);
}
inline void Database_NoBench::set_sparse_060_str(const char* value) {
  set_has_sparse_060_str();
  if (sparse_060_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_060_str_ = new ::std::string;
  }
  sparse_060_str_->assign(value);
}
inline void Database_NoBench::set_sparse_060_str(const char* value, size_t size) {
  set_has_sparse_060_str();
  if (sparse_060_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_060_str_ = new ::std::string;
  }
  sparse_060_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_060_str() {
  set_has_sparse_060_str();
  if (sparse_060_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_060_str_ = new ::std::string;
  }
  return sparse_060_str_;
}
inline ::std::string* Database_NoBench::release_sparse_060_str() {
  clear_has_sparse_060_str();
  if (sparse_060_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_060_str_;
    sparse_060_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_060_str(::std::string* sparse_060_str) {
  if (sparse_060_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_060_str_;
  }
  if (sparse_060_str) {
    set_has_sparse_060_str();
    sparse_060_str_ = sparse_060_str;
  } else {
    clear_has_sparse_060_str();
    sparse_060_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_061_str = 73;
inline bool Database_NoBench::has_sparse_061_str() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_061_str() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_061_str() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_061_str() {
  if (sparse_061_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_061_str_->clear();
  }
  clear_has_sparse_061_str();
}
inline const ::std::string& Database_NoBench::sparse_061_str() const {
  return *sparse_061_str_;
}
inline void Database_NoBench::set_sparse_061_str(const ::std::string& value) {
  set_has_sparse_061_str();
  if (sparse_061_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_061_str_ = new ::std::string;
  }
  sparse_061_str_->assign(value);
}
inline void Database_NoBench::set_sparse_061_str(const char* value) {
  set_has_sparse_061_str();
  if (sparse_061_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_061_str_ = new ::std::string;
  }
  sparse_061_str_->assign(value);
}
inline void Database_NoBench::set_sparse_061_str(const char* value, size_t size) {
  set_has_sparse_061_str();
  if (sparse_061_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_061_str_ = new ::std::string;
  }
  sparse_061_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_061_str() {
  set_has_sparse_061_str();
  if (sparse_061_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_061_str_ = new ::std::string;
  }
  return sparse_061_str_;
}
inline ::std::string* Database_NoBench::release_sparse_061_str() {
  clear_has_sparse_061_str();
  if (sparse_061_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_061_str_;
    sparse_061_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_061_str(::std::string* sparse_061_str) {
  if (sparse_061_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_061_str_;
  }
  if (sparse_061_str) {
    set_has_sparse_061_str();
    sparse_061_str_ = sparse_061_str;
  } else {
    clear_has_sparse_061_str();
    sparse_061_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_062_str = 74;
inline bool Database_NoBench::has_sparse_062_str() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_062_str() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_062_str() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_062_str() {
  if (sparse_062_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_062_str_->clear();
  }
  clear_has_sparse_062_str();
}
inline const ::std::string& Database_NoBench::sparse_062_str() const {
  return *sparse_062_str_;
}
inline void Database_NoBench::set_sparse_062_str(const ::std::string& value) {
  set_has_sparse_062_str();
  if (sparse_062_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_062_str_ = new ::std::string;
  }
  sparse_062_str_->assign(value);
}
inline void Database_NoBench::set_sparse_062_str(const char* value) {
  set_has_sparse_062_str();
  if (sparse_062_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_062_str_ = new ::std::string;
  }
  sparse_062_str_->assign(value);
}
inline void Database_NoBench::set_sparse_062_str(const char* value, size_t size) {
  set_has_sparse_062_str();
  if (sparse_062_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_062_str_ = new ::std::string;
  }
  sparse_062_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_062_str() {
  set_has_sparse_062_str();
  if (sparse_062_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_062_str_ = new ::std::string;
  }
  return sparse_062_str_;
}
inline ::std::string* Database_NoBench::release_sparse_062_str() {
  clear_has_sparse_062_str();
  if (sparse_062_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_062_str_;
    sparse_062_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_062_str(::std::string* sparse_062_str) {
  if (sparse_062_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_062_str_;
  }
  if (sparse_062_str) {
    set_has_sparse_062_str();
    sparse_062_str_ = sparse_062_str;
  } else {
    clear_has_sparse_062_str();
    sparse_062_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_063_str = 75;
inline bool Database_NoBench::has_sparse_063_str() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_063_str() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_063_str() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_063_str() {
  if (sparse_063_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_063_str_->clear();
  }
  clear_has_sparse_063_str();
}
inline const ::std::string& Database_NoBench::sparse_063_str() const {
  return *sparse_063_str_;
}
inline void Database_NoBench::set_sparse_063_str(const ::std::string& value) {
  set_has_sparse_063_str();
  if (sparse_063_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_063_str_ = new ::std::string;
  }
  sparse_063_str_->assign(value);
}
inline void Database_NoBench::set_sparse_063_str(const char* value) {
  set_has_sparse_063_str();
  if (sparse_063_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_063_str_ = new ::std::string;
  }
  sparse_063_str_->assign(value);
}
inline void Database_NoBench::set_sparse_063_str(const char* value, size_t size) {
  set_has_sparse_063_str();
  if (sparse_063_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_063_str_ = new ::std::string;
  }
  sparse_063_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_063_str() {
  set_has_sparse_063_str();
  if (sparse_063_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_063_str_ = new ::std::string;
  }
  return sparse_063_str_;
}
inline ::std::string* Database_NoBench::release_sparse_063_str() {
  clear_has_sparse_063_str();
  if (sparse_063_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_063_str_;
    sparse_063_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_063_str(::std::string* sparse_063_str) {
  if (sparse_063_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_063_str_;
  }
  if (sparse_063_str) {
    set_has_sparse_063_str();
    sparse_063_str_ = sparse_063_str;
  } else {
    clear_has_sparse_063_str();
    sparse_063_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_064_str = 76;
inline bool Database_NoBench::has_sparse_064_str() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_064_str() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_064_str() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_064_str() {
  if (sparse_064_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_064_str_->clear();
  }
  clear_has_sparse_064_str();
}
inline const ::std::string& Database_NoBench::sparse_064_str() const {
  return *sparse_064_str_;
}
inline void Database_NoBench::set_sparse_064_str(const ::std::string& value) {
  set_has_sparse_064_str();
  if (sparse_064_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_064_str_ = new ::std::string;
  }
  sparse_064_str_->assign(value);
}
inline void Database_NoBench::set_sparse_064_str(const char* value) {
  set_has_sparse_064_str();
  if (sparse_064_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_064_str_ = new ::std::string;
  }
  sparse_064_str_->assign(value);
}
inline void Database_NoBench::set_sparse_064_str(const char* value, size_t size) {
  set_has_sparse_064_str();
  if (sparse_064_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_064_str_ = new ::std::string;
  }
  sparse_064_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_064_str() {
  set_has_sparse_064_str();
  if (sparse_064_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_064_str_ = new ::std::string;
  }
  return sparse_064_str_;
}
inline ::std::string* Database_NoBench::release_sparse_064_str() {
  clear_has_sparse_064_str();
  if (sparse_064_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_064_str_;
    sparse_064_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_064_str(::std::string* sparse_064_str) {
  if (sparse_064_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_064_str_;
  }
  if (sparse_064_str) {
    set_has_sparse_064_str();
    sparse_064_str_ = sparse_064_str;
  } else {
    clear_has_sparse_064_str();
    sparse_064_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_065_str = 77;
inline bool Database_NoBench::has_sparse_065_str() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_065_str() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_065_str() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_065_str() {
  if (sparse_065_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_065_str_->clear();
  }
  clear_has_sparse_065_str();
}
inline const ::std::string& Database_NoBench::sparse_065_str() const {
  return *sparse_065_str_;
}
inline void Database_NoBench::set_sparse_065_str(const ::std::string& value) {
  set_has_sparse_065_str();
  if (sparse_065_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_065_str_ = new ::std::string;
  }
  sparse_065_str_->assign(value);
}
inline void Database_NoBench::set_sparse_065_str(const char* value) {
  set_has_sparse_065_str();
  if (sparse_065_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_065_str_ = new ::std::string;
  }
  sparse_065_str_->assign(value);
}
inline void Database_NoBench::set_sparse_065_str(const char* value, size_t size) {
  set_has_sparse_065_str();
  if (sparse_065_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_065_str_ = new ::std::string;
  }
  sparse_065_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_065_str() {
  set_has_sparse_065_str();
  if (sparse_065_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_065_str_ = new ::std::string;
  }
  return sparse_065_str_;
}
inline ::std::string* Database_NoBench::release_sparse_065_str() {
  clear_has_sparse_065_str();
  if (sparse_065_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_065_str_;
    sparse_065_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_065_str(::std::string* sparse_065_str) {
  if (sparse_065_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_065_str_;
  }
  if (sparse_065_str) {
    set_has_sparse_065_str();
    sparse_065_str_ = sparse_065_str;
  } else {
    clear_has_sparse_065_str();
    sparse_065_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_066_str = 78;
inline bool Database_NoBench::has_sparse_066_str() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_066_str() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_066_str() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_066_str() {
  if (sparse_066_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_066_str_->clear();
  }
  clear_has_sparse_066_str();
}
inline const ::std::string& Database_NoBench::sparse_066_str() const {
  return *sparse_066_str_;
}
inline void Database_NoBench::set_sparse_066_str(const ::std::string& value) {
  set_has_sparse_066_str();
  if (sparse_066_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_066_str_ = new ::std::string;
  }
  sparse_066_str_->assign(value);
}
inline void Database_NoBench::set_sparse_066_str(const char* value) {
  set_has_sparse_066_str();
  if (sparse_066_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_066_str_ = new ::std::string;
  }
  sparse_066_str_->assign(value);
}
inline void Database_NoBench::set_sparse_066_str(const char* value, size_t size) {
  set_has_sparse_066_str();
  if (sparse_066_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_066_str_ = new ::std::string;
  }
  sparse_066_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_066_str() {
  set_has_sparse_066_str();
  if (sparse_066_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_066_str_ = new ::std::string;
  }
  return sparse_066_str_;
}
inline ::std::string* Database_NoBench::release_sparse_066_str() {
  clear_has_sparse_066_str();
  if (sparse_066_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_066_str_;
    sparse_066_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_066_str(::std::string* sparse_066_str) {
  if (sparse_066_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_066_str_;
  }
  if (sparse_066_str) {
    set_has_sparse_066_str();
    sparse_066_str_ = sparse_066_str;
  } else {
    clear_has_sparse_066_str();
    sparse_066_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_067_str = 79;
inline bool Database_NoBench::has_sparse_067_str() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_067_str() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_067_str() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_067_str() {
  if (sparse_067_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_067_str_->clear();
  }
  clear_has_sparse_067_str();
}
inline const ::std::string& Database_NoBench::sparse_067_str() const {
  return *sparse_067_str_;
}
inline void Database_NoBench::set_sparse_067_str(const ::std::string& value) {
  set_has_sparse_067_str();
  if (sparse_067_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_067_str_ = new ::std::string;
  }
  sparse_067_str_->assign(value);
}
inline void Database_NoBench::set_sparse_067_str(const char* value) {
  set_has_sparse_067_str();
  if (sparse_067_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_067_str_ = new ::std::string;
  }
  sparse_067_str_->assign(value);
}
inline void Database_NoBench::set_sparse_067_str(const char* value, size_t size) {
  set_has_sparse_067_str();
  if (sparse_067_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_067_str_ = new ::std::string;
  }
  sparse_067_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_067_str() {
  set_has_sparse_067_str();
  if (sparse_067_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_067_str_ = new ::std::string;
  }
  return sparse_067_str_;
}
inline ::std::string* Database_NoBench::release_sparse_067_str() {
  clear_has_sparse_067_str();
  if (sparse_067_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_067_str_;
    sparse_067_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_067_str(::std::string* sparse_067_str) {
  if (sparse_067_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_067_str_;
  }
  if (sparse_067_str) {
    set_has_sparse_067_str();
    sparse_067_str_ = sparse_067_str;
  } else {
    clear_has_sparse_067_str();
    sparse_067_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_068_str = 80;
inline bool Database_NoBench::has_sparse_068_str() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_068_str() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_068_str() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_068_str() {
  if (sparse_068_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_068_str_->clear();
  }
  clear_has_sparse_068_str();
}
inline const ::std::string& Database_NoBench::sparse_068_str() const {
  return *sparse_068_str_;
}
inline void Database_NoBench::set_sparse_068_str(const ::std::string& value) {
  set_has_sparse_068_str();
  if (sparse_068_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_068_str_ = new ::std::string;
  }
  sparse_068_str_->assign(value);
}
inline void Database_NoBench::set_sparse_068_str(const char* value) {
  set_has_sparse_068_str();
  if (sparse_068_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_068_str_ = new ::std::string;
  }
  sparse_068_str_->assign(value);
}
inline void Database_NoBench::set_sparse_068_str(const char* value, size_t size) {
  set_has_sparse_068_str();
  if (sparse_068_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_068_str_ = new ::std::string;
  }
  sparse_068_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_068_str() {
  set_has_sparse_068_str();
  if (sparse_068_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_068_str_ = new ::std::string;
  }
  return sparse_068_str_;
}
inline ::std::string* Database_NoBench::release_sparse_068_str() {
  clear_has_sparse_068_str();
  if (sparse_068_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_068_str_;
    sparse_068_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_068_str(::std::string* sparse_068_str) {
  if (sparse_068_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_068_str_;
  }
  if (sparse_068_str) {
    set_has_sparse_068_str();
    sparse_068_str_ = sparse_068_str;
  } else {
    clear_has_sparse_068_str();
    sparse_068_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_069_str = 81;
inline bool Database_NoBench::has_sparse_069_str() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_069_str() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_069_str() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_069_str() {
  if (sparse_069_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_069_str_->clear();
  }
  clear_has_sparse_069_str();
}
inline const ::std::string& Database_NoBench::sparse_069_str() const {
  return *sparse_069_str_;
}
inline void Database_NoBench::set_sparse_069_str(const ::std::string& value) {
  set_has_sparse_069_str();
  if (sparse_069_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_069_str_ = new ::std::string;
  }
  sparse_069_str_->assign(value);
}
inline void Database_NoBench::set_sparse_069_str(const char* value) {
  set_has_sparse_069_str();
  if (sparse_069_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_069_str_ = new ::std::string;
  }
  sparse_069_str_->assign(value);
}
inline void Database_NoBench::set_sparse_069_str(const char* value, size_t size) {
  set_has_sparse_069_str();
  if (sparse_069_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_069_str_ = new ::std::string;
  }
  sparse_069_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_069_str() {
  set_has_sparse_069_str();
  if (sparse_069_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_069_str_ = new ::std::string;
  }
  return sparse_069_str_;
}
inline ::std::string* Database_NoBench::release_sparse_069_str() {
  clear_has_sparse_069_str();
  if (sparse_069_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_069_str_;
    sparse_069_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_069_str(::std::string* sparse_069_str) {
  if (sparse_069_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_069_str_;
  }
  if (sparse_069_str) {
    set_has_sparse_069_str();
    sparse_069_str_ = sparse_069_str;
  } else {
    clear_has_sparse_069_str();
    sparse_069_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_070_str = 82;
inline bool Database_NoBench::has_sparse_070_str() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_070_str() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_070_str() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_070_str() {
  if (sparse_070_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_070_str_->clear();
  }
  clear_has_sparse_070_str();
}
inline const ::std::string& Database_NoBench::sparse_070_str() const {
  return *sparse_070_str_;
}
inline void Database_NoBench::set_sparse_070_str(const ::std::string& value) {
  set_has_sparse_070_str();
  if (sparse_070_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_070_str_ = new ::std::string;
  }
  sparse_070_str_->assign(value);
}
inline void Database_NoBench::set_sparse_070_str(const char* value) {
  set_has_sparse_070_str();
  if (sparse_070_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_070_str_ = new ::std::string;
  }
  sparse_070_str_->assign(value);
}
inline void Database_NoBench::set_sparse_070_str(const char* value, size_t size) {
  set_has_sparse_070_str();
  if (sparse_070_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_070_str_ = new ::std::string;
  }
  sparse_070_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_070_str() {
  set_has_sparse_070_str();
  if (sparse_070_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_070_str_ = new ::std::string;
  }
  return sparse_070_str_;
}
inline ::std::string* Database_NoBench::release_sparse_070_str() {
  clear_has_sparse_070_str();
  if (sparse_070_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_070_str_;
    sparse_070_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_070_str(::std::string* sparse_070_str) {
  if (sparse_070_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_070_str_;
  }
  if (sparse_070_str) {
    set_has_sparse_070_str();
    sparse_070_str_ = sparse_070_str;
  } else {
    clear_has_sparse_070_str();
    sparse_070_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_071_str = 83;
inline bool Database_NoBench::has_sparse_071_str() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_071_str() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_071_str() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_071_str() {
  if (sparse_071_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_071_str_->clear();
  }
  clear_has_sparse_071_str();
}
inline const ::std::string& Database_NoBench::sparse_071_str() const {
  return *sparse_071_str_;
}
inline void Database_NoBench::set_sparse_071_str(const ::std::string& value) {
  set_has_sparse_071_str();
  if (sparse_071_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_071_str_ = new ::std::string;
  }
  sparse_071_str_->assign(value);
}
inline void Database_NoBench::set_sparse_071_str(const char* value) {
  set_has_sparse_071_str();
  if (sparse_071_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_071_str_ = new ::std::string;
  }
  sparse_071_str_->assign(value);
}
inline void Database_NoBench::set_sparse_071_str(const char* value, size_t size) {
  set_has_sparse_071_str();
  if (sparse_071_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_071_str_ = new ::std::string;
  }
  sparse_071_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_071_str() {
  set_has_sparse_071_str();
  if (sparse_071_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_071_str_ = new ::std::string;
  }
  return sparse_071_str_;
}
inline ::std::string* Database_NoBench::release_sparse_071_str() {
  clear_has_sparse_071_str();
  if (sparse_071_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_071_str_;
    sparse_071_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_071_str(::std::string* sparse_071_str) {
  if (sparse_071_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_071_str_;
  }
  if (sparse_071_str) {
    set_has_sparse_071_str();
    sparse_071_str_ = sparse_071_str;
  } else {
    clear_has_sparse_071_str();
    sparse_071_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_072_str = 84;
inline bool Database_NoBench::has_sparse_072_str() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_072_str() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_072_str() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_072_str() {
  if (sparse_072_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_072_str_->clear();
  }
  clear_has_sparse_072_str();
}
inline const ::std::string& Database_NoBench::sparse_072_str() const {
  return *sparse_072_str_;
}
inline void Database_NoBench::set_sparse_072_str(const ::std::string& value) {
  set_has_sparse_072_str();
  if (sparse_072_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_072_str_ = new ::std::string;
  }
  sparse_072_str_->assign(value);
}
inline void Database_NoBench::set_sparse_072_str(const char* value) {
  set_has_sparse_072_str();
  if (sparse_072_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_072_str_ = new ::std::string;
  }
  sparse_072_str_->assign(value);
}
inline void Database_NoBench::set_sparse_072_str(const char* value, size_t size) {
  set_has_sparse_072_str();
  if (sparse_072_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_072_str_ = new ::std::string;
  }
  sparse_072_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_072_str() {
  set_has_sparse_072_str();
  if (sparse_072_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_072_str_ = new ::std::string;
  }
  return sparse_072_str_;
}
inline ::std::string* Database_NoBench::release_sparse_072_str() {
  clear_has_sparse_072_str();
  if (sparse_072_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_072_str_;
    sparse_072_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_072_str(::std::string* sparse_072_str) {
  if (sparse_072_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_072_str_;
  }
  if (sparse_072_str) {
    set_has_sparse_072_str();
    sparse_072_str_ = sparse_072_str;
  } else {
    clear_has_sparse_072_str();
    sparse_072_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_073_str = 85;
inline bool Database_NoBench::has_sparse_073_str() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_073_str() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_073_str() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_073_str() {
  if (sparse_073_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_073_str_->clear();
  }
  clear_has_sparse_073_str();
}
inline const ::std::string& Database_NoBench::sparse_073_str() const {
  return *sparse_073_str_;
}
inline void Database_NoBench::set_sparse_073_str(const ::std::string& value) {
  set_has_sparse_073_str();
  if (sparse_073_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_073_str_ = new ::std::string;
  }
  sparse_073_str_->assign(value);
}
inline void Database_NoBench::set_sparse_073_str(const char* value) {
  set_has_sparse_073_str();
  if (sparse_073_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_073_str_ = new ::std::string;
  }
  sparse_073_str_->assign(value);
}
inline void Database_NoBench::set_sparse_073_str(const char* value, size_t size) {
  set_has_sparse_073_str();
  if (sparse_073_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_073_str_ = new ::std::string;
  }
  sparse_073_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_073_str() {
  set_has_sparse_073_str();
  if (sparse_073_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_073_str_ = new ::std::string;
  }
  return sparse_073_str_;
}
inline ::std::string* Database_NoBench::release_sparse_073_str() {
  clear_has_sparse_073_str();
  if (sparse_073_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_073_str_;
    sparse_073_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_073_str(::std::string* sparse_073_str) {
  if (sparse_073_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_073_str_;
  }
  if (sparse_073_str) {
    set_has_sparse_073_str();
    sparse_073_str_ = sparse_073_str;
  } else {
    clear_has_sparse_073_str();
    sparse_073_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_074_str = 86;
inline bool Database_NoBench::has_sparse_074_str() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_074_str() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_074_str() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_074_str() {
  if (sparse_074_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_074_str_->clear();
  }
  clear_has_sparse_074_str();
}
inline const ::std::string& Database_NoBench::sparse_074_str() const {
  return *sparse_074_str_;
}
inline void Database_NoBench::set_sparse_074_str(const ::std::string& value) {
  set_has_sparse_074_str();
  if (sparse_074_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_074_str_ = new ::std::string;
  }
  sparse_074_str_->assign(value);
}
inline void Database_NoBench::set_sparse_074_str(const char* value) {
  set_has_sparse_074_str();
  if (sparse_074_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_074_str_ = new ::std::string;
  }
  sparse_074_str_->assign(value);
}
inline void Database_NoBench::set_sparse_074_str(const char* value, size_t size) {
  set_has_sparse_074_str();
  if (sparse_074_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_074_str_ = new ::std::string;
  }
  sparse_074_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_074_str() {
  set_has_sparse_074_str();
  if (sparse_074_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_074_str_ = new ::std::string;
  }
  return sparse_074_str_;
}
inline ::std::string* Database_NoBench::release_sparse_074_str() {
  clear_has_sparse_074_str();
  if (sparse_074_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_074_str_;
    sparse_074_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_074_str(::std::string* sparse_074_str) {
  if (sparse_074_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_074_str_;
  }
  if (sparse_074_str) {
    set_has_sparse_074_str();
    sparse_074_str_ = sparse_074_str;
  } else {
    clear_has_sparse_074_str();
    sparse_074_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_075_str = 87;
inline bool Database_NoBench::has_sparse_075_str() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_075_str() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_075_str() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_075_str() {
  if (sparse_075_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_075_str_->clear();
  }
  clear_has_sparse_075_str();
}
inline const ::std::string& Database_NoBench::sparse_075_str() const {
  return *sparse_075_str_;
}
inline void Database_NoBench::set_sparse_075_str(const ::std::string& value) {
  set_has_sparse_075_str();
  if (sparse_075_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_075_str_ = new ::std::string;
  }
  sparse_075_str_->assign(value);
}
inline void Database_NoBench::set_sparse_075_str(const char* value) {
  set_has_sparse_075_str();
  if (sparse_075_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_075_str_ = new ::std::string;
  }
  sparse_075_str_->assign(value);
}
inline void Database_NoBench::set_sparse_075_str(const char* value, size_t size) {
  set_has_sparse_075_str();
  if (sparse_075_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_075_str_ = new ::std::string;
  }
  sparse_075_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_075_str() {
  set_has_sparse_075_str();
  if (sparse_075_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_075_str_ = new ::std::string;
  }
  return sparse_075_str_;
}
inline ::std::string* Database_NoBench::release_sparse_075_str() {
  clear_has_sparse_075_str();
  if (sparse_075_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_075_str_;
    sparse_075_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_075_str(::std::string* sparse_075_str) {
  if (sparse_075_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_075_str_;
  }
  if (sparse_075_str) {
    set_has_sparse_075_str();
    sparse_075_str_ = sparse_075_str;
  } else {
    clear_has_sparse_075_str();
    sparse_075_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_076_str = 88;
inline bool Database_NoBench::has_sparse_076_str() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_076_str() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_076_str() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_076_str() {
  if (sparse_076_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_076_str_->clear();
  }
  clear_has_sparse_076_str();
}
inline const ::std::string& Database_NoBench::sparse_076_str() const {
  return *sparse_076_str_;
}
inline void Database_NoBench::set_sparse_076_str(const ::std::string& value) {
  set_has_sparse_076_str();
  if (sparse_076_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_076_str_ = new ::std::string;
  }
  sparse_076_str_->assign(value);
}
inline void Database_NoBench::set_sparse_076_str(const char* value) {
  set_has_sparse_076_str();
  if (sparse_076_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_076_str_ = new ::std::string;
  }
  sparse_076_str_->assign(value);
}
inline void Database_NoBench::set_sparse_076_str(const char* value, size_t size) {
  set_has_sparse_076_str();
  if (sparse_076_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_076_str_ = new ::std::string;
  }
  sparse_076_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_076_str() {
  set_has_sparse_076_str();
  if (sparse_076_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_076_str_ = new ::std::string;
  }
  return sparse_076_str_;
}
inline ::std::string* Database_NoBench::release_sparse_076_str() {
  clear_has_sparse_076_str();
  if (sparse_076_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_076_str_;
    sparse_076_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_076_str(::std::string* sparse_076_str) {
  if (sparse_076_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_076_str_;
  }
  if (sparse_076_str) {
    set_has_sparse_076_str();
    sparse_076_str_ = sparse_076_str;
  } else {
    clear_has_sparse_076_str();
    sparse_076_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_077_str = 89;
inline bool Database_NoBench::has_sparse_077_str() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_077_str() {
  _has_bits_[2] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_077_str() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_077_str() {
  if (sparse_077_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_077_str_->clear();
  }
  clear_has_sparse_077_str();
}
inline const ::std::string& Database_NoBench::sparse_077_str() const {
  return *sparse_077_str_;
}
inline void Database_NoBench::set_sparse_077_str(const ::std::string& value) {
  set_has_sparse_077_str();
  if (sparse_077_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_077_str_ = new ::std::string;
  }
  sparse_077_str_->assign(value);
}
inline void Database_NoBench::set_sparse_077_str(const char* value) {
  set_has_sparse_077_str();
  if (sparse_077_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_077_str_ = new ::std::string;
  }
  sparse_077_str_->assign(value);
}
inline void Database_NoBench::set_sparse_077_str(const char* value, size_t size) {
  set_has_sparse_077_str();
  if (sparse_077_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_077_str_ = new ::std::string;
  }
  sparse_077_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_077_str() {
  set_has_sparse_077_str();
  if (sparse_077_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_077_str_ = new ::std::string;
  }
  return sparse_077_str_;
}
inline ::std::string* Database_NoBench::release_sparse_077_str() {
  clear_has_sparse_077_str();
  if (sparse_077_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_077_str_;
    sparse_077_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_077_str(::std::string* sparse_077_str) {
  if (sparse_077_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_077_str_;
  }
  if (sparse_077_str) {
    set_has_sparse_077_str();
    sparse_077_str_ = sparse_077_str;
  } else {
    clear_has_sparse_077_str();
    sparse_077_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_078_str = 90;
inline bool Database_NoBench::has_sparse_078_str() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_078_str() {
  _has_bits_[2] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_078_str() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_078_str() {
  if (sparse_078_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_078_str_->clear();
  }
  clear_has_sparse_078_str();
}
inline const ::std::string& Database_NoBench::sparse_078_str() const {
  return *sparse_078_str_;
}
inline void Database_NoBench::set_sparse_078_str(const ::std::string& value) {
  set_has_sparse_078_str();
  if (sparse_078_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_078_str_ = new ::std::string;
  }
  sparse_078_str_->assign(value);
}
inline void Database_NoBench::set_sparse_078_str(const char* value) {
  set_has_sparse_078_str();
  if (sparse_078_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_078_str_ = new ::std::string;
  }
  sparse_078_str_->assign(value);
}
inline void Database_NoBench::set_sparse_078_str(const char* value, size_t size) {
  set_has_sparse_078_str();
  if (sparse_078_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_078_str_ = new ::std::string;
  }
  sparse_078_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_078_str() {
  set_has_sparse_078_str();
  if (sparse_078_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_078_str_ = new ::std::string;
  }
  return sparse_078_str_;
}
inline ::std::string* Database_NoBench::release_sparse_078_str() {
  clear_has_sparse_078_str();
  if (sparse_078_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_078_str_;
    sparse_078_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_078_str(::std::string* sparse_078_str) {
  if (sparse_078_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_078_str_;
  }
  if (sparse_078_str) {
    set_has_sparse_078_str();
    sparse_078_str_ = sparse_078_str;
  } else {
    clear_has_sparse_078_str();
    sparse_078_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_079_str = 91;
inline bool Database_NoBench::has_sparse_079_str() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_079_str() {
  _has_bits_[2] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_079_str() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_079_str() {
  if (sparse_079_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_079_str_->clear();
  }
  clear_has_sparse_079_str();
}
inline const ::std::string& Database_NoBench::sparse_079_str() const {
  return *sparse_079_str_;
}
inline void Database_NoBench::set_sparse_079_str(const ::std::string& value) {
  set_has_sparse_079_str();
  if (sparse_079_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_079_str_ = new ::std::string;
  }
  sparse_079_str_->assign(value);
}
inline void Database_NoBench::set_sparse_079_str(const char* value) {
  set_has_sparse_079_str();
  if (sparse_079_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_079_str_ = new ::std::string;
  }
  sparse_079_str_->assign(value);
}
inline void Database_NoBench::set_sparse_079_str(const char* value, size_t size) {
  set_has_sparse_079_str();
  if (sparse_079_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_079_str_ = new ::std::string;
  }
  sparse_079_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_079_str() {
  set_has_sparse_079_str();
  if (sparse_079_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_079_str_ = new ::std::string;
  }
  return sparse_079_str_;
}
inline ::std::string* Database_NoBench::release_sparse_079_str() {
  clear_has_sparse_079_str();
  if (sparse_079_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_079_str_;
    sparse_079_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_079_str(::std::string* sparse_079_str) {
  if (sparse_079_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_079_str_;
  }
  if (sparse_079_str) {
    set_has_sparse_079_str();
    sparse_079_str_ = sparse_079_str;
  } else {
    clear_has_sparse_079_str();
    sparse_079_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_080_str = 92;
inline bool Database_NoBench::has_sparse_080_str() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_080_str() {
  _has_bits_[2] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_080_str() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_080_str() {
  if (sparse_080_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_080_str_->clear();
  }
  clear_has_sparse_080_str();
}
inline const ::std::string& Database_NoBench::sparse_080_str() const {
  return *sparse_080_str_;
}
inline void Database_NoBench::set_sparse_080_str(const ::std::string& value) {
  set_has_sparse_080_str();
  if (sparse_080_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_080_str_ = new ::std::string;
  }
  sparse_080_str_->assign(value);
}
inline void Database_NoBench::set_sparse_080_str(const char* value) {
  set_has_sparse_080_str();
  if (sparse_080_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_080_str_ = new ::std::string;
  }
  sparse_080_str_->assign(value);
}
inline void Database_NoBench::set_sparse_080_str(const char* value, size_t size) {
  set_has_sparse_080_str();
  if (sparse_080_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_080_str_ = new ::std::string;
  }
  sparse_080_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_080_str() {
  set_has_sparse_080_str();
  if (sparse_080_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_080_str_ = new ::std::string;
  }
  return sparse_080_str_;
}
inline ::std::string* Database_NoBench::release_sparse_080_str() {
  clear_has_sparse_080_str();
  if (sparse_080_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_080_str_;
    sparse_080_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_080_str(::std::string* sparse_080_str) {
  if (sparse_080_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_080_str_;
  }
  if (sparse_080_str) {
    set_has_sparse_080_str();
    sparse_080_str_ = sparse_080_str;
  } else {
    clear_has_sparse_080_str();
    sparse_080_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_081_str = 93;
inline bool Database_NoBench::has_sparse_081_str() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_081_str() {
  _has_bits_[2] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_081_str() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_081_str() {
  if (sparse_081_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_081_str_->clear();
  }
  clear_has_sparse_081_str();
}
inline const ::std::string& Database_NoBench::sparse_081_str() const {
  return *sparse_081_str_;
}
inline void Database_NoBench::set_sparse_081_str(const ::std::string& value) {
  set_has_sparse_081_str();
  if (sparse_081_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_081_str_ = new ::std::string;
  }
  sparse_081_str_->assign(value);
}
inline void Database_NoBench::set_sparse_081_str(const char* value) {
  set_has_sparse_081_str();
  if (sparse_081_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_081_str_ = new ::std::string;
  }
  sparse_081_str_->assign(value);
}
inline void Database_NoBench::set_sparse_081_str(const char* value, size_t size) {
  set_has_sparse_081_str();
  if (sparse_081_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_081_str_ = new ::std::string;
  }
  sparse_081_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_081_str() {
  set_has_sparse_081_str();
  if (sparse_081_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_081_str_ = new ::std::string;
  }
  return sparse_081_str_;
}
inline ::std::string* Database_NoBench::release_sparse_081_str() {
  clear_has_sparse_081_str();
  if (sparse_081_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_081_str_;
    sparse_081_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_081_str(::std::string* sparse_081_str) {
  if (sparse_081_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_081_str_;
  }
  if (sparse_081_str) {
    set_has_sparse_081_str();
    sparse_081_str_ = sparse_081_str;
  } else {
    clear_has_sparse_081_str();
    sparse_081_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_082_str = 94;
inline bool Database_NoBench::has_sparse_082_str() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_082_str() {
  _has_bits_[2] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_082_str() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_082_str() {
  if (sparse_082_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_082_str_->clear();
  }
  clear_has_sparse_082_str();
}
inline const ::std::string& Database_NoBench::sparse_082_str() const {
  return *sparse_082_str_;
}
inline void Database_NoBench::set_sparse_082_str(const ::std::string& value) {
  set_has_sparse_082_str();
  if (sparse_082_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_082_str_ = new ::std::string;
  }
  sparse_082_str_->assign(value);
}
inline void Database_NoBench::set_sparse_082_str(const char* value) {
  set_has_sparse_082_str();
  if (sparse_082_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_082_str_ = new ::std::string;
  }
  sparse_082_str_->assign(value);
}
inline void Database_NoBench::set_sparse_082_str(const char* value, size_t size) {
  set_has_sparse_082_str();
  if (sparse_082_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_082_str_ = new ::std::string;
  }
  sparse_082_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_082_str() {
  set_has_sparse_082_str();
  if (sparse_082_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_082_str_ = new ::std::string;
  }
  return sparse_082_str_;
}
inline ::std::string* Database_NoBench::release_sparse_082_str() {
  clear_has_sparse_082_str();
  if (sparse_082_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_082_str_;
    sparse_082_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_082_str(::std::string* sparse_082_str) {
  if (sparse_082_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_082_str_;
  }
  if (sparse_082_str) {
    set_has_sparse_082_str();
    sparse_082_str_ = sparse_082_str;
  } else {
    clear_has_sparse_082_str();
    sparse_082_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_083_str = 95;
inline bool Database_NoBench::has_sparse_083_str() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_083_str() {
  _has_bits_[3] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_083_str() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_083_str() {
  if (sparse_083_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_083_str_->clear();
  }
  clear_has_sparse_083_str();
}
inline const ::std::string& Database_NoBench::sparse_083_str() const {
  return *sparse_083_str_;
}
inline void Database_NoBench::set_sparse_083_str(const ::std::string& value) {
  set_has_sparse_083_str();
  if (sparse_083_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_083_str_ = new ::std::string;
  }
  sparse_083_str_->assign(value);
}
inline void Database_NoBench::set_sparse_083_str(const char* value) {
  set_has_sparse_083_str();
  if (sparse_083_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_083_str_ = new ::std::string;
  }
  sparse_083_str_->assign(value);
}
inline void Database_NoBench::set_sparse_083_str(const char* value, size_t size) {
  set_has_sparse_083_str();
  if (sparse_083_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_083_str_ = new ::std::string;
  }
  sparse_083_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_083_str() {
  set_has_sparse_083_str();
  if (sparse_083_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_083_str_ = new ::std::string;
  }
  return sparse_083_str_;
}
inline ::std::string* Database_NoBench::release_sparse_083_str() {
  clear_has_sparse_083_str();
  if (sparse_083_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_083_str_;
    sparse_083_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_083_str(::std::string* sparse_083_str) {
  if (sparse_083_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_083_str_;
  }
  if (sparse_083_str) {
    set_has_sparse_083_str();
    sparse_083_str_ = sparse_083_str;
  } else {
    clear_has_sparse_083_str();
    sparse_083_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_084_str = 96;
inline bool Database_NoBench::has_sparse_084_str() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_084_str() {
  _has_bits_[3] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_084_str() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_084_str() {
  if (sparse_084_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_084_str_->clear();
  }
  clear_has_sparse_084_str();
}
inline const ::std::string& Database_NoBench::sparse_084_str() const {
  return *sparse_084_str_;
}
inline void Database_NoBench::set_sparse_084_str(const ::std::string& value) {
  set_has_sparse_084_str();
  if (sparse_084_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_084_str_ = new ::std::string;
  }
  sparse_084_str_->assign(value);
}
inline void Database_NoBench::set_sparse_084_str(const char* value) {
  set_has_sparse_084_str();
  if (sparse_084_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_084_str_ = new ::std::string;
  }
  sparse_084_str_->assign(value);
}
inline void Database_NoBench::set_sparse_084_str(const char* value, size_t size) {
  set_has_sparse_084_str();
  if (sparse_084_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_084_str_ = new ::std::string;
  }
  sparse_084_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_084_str() {
  set_has_sparse_084_str();
  if (sparse_084_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_084_str_ = new ::std::string;
  }
  return sparse_084_str_;
}
inline ::std::string* Database_NoBench::release_sparse_084_str() {
  clear_has_sparse_084_str();
  if (sparse_084_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_084_str_;
    sparse_084_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_084_str(::std::string* sparse_084_str) {
  if (sparse_084_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_084_str_;
  }
  if (sparse_084_str) {
    set_has_sparse_084_str();
    sparse_084_str_ = sparse_084_str;
  } else {
    clear_has_sparse_084_str();
    sparse_084_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_085_str = 97;
inline bool Database_NoBench::has_sparse_085_str() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_085_str() {
  _has_bits_[3] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_085_str() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_085_str() {
  if (sparse_085_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_085_str_->clear();
  }
  clear_has_sparse_085_str();
}
inline const ::std::string& Database_NoBench::sparse_085_str() const {
  return *sparse_085_str_;
}
inline void Database_NoBench::set_sparse_085_str(const ::std::string& value) {
  set_has_sparse_085_str();
  if (sparse_085_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_085_str_ = new ::std::string;
  }
  sparse_085_str_->assign(value);
}
inline void Database_NoBench::set_sparse_085_str(const char* value) {
  set_has_sparse_085_str();
  if (sparse_085_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_085_str_ = new ::std::string;
  }
  sparse_085_str_->assign(value);
}
inline void Database_NoBench::set_sparse_085_str(const char* value, size_t size) {
  set_has_sparse_085_str();
  if (sparse_085_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_085_str_ = new ::std::string;
  }
  sparse_085_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_085_str() {
  set_has_sparse_085_str();
  if (sparse_085_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_085_str_ = new ::std::string;
  }
  return sparse_085_str_;
}
inline ::std::string* Database_NoBench::release_sparse_085_str() {
  clear_has_sparse_085_str();
  if (sparse_085_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_085_str_;
    sparse_085_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_085_str(::std::string* sparse_085_str) {
  if (sparse_085_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_085_str_;
  }
  if (sparse_085_str) {
    set_has_sparse_085_str();
    sparse_085_str_ = sparse_085_str;
  } else {
    clear_has_sparse_085_str();
    sparse_085_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_086_str = 98;
inline bool Database_NoBench::has_sparse_086_str() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_086_str() {
  _has_bits_[3] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_086_str() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_086_str() {
  if (sparse_086_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_086_str_->clear();
  }
  clear_has_sparse_086_str();
}
inline const ::std::string& Database_NoBench::sparse_086_str() const {
  return *sparse_086_str_;
}
inline void Database_NoBench::set_sparse_086_str(const ::std::string& value) {
  set_has_sparse_086_str();
  if (sparse_086_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_086_str_ = new ::std::string;
  }
  sparse_086_str_->assign(value);
}
inline void Database_NoBench::set_sparse_086_str(const char* value) {
  set_has_sparse_086_str();
  if (sparse_086_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_086_str_ = new ::std::string;
  }
  sparse_086_str_->assign(value);
}
inline void Database_NoBench::set_sparse_086_str(const char* value, size_t size) {
  set_has_sparse_086_str();
  if (sparse_086_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_086_str_ = new ::std::string;
  }
  sparse_086_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_086_str() {
  set_has_sparse_086_str();
  if (sparse_086_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_086_str_ = new ::std::string;
  }
  return sparse_086_str_;
}
inline ::std::string* Database_NoBench::release_sparse_086_str() {
  clear_has_sparse_086_str();
  if (sparse_086_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_086_str_;
    sparse_086_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_086_str(::std::string* sparse_086_str) {
  if (sparse_086_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_086_str_;
  }
  if (sparse_086_str) {
    set_has_sparse_086_str();
    sparse_086_str_ = sparse_086_str;
  } else {
    clear_has_sparse_086_str();
    sparse_086_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_087_str = 99;
inline bool Database_NoBench::has_sparse_087_str() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_087_str() {
  _has_bits_[3] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_087_str() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_087_str() {
  if (sparse_087_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_087_str_->clear();
  }
  clear_has_sparse_087_str();
}
inline const ::std::string& Database_NoBench::sparse_087_str() const {
  return *sparse_087_str_;
}
inline void Database_NoBench::set_sparse_087_str(const ::std::string& value) {
  set_has_sparse_087_str();
  if (sparse_087_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_087_str_ = new ::std::string;
  }
  sparse_087_str_->assign(value);
}
inline void Database_NoBench::set_sparse_087_str(const char* value) {
  set_has_sparse_087_str();
  if (sparse_087_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_087_str_ = new ::std::string;
  }
  sparse_087_str_->assign(value);
}
inline void Database_NoBench::set_sparse_087_str(const char* value, size_t size) {
  set_has_sparse_087_str();
  if (sparse_087_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_087_str_ = new ::std::string;
  }
  sparse_087_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_087_str() {
  set_has_sparse_087_str();
  if (sparse_087_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_087_str_ = new ::std::string;
  }
  return sparse_087_str_;
}
inline ::std::string* Database_NoBench::release_sparse_087_str() {
  clear_has_sparse_087_str();
  if (sparse_087_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_087_str_;
    sparse_087_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_087_str(::std::string* sparse_087_str) {
  if (sparse_087_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_087_str_;
  }
  if (sparse_087_str) {
    set_has_sparse_087_str();
    sparse_087_str_ = sparse_087_str;
  } else {
    clear_has_sparse_087_str();
    sparse_087_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_088_str = 100;
inline bool Database_NoBench::has_sparse_088_str() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_088_str() {
  _has_bits_[3] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_088_str() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_088_str() {
  if (sparse_088_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_088_str_->clear();
  }
  clear_has_sparse_088_str();
}
inline const ::std::string& Database_NoBench::sparse_088_str() const {
  return *sparse_088_str_;
}
inline void Database_NoBench::set_sparse_088_str(const ::std::string& value) {
  set_has_sparse_088_str();
  if (sparse_088_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_088_str_ = new ::std::string;
  }
  sparse_088_str_->assign(value);
}
inline void Database_NoBench::set_sparse_088_str(const char* value) {
  set_has_sparse_088_str();
  if (sparse_088_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_088_str_ = new ::std::string;
  }
  sparse_088_str_->assign(value);
}
inline void Database_NoBench::set_sparse_088_str(const char* value, size_t size) {
  set_has_sparse_088_str();
  if (sparse_088_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_088_str_ = new ::std::string;
  }
  sparse_088_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_088_str() {
  set_has_sparse_088_str();
  if (sparse_088_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_088_str_ = new ::std::string;
  }
  return sparse_088_str_;
}
inline ::std::string* Database_NoBench::release_sparse_088_str() {
  clear_has_sparse_088_str();
  if (sparse_088_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_088_str_;
    sparse_088_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_088_str(::std::string* sparse_088_str) {
  if (sparse_088_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_088_str_;
  }
  if (sparse_088_str) {
    set_has_sparse_088_str();
    sparse_088_str_ = sparse_088_str;
  } else {
    clear_has_sparse_088_str();
    sparse_088_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_089_str = 101;
inline bool Database_NoBench::has_sparse_089_str() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_089_str() {
  _has_bits_[3] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_089_str() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_089_str() {
  if (sparse_089_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_089_str_->clear();
  }
  clear_has_sparse_089_str();
}
inline const ::std::string& Database_NoBench::sparse_089_str() const {
  return *sparse_089_str_;
}
inline void Database_NoBench::set_sparse_089_str(const ::std::string& value) {
  set_has_sparse_089_str();
  if (sparse_089_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_089_str_ = new ::std::string;
  }
  sparse_089_str_->assign(value);
}
inline void Database_NoBench::set_sparse_089_str(const char* value) {
  set_has_sparse_089_str();
  if (sparse_089_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_089_str_ = new ::std::string;
  }
  sparse_089_str_->assign(value);
}
inline void Database_NoBench::set_sparse_089_str(const char* value, size_t size) {
  set_has_sparse_089_str();
  if (sparse_089_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_089_str_ = new ::std::string;
  }
  sparse_089_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_089_str() {
  set_has_sparse_089_str();
  if (sparse_089_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_089_str_ = new ::std::string;
  }
  return sparse_089_str_;
}
inline ::std::string* Database_NoBench::release_sparse_089_str() {
  clear_has_sparse_089_str();
  if (sparse_089_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_089_str_;
    sparse_089_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_089_str(::std::string* sparse_089_str) {
  if (sparse_089_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_089_str_;
  }
  if (sparse_089_str) {
    set_has_sparse_089_str();
    sparse_089_str_ = sparse_089_str;
  } else {
    clear_has_sparse_089_str();
    sparse_089_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_090_str = 102;
inline bool Database_NoBench::has_sparse_090_str() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_090_str() {
  _has_bits_[3] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_090_str() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_090_str() {
  if (sparse_090_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_090_str_->clear();
  }
  clear_has_sparse_090_str();
}
inline const ::std::string& Database_NoBench::sparse_090_str() const {
  return *sparse_090_str_;
}
inline void Database_NoBench::set_sparse_090_str(const ::std::string& value) {
  set_has_sparse_090_str();
  if (sparse_090_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_090_str_ = new ::std::string;
  }
  sparse_090_str_->assign(value);
}
inline void Database_NoBench::set_sparse_090_str(const char* value) {
  set_has_sparse_090_str();
  if (sparse_090_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_090_str_ = new ::std::string;
  }
  sparse_090_str_->assign(value);
}
inline void Database_NoBench::set_sparse_090_str(const char* value, size_t size) {
  set_has_sparse_090_str();
  if (sparse_090_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_090_str_ = new ::std::string;
  }
  sparse_090_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_090_str() {
  set_has_sparse_090_str();
  if (sparse_090_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_090_str_ = new ::std::string;
  }
  return sparse_090_str_;
}
inline ::std::string* Database_NoBench::release_sparse_090_str() {
  clear_has_sparse_090_str();
  if (sparse_090_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_090_str_;
    sparse_090_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_090_str(::std::string* sparse_090_str) {
  if (sparse_090_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_090_str_;
  }
  if (sparse_090_str) {
    set_has_sparse_090_str();
    sparse_090_str_ = sparse_090_str;
  } else {
    clear_has_sparse_090_str();
    sparse_090_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_091_str = 103;
inline bool Database_NoBench::has_sparse_091_str() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_091_str() {
  _has_bits_[3] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_091_str() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_091_str() {
  if (sparse_091_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_091_str_->clear();
  }
  clear_has_sparse_091_str();
}
inline const ::std::string& Database_NoBench::sparse_091_str() const {
  return *sparse_091_str_;
}
inline void Database_NoBench::set_sparse_091_str(const ::std::string& value) {
  set_has_sparse_091_str();
  if (sparse_091_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_091_str_ = new ::std::string;
  }
  sparse_091_str_->assign(value);
}
inline void Database_NoBench::set_sparse_091_str(const char* value) {
  set_has_sparse_091_str();
  if (sparse_091_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_091_str_ = new ::std::string;
  }
  sparse_091_str_->assign(value);
}
inline void Database_NoBench::set_sparse_091_str(const char* value, size_t size) {
  set_has_sparse_091_str();
  if (sparse_091_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_091_str_ = new ::std::string;
  }
  sparse_091_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_091_str() {
  set_has_sparse_091_str();
  if (sparse_091_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_091_str_ = new ::std::string;
  }
  return sparse_091_str_;
}
inline ::std::string* Database_NoBench::release_sparse_091_str() {
  clear_has_sparse_091_str();
  if (sparse_091_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_091_str_;
    sparse_091_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_091_str(::std::string* sparse_091_str) {
  if (sparse_091_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_091_str_;
  }
  if (sparse_091_str) {
    set_has_sparse_091_str();
    sparse_091_str_ = sparse_091_str;
  } else {
    clear_has_sparse_091_str();
    sparse_091_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_092_str = 104;
inline bool Database_NoBench::has_sparse_092_str() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_092_str() {
  _has_bits_[3] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_092_str() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_092_str() {
  if (sparse_092_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_092_str_->clear();
  }
  clear_has_sparse_092_str();
}
inline const ::std::string& Database_NoBench::sparse_092_str() const {
  return *sparse_092_str_;
}
inline void Database_NoBench::set_sparse_092_str(const ::std::string& value) {
  set_has_sparse_092_str();
  if (sparse_092_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_092_str_ = new ::std::string;
  }
  sparse_092_str_->assign(value);
}
inline void Database_NoBench::set_sparse_092_str(const char* value) {
  set_has_sparse_092_str();
  if (sparse_092_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_092_str_ = new ::std::string;
  }
  sparse_092_str_->assign(value);
}
inline void Database_NoBench::set_sparse_092_str(const char* value, size_t size) {
  set_has_sparse_092_str();
  if (sparse_092_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_092_str_ = new ::std::string;
  }
  sparse_092_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_092_str() {
  set_has_sparse_092_str();
  if (sparse_092_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_092_str_ = new ::std::string;
  }
  return sparse_092_str_;
}
inline ::std::string* Database_NoBench::release_sparse_092_str() {
  clear_has_sparse_092_str();
  if (sparse_092_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_092_str_;
    sparse_092_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_092_str(::std::string* sparse_092_str) {
  if (sparse_092_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_092_str_;
  }
  if (sparse_092_str) {
    set_has_sparse_092_str();
    sparse_092_str_ = sparse_092_str;
  } else {
    clear_has_sparse_092_str();
    sparse_092_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_093_str = 105;
inline bool Database_NoBench::has_sparse_093_str() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_093_str() {
  _has_bits_[3] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_093_str() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_093_str() {
  if (sparse_093_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_093_str_->clear();
  }
  clear_has_sparse_093_str();
}
inline const ::std::string& Database_NoBench::sparse_093_str() const {
  return *sparse_093_str_;
}
inline void Database_NoBench::set_sparse_093_str(const ::std::string& value) {
  set_has_sparse_093_str();
  if (sparse_093_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_093_str_ = new ::std::string;
  }
  sparse_093_str_->assign(value);
}
inline void Database_NoBench::set_sparse_093_str(const char* value) {
  set_has_sparse_093_str();
  if (sparse_093_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_093_str_ = new ::std::string;
  }
  sparse_093_str_->assign(value);
}
inline void Database_NoBench::set_sparse_093_str(const char* value, size_t size) {
  set_has_sparse_093_str();
  if (sparse_093_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_093_str_ = new ::std::string;
  }
  sparse_093_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_093_str() {
  set_has_sparse_093_str();
  if (sparse_093_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_093_str_ = new ::std::string;
  }
  return sparse_093_str_;
}
inline ::std::string* Database_NoBench::release_sparse_093_str() {
  clear_has_sparse_093_str();
  if (sparse_093_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_093_str_;
    sparse_093_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_093_str(::std::string* sparse_093_str) {
  if (sparse_093_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_093_str_;
  }
  if (sparse_093_str) {
    set_has_sparse_093_str();
    sparse_093_str_ = sparse_093_str;
  } else {
    clear_has_sparse_093_str();
    sparse_093_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_094_str = 106;
inline bool Database_NoBench::has_sparse_094_str() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_094_str() {
  _has_bits_[3] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_094_str() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_094_str() {
  if (sparse_094_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_094_str_->clear();
  }
  clear_has_sparse_094_str();
}
inline const ::std::string& Database_NoBench::sparse_094_str() const {
  return *sparse_094_str_;
}
inline void Database_NoBench::set_sparse_094_str(const ::std::string& value) {
  set_has_sparse_094_str();
  if (sparse_094_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_094_str_ = new ::std::string;
  }
  sparse_094_str_->assign(value);
}
inline void Database_NoBench::set_sparse_094_str(const char* value) {
  set_has_sparse_094_str();
  if (sparse_094_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_094_str_ = new ::std::string;
  }
  sparse_094_str_->assign(value);
}
inline void Database_NoBench::set_sparse_094_str(const char* value, size_t size) {
  set_has_sparse_094_str();
  if (sparse_094_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_094_str_ = new ::std::string;
  }
  sparse_094_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_094_str() {
  set_has_sparse_094_str();
  if (sparse_094_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_094_str_ = new ::std::string;
  }
  return sparse_094_str_;
}
inline ::std::string* Database_NoBench::release_sparse_094_str() {
  clear_has_sparse_094_str();
  if (sparse_094_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_094_str_;
    sparse_094_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_094_str(::std::string* sparse_094_str) {
  if (sparse_094_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_094_str_;
  }
  if (sparse_094_str) {
    set_has_sparse_094_str();
    sparse_094_str_ = sparse_094_str;
  } else {
    clear_has_sparse_094_str();
    sparse_094_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_095_str = 107;
inline bool Database_NoBench::has_sparse_095_str() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_095_str() {
  _has_bits_[3] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_095_str() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_095_str() {
  if (sparse_095_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_095_str_->clear();
  }
  clear_has_sparse_095_str();
}
inline const ::std::string& Database_NoBench::sparse_095_str() const {
  return *sparse_095_str_;
}
inline void Database_NoBench::set_sparse_095_str(const ::std::string& value) {
  set_has_sparse_095_str();
  if (sparse_095_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_095_str_ = new ::std::string;
  }
  sparse_095_str_->assign(value);
}
inline void Database_NoBench::set_sparse_095_str(const char* value) {
  set_has_sparse_095_str();
  if (sparse_095_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_095_str_ = new ::std::string;
  }
  sparse_095_str_->assign(value);
}
inline void Database_NoBench::set_sparse_095_str(const char* value, size_t size) {
  set_has_sparse_095_str();
  if (sparse_095_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_095_str_ = new ::std::string;
  }
  sparse_095_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_095_str() {
  set_has_sparse_095_str();
  if (sparse_095_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_095_str_ = new ::std::string;
  }
  return sparse_095_str_;
}
inline ::std::string* Database_NoBench::release_sparse_095_str() {
  clear_has_sparse_095_str();
  if (sparse_095_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_095_str_;
    sparse_095_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_095_str(::std::string* sparse_095_str) {
  if (sparse_095_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_095_str_;
  }
  if (sparse_095_str) {
    set_has_sparse_095_str();
    sparse_095_str_ = sparse_095_str;
  } else {
    clear_has_sparse_095_str();
    sparse_095_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_096_str = 108;
inline bool Database_NoBench::has_sparse_096_str() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_096_str() {
  _has_bits_[3] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_096_str() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_096_str() {
  if (sparse_096_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_096_str_->clear();
  }
  clear_has_sparse_096_str();
}
inline const ::std::string& Database_NoBench::sparse_096_str() const {
  return *sparse_096_str_;
}
inline void Database_NoBench::set_sparse_096_str(const ::std::string& value) {
  set_has_sparse_096_str();
  if (sparse_096_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_096_str_ = new ::std::string;
  }
  sparse_096_str_->assign(value);
}
inline void Database_NoBench::set_sparse_096_str(const char* value) {
  set_has_sparse_096_str();
  if (sparse_096_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_096_str_ = new ::std::string;
  }
  sparse_096_str_->assign(value);
}
inline void Database_NoBench::set_sparse_096_str(const char* value, size_t size) {
  set_has_sparse_096_str();
  if (sparse_096_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_096_str_ = new ::std::string;
  }
  sparse_096_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_096_str() {
  set_has_sparse_096_str();
  if (sparse_096_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_096_str_ = new ::std::string;
  }
  return sparse_096_str_;
}
inline ::std::string* Database_NoBench::release_sparse_096_str() {
  clear_has_sparse_096_str();
  if (sparse_096_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_096_str_;
    sparse_096_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_096_str(::std::string* sparse_096_str) {
  if (sparse_096_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_096_str_;
  }
  if (sparse_096_str) {
    set_has_sparse_096_str();
    sparse_096_str_ = sparse_096_str;
  } else {
    clear_has_sparse_096_str();
    sparse_096_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_097_str = 109;
inline bool Database_NoBench::has_sparse_097_str() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_097_str() {
  _has_bits_[3] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_097_str() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_097_str() {
  if (sparse_097_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_097_str_->clear();
  }
  clear_has_sparse_097_str();
}
inline const ::std::string& Database_NoBench::sparse_097_str() const {
  return *sparse_097_str_;
}
inline void Database_NoBench::set_sparse_097_str(const ::std::string& value) {
  set_has_sparse_097_str();
  if (sparse_097_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_097_str_ = new ::std::string;
  }
  sparse_097_str_->assign(value);
}
inline void Database_NoBench::set_sparse_097_str(const char* value) {
  set_has_sparse_097_str();
  if (sparse_097_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_097_str_ = new ::std::string;
  }
  sparse_097_str_->assign(value);
}
inline void Database_NoBench::set_sparse_097_str(const char* value, size_t size) {
  set_has_sparse_097_str();
  if (sparse_097_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_097_str_ = new ::std::string;
  }
  sparse_097_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_097_str() {
  set_has_sparse_097_str();
  if (sparse_097_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_097_str_ = new ::std::string;
  }
  return sparse_097_str_;
}
inline ::std::string* Database_NoBench::release_sparse_097_str() {
  clear_has_sparse_097_str();
  if (sparse_097_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_097_str_;
    sparse_097_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_097_str(::std::string* sparse_097_str) {
  if (sparse_097_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_097_str_;
  }
  if (sparse_097_str) {
    set_has_sparse_097_str();
    sparse_097_str_ = sparse_097_str;
  } else {
    clear_has_sparse_097_str();
    sparse_097_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_098_str = 110;
inline bool Database_NoBench::has_sparse_098_str() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_098_str() {
  _has_bits_[3] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_098_str() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_098_str() {
  if (sparse_098_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_098_str_->clear();
  }
  clear_has_sparse_098_str();
}
inline const ::std::string& Database_NoBench::sparse_098_str() const {
  return *sparse_098_str_;
}
inline void Database_NoBench::set_sparse_098_str(const ::std::string& value) {
  set_has_sparse_098_str();
  if (sparse_098_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_098_str_ = new ::std::string;
  }
  sparse_098_str_->assign(value);
}
inline void Database_NoBench::set_sparse_098_str(const char* value) {
  set_has_sparse_098_str();
  if (sparse_098_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_098_str_ = new ::std::string;
  }
  sparse_098_str_->assign(value);
}
inline void Database_NoBench::set_sparse_098_str(const char* value, size_t size) {
  set_has_sparse_098_str();
  if (sparse_098_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_098_str_ = new ::std::string;
  }
  sparse_098_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_098_str() {
  set_has_sparse_098_str();
  if (sparse_098_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_098_str_ = new ::std::string;
  }
  return sparse_098_str_;
}
inline ::std::string* Database_NoBench::release_sparse_098_str() {
  clear_has_sparse_098_str();
  if (sparse_098_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_098_str_;
    sparse_098_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_098_str(::std::string* sparse_098_str) {
  if (sparse_098_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_098_str_;
  }
  if (sparse_098_str) {
    set_has_sparse_098_str();
    sparse_098_str_ = sparse_098_str;
  } else {
    clear_has_sparse_098_str();
    sparse_098_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_099_str = 111;
inline bool Database_NoBench::has_sparse_099_str() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_099_str() {
  _has_bits_[3] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_099_str() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_099_str() {
  if (sparse_099_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_099_str_->clear();
  }
  clear_has_sparse_099_str();
}
inline const ::std::string& Database_NoBench::sparse_099_str() const {
  return *sparse_099_str_;
}
inline void Database_NoBench::set_sparse_099_str(const ::std::string& value) {
  set_has_sparse_099_str();
  if (sparse_099_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_099_str_ = new ::std::string;
  }
  sparse_099_str_->assign(value);
}
inline void Database_NoBench::set_sparse_099_str(const char* value) {
  set_has_sparse_099_str();
  if (sparse_099_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_099_str_ = new ::std::string;
  }
  sparse_099_str_->assign(value);
}
inline void Database_NoBench::set_sparse_099_str(const char* value, size_t size) {
  set_has_sparse_099_str();
  if (sparse_099_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_099_str_ = new ::std::string;
  }
  sparse_099_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_099_str() {
  set_has_sparse_099_str();
  if (sparse_099_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_099_str_ = new ::std::string;
  }
  return sparse_099_str_;
}
inline ::std::string* Database_NoBench::release_sparse_099_str() {
  clear_has_sparse_099_str();
  if (sparse_099_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_099_str_;
    sparse_099_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_099_str(::std::string* sparse_099_str) {
  if (sparse_099_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_099_str_;
  }
  if (sparse_099_str) {
    set_has_sparse_099_str();
    sparse_099_str_ = sparse_099_str;
  } else {
    clear_has_sparse_099_str();
    sparse_099_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_100_str = 112;
inline bool Database_NoBench::has_sparse_100_str() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_100_str() {
  _has_bits_[3] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_100_str() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_100_str() {
  if (sparse_100_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_100_str_->clear();
  }
  clear_has_sparse_100_str();
}
inline const ::std::string& Database_NoBench::sparse_100_str() const {
  return *sparse_100_str_;
}
inline void Database_NoBench::set_sparse_100_str(const ::std::string& value) {
  set_has_sparse_100_str();
  if (sparse_100_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_100_str_ = new ::std::string;
  }
  sparse_100_str_->assign(value);
}
inline void Database_NoBench::set_sparse_100_str(const char* value) {
  set_has_sparse_100_str();
  if (sparse_100_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_100_str_ = new ::std::string;
  }
  sparse_100_str_->assign(value);
}
inline void Database_NoBench::set_sparse_100_str(const char* value, size_t size) {
  set_has_sparse_100_str();
  if (sparse_100_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_100_str_ = new ::std::string;
  }
  sparse_100_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_100_str() {
  set_has_sparse_100_str();
  if (sparse_100_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_100_str_ = new ::std::string;
  }
  return sparse_100_str_;
}
inline ::std::string* Database_NoBench::release_sparse_100_str() {
  clear_has_sparse_100_str();
  if (sparse_100_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_100_str_;
    sparse_100_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_100_str(::std::string* sparse_100_str) {
  if (sparse_100_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_100_str_;
  }
  if (sparse_100_str) {
    set_has_sparse_100_str();
    sparse_100_str_ = sparse_100_str;
  } else {
    clear_has_sparse_100_str();
    sparse_100_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_101_str = 113;
inline bool Database_NoBench::has_sparse_101_str() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_101_str() {
  _has_bits_[3] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_101_str() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_101_str() {
  if (sparse_101_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_101_str_->clear();
  }
  clear_has_sparse_101_str();
}
inline const ::std::string& Database_NoBench::sparse_101_str() const {
  return *sparse_101_str_;
}
inline void Database_NoBench::set_sparse_101_str(const ::std::string& value) {
  set_has_sparse_101_str();
  if (sparse_101_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_101_str_ = new ::std::string;
  }
  sparse_101_str_->assign(value);
}
inline void Database_NoBench::set_sparse_101_str(const char* value) {
  set_has_sparse_101_str();
  if (sparse_101_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_101_str_ = new ::std::string;
  }
  sparse_101_str_->assign(value);
}
inline void Database_NoBench::set_sparse_101_str(const char* value, size_t size) {
  set_has_sparse_101_str();
  if (sparse_101_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_101_str_ = new ::std::string;
  }
  sparse_101_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_101_str() {
  set_has_sparse_101_str();
  if (sparse_101_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_101_str_ = new ::std::string;
  }
  return sparse_101_str_;
}
inline ::std::string* Database_NoBench::release_sparse_101_str() {
  clear_has_sparse_101_str();
  if (sparse_101_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_101_str_;
    sparse_101_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_101_str(::std::string* sparse_101_str) {
  if (sparse_101_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_101_str_;
  }
  if (sparse_101_str) {
    set_has_sparse_101_str();
    sparse_101_str_ = sparse_101_str;
  } else {
    clear_has_sparse_101_str();
    sparse_101_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_102_str = 114;
inline bool Database_NoBench::has_sparse_102_str() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_102_str() {
  _has_bits_[3] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_102_str() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_102_str() {
  if (sparse_102_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_102_str_->clear();
  }
  clear_has_sparse_102_str();
}
inline const ::std::string& Database_NoBench::sparse_102_str() const {
  return *sparse_102_str_;
}
inline void Database_NoBench::set_sparse_102_str(const ::std::string& value) {
  set_has_sparse_102_str();
  if (sparse_102_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_102_str_ = new ::std::string;
  }
  sparse_102_str_->assign(value);
}
inline void Database_NoBench::set_sparse_102_str(const char* value) {
  set_has_sparse_102_str();
  if (sparse_102_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_102_str_ = new ::std::string;
  }
  sparse_102_str_->assign(value);
}
inline void Database_NoBench::set_sparse_102_str(const char* value, size_t size) {
  set_has_sparse_102_str();
  if (sparse_102_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_102_str_ = new ::std::string;
  }
  sparse_102_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_102_str() {
  set_has_sparse_102_str();
  if (sparse_102_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_102_str_ = new ::std::string;
  }
  return sparse_102_str_;
}
inline ::std::string* Database_NoBench::release_sparse_102_str() {
  clear_has_sparse_102_str();
  if (sparse_102_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_102_str_;
    sparse_102_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_102_str(::std::string* sparse_102_str) {
  if (sparse_102_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_102_str_;
  }
  if (sparse_102_str) {
    set_has_sparse_102_str();
    sparse_102_str_ = sparse_102_str;
  } else {
    clear_has_sparse_102_str();
    sparse_102_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_103_str = 115;
inline bool Database_NoBench::has_sparse_103_str() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_103_str() {
  _has_bits_[3] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_103_str() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_103_str() {
  if (sparse_103_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_103_str_->clear();
  }
  clear_has_sparse_103_str();
}
inline const ::std::string& Database_NoBench::sparse_103_str() const {
  return *sparse_103_str_;
}
inline void Database_NoBench::set_sparse_103_str(const ::std::string& value) {
  set_has_sparse_103_str();
  if (sparse_103_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_103_str_ = new ::std::string;
  }
  sparse_103_str_->assign(value);
}
inline void Database_NoBench::set_sparse_103_str(const char* value) {
  set_has_sparse_103_str();
  if (sparse_103_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_103_str_ = new ::std::string;
  }
  sparse_103_str_->assign(value);
}
inline void Database_NoBench::set_sparse_103_str(const char* value, size_t size) {
  set_has_sparse_103_str();
  if (sparse_103_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_103_str_ = new ::std::string;
  }
  sparse_103_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_103_str() {
  set_has_sparse_103_str();
  if (sparse_103_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_103_str_ = new ::std::string;
  }
  return sparse_103_str_;
}
inline ::std::string* Database_NoBench::release_sparse_103_str() {
  clear_has_sparse_103_str();
  if (sparse_103_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_103_str_;
    sparse_103_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_103_str(::std::string* sparse_103_str) {
  if (sparse_103_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_103_str_;
  }
  if (sparse_103_str) {
    set_has_sparse_103_str();
    sparse_103_str_ = sparse_103_str;
  } else {
    clear_has_sparse_103_str();
    sparse_103_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_104_str = 116;
inline bool Database_NoBench::has_sparse_104_str() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_104_str() {
  _has_bits_[3] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_104_str() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_104_str() {
  if (sparse_104_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_104_str_->clear();
  }
  clear_has_sparse_104_str();
}
inline const ::std::string& Database_NoBench::sparse_104_str() const {
  return *sparse_104_str_;
}
inline void Database_NoBench::set_sparse_104_str(const ::std::string& value) {
  set_has_sparse_104_str();
  if (sparse_104_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_104_str_ = new ::std::string;
  }
  sparse_104_str_->assign(value);
}
inline void Database_NoBench::set_sparse_104_str(const char* value) {
  set_has_sparse_104_str();
  if (sparse_104_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_104_str_ = new ::std::string;
  }
  sparse_104_str_->assign(value);
}
inline void Database_NoBench::set_sparse_104_str(const char* value, size_t size) {
  set_has_sparse_104_str();
  if (sparse_104_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_104_str_ = new ::std::string;
  }
  sparse_104_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_104_str() {
  set_has_sparse_104_str();
  if (sparse_104_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_104_str_ = new ::std::string;
  }
  return sparse_104_str_;
}
inline ::std::string* Database_NoBench::release_sparse_104_str() {
  clear_has_sparse_104_str();
  if (sparse_104_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_104_str_;
    sparse_104_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_104_str(::std::string* sparse_104_str) {
  if (sparse_104_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_104_str_;
  }
  if (sparse_104_str) {
    set_has_sparse_104_str();
    sparse_104_str_ = sparse_104_str;
  } else {
    clear_has_sparse_104_str();
    sparse_104_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_105_str = 117;
inline bool Database_NoBench::has_sparse_105_str() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_105_str() {
  _has_bits_[3] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_105_str() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_105_str() {
  if (sparse_105_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_105_str_->clear();
  }
  clear_has_sparse_105_str();
}
inline const ::std::string& Database_NoBench::sparse_105_str() const {
  return *sparse_105_str_;
}
inline void Database_NoBench::set_sparse_105_str(const ::std::string& value) {
  set_has_sparse_105_str();
  if (sparse_105_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_105_str_ = new ::std::string;
  }
  sparse_105_str_->assign(value);
}
inline void Database_NoBench::set_sparse_105_str(const char* value) {
  set_has_sparse_105_str();
  if (sparse_105_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_105_str_ = new ::std::string;
  }
  sparse_105_str_->assign(value);
}
inline void Database_NoBench::set_sparse_105_str(const char* value, size_t size) {
  set_has_sparse_105_str();
  if (sparse_105_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_105_str_ = new ::std::string;
  }
  sparse_105_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_105_str() {
  set_has_sparse_105_str();
  if (sparse_105_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_105_str_ = new ::std::string;
  }
  return sparse_105_str_;
}
inline ::std::string* Database_NoBench::release_sparse_105_str() {
  clear_has_sparse_105_str();
  if (sparse_105_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_105_str_;
    sparse_105_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_105_str(::std::string* sparse_105_str) {
  if (sparse_105_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_105_str_;
  }
  if (sparse_105_str) {
    set_has_sparse_105_str();
    sparse_105_str_ = sparse_105_str;
  } else {
    clear_has_sparse_105_str();
    sparse_105_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_106_str = 118;
inline bool Database_NoBench::has_sparse_106_str() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_106_str() {
  _has_bits_[3] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_106_str() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_106_str() {
  if (sparse_106_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_106_str_->clear();
  }
  clear_has_sparse_106_str();
}
inline const ::std::string& Database_NoBench::sparse_106_str() const {
  return *sparse_106_str_;
}
inline void Database_NoBench::set_sparse_106_str(const ::std::string& value) {
  set_has_sparse_106_str();
  if (sparse_106_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_106_str_ = new ::std::string;
  }
  sparse_106_str_->assign(value);
}
inline void Database_NoBench::set_sparse_106_str(const char* value) {
  set_has_sparse_106_str();
  if (sparse_106_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_106_str_ = new ::std::string;
  }
  sparse_106_str_->assign(value);
}
inline void Database_NoBench::set_sparse_106_str(const char* value, size_t size) {
  set_has_sparse_106_str();
  if (sparse_106_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_106_str_ = new ::std::string;
  }
  sparse_106_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_106_str() {
  set_has_sparse_106_str();
  if (sparse_106_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_106_str_ = new ::std::string;
  }
  return sparse_106_str_;
}
inline ::std::string* Database_NoBench::release_sparse_106_str() {
  clear_has_sparse_106_str();
  if (sparse_106_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_106_str_;
    sparse_106_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_106_str(::std::string* sparse_106_str) {
  if (sparse_106_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_106_str_;
  }
  if (sparse_106_str) {
    set_has_sparse_106_str();
    sparse_106_str_ = sparse_106_str;
  } else {
    clear_has_sparse_106_str();
    sparse_106_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_107_str = 119;
inline bool Database_NoBench::has_sparse_107_str() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_107_str() {
  _has_bits_[3] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_107_str() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_107_str() {
  if (sparse_107_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_107_str_->clear();
  }
  clear_has_sparse_107_str();
}
inline const ::std::string& Database_NoBench::sparse_107_str() const {
  return *sparse_107_str_;
}
inline void Database_NoBench::set_sparse_107_str(const ::std::string& value) {
  set_has_sparse_107_str();
  if (sparse_107_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_107_str_ = new ::std::string;
  }
  sparse_107_str_->assign(value);
}
inline void Database_NoBench::set_sparse_107_str(const char* value) {
  set_has_sparse_107_str();
  if (sparse_107_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_107_str_ = new ::std::string;
  }
  sparse_107_str_->assign(value);
}
inline void Database_NoBench::set_sparse_107_str(const char* value, size_t size) {
  set_has_sparse_107_str();
  if (sparse_107_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_107_str_ = new ::std::string;
  }
  sparse_107_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_107_str() {
  set_has_sparse_107_str();
  if (sparse_107_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_107_str_ = new ::std::string;
  }
  return sparse_107_str_;
}
inline ::std::string* Database_NoBench::release_sparse_107_str() {
  clear_has_sparse_107_str();
  if (sparse_107_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_107_str_;
    sparse_107_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_107_str(::std::string* sparse_107_str) {
  if (sparse_107_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_107_str_;
  }
  if (sparse_107_str) {
    set_has_sparse_107_str();
    sparse_107_str_ = sparse_107_str;
  } else {
    clear_has_sparse_107_str();
    sparse_107_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_108_str = 120;
inline bool Database_NoBench::has_sparse_108_str() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_108_str() {
  _has_bits_[3] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_108_str() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_108_str() {
  if (sparse_108_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_108_str_->clear();
  }
  clear_has_sparse_108_str();
}
inline const ::std::string& Database_NoBench::sparse_108_str() const {
  return *sparse_108_str_;
}
inline void Database_NoBench::set_sparse_108_str(const ::std::string& value) {
  set_has_sparse_108_str();
  if (sparse_108_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_108_str_ = new ::std::string;
  }
  sparse_108_str_->assign(value);
}
inline void Database_NoBench::set_sparse_108_str(const char* value) {
  set_has_sparse_108_str();
  if (sparse_108_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_108_str_ = new ::std::string;
  }
  sparse_108_str_->assign(value);
}
inline void Database_NoBench::set_sparse_108_str(const char* value, size_t size) {
  set_has_sparse_108_str();
  if (sparse_108_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_108_str_ = new ::std::string;
  }
  sparse_108_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_108_str() {
  set_has_sparse_108_str();
  if (sparse_108_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_108_str_ = new ::std::string;
  }
  return sparse_108_str_;
}
inline ::std::string* Database_NoBench::release_sparse_108_str() {
  clear_has_sparse_108_str();
  if (sparse_108_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_108_str_;
    sparse_108_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_108_str(::std::string* sparse_108_str) {
  if (sparse_108_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_108_str_;
  }
  if (sparse_108_str) {
    set_has_sparse_108_str();
    sparse_108_str_ = sparse_108_str;
  } else {
    clear_has_sparse_108_str();
    sparse_108_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_109_str = 121;
inline bool Database_NoBench::has_sparse_109_str() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_109_str() {
  _has_bits_[3] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_109_str() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_109_str() {
  if (sparse_109_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_109_str_->clear();
  }
  clear_has_sparse_109_str();
}
inline const ::std::string& Database_NoBench::sparse_109_str() const {
  return *sparse_109_str_;
}
inline void Database_NoBench::set_sparse_109_str(const ::std::string& value) {
  set_has_sparse_109_str();
  if (sparse_109_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_109_str_ = new ::std::string;
  }
  sparse_109_str_->assign(value);
}
inline void Database_NoBench::set_sparse_109_str(const char* value) {
  set_has_sparse_109_str();
  if (sparse_109_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_109_str_ = new ::std::string;
  }
  sparse_109_str_->assign(value);
}
inline void Database_NoBench::set_sparse_109_str(const char* value, size_t size) {
  set_has_sparse_109_str();
  if (sparse_109_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_109_str_ = new ::std::string;
  }
  sparse_109_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_109_str() {
  set_has_sparse_109_str();
  if (sparse_109_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_109_str_ = new ::std::string;
  }
  return sparse_109_str_;
}
inline ::std::string* Database_NoBench::release_sparse_109_str() {
  clear_has_sparse_109_str();
  if (sparse_109_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_109_str_;
    sparse_109_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_109_str(::std::string* sparse_109_str) {
  if (sparse_109_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_109_str_;
  }
  if (sparse_109_str) {
    set_has_sparse_109_str();
    sparse_109_str_ = sparse_109_str;
  } else {
    clear_has_sparse_109_str();
    sparse_109_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_110_str = 122;
inline bool Database_NoBench::has_sparse_110_str() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_110_str() {
  _has_bits_[3] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_110_str() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_110_str() {
  if (sparse_110_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_110_str_->clear();
  }
  clear_has_sparse_110_str();
}
inline const ::std::string& Database_NoBench::sparse_110_str() const {
  return *sparse_110_str_;
}
inline void Database_NoBench::set_sparse_110_str(const ::std::string& value) {
  set_has_sparse_110_str();
  if (sparse_110_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_110_str_ = new ::std::string;
  }
  sparse_110_str_->assign(value);
}
inline void Database_NoBench::set_sparse_110_str(const char* value) {
  set_has_sparse_110_str();
  if (sparse_110_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_110_str_ = new ::std::string;
  }
  sparse_110_str_->assign(value);
}
inline void Database_NoBench::set_sparse_110_str(const char* value, size_t size) {
  set_has_sparse_110_str();
  if (sparse_110_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_110_str_ = new ::std::string;
  }
  sparse_110_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_110_str() {
  set_has_sparse_110_str();
  if (sparse_110_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_110_str_ = new ::std::string;
  }
  return sparse_110_str_;
}
inline ::std::string* Database_NoBench::release_sparse_110_str() {
  clear_has_sparse_110_str();
  if (sparse_110_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_110_str_;
    sparse_110_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_110_str(::std::string* sparse_110_str) {
  if (sparse_110_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_110_str_;
  }
  if (sparse_110_str) {
    set_has_sparse_110_str();
    sparse_110_str_ = sparse_110_str;
  } else {
    clear_has_sparse_110_str();
    sparse_110_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_111_str = 123;
inline bool Database_NoBench::has_sparse_111_str() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_111_str() {
  _has_bits_[3] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_111_str() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_111_str() {
  if (sparse_111_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_111_str_->clear();
  }
  clear_has_sparse_111_str();
}
inline const ::std::string& Database_NoBench::sparse_111_str() const {
  return *sparse_111_str_;
}
inline void Database_NoBench::set_sparse_111_str(const ::std::string& value) {
  set_has_sparse_111_str();
  if (sparse_111_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_111_str_ = new ::std::string;
  }
  sparse_111_str_->assign(value);
}
inline void Database_NoBench::set_sparse_111_str(const char* value) {
  set_has_sparse_111_str();
  if (sparse_111_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_111_str_ = new ::std::string;
  }
  sparse_111_str_->assign(value);
}
inline void Database_NoBench::set_sparse_111_str(const char* value, size_t size) {
  set_has_sparse_111_str();
  if (sparse_111_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_111_str_ = new ::std::string;
  }
  sparse_111_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_111_str() {
  set_has_sparse_111_str();
  if (sparse_111_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_111_str_ = new ::std::string;
  }
  return sparse_111_str_;
}
inline ::std::string* Database_NoBench::release_sparse_111_str() {
  clear_has_sparse_111_str();
  if (sparse_111_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_111_str_;
    sparse_111_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_111_str(::std::string* sparse_111_str) {
  if (sparse_111_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_111_str_;
  }
  if (sparse_111_str) {
    set_has_sparse_111_str();
    sparse_111_str_ = sparse_111_str;
  } else {
    clear_has_sparse_111_str();
    sparse_111_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_112_str = 124;
inline bool Database_NoBench::has_sparse_112_str() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_112_str() {
  _has_bits_[3] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_112_str() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_112_str() {
  if (sparse_112_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_112_str_->clear();
  }
  clear_has_sparse_112_str();
}
inline const ::std::string& Database_NoBench::sparse_112_str() const {
  return *sparse_112_str_;
}
inline void Database_NoBench::set_sparse_112_str(const ::std::string& value) {
  set_has_sparse_112_str();
  if (sparse_112_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_112_str_ = new ::std::string;
  }
  sparse_112_str_->assign(value);
}
inline void Database_NoBench::set_sparse_112_str(const char* value) {
  set_has_sparse_112_str();
  if (sparse_112_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_112_str_ = new ::std::string;
  }
  sparse_112_str_->assign(value);
}
inline void Database_NoBench::set_sparse_112_str(const char* value, size_t size) {
  set_has_sparse_112_str();
  if (sparse_112_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_112_str_ = new ::std::string;
  }
  sparse_112_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_112_str() {
  set_has_sparse_112_str();
  if (sparse_112_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_112_str_ = new ::std::string;
  }
  return sparse_112_str_;
}
inline ::std::string* Database_NoBench::release_sparse_112_str() {
  clear_has_sparse_112_str();
  if (sparse_112_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_112_str_;
    sparse_112_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_112_str(::std::string* sparse_112_str) {
  if (sparse_112_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_112_str_;
  }
  if (sparse_112_str) {
    set_has_sparse_112_str();
    sparse_112_str_ = sparse_112_str;
  } else {
    clear_has_sparse_112_str();
    sparse_112_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_113_str = 125;
inline bool Database_NoBench::has_sparse_113_str() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_113_str() {
  _has_bits_[3] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_113_str() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_113_str() {
  if (sparse_113_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_113_str_->clear();
  }
  clear_has_sparse_113_str();
}
inline const ::std::string& Database_NoBench::sparse_113_str() const {
  return *sparse_113_str_;
}
inline void Database_NoBench::set_sparse_113_str(const ::std::string& value) {
  set_has_sparse_113_str();
  if (sparse_113_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_113_str_ = new ::std::string;
  }
  sparse_113_str_->assign(value);
}
inline void Database_NoBench::set_sparse_113_str(const char* value) {
  set_has_sparse_113_str();
  if (sparse_113_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_113_str_ = new ::std::string;
  }
  sparse_113_str_->assign(value);
}
inline void Database_NoBench::set_sparse_113_str(const char* value, size_t size) {
  set_has_sparse_113_str();
  if (sparse_113_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_113_str_ = new ::std::string;
  }
  sparse_113_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_113_str() {
  set_has_sparse_113_str();
  if (sparse_113_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_113_str_ = new ::std::string;
  }
  return sparse_113_str_;
}
inline ::std::string* Database_NoBench::release_sparse_113_str() {
  clear_has_sparse_113_str();
  if (sparse_113_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_113_str_;
    sparse_113_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_113_str(::std::string* sparse_113_str) {
  if (sparse_113_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_113_str_;
  }
  if (sparse_113_str) {
    set_has_sparse_113_str();
    sparse_113_str_ = sparse_113_str;
  } else {
    clear_has_sparse_113_str();
    sparse_113_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_114_str = 126;
inline bool Database_NoBench::has_sparse_114_str() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_114_str() {
  _has_bits_[3] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_114_str() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_114_str() {
  if (sparse_114_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_114_str_->clear();
  }
  clear_has_sparse_114_str();
}
inline const ::std::string& Database_NoBench::sparse_114_str() const {
  return *sparse_114_str_;
}
inline void Database_NoBench::set_sparse_114_str(const ::std::string& value) {
  set_has_sparse_114_str();
  if (sparse_114_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_114_str_ = new ::std::string;
  }
  sparse_114_str_->assign(value);
}
inline void Database_NoBench::set_sparse_114_str(const char* value) {
  set_has_sparse_114_str();
  if (sparse_114_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_114_str_ = new ::std::string;
  }
  sparse_114_str_->assign(value);
}
inline void Database_NoBench::set_sparse_114_str(const char* value, size_t size) {
  set_has_sparse_114_str();
  if (sparse_114_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_114_str_ = new ::std::string;
  }
  sparse_114_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_114_str() {
  set_has_sparse_114_str();
  if (sparse_114_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_114_str_ = new ::std::string;
  }
  return sparse_114_str_;
}
inline ::std::string* Database_NoBench::release_sparse_114_str() {
  clear_has_sparse_114_str();
  if (sparse_114_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_114_str_;
    sparse_114_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_114_str(::std::string* sparse_114_str) {
  if (sparse_114_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_114_str_;
  }
  if (sparse_114_str) {
    set_has_sparse_114_str();
    sparse_114_str_ = sparse_114_str;
  } else {
    clear_has_sparse_114_str();
    sparse_114_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_115_str = 127;
inline bool Database_NoBench::has_sparse_115_str() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_115_str() {
  _has_bits_[4] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_115_str() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_115_str() {
  if (sparse_115_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_115_str_->clear();
  }
  clear_has_sparse_115_str();
}
inline const ::std::string& Database_NoBench::sparse_115_str() const {
  return *sparse_115_str_;
}
inline void Database_NoBench::set_sparse_115_str(const ::std::string& value) {
  set_has_sparse_115_str();
  if (sparse_115_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_115_str_ = new ::std::string;
  }
  sparse_115_str_->assign(value);
}
inline void Database_NoBench::set_sparse_115_str(const char* value) {
  set_has_sparse_115_str();
  if (sparse_115_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_115_str_ = new ::std::string;
  }
  sparse_115_str_->assign(value);
}
inline void Database_NoBench::set_sparse_115_str(const char* value, size_t size) {
  set_has_sparse_115_str();
  if (sparse_115_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_115_str_ = new ::std::string;
  }
  sparse_115_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_115_str() {
  set_has_sparse_115_str();
  if (sparse_115_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_115_str_ = new ::std::string;
  }
  return sparse_115_str_;
}
inline ::std::string* Database_NoBench::release_sparse_115_str() {
  clear_has_sparse_115_str();
  if (sparse_115_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_115_str_;
    sparse_115_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_115_str(::std::string* sparse_115_str) {
  if (sparse_115_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_115_str_;
  }
  if (sparse_115_str) {
    set_has_sparse_115_str();
    sparse_115_str_ = sparse_115_str;
  } else {
    clear_has_sparse_115_str();
    sparse_115_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_116_str = 128;
inline bool Database_NoBench::has_sparse_116_str() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_116_str() {
  _has_bits_[4] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_116_str() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_116_str() {
  if (sparse_116_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_116_str_->clear();
  }
  clear_has_sparse_116_str();
}
inline const ::std::string& Database_NoBench::sparse_116_str() const {
  return *sparse_116_str_;
}
inline void Database_NoBench::set_sparse_116_str(const ::std::string& value) {
  set_has_sparse_116_str();
  if (sparse_116_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_116_str_ = new ::std::string;
  }
  sparse_116_str_->assign(value);
}
inline void Database_NoBench::set_sparse_116_str(const char* value) {
  set_has_sparse_116_str();
  if (sparse_116_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_116_str_ = new ::std::string;
  }
  sparse_116_str_->assign(value);
}
inline void Database_NoBench::set_sparse_116_str(const char* value, size_t size) {
  set_has_sparse_116_str();
  if (sparse_116_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_116_str_ = new ::std::string;
  }
  sparse_116_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_116_str() {
  set_has_sparse_116_str();
  if (sparse_116_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_116_str_ = new ::std::string;
  }
  return sparse_116_str_;
}
inline ::std::string* Database_NoBench::release_sparse_116_str() {
  clear_has_sparse_116_str();
  if (sparse_116_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_116_str_;
    sparse_116_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_116_str(::std::string* sparse_116_str) {
  if (sparse_116_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_116_str_;
  }
  if (sparse_116_str) {
    set_has_sparse_116_str();
    sparse_116_str_ = sparse_116_str;
  } else {
    clear_has_sparse_116_str();
    sparse_116_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_117_str = 129;
inline bool Database_NoBench::has_sparse_117_str() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_117_str() {
  _has_bits_[4] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_117_str() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_117_str() {
  if (sparse_117_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_117_str_->clear();
  }
  clear_has_sparse_117_str();
}
inline const ::std::string& Database_NoBench::sparse_117_str() const {
  return *sparse_117_str_;
}
inline void Database_NoBench::set_sparse_117_str(const ::std::string& value) {
  set_has_sparse_117_str();
  if (sparse_117_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_117_str_ = new ::std::string;
  }
  sparse_117_str_->assign(value);
}
inline void Database_NoBench::set_sparse_117_str(const char* value) {
  set_has_sparse_117_str();
  if (sparse_117_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_117_str_ = new ::std::string;
  }
  sparse_117_str_->assign(value);
}
inline void Database_NoBench::set_sparse_117_str(const char* value, size_t size) {
  set_has_sparse_117_str();
  if (sparse_117_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_117_str_ = new ::std::string;
  }
  sparse_117_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_117_str() {
  set_has_sparse_117_str();
  if (sparse_117_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_117_str_ = new ::std::string;
  }
  return sparse_117_str_;
}
inline ::std::string* Database_NoBench::release_sparse_117_str() {
  clear_has_sparse_117_str();
  if (sparse_117_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_117_str_;
    sparse_117_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_117_str(::std::string* sparse_117_str) {
  if (sparse_117_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_117_str_;
  }
  if (sparse_117_str) {
    set_has_sparse_117_str();
    sparse_117_str_ = sparse_117_str;
  } else {
    clear_has_sparse_117_str();
    sparse_117_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_118_str = 130;
inline bool Database_NoBench::has_sparse_118_str() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_118_str() {
  _has_bits_[4] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_118_str() {
  _has_bits_[4] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_118_str() {
  if (sparse_118_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_118_str_->clear();
  }
  clear_has_sparse_118_str();
}
inline const ::std::string& Database_NoBench::sparse_118_str() const {
  return *sparse_118_str_;
}
inline void Database_NoBench::set_sparse_118_str(const ::std::string& value) {
  set_has_sparse_118_str();
  if (sparse_118_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_118_str_ = new ::std::string;
  }
  sparse_118_str_->assign(value);
}
inline void Database_NoBench::set_sparse_118_str(const char* value) {
  set_has_sparse_118_str();
  if (sparse_118_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_118_str_ = new ::std::string;
  }
  sparse_118_str_->assign(value);
}
inline void Database_NoBench::set_sparse_118_str(const char* value, size_t size) {
  set_has_sparse_118_str();
  if (sparse_118_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_118_str_ = new ::std::string;
  }
  sparse_118_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_118_str() {
  set_has_sparse_118_str();
  if (sparse_118_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_118_str_ = new ::std::string;
  }
  return sparse_118_str_;
}
inline ::std::string* Database_NoBench::release_sparse_118_str() {
  clear_has_sparse_118_str();
  if (sparse_118_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_118_str_;
    sparse_118_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_118_str(::std::string* sparse_118_str) {
  if (sparse_118_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_118_str_;
  }
  if (sparse_118_str) {
    set_has_sparse_118_str();
    sparse_118_str_ = sparse_118_str;
  } else {
    clear_has_sparse_118_str();
    sparse_118_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_119_str = 131;
inline bool Database_NoBench::has_sparse_119_str() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_119_str() {
  _has_bits_[4] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_119_str() {
  _has_bits_[4] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_119_str() {
  if (sparse_119_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_119_str_->clear();
  }
  clear_has_sparse_119_str();
}
inline const ::std::string& Database_NoBench::sparse_119_str() const {
  return *sparse_119_str_;
}
inline void Database_NoBench::set_sparse_119_str(const ::std::string& value) {
  set_has_sparse_119_str();
  if (sparse_119_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_119_str_ = new ::std::string;
  }
  sparse_119_str_->assign(value);
}
inline void Database_NoBench::set_sparse_119_str(const char* value) {
  set_has_sparse_119_str();
  if (sparse_119_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_119_str_ = new ::std::string;
  }
  sparse_119_str_->assign(value);
}
inline void Database_NoBench::set_sparse_119_str(const char* value, size_t size) {
  set_has_sparse_119_str();
  if (sparse_119_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_119_str_ = new ::std::string;
  }
  sparse_119_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_119_str() {
  set_has_sparse_119_str();
  if (sparse_119_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_119_str_ = new ::std::string;
  }
  return sparse_119_str_;
}
inline ::std::string* Database_NoBench::release_sparse_119_str() {
  clear_has_sparse_119_str();
  if (sparse_119_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_119_str_;
    sparse_119_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_119_str(::std::string* sparse_119_str) {
  if (sparse_119_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_119_str_;
  }
  if (sparse_119_str) {
    set_has_sparse_119_str();
    sparse_119_str_ = sparse_119_str;
  } else {
    clear_has_sparse_119_str();
    sparse_119_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_120_str = 132;
inline bool Database_NoBench::has_sparse_120_str() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_120_str() {
  _has_bits_[4] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_120_str() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_120_str() {
  if (sparse_120_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_120_str_->clear();
  }
  clear_has_sparse_120_str();
}
inline const ::std::string& Database_NoBench::sparse_120_str() const {
  return *sparse_120_str_;
}
inline void Database_NoBench::set_sparse_120_str(const ::std::string& value) {
  set_has_sparse_120_str();
  if (sparse_120_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_120_str_ = new ::std::string;
  }
  sparse_120_str_->assign(value);
}
inline void Database_NoBench::set_sparse_120_str(const char* value) {
  set_has_sparse_120_str();
  if (sparse_120_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_120_str_ = new ::std::string;
  }
  sparse_120_str_->assign(value);
}
inline void Database_NoBench::set_sparse_120_str(const char* value, size_t size) {
  set_has_sparse_120_str();
  if (sparse_120_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_120_str_ = new ::std::string;
  }
  sparse_120_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_120_str() {
  set_has_sparse_120_str();
  if (sparse_120_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_120_str_ = new ::std::string;
  }
  return sparse_120_str_;
}
inline ::std::string* Database_NoBench::release_sparse_120_str() {
  clear_has_sparse_120_str();
  if (sparse_120_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_120_str_;
    sparse_120_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_120_str(::std::string* sparse_120_str) {
  if (sparse_120_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_120_str_;
  }
  if (sparse_120_str) {
    set_has_sparse_120_str();
    sparse_120_str_ = sparse_120_str;
  } else {
    clear_has_sparse_120_str();
    sparse_120_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_121_str = 133;
inline bool Database_NoBench::has_sparse_121_str() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_121_str() {
  _has_bits_[4] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_121_str() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_121_str() {
  if (sparse_121_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_121_str_->clear();
  }
  clear_has_sparse_121_str();
}
inline const ::std::string& Database_NoBench::sparse_121_str() const {
  return *sparse_121_str_;
}
inline void Database_NoBench::set_sparse_121_str(const ::std::string& value) {
  set_has_sparse_121_str();
  if (sparse_121_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_121_str_ = new ::std::string;
  }
  sparse_121_str_->assign(value);
}
inline void Database_NoBench::set_sparse_121_str(const char* value) {
  set_has_sparse_121_str();
  if (sparse_121_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_121_str_ = new ::std::string;
  }
  sparse_121_str_->assign(value);
}
inline void Database_NoBench::set_sparse_121_str(const char* value, size_t size) {
  set_has_sparse_121_str();
  if (sparse_121_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_121_str_ = new ::std::string;
  }
  sparse_121_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_121_str() {
  set_has_sparse_121_str();
  if (sparse_121_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_121_str_ = new ::std::string;
  }
  return sparse_121_str_;
}
inline ::std::string* Database_NoBench::release_sparse_121_str() {
  clear_has_sparse_121_str();
  if (sparse_121_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_121_str_;
    sparse_121_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_121_str(::std::string* sparse_121_str) {
  if (sparse_121_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_121_str_;
  }
  if (sparse_121_str) {
    set_has_sparse_121_str();
    sparse_121_str_ = sparse_121_str;
  } else {
    clear_has_sparse_121_str();
    sparse_121_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_122_str = 134;
inline bool Database_NoBench::has_sparse_122_str() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_122_str() {
  _has_bits_[4] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_122_str() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_122_str() {
  if (sparse_122_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_122_str_->clear();
  }
  clear_has_sparse_122_str();
}
inline const ::std::string& Database_NoBench::sparse_122_str() const {
  return *sparse_122_str_;
}
inline void Database_NoBench::set_sparse_122_str(const ::std::string& value) {
  set_has_sparse_122_str();
  if (sparse_122_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_122_str_ = new ::std::string;
  }
  sparse_122_str_->assign(value);
}
inline void Database_NoBench::set_sparse_122_str(const char* value) {
  set_has_sparse_122_str();
  if (sparse_122_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_122_str_ = new ::std::string;
  }
  sparse_122_str_->assign(value);
}
inline void Database_NoBench::set_sparse_122_str(const char* value, size_t size) {
  set_has_sparse_122_str();
  if (sparse_122_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_122_str_ = new ::std::string;
  }
  sparse_122_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_122_str() {
  set_has_sparse_122_str();
  if (sparse_122_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_122_str_ = new ::std::string;
  }
  return sparse_122_str_;
}
inline ::std::string* Database_NoBench::release_sparse_122_str() {
  clear_has_sparse_122_str();
  if (sparse_122_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_122_str_;
    sparse_122_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_122_str(::std::string* sparse_122_str) {
  if (sparse_122_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_122_str_;
  }
  if (sparse_122_str) {
    set_has_sparse_122_str();
    sparse_122_str_ = sparse_122_str;
  } else {
    clear_has_sparse_122_str();
    sparse_122_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_123_str = 135;
inline bool Database_NoBench::has_sparse_123_str() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_123_str() {
  _has_bits_[4] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_123_str() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_123_str() {
  if (sparse_123_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_123_str_->clear();
  }
  clear_has_sparse_123_str();
}
inline const ::std::string& Database_NoBench::sparse_123_str() const {
  return *sparse_123_str_;
}
inline void Database_NoBench::set_sparse_123_str(const ::std::string& value) {
  set_has_sparse_123_str();
  if (sparse_123_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_123_str_ = new ::std::string;
  }
  sparse_123_str_->assign(value);
}
inline void Database_NoBench::set_sparse_123_str(const char* value) {
  set_has_sparse_123_str();
  if (sparse_123_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_123_str_ = new ::std::string;
  }
  sparse_123_str_->assign(value);
}
inline void Database_NoBench::set_sparse_123_str(const char* value, size_t size) {
  set_has_sparse_123_str();
  if (sparse_123_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_123_str_ = new ::std::string;
  }
  sparse_123_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_123_str() {
  set_has_sparse_123_str();
  if (sparse_123_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_123_str_ = new ::std::string;
  }
  return sparse_123_str_;
}
inline ::std::string* Database_NoBench::release_sparse_123_str() {
  clear_has_sparse_123_str();
  if (sparse_123_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_123_str_;
    sparse_123_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_123_str(::std::string* sparse_123_str) {
  if (sparse_123_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_123_str_;
  }
  if (sparse_123_str) {
    set_has_sparse_123_str();
    sparse_123_str_ = sparse_123_str;
  } else {
    clear_has_sparse_123_str();
    sparse_123_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_124_str = 136;
inline bool Database_NoBench::has_sparse_124_str() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_124_str() {
  _has_bits_[4] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_124_str() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_124_str() {
  if (sparse_124_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_124_str_->clear();
  }
  clear_has_sparse_124_str();
}
inline const ::std::string& Database_NoBench::sparse_124_str() const {
  return *sparse_124_str_;
}
inline void Database_NoBench::set_sparse_124_str(const ::std::string& value) {
  set_has_sparse_124_str();
  if (sparse_124_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_124_str_ = new ::std::string;
  }
  sparse_124_str_->assign(value);
}
inline void Database_NoBench::set_sparse_124_str(const char* value) {
  set_has_sparse_124_str();
  if (sparse_124_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_124_str_ = new ::std::string;
  }
  sparse_124_str_->assign(value);
}
inline void Database_NoBench::set_sparse_124_str(const char* value, size_t size) {
  set_has_sparse_124_str();
  if (sparse_124_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_124_str_ = new ::std::string;
  }
  sparse_124_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_124_str() {
  set_has_sparse_124_str();
  if (sparse_124_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_124_str_ = new ::std::string;
  }
  return sparse_124_str_;
}
inline ::std::string* Database_NoBench::release_sparse_124_str() {
  clear_has_sparse_124_str();
  if (sparse_124_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_124_str_;
    sparse_124_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_124_str(::std::string* sparse_124_str) {
  if (sparse_124_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_124_str_;
  }
  if (sparse_124_str) {
    set_has_sparse_124_str();
    sparse_124_str_ = sparse_124_str;
  } else {
    clear_has_sparse_124_str();
    sparse_124_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_125_str = 137;
inline bool Database_NoBench::has_sparse_125_str() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_125_str() {
  _has_bits_[4] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_125_str() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_125_str() {
  if (sparse_125_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_125_str_->clear();
  }
  clear_has_sparse_125_str();
}
inline const ::std::string& Database_NoBench::sparse_125_str() const {
  return *sparse_125_str_;
}
inline void Database_NoBench::set_sparse_125_str(const ::std::string& value) {
  set_has_sparse_125_str();
  if (sparse_125_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_125_str_ = new ::std::string;
  }
  sparse_125_str_->assign(value);
}
inline void Database_NoBench::set_sparse_125_str(const char* value) {
  set_has_sparse_125_str();
  if (sparse_125_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_125_str_ = new ::std::string;
  }
  sparse_125_str_->assign(value);
}
inline void Database_NoBench::set_sparse_125_str(const char* value, size_t size) {
  set_has_sparse_125_str();
  if (sparse_125_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_125_str_ = new ::std::string;
  }
  sparse_125_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_125_str() {
  set_has_sparse_125_str();
  if (sparse_125_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_125_str_ = new ::std::string;
  }
  return sparse_125_str_;
}
inline ::std::string* Database_NoBench::release_sparse_125_str() {
  clear_has_sparse_125_str();
  if (sparse_125_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_125_str_;
    sparse_125_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_125_str(::std::string* sparse_125_str) {
  if (sparse_125_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_125_str_;
  }
  if (sparse_125_str) {
    set_has_sparse_125_str();
    sparse_125_str_ = sparse_125_str;
  } else {
    clear_has_sparse_125_str();
    sparse_125_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_126_str = 138;
inline bool Database_NoBench::has_sparse_126_str() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_126_str() {
  _has_bits_[4] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_126_str() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_126_str() {
  if (sparse_126_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_126_str_->clear();
  }
  clear_has_sparse_126_str();
}
inline const ::std::string& Database_NoBench::sparse_126_str() const {
  return *sparse_126_str_;
}
inline void Database_NoBench::set_sparse_126_str(const ::std::string& value) {
  set_has_sparse_126_str();
  if (sparse_126_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_126_str_ = new ::std::string;
  }
  sparse_126_str_->assign(value);
}
inline void Database_NoBench::set_sparse_126_str(const char* value) {
  set_has_sparse_126_str();
  if (sparse_126_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_126_str_ = new ::std::string;
  }
  sparse_126_str_->assign(value);
}
inline void Database_NoBench::set_sparse_126_str(const char* value, size_t size) {
  set_has_sparse_126_str();
  if (sparse_126_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_126_str_ = new ::std::string;
  }
  sparse_126_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_126_str() {
  set_has_sparse_126_str();
  if (sparse_126_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_126_str_ = new ::std::string;
  }
  return sparse_126_str_;
}
inline ::std::string* Database_NoBench::release_sparse_126_str() {
  clear_has_sparse_126_str();
  if (sparse_126_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_126_str_;
    sparse_126_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_126_str(::std::string* sparse_126_str) {
  if (sparse_126_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_126_str_;
  }
  if (sparse_126_str) {
    set_has_sparse_126_str();
    sparse_126_str_ = sparse_126_str;
  } else {
    clear_has_sparse_126_str();
    sparse_126_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_127_str = 139;
inline bool Database_NoBench::has_sparse_127_str() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_127_str() {
  _has_bits_[4] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_127_str() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_127_str() {
  if (sparse_127_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_127_str_->clear();
  }
  clear_has_sparse_127_str();
}
inline const ::std::string& Database_NoBench::sparse_127_str() const {
  return *sparse_127_str_;
}
inline void Database_NoBench::set_sparse_127_str(const ::std::string& value) {
  set_has_sparse_127_str();
  if (sparse_127_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_127_str_ = new ::std::string;
  }
  sparse_127_str_->assign(value);
}
inline void Database_NoBench::set_sparse_127_str(const char* value) {
  set_has_sparse_127_str();
  if (sparse_127_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_127_str_ = new ::std::string;
  }
  sparse_127_str_->assign(value);
}
inline void Database_NoBench::set_sparse_127_str(const char* value, size_t size) {
  set_has_sparse_127_str();
  if (sparse_127_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_127_str_ = new ::std::string;
  }
  sparse_127_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_127_str() {
  set_has_sparse_127_str();
  if (sparse_127_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_127_str_ = new ::std::string;
  }
  return sparse_127_str_;
}
inline ::std::string* Database_NoBench::release_sparse_127_str() {
  clear_has_sparse_127_str();
  if (sparse_127_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_127_str_;
    sparse_127_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_127_str(::std::string* sparse_127_str) {
  if (sparse_127_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_127_str_;
  }
  if (sparse_127_str) {
    set_has_sparse_127_str();
    sparse_127_str_ = sparse_127_str;
  } else {
    clear_has_sparse_127_str();
    sparse_127_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_128_str = 140;
inline bool Database_NoBench::has_sparse_128_str() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_128_str() {
  _has_bits_[4] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_128_str() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_128_str() {
  if (sparse_128_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_128_str_->clear();
  }
  clear_has_sparse_128_str();
}
inline const ::std::string& Database_NoBench::sparse_128_str() const {
  return *sparse_128_str_;
}
inline void Database_NoBench::set_sparse_128_str(const ::std::string& value) {
  set_has_sparse_128_str();
  if (sparse_128_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_128_str_ = new ::std::string;
  }
  sparse_128_str_->assign(value);
}
inline void Database_NoBench::set_sparse_128_str(const char* value) {
  set_has_sparse_128_str();
  if (sparse_128_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_128_str_ = new ::std::string;
  }
  sparse_128_str_->assign(value);
}
inline void Database_NoBench::set_sparse_128_str(const char* value, size_t size) {
  set_has_sparse_128_str();
  if (sparse_128_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_128_str_ = new ::std::string;
  }
  sparse_128_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_128_str() {
  set_has_sparse_128_str();
  if (sparse_128_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_128_str_ = new ::std::string;
  }
  return sparse_128_str_;
}
inline ::std::string* Database_NoBench::release_sparse_128_str() {
  clear_has_sparse_128_str();
  if (sparse_128_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_128_str_;
    sparse_128_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_128_str(::std::string* sparse_128_str) {
  if (sparse_128_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_128_str_;
  }
  if (sparse_128_str) {
    set_has_sparse_128_str();
    sparse_128_str_ = sparse_128_str;
  } else {
    clear_has_sparse_128_str();
    sparse_128_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_129_str = 141;
inline bool Database_NoBench::has_sparse_129_str() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_129_str() {
  _has_bits_[4] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_129_str() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_129_str() {
  if (sparse_129_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_129_str_->clear();
  }
  clear_has_sparse_129_str();
}
inline const ::std::string& Database_NoBench::sparse_129_str() const {
  return *sparse_129_str_;
}
inline void Database_NoBench::set_sparse_129_str(const ::std::string& value) {
  set_has_sparse_129_str();
  if (sparse_129_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_129_str_ = new ::std::string;
  }
  sparse_129_str_->assign(value);
}
inline void Database_NoBench::set_sparse_129_str(const char* value) {
  set_has_sparse_129_str();
  if (sparse_129_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_129_str_ = new ::std::string;
  }
  sparse_129_str_->assign(value);
}
inline void Database_NoBench::set_sparse_129_str(const char* value, size_t size) {
  set_has_sparse_129_str();
  if (sparse_129_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_129_str_ = new ::std::string;
  }
  sparse_129_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_129_str() {
  set_has_sparse_129_str();
  if (sparse_129_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_129_str_ = new ::std::string;
  }
  return sparse_129_str_;
}
inline ::std::string* Database_NoBench::release_sparse_129_str() {
  clear_has_sparse_129_str();
  if (sparse_129_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_129_str_;
    sparse_129_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_129_str(::std::string* sparse_129_str) {
  if (sparse_129_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_129_str_;
  }
  if (sparse_129_str) {
    set_has_sparse_129_str();
    sparse_129_str_ = sparse_129_str;
  } else {
    clear_has_sparse_129_str();
    sparse_129_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_130_str = 142;
inline bool Database_NoBench::has_sparse_130_str() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_130_str() {
  _has_bits_[4] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_130_str() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_130_str() {
  if (sparse_130_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_130_str_->clear();
  }
  clear_has_sparse_130_str();
}
inline const ::std::string& Database_NoBench::sparse_130_str() const {
  return *sparse_130_str_;
}
inline void Database_NoBench::set_sparse_130_str(const ::std::string& value) {
  set_has_sparse_130_str();
  if (sparse_130_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_130_str_ = new ::std::string;
  }
  sparse_130_str_->assign(value);
}
inline void Database_NoBench::set_sparse_130_str(const char* value) {
  set_has_sparse_130_str();
  if (sparse_130_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_130_str_ = new ::std::string;
  }
  sparse_130_str_->assign(value);
}
inline void Database_NoBench::set_sparse_130_str(const char* value, size_t size) {
  set_has_sparse_130_str();
  if (sparse_130_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_130_str_ = new ::std::string;
  }
  sparse_130_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_130_str() {
  set_has_sparse_130_str();
  if (sparse_130_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_130_str_ = new ::std::string;
  }
  return sparse_130_str_;
}
inline ::std::string* Database_NoBench::release_sparse_130_str() {
  clear_has_sparse_130_str();
  if (sparse_130_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_130_str_;
    sparse_130_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_130_str(::std::string* sparse_130_str) {
  if (sparse_130_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_130_str_;
  }
  if (sparse_130_str) {
    set_has_sparse_130_str();
    sparse_130_str_ = sparse_130_str;
  } else {
    clear_has_sparse_130_str();
    sparse_130_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_131_str = 143;
inline bool Database_NoBench::has_sparse_131_str() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_131_str() {
  _has_bits_[4] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_131_str() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_131_str() {
  if (sparse_131_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_131_str_->clear();
  }
  clear_has_sparse_131_str();
}
inline const ::std::string& Database_NoBench::sparse_131_str() const {
  return *sparse_131_str_;
}
inline void Database_NoBench::set_sparse_131_str(const ::std::string& value) {
  set_has_sparse_131_str();
  if (sparse_131_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_131_str_ = new ::std::string;
  }
  sparse_131_str_->assign(value);
}
inline void Database_NoBench::set_sparse_131_str(const char* value) {
  set_has_sparse_131_str();
  if (sparse_131_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_131_str_ = new ::std::string;
  }
  sparse_131_str_->assign(value);
}
inline void Database_NoBench::set_sparse_131_str(const char* value, size_t size) {
  set_has_sparse_131_str();
  if (sparse_131_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_131_str_ = new ::std::string;
  }
  sparse_131_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_131_str() {
  set_has_sparse_131_str();
  if (sparse_131_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_131_str_ = new ::std::string;
  }
  return sparse_131_str_;
}
inline ::std::string* Database_NoBench::release_sparse_131_str() {
  clear_has_sparse_131_str();
  if (sparse_131_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_131_str_;
    sparse_131_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_131_str(::std::string* sparse_131_str) {
  if (sparse_131_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_131_str_;
  }
  if (sparse_131_str) {
    set_has_sparse_131_str();
    sparse_131_str_ = sparse_131_str;
  } else {
    clear_has_sparse_131_str();
    sparse_131_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_132_str = 144;
inline bool Database_NoBench::has_sparse_132_str() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_132_str() {
  _has_bits_[4] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_132_str() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_132_str() {
  if (sparse_132_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_132_str_->clear();
  }
  clear_has_sparse_132_str();
}
inline const ::std::string& Database_NoBench::sparse_132_str() const {
  return *sparse_132_str_;
}
inline void Database_NoBench::set_sparse_132_str(const ::std::string& value) {
  set_has_sparse_132_str();
  if (sparse_132_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_132_str_ = new ::std::string;
  }
  sparse_132_str_->assign(value);
}
inline void Database_NoBench::set_sparse_132_str(const char* value) {
  set_has_sparse_132_str();
  if (sparse_132_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_132_str_ = new ::std::string;
  }
  sparse_132_str_->assign(value);
}
inline void Database_NoBench::set_sparse_132_str(const char* value, size_t size) {
  set_has_sparse_132_str();
  if (sparse_132_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_132_str_ = new ::std::string;
  }
  sparse_132_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_132_str() {
  set_has_sparse_132_str();
  if (sparse_132_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_132_str_ = new ::std::string;
  }
  return sparse_132_str_;
}
inline ::std::string* Database_NoBench::release_sparse_132_str() {
  clear_has_sparse_132_str();
  if (sparse_132_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_132_str_;
    sparse_132_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_132_str(::std::string* sparse_132_str) {
  if (sparse_132_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_132_str_;
  }
  if (sparse_132_str) {
    set_has_sparse_132_str();
    sparse_132_str_ = sparse_132_str;
  } else {
    clear_has_sparse_132_str();
    sparse_132_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_133_str = 145;
inline bool Database_NoBench::has_sparse_133_str() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_133_str() {
  _has_bits_[4] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_133_str() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_133_str() {
  if (sparse_133_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_133_str_->clear();
  }
  clear_has_sparse_133_str();
}
inline const ::std::string& Database_NoBench::sparse_133_str() const {
  return *sparse_133_str_;
}
inline void Database_NoBench::set_sparse_133_str(const ::std::string& value) {
  set_has_sparse_133_str();
  if (sparse_133_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_133_str_ = new ::std::string;
  }
  sparse_133_str_->assign(value);
}
inline void Database_NoBench::set_sparse_133_str(const char* value) {
  set_has_sparse_133_str();
  if (sparse_133_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_133_str_ = new ::std::string;
  }
  sparse_133_str_->assign(value);
}
inline void Database_NoBench::set_sparse_133_str(const char* value, size_t size) {
  set_has_sparse_133_str();
  if (sparse_133_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_133_str_ = new ::std::string;
  }
  sparse_133_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_133_str() {
  set_has_sparse_133_str();
  if (sparse_133_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_133_str_ = new ::std::string;
  }
  return sparse_133_str_;
}
inline ::std::string* Database_NoBench::release_sparse_133_str() {
  clear_has_sparse_133_str();
  if (sparse_133_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_133_str_;
    sparse_133_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_133_str(::std::string* sparse_133_str) {
  if (sparse_133_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_133_str_;
  }
  if (sparse_133_str) {
    set_has_sparse_133_str();
    sparse_133_str_ = sparse_133_str;
  } else {
    clear_has_sparse_133_str();
    sparse_133_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_134_str = 146;
inline bool Database_NoBench::has_sparse_134_str() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_134_str() {
  _has_bits_[4] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_134_str() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_134_str() {
  if (sparse_134_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_134_str_->clear();
  }
  clear_has_sparse_134_str();
}
inline const ::std::string& Database_NoBench::sparse_134_str() const {
  return *sparse_134_str_;
}
inline void Database_NoBench::set_sparse_134_str(const ::std::string& value) {
  set_has_sparse_134_str();
  if (sparse_134_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_134_str_ = new ::std::string;
  }
  sparse_134_str_->assign(value);
}
inline void Database_NoBench::set_sparse_134_str(const char* value) {
  set_has_sparse_134_str();
  if (sparse_134_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_134_str_ = new ::std::string;
  }
  sparse_134_str_->assign(value);
}
inline void Database_NoBench::set_sparse_134_str(const char* value, size_t size) {
  set_has_sparse_134_str();
  if (sparse_134_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_134_str_ = new ::std::string;
  }
  sparse_134_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_134_str() {
  set_has_sparse_134_str();
  if (sparse_134_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_134_str_ = new ::std::string;
  }
  return sparse_134_str_;
}
inline ::std::string* Database_NoBench::release_sparse_134_str() {
  clear_has_sparse_134_str();
  if (sparse_134_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_134_str_;
    sparse_134_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_134_str(::std::string* sparse_134_str) {
  if (sparse_134_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_134_str_;
  }
  if (sparse_134_str) {
    set_has_sparse_134_str();
    sparse_134_str_ = sparse_134_str;
  } else {
    clear_has_sparse_134_str();
    sparse_134_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_135_str = 147;
inline bool Database_NoBench::has_sparse_135_str() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_135_str() {
  _has_bits_[4] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_135_str() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_135_str() {
  if (sparse_135_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_135_str_->clear();
  }
  clear_has_sparse_135_str();
}
inline const ::std::string& Database_NoBench::sparse_135_str() const {
  return *sparse_135_str_;
}
inline void Database_NoBench::set_sparse_135_str(const ::std::string& value) {
  set_has_sparse_135_str();
  if (sparse_135_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_135_str_ = new ::std::string;
  }
  sparse_135_str_->assign(value);
}
inline void Database_NoBench::set_sparse_135_str(const char* value) {
  set_has_sparse_135_str();
  if (sparse_135_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_135_str_ = new ::std::string;
  }
  sparse_135_str_->assign(value);
}
inline void Database_NoBench::set_sparse_135_str(const char* value, size_t size) {
  set_has_sparse_135_str();
  if (sparse_135_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_135_str_ = new ::std::string;
  }
  sparse_135_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_135_str() {
  set_has_sparse_135_str();
  if (sparse_135_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_135_str_ = new ::std::string;
  }
  return sparse_135_str_;
}
inline ::std::string* Database_NoBench::release_sparse_135_str() {
  clear_has_sparse_135_str();
  if (sparse_135_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_135_str_;
    sparse_135_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_135_str(::std::string* sparse_135_str) {
  if (sparse_135_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_135_str_;
  }
  if (sparse_135_str) {
    set_has_sparse_135_str();
    sparse_135_str_ = sparse_135_str;
  } else {
    clear_has_sparse_135_str();
    sparse_135_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_136_str = 148;
inline bool Database_NoBench::has_sparse_136_str() const {
  return (_has_bits_[4] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_136_str() {
  _has_bits_[4] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_136_str() {
  _has_bits_[4] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_136_str() {
  if (sparse_136_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_136_str_->clear();
  }
  clear_has_sparse_136_str();
}
inline const ::std::string& Database_NoBench::sparse_136_str() const {
  return *sparse_136_str_;
}
inline void Database_NoBench::set_sparse_136_str(const ::std::string& value) {
  set_has_sparse_136_str();
  if (sparse_136_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_136_str_ = new ::std::string;
  }
  sparse_136_str_->assign(value);
}
inline void Database_NoBench::set_sparse_136_str(const char* value) {
  set_has_sparse_136_str();
  if (sparse_136_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_136_str_ = new ::std::string;
  }
  sparse_136_str_->assign(value);
}
inline void Database_NoBench::set_sparse_136_str(const char* value, size_t size) {
  set_has_sparse_136_str();
  if (sparse_136_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_136_str_ = new ::std::string;
  }
  sparse_136_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_136_str() {
  set_has_sparse_136_str();
  if (sparse_136_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_136_str_ = new ::std::string;
  }
  return sparse_136_str_;
}
inline ::std::string* Database_NoBench::release_sparse_136_str() {
  clear_has_sparse_136_str();
  if (sparse_136_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_136_str_;
    sparse_136_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_136_str(::std::string* sparse_136_str) {
  if (sparse_136_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_136_str_;
  }
  if (sparse_136_str) {
    set_has_sparse_136_str();
    sparse_136_str_ = sparse_136_str;
  } else {
    clear_has_sparse_136_str();
    sparse_136_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_137_str = 149;
inline bool Database_NoBench::has_sparse_137_str() const {
  return (_has_bits_[4] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_137_str() {
  _has_bits_[4] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_137_str() {
  _has_bits_[4] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_137_str() {
  if (sparse_137_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_137_str_->clear();
  }
  clear_has_sparse_137_str();
}
inline const ::std::string& Database_NoBench::sparse_137_str() const {
  return *sparse_137_str_;
}
inline void Database_NoBench::set_sparse_137_str(const ::std::string& value) {
  set_has_sparse_137_str();
  if (sparse_137_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_137_str_ = new ::std::string;
  }
  sparse_137_str_->assign(value);
}
inline void Database_NoBench::set_sparse_137_str(const char* value) {
  set_has_sparse_137_str();
  if (sparse_137_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_137_str_ = new ::std::string;
  }
  sparse_137_str_->assign(value);
}
inline void Database_NoBench::set_sparse_137_str(const char* value, size_t size) {
  set_has_sparse_137_str();
  if (sparse_137_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_137_str_ = new ::std::string;
  }
  sparse_137_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_137_str() {
  set_has_sparse_137_str();
  if (sparse_137_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_137_str_ = new ::std::string;
  }
  return sparse_137_str_;
}
inline ::std::string* Database_NoBench::release_sparse_137_str() {
  clear_has_sparse_137_str();
  if (sparse_137_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_137_str_;
    sparse_137_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_137_str(::std::string* sparse_137_str) {
  if (sparse_137_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_137_str_;
  }
  if (sparse_137_str) {
    set_has_sparse_137_str();
    sparse_137_str_ = sparse_137_str;
  } else {
    clear_has_sparse_137_str();
    sparse_137_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_138_str = 150;
inline bool Database_NoBench::has_sparse_138_str() const {
  return (_has_bits_[4] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_138_str() {
  _has_bits_[4] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_138_str() {
  _has_bits_[4] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_138_str() {
  if (sparse_138_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_138_str_->clear();
  }
  clear_has_sparse_138_str();
}
inline const ::std::string& Database_NoBench::sparse_138_str() const {
  return *sparse_138_str_;
}
inline void Database_NoBench::set_sparse_138_str(const ::std::string& value) {
  set_has_sparse_138_str();
  if (sparse_138_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_138_str_ = new ::std::string;
  }
  sparse_138_str_->assign(value);
}
inline void Database_NoBench::set_sparse_138_str(const char* value) {
  set_has_sparse_138_str();
  if (sparse_138_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_138_str_ = new ::std::string;
  }
  sparse_138_str_->assign(value);
}
inline void Database_NoBench::set_sparse_138_str(const char* value, size_t size) {
  set_has_sparse_138_str();
  if (sparse_138_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_138_str_ = new ::std::string;
  }
  sparse_138_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_138_str() {
  set_has_sparse_138_str();
  if (sparse_138_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_138_str_ = new ::std::string;
  }
  return sparse_138_str_;
}
inline ::std::string* Database_NoBench::release_sparse_138_str() {
  clear_has_sparse_138_str();
  if (sparse_138_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_138_str_;
    sparse_138_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_138_str(::std::string* sparse_138_str) {
  if (sparse_138_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_138_str_;
  }
  if (sparse_138_str) {
    set_has_sparse_138_str();
    sparse_138_str_ = sparse_138_str;
  } else {
    clear_has_sparse_138_str();
    sparse_138_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_139_str = 151;
inline bool Database_NoBench::has_sparse_139_str() const {
  return (_has_bits_[4] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_139_str() {
  _has_bits_[4] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_139_str() {
  _has_bits_[4] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_139_str() {
  if (sparse_139_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_139_str_->clear();
  }
  clear_has_sparse_139_str();
}
inline const ::std::string& Database_NoBench::sparse_139_str() const {
  return *sparse_139_str_;
}
inline void Database_NoBench::set_sparse_139_str(const ::std::string& value) {
  set_has_sparse_139_str();
  if (sparse_139_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_139_str_ = new ::std::string;
  }
  sparse_139_str_->assign(value);
}
inline void Database_NoBench::set_sparse_139_str(const char* value) {
  set_has_sparse_139_str();
  if (sparse_139_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_139_str_ = new ::std::string;
  }
  sparse_139_str_->assign(value);
}
inline void Database_NoBench::set_sparse_139_str(const char* value, size_t size) {
  set_has_sparse_139_str();
  if (sparse_139_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_139_str_ = new ::std::string;
  }
  sparse_139_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_139_str() {
  set_has_sparse_139_str();
  if (sparse_139_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_139_str_ = new ::std::string;
  }
  return sparse_139_str_;
}
inline ::std::string* Database_NoBench::release_sparse_139_str() {
  clear_has_sparse_139_str();
  if (sparse_139_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_139_str_;
    sparse_139_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_139_str(::std::string* sparse_139_str) {
  if (sparse_139_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_139_str_;
  }
  if (sparse_139_str) {
    set_has_sparse_139_str();
    sparse_139_str_ = sparse_139_str;
  } else {
    clear_has_sparse_139_str();
    sparse_139_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_140_str = 152;
inline bool Database_NoBench::has_sparse_140_str() const {
  return (_has_bits_[4] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_140_str() {
  _has_bits_[4] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_140_str() {
  _has_bits_[4] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_140_str() {
  if (sparse_140_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_140_str_->clear();
  }
  clear_has_sparse_140_str();
}
inline const ::std::string& Database_NoBench::sparse_140_str() const {
  return *sparse_140_str_;
}
inline void Database_NoBench::set_sparse_140_str(const ::std::string& value) {
  set_has_sparse_140_str();
  if (sparse_140_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_140_str_ = new ::std::string;
  }
  sparse_140_str_->assign(value);
}
inline void Database_NoBench::set_sparse_140_str(const char* value) {
  set_has_sparse_140_str();
  if (sparse_140_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_140_str_ = new ::std::string;
  }
  sparse_140_str_->assign(value);
}
inline void Database_NoBench::set_sparse_140_str(const char* value, size_t size) {
  set_has_sparse_140_str();
  if (sparse_140_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_140_str_ = new ::std::string;
  }
  sparse_140_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_140_str() {
  set_has_sparse_140_str();
  if (sparse_140_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_140_str_ = new ::std::string;
  }
  return sparse_140_str_;
}
inline ::std::string* Database_NoBench::release_sparse_140_str() {
  clear_has_sparse_140_str();
  if (sparse_140_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_140_str_;
    sparse_140_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_140_str(::std::string* sparse_140_str) {
  if (sparse_140_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_140_str_;
  }
  if (sparse_140_str) {
    set_has_sparse_140_str();
    sparse_140_str_ = sparse_140_str;
  } else {
    clear_has_sparse_140_str();
    sparse_140_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_141_str = 153;
inline bool Database_NoBench::has_sparse_141_str() const {
  return (_has_bits_[4] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_141_str() {
  _has_bits_[4] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_141_str() {
  _has_bits_[4] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_141_str() {
  if (sparse_141_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_141_str_->clear();
  }
  clear_has_sparse_141_str();
}
inline const ::std::string& Database_NoBench::sparse_141_str() const {
  return *sparse_141_str_;
}
inline void Database_NoBench::set_sparse_141_str(const ::std::string& value) {
  set_has_sparse_141_str();
  if (sparse_141_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_141_str_ = new ::std::string;
  }
  sparse_141_str_->assign(value);
}
inline void Database_NoBench::set_sparse_141_str(const char* value) {
  set_has_sparse_141_str();
  if (sparse_141_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_141_str_ = new ::std::string;
  }
  sparse_141_str_->assign(value);
}
inline void Database_NoBench::set_sparse_141_str(const char* value, size_t size) {
  set_has_sparse_141_str();
  if (sparse_141_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_141_str_ = new ::std::string;
  }
  sparse_141_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_141_str() {
  set_has_sparse_141_str();
  if (sparse_141_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_141_str_ = new ::std::string;
  }
  return sparse_141_str_;
}
inline ::std::string* Database_NoBench::release_sparse_141_str() {
  clear_has_sparse_141_str();
  if (sparse_141_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_141_str_;
    sparse_141_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_141_str(::std::string* sparse_141_str) {
  if (sparse_141_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_141_str_;
  }
  if (sparse_141_str) {
    set_has_sparse_141_str();
    sparse_141_str_ = sparse_141_str;
  } else {
    clear_has_sparse_141_str();
    sparse_141_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_142_str = 154;
inline bool Database_NoBench::has_sparse_142_str() const {
  return (_has_bits_[4] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_142_str() {
  _has_bits_[4] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_142_str() {
  _has_bits_[4] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_142_str() {
  if (sparse_142_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_142_str_->clear();
  }
  clear_has_sparse_142_str();
}
inline const ::std::string& Database_NoBench::sparse_142_str() const {
  return *sparse_142_str_;
}
inline void Database_NoBench::set_sparse_142_str(const ::std::string& value) {
  set_has_sparse_142_str();
  if (sparse_142_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_142_str_ = new ::std::string;
  }
  sparse_142_str_->assign(value);
}
inline void Database_NoBench::set_sparse_142_str(const char* value) {
  set_has_sparse_142_str();
  if (sparse_142_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_142_str_ = new ::std::string;
  }
  sparse_142_str_->assign(value);
}
inline void Database_NoBench::set_sparse_142_str(const char* value, size_t size) {
  set_has_sparse_142_str();
  if (sparse_142_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_142_str_ = new ::std::string;
  }
  sparse_142_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_142_str() {
  set_has_sparse_142_str();
  if (sparse_142_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_142_str_ = new ::std::string;
  }
  return sparse_142_str_;
}
inline ::std::string* Database_NoBench::release_sparse_142_str() {
  clear_has_sparse_142_str();
  if (sparse_142_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_142_str_;
    sparse_142_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_142_str(::std::string* sparse_142_str) {
  if (sparse_142_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_142_str_;
  }
  if (sparse_142_str) {
    set_has_sparse_142_str();
    sparse_142_str_ = sparse_142_str;
  } else {
    clear_has_sparse_142_str();
    sparse_142_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_143_str = 155;
inline bool Database_NoBench::has_sparse_143_str() const {
  return (_has_bits_[4] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_143_str() {
  _has_bits_[4] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_143_str() {
  _has_bits_[4] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_143_str() {
  if (sparse_143_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_143_str_->clear();
  }
  clear_has_sparse_143_str();
}
inline const ::std::string& Database_NoBench::sparse_143_str() const {
  return *sparse_143_str_;
}
inline void Database_NoBench::set_sparse_143_str(const ::std::string& value) {
  set_has_sparse_143_str();
  if (sparse_143_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_143_str_ = new ::std::string;
  }
  sparse_143_str_->assign(value);
}
inline void Database_NoBench::set_sparse_143_str(const char* value) {
  set_has_sparse_143_str();
  if (sparse_143_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_143_str_ = new ::std::string;
  }
  sparse_143_str_->assign(value);
}
inline void Database_NoBench::set_sparse_143_str(const char* value, size_t size) {
  set_has_sparse_143_str();
  if (sparse_143_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_143_str_ = new ::std::string;
  }
  sparse_143_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_143_str() {
  set_has_sparse_143_str();
  if (sparse_143_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_143_str_ = new ::std::string;
  }
  return sparse_143_str_;
}
inline ::std::string* Database_NoBench::release_sparse_143_str() {
  clear_has_sparse_143_str();
  if (sparse_143_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_143_str_;
    sparse_143_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_143_str(::std::string* sparse_143_str) {
  if (sparse_143_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_143_str_;
  }
  if (sparse_143_str) {
    set_has_sparse_143_str();
    sparse_143_str_ = sparse_143_str;
  } else {
    clear_has_sparse_143_str();
    sparse_143_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_144_str = 156;
inline bool Database_NoBench::has_sparse_144_str() const {
  return (_has_bits_[4] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_144_str() {
  _has_bits_[4] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_144_str() {
  _has_bits_[4] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_144_str() {
  if (sparse_144_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_144_str_->clear();
  }
  clear_has_sparse_144_str();
}
inline const ::std::string& Database_NoBench::sparse_144_str() const {
  return *sparse_144_str_;
}
inline void Database_NoBench::set_sparse_144_str(const ::std::string& value) {
  set_has_sparse_144_str();
  if (sparse_144_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_144_str_ = new ::std::string;
  }
  sparse_144_str_->assign(value);
}
inline void Database_NoBench::set_sparse_144_str(const char* value) {
  set_has_sparse_144_str();
  if (sparse_144_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_144_str_ = new ::std::string;
  }
  sparse_144_str_->assign(value);
}
inline void Database_NoBench::set_sparse_144_str(const char* value, size_t size) {
  set_has_sparse_144_str();
  if (sparse_144_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_144_str_ = new ::std::string;
  }
  sparse_144_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_144_str() {
  set_has_sparse_144_str();
  if (sparse_144_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_144_str_ = new ::std::string;
  }
  return sparse_144_str_;
}
inline ::std::string* Database_NoBench::release_sparse_144_str() {
  clear_has_sparse_144_str();
  if (sparse_144_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_144_str_;
    sparse_144_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_144_str(::std::string* sparse_144_str) {
  if (sparse_144_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_144_str_;
  }
  if (sparse_144_str) {
    set_has_sparse_144_str();
    sparse_144_str_ = sparse_144_str;
  } else {
    clear_has_sparse_144_str();
    sparse_144_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_145_str = 157;
inline bool Database_NoBench::has_sparse_145_str() const {
  return (_has_bits_[4] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_145_str() {
  _has_bits_[4] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_145_str() {
  _has_bits_[4] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_145_str() {
  if (sparse_145_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_145_str_->clear();
  }
  clear_has_sparse_145_str();
}
inline const ::std::string& Database_NoBench::sparse_145_str() const {
  return *sparse_145_str_;
}
inline void Database_NoBench::set_sparse_145_str(const ::std::string& value) {
  set_has_sparse_145_str();
  if (sparse_145_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_145_str_ = new ::std::string;
  }
  sparse_145_str_->assign(value);
}
inline void Database_NoBench::set_sparse_145_str(const char* value) {
  set_has_sparse_145_str();
  if (sparse_145_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_145_str_ = new ::std::string;
  }
  sparse_145_str_->assign(value);
}
inline void Database_NoBench::set_sparse_145_str(const char* value, size_t size) {
  set_has_sparse_145_str();
  if (sparse_145_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_145_str_ = new ::std::string;
  }
  sparse_145_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_145_str() {
  set_has_sparse_145_str();
  if (sparse_145_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_145_str_ = new ::std::string;
  }
  return sparse_145_str_;
}
inline ::std::string* Database_NoBench::release_sparse_145_str() {
  clear_has_sparse_145_str();
  if (sparse_145_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_145_str_;
    sparse_145_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_145_str(::std::string* sparse_145_str) {
  if (sparse_145_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_145_str_;
  }
  if (sparse_145_str) {
    set_has_sparse_145_str();
    sparse_145_str_ = sparse_145_str;
  } else {
    clear_has_sparse_145_str();
    sparse_145_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_146_str = 158;
inline bool Database_NoBench::has_sparse_146_str() const {
  return (_has_bits_[4] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_146_str() {
  _has_bits_[4] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_146_str() {
  _has_bits_[4] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_146_str() {
  if (sparse_146_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_146_str_->clear();
  }
  clear_has_sparse_146_str();
}
inline const ::std::string& Database_NoBench::sparse_146_str() const {
  return *sparse_146_str_;
}
inline void Database_NoBench::set_sparse_146_str(const ::std::string& value) {
  set_has_sparse_146_str();
  if (sparse_146_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_146_str_ = new ::std::string;
  }
  sparse_146_str_->assign(value);
}
inline void Database_NoBench::set_sparse_146_str(const char* value) {
  set_has_sparse_146_str();
  if (sparse_146_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_146_str_ = new ::std::string;
  }
  sparse_146_str_->assign(value);
}
inline void Database_NoBench::set_sparse_146_str(const char* value, size_t size) {
  set_has_sparse_146_str();
  if (sparse_146_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_146_str_ = new ::std::string;
  }
  sparse_146_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_146_str() {
  set_has_sparse_146_str();
  if (sparse_146_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_146_str_ = new ::std::string;
  }
  return sparse_146_str_;
}
inline ::std::string* Database_NoBench::release_sparse_146_str() {
  clear_has_sparse_146_str();
  if (sparse_146_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_146_str_;
    sparse_146_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_146_str(::std::string* sparse_146_str) {
  if (sparse_146_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_146_str_;
  }
  if (sparse_146_str) {
    set_has_sparse_146_str();
    sparse_146_str_ = sparse_146_str;
  } else {
    clear_has_sparse_146_str();
    sparse_146_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_147_str = 159;
inline bool Database_NoBench::has_sparse_147_str() const {
  return (_has_bits_[5] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_147_str() {
  _has_bits_[5] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_147_str() {
  _has_bits_[5] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_147_str() {
  if (sparse_147_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_147_str_->clear();
  }
  clear_has_sparse_147_str();
}
inline const ::std::string& Database_NoBench::sparse_147_str() const {
  return *sparse_147_str_;
}
inline void Database_NoBench::set_sparse_147_str(const ::std::string& value) {
  set_has_sparse_147_str();
  if (sparse_147_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_147_str_ = new ::std::string;
  }
  sparse_147_str_->assign(value);
}
inline void Database_NoBench::set_sparse_147_str(const char* value) {
  set_has_sparse_147_str();
  if (sparse_147_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_147_str_ = new ::std::string;
  }
  sparse_147_str_->assign(value);
}
inline void Database_NoBench::set_sparse_147_str(const char* value, size_t size) {
  set_has_sparse_147_str();
  if (sparse_147_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_147_str_ = new ::std::string;
  }
  sparse_147_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_147_str() {
  set_has_sparse_147_str();
  if (sparse_147_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_147_str_ = new ::std::string;
  }
  return sparse_147_str_;
}
inline ::std::string* Database_NoBench::release_sparse_147_str() {
  clear_has_sparse_147_str();
  if (sparse_147_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_147_str_;
    sparse_147_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_147_str(::std::string* sparse_147_str) {
  if (sparse_147_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_147_str_;
  }
  if (sparse_147_str) {
    set_has_sparse_147_str();
    sparse_147_str_ = sparse_147_str;
  } else {
    clear_has_sparse_147_str();
    sparse_147_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_148_str = 160;
inline bool Database_NoBench::has_sparse_148_str() const {
  return (_has_bits_[5] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_148_str() {
  _has_bits_[5] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_148_str() {
  _has_bits_[5] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_148_str() {
  if (sparse_148_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_148_str_->clear();
  }
  clear_has_sparse_148_str();
}
inline const ::std::string& Database_NoBench::sparse_148_str() const {
  return *sparse_148_str_;
}
inline void Database_NoBench::set_sparse_148_str(const ::std::string& value) {
  set_has_sparse_148_str();
  if (sparse_148_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_148_str_ = new ::std::string;
  }
  sparse_148_str_->assign(value);
}
inline void Database_NoBench::set_sparse_148_str(const char* value) {
  set_has_sparse_148_str();
  if (sparse_148_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_148_str_ = new ::std::string;
  }
  sparse_148_str_->assign(value);
}
inline void Database_NoBench::set_sparse_148_str(const char* value, size_t size) {
  set_has_sparse_148_str();
  if (sparse_148_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_148_str_ = new ::std::string;
  }
  sparse_148_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_148_str() {
  set_has_sparse_148_str();
  if (sparse_148_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_148_str_ = new ::std::string;
  }
  return sparse_148_str_;
}
inline ::std::string* Database_NoBench::release_sparse_148_str() {
  clear_has_sparse_148_str();
  if (sparse_148_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_148_str_;
    sparse_148_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_148_str(::std::string* sparse_148_str) {
  if (sparse_148_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_148_str_;
  }
  if (sparse_148_str) {
    set_has_sparse_148_str();
    sparse_148_str_ = sparse_148_str;
  } else {
    clear_has_sparse_148_str();
    sparse_148_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_149_str = 161;
inline bool Database_NoBench::has_sparse_149_str() const {
  return (_has_bits_[5] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_149_str() {
  _has_bits_[5] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_149_str() {
  _has_bits_[5] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_149_str() {
  if (sparse_149_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_149_str_->clear();
  }
  clear_has_sparse_149_str();
}
inline const ::std::string& Database_NoBench::sparse_149_str() const {
  return *sparse_149_str_;
}
inline void Database_NoBench::set_sparse_149_str(const ::std::string& value) {
  set_has_sparse_149_str();
  if (sparse_149_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_149_str_ = new ::std::string;
  }
  sparse_149_str_->assign(value);
}
inline void Database_NoBench::set_sparse_149_str(const char* value) {
  set_has_sparse_149_str();
  if (sparse_149_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_149_str_ = new ::std::string;
  }
  sparse_149_str_->assign(value);
}
inline void Database_NoBench::set_sparse_149_str(const char* value, size_t size) {
  set_has_sparse_149_str();
  if (sparse_149_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_149_str_ = new ::std::string;
  }
  sparse_149_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_149_str() {
  set_has_sparse_149_str();
  if (sparse_149_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_149_str_ = new ::std::string;
  }
  return sparse_149_str_;
}
inline ::std::string* Database_NoBench::release_sparse_149_str() {
  clear_has_sparse_149_str();
  if (sparse_149_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_149_str_;
    sparse_149_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_149_str(::std::string* sparse_149_str) {
  if (sparse_149_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_149_str_;
  }
  if (sparse_149_str) {
    set_has_sparse_149_str();
    sparse_149_str_ = sparse_149_str;
  } else {
    clear_has_sparse_149_str();
    sparse_149_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_150_str = 162;
inline bool Database_NoBench::has_sparse_150_str() const {
  return (_has_bits_[5] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_150_str() {
  _has_bits_[5] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_150_str() {
  _has_bits_[5] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_150_str() {
  if (sparse_150_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_150_str_->clear();
  }
  clear_has_sparse_150_str();
}
inline const ::std::string& Database_NoBench::sparse_150_str() const {
  return *sparse_150_str_;
}
inline void Database_NoBench::set_sparse_150_str(const ::std::string& value) {
  set_has_sparse_150_str();
  if (sparse_150_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_150_str_ = new ::std::string;
  }
  sparse_150_str_->assign(value);
}
inline void Database_NoBench::set_sparse_150_str(const char* value) {
  set_has_sparse_150_str();
  if (sparse_150_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_150_str_ = new ::std::string;
  }
  sparse_150_str_->assign(value);
}
inline void Database_NoBench::set_sparse_150_str(const char* value, size_t size) {
  set_has_sparse_150_str();
  if (sparse_150_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_150_str_ = new ::std::string;
  }
  sparse_150_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_150_str() {
  set_has_sparse_150_str();
  if (sparse_150_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_150_str_ = new ::std::string;
  }
  return sparse_150_str_;
}
inline ::std::string* Database_NoBench::release_sparse_150_str() {
  clear_has_sparse_150_str();
  if (sparse_150_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_150_str_;
    sparse_150_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_150_str(::std::string* sparse_150_str) {
  if (sparse_150_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_150_str_;
  }
  if (sparse_150_str) {
    set_has_sparse_150_str();
    sparse_150_str_ = sparse_150_str;
  } else {
    clear_has_sparse_150_str();
    sparse_150_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_151_str = 163;
inline bool Database_NoBench::has_sparse_151_str() const {
  return (_has_bits_[5] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_151_str() {
  _has_bits_[5] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_151_str() {
  _has_bits_[5] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_151_str() {
  if (sparse_151_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_151_str_->clear();
  }
  clear_has_sparse_151_str();
}
inline const ::std::string& Database_NoBench::sparse_151_str() const {
  return *sparse_151_str_;
}
inline void Database_NoBench::set_sparse_151_str(const ::std::string& value) {
  set_has_sparse_151_str();
  if (sparse_151_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_151_str_ = new ::std::string;
  }
  sparse_151_str_->assign(value);
}
inline void Database_NoBench::set_sparse_151_str(const char* value) {
  set_has_sparse_151_str();
  if (sparse_151_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_151_str_ = new ::std::string;
  }
  sparse_151_str_->assign(value);
}
inline void Database_NoBench::set_sparse_151_str(const char* value, size_t size) {
  set_has_sparse_151_str();
  if (sparse_151_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_151_str_ = new ::std::string;
  }
  sparse_151_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_151_str() {
  set_has_sparse_151_str();
  if (sparse_151_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_151_str_ = new ::std::string;
  }
  return sparse_151_str_;
}
inline ::std::string* Database_NoBench::release_sparse_151_str() {
  clear_has_sparse_151_str();
  if (sparse_151_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_151_str_;
    sparse_151_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_151_str(::std::string* sparse_151_str) {
  if (sparse_151_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_151_str_;
  }
  if (sparse_151_str) {
    set_has_sparse_151_str();
    sparse_151_str_ = sparse_151_str;
  } else {
    clear_has_sparse_151_str();
    sparse_151_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_152_str = 164;
inline bool Database_NoBench::has_sparse_152_str() const {
  return (_has_bits_[5] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_152_str() {
  _has_bits_[5] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_152_str() {
  _has_bits_[5] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_152_str() {
  if (sparse_152_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_152_str_->clear();
  }
  clear_has_sparse_152_str();
}
inline const ::std::string& Database_NoBench::sparse_152_str() const {
  return *sparse_152_str_;
}
inline void Database_NoBench::set_sparse_152_str(const ::std::string& value) {
  set_has_sparse_152_str();
  if (sparse_152_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_152_str_ = new ::std::string;
  }
  sparse_152_str_->assign(value);
}
inline void Database_NoBench::set_sparse_152_str(const char* value) {
  set_has_sparse_152_str();
  if (sparse_152_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_152_str_ = new ::std::string;
  }
  sparse_152_str_->assign(value);
}
inline void Database_NoBench::set_sparse_152_str(const char* value, size_t size) {
  set_has_sparse_152_str();
  if (sparse_152_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_152_str_ = new ::std::string;
  }
  sparse_152_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_152_str() {
  set_has_sparse_152_str();
  if (sparse_152_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_152_str_ = new ::std::string;
  }
  return sparse_152_str_;
}
inline ::std::string* Database_NoBench::release_sparse_152_str() {
  clear_has_sparse_152_str();
  if (sparse_152_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_152_str_;
    sparse_152_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_152_str(::std::string* sparse_152_str) {
  if (sparse_152_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_152_str_;
  }
  if (sparse_152_str) {
    set_has_sparse_152_str();
    sparse_152_str_ = sparse_152_str;
  } else {
    clear_has_sparse_152_str();
    sparse_152_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_153_str = 165;
inline bool Database_NoBench::has_sparse_153_str() const {
  return (_has_bits_[5] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_153_str() {
  _has_bits_[5] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_153_str() {
  _has_bits_[5] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_153_str() {
  if (sparse_153_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_153_str_->clear();
  }
  clear_has_sparse_153_str();
}
inline const ::std::string& Database_NoBench::sparse_153_str() const {
  return *sparse_153_str_;
}
inline void Database_NoBench::set_sparse_153_str(const ::std::string& value) {
  set_has_sparse_153_str();
  if (sparse_153_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_153_str_ = new ::std::string;
  }
  sparse_153_str_->assign(value);
}
inline void Database_NoBench::set_sparse_153_str(const char* value) {
  set_has_sparse_153_str();
  if (sparse_153_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_153_str_ = new ::std::string;
  }
  sparse_153_str_->assign(value);
}
inline void Database_NoBench::set_sparse_153_str(const char* value, size_t size) {
  set_has_sparse_153_str();
  if (sparse_153_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_153_str_ = new ::std::string;
  }
  sparse_153_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_153_str() {
  set_has_sparse_153_str();
  if (sparse_153_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_153_str_ = new ::std::string;
  }
  return sparse_153_str_;
}
inline ::std::string* Database_NoBench::release_sparse_153_str() {
  clear_has_sparse_153_str();
  if (sparse_153_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_153_str_;
    sparse_153_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_153_str(::std::string* sparse_153_str) {
  if (sparse_153_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_153_str_;
  }
  if (sparse_153_str) {
    set_has_sparse_153_str();
    sparse_153_str_ = sparse_153_str;
  } else {
    clear_has_sparse_153_str();
    sparse_153_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_154_str = 166;
inline bool Database_NoBench::has_sparse_154_str() const {
  return (_has_bits_[5] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_154_str() {
  _has_bits_[5] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_154_str() {
  _has_bits_[5] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_154_str() {
  if (sparse_154_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_154_str_->clear();
  }
  clear_has_sparse_154_str();
}
inline const ::std::string& Database_NoBench::sparse_154_str() const {
  return *sparse_154_str_;
}
inline void Database_NoBench::set_sparse_154_str(const ::std::string& value) {
  set_has_sparse_154_str();
  if (sparse_154_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_154_str_ = new ::std::string;
  }
  sparse_154_str_->assign(value);
}
inline void Database_NoBench::set_sparse_154_str(const char* value) {
  set_has_sparse_154_str();
  if (sparse_154_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_154_str_ = new ::std::string;
  }
  sparse_154_str_->assign(value);
}
inline void Database_NoBench::set_sparse_154_str(const char* value, size_t size) {
  set_has_sparse_154_str();
  if (sparse_154_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_154_str_ = new ::std::string;
  }
  sparse_154_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_154_str() {
  set_has_sparse_154_str();
  if (sparse_154_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_154_str_ = new ::std::string;
  }
  return sparse_154_str_;
}
inline ::std::string* Database_NoBench::release_sparse_154_str() {
  clear_has_sparse_154_str();
  if (sparse_154_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_154_str_;
    sparse_154_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_154_str(::std::string* sparse_154_str) {
  if (sparse_154_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_154_str_;
  }
  if (sparse_154_str) {
    set_has_sparse_154_str();
    sparse_154_str_ = sparse_154_str;
  } else {
    clear_has_sparse_154_str();
    sparse_154_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_155_str = 167;
inline bool Database_NoBench::has_sparse_155_str() const {
  return (_has_bits_[5] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_155_str() {
  _has_bits_[5] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_155_str() {
  _has_bits_[5] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_155_str() {
  if (sparse_155_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_155_str_->clear();
  }
  clear_has_sparse_155_str();
}
inline const ::std::string& Database_NoBench::sparse_155_str() const {
  return *sparse_155_str_;
}
inline void Database_NoBench::set_sparse_155_str(const ::std::string& value) {
  set_has_sparse_155_str();
  if (sparse_155_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_155_str_ = new ::std::string;
  }
  sparse_155_str_->assign(value);
}
inline void Database_NoBench::set_sparse_155_str(const char* value) {
  set_has_sparse_155_str();
  if (sparse_155_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_155_str_ = new ::std::string;
  }
  sparse_155_str_->assign(value);
}
inline void Database_NoBench::set_sparse_155_str(const char* value, size_t size) {
  set_has_sparse_155_str();
  if (sparse_155_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_155_str_ = new ::std::string;
  }
  sparse_155_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_155_str() {
  set_has_sparse_155_str();
  if (sparse_155_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_155_str_ = new ::std::string;
  }
  return sparse_155_str_;
}
inline ::std::string* Database_NoBench::release_sparse_155_str() {
  clear_has_sparse_155_str();
  if (sparse_155_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_155_str_;
    sparse_155_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_155_str(::std::string* sparse_155_str) {
  if (sparse_155_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_155_str_;
  }
  if (sparse_155_str) {
    set_has_sparse_155_str();
    sparse_155_str_ = sparse_155_str;
  } else {
    clear_has_sparse_155_str();
    sparse_155_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_156_str = 168;
inline bool Database_NoBench::has_sparse_156_str() const {
  return (_has_bits_[5] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_156_str() {
  _has_bits_[5] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_156_str() {
  _has_bits_[5] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_156_str() {
  if (sparse_156_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_156_str_->clear();
  }
  clear_has_sparse_156_str();
}
inline const ::std::string& Database_NoBench::sparse_156_str() const {
  return *sparse_156_str_;
}
inline void Database_NoBench::set_sparse_156_str(const ::std::string& value) {
  set_has_sparse_156_str();
  if (sparse_156_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_156_str_ = new ::std::string;
  }
  sparse_156_str_->assign(value);
}
inline void Database_NoBench::set_sparse_156_str(const char* value) {
  set_has_sparse_156_str();
  if (sparse_156_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_156_str_ = new ::std::string;
  }
  sparse_156_str_->assign(value);
}
inline void Database_NoBench::set_sparse_156_str(const char* value, size_t size) {
  set_has_sparse_156_str();
  if (sparse_156_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_156_str_ = new ::std::string;
  }
  sparse_156_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_156_str() {
  set_has_sparse_156_str();
  if (sparse_156_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_156_str_ = new ::std::string;
  }
  return sparse_156_str_;
}
inline ::std::string* Database_NoBench::release_sparse_156_str() {
  clear_has_sparse_156_str();
  if (sparse_156_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_156_str_;
    sparse_156_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_156_str(::std::string* sparse_156_str) {
  if (sparse_156_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_156_str_;
  }
  if (sparse_156_str) {
    set_has_sparse_156_str();
    sparse_156_str_ = sparse_156_str;
  } else {
    clear_has_sparse_156_str();
    sparse_156_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_157_str = 169;
inline bool Database_NoBench::has_sparse_157_str() const {
  return (_has_bits_[5] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_157_str() {
  _has_bits_[5] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_157_str() {
  _has_bits_[5] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_157_str() {
  if (sparse_157_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_157_str_->clear();
  }
  clear_has_sparse_157_str();
}
inline const ::std::string& Database_NoBench::sparse_157_str() const {
  return *sparse_157_str_;
}
inline void Database_NoBench::set_sparse_157_str(const ::std::string& value) {
  set_has_sparse_157_str();
  if (sparse_157_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_157_str_ = new ::std::string;
  }
  sparse_157_str_->assign(value);
}
inline void Database_NoBench::set_sparse_157_str(const char* value) {
  set_has_sparse_157_str();
  if (sparse_157_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_157_str_ = new ::std::string;
  }
  sparse_157_str_->assign(value);
}
inline void Database_NoBench::set_sparse_157_str(const char* value, size_t size) {
  set_has_sparse_157_str();
  if (sparse_157_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_157_str_ = new ::std::string;
  }
  sparse_157_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_157_str() {
  set_has_sparse_157_str();
  if (sparse_157_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_157_str_ = new ::std::string;
  }
  return sparse_157_str_;
}
inline ::std::string* Database_NoBench::release_sparse_157_str() {
  clear_has_sparse_157_str();
  if (sparse_157_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_157_str_;
    sparse_157_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_157_str(::std::string* sparse_157_str) {
  if (sparse_157_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_157_str_;
  }
  if (sparse_157_str) {
    set_has_sparse_157_str();
    sparse_157_str_ = sparse_157_str;
  } else {
    clear_has_sparse_157_str();
    sparse_157_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_158_str = 170;
inline bool Database_NoBench::has_sparse_158_str() const {
  return (_has_bits_[5] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_158_str() {
  _has_bits_[5] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_158_str() {
  _has_bits_[5] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_158_str() {
  if (sparse_158_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_158_str_->clear();
  }
  clear_has_sparse_158_str();
}
inline const ::std::string& Database_NoBench::sparse_158_str() const {
  return *sparse_158_str_;
}
inline void Database_NoBench::set_sparse_158_str(const ::std::string& value) {
  set_has_sparse_158_str();
  if (sparse_158_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_158_str_ = new ::std::string;
  }
  sparse_158_str_->assign(value);
}
inline void Database_NoBench::set_sparse_158_str(const char* value) {
  set_has_sparse_158_str();
  if (sparse_158_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_158_str_ = new ::std::string;
  }
  sparse_158_str_->assign(value);
}
inline void Database_NoBench::set_sparse_158_str(const char* value, size_t size) {
  set_has_sparse_158_str();
  if (sparse_158_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_158_str_ = new ::std::string;
  }
  sparse_158_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_158_str() {
  set_has_sparse_158_str();
  if (sparse_158_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_158_str_ = new ::std::string;
  }
  return sparse_158_str_;
}
inline ::std::string* Database_NoBench::release_sparse_158_str() {
  clear_has_sparse_158_str();
  if (sparse_158_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_158_str_;
    sparse_158_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_158_str(::std::string* sparse_158_str) {
  if (sparse_158_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_158_str_;
  }
  if (sparse_158_str) {
    set_has_sparse_158_str();
    sparse_158_str_ = sparse_158_str;
  } else {
    clear_has_sparse_158_str();
    sparse_158_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_159_str = 171;
inline bool Database_NoBench::has_sparse_159_str() const {
  return (_has_bits_[5] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_159_str() {
  _has_bits_[5] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_159_str() {
  _has_bits_[5] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_159_str() {
  if (sparse_159_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_159_str_->clear();
  }
  clear_has_sparse_159_str();
}
inline const ::std::string& Database_NoBench::sparse_159_str() const {
  return *sparse_159_str_;
}
inline void Database_NoBench::set_sparse_159_str(const ::std::string& value) {
  set_has_sparse_159_str();
  if (sparse_159_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_159_str_ = new ::std::string;
  }
  sparse_159_str_->assign(value);
}
inline void Database_NoBench::set_sparse_159_str(const char* value) {
  set_has_sparse_159_str();
  if (sparse_159_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_159_str_ = new ::std::string;
  }
  sparse_159_str_->assign(value);
}
inline void Database_NoBench::set_sparse_159_str(const char* value, size_t size) {
  set_has_sparse_159_str();
  if (sparse_159_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_159_str_ = new ::std::string;
  }
  sparse_159_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_159_str() {
  set_has_sparse_159_str();
  if (sparse_159_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_159_str_ = new ::std::string;
  }
  return sparse_159_str_;
}
inline ::std::string* Database_NoBench::release_sparse_159_str() {
  clear_has_sparse_159_str();
  if (sparse_159_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_159_str_;
    sparse_159_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_159_str(::std::string* sparse_159_str) {
  if (sparse_159_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_159_str_;
  }
  if (sparse_159_str) {
    set_has_sparse_159_str();
    sparse_159_str_ = sparse_159_str;
  } else {
    clear_has_sparse_159_str();
    sparse_159_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_160_str = 172;
inline bool Database_NoBench::has_sparse_160_str() const {
  return (_has_bits_[5] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_160_str() {
  _has_bits_[5] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_160_str() {
  _has_bits_[5] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_160_str() {
  if (sparse_160_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_160_str_->clear();
  }
  clear_has_sparse_160_str();
}
inline const ::std::string& Database_NoBench::sparse_160_str() const {
  return *sparse_160_str_;
}
inline void Database_NoBench::set_sparse_160_str(const ::std::string& value) {
  set_has_sparse_160_str();
  if (sparse_160_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_160_str_ = new ::std::string;
  }
  sparse_160_str_->assign(value);
}
inline void Database_NoBench::set_sparse_160_str(const char* value) {
  set_has_sparse_160_str();
  if (sparse_160_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_160_str_ = new ::std::string;
  }
  sparse_160_str_->assign(value);
}
inline void Database_NoBench::set_sparse_160_str(const char* value, size_t size) {
  set_has_sparse_160_str();
  if (sparse_160_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_160_str_ = new ::std::string;
  }
  sparse_160_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_160_str() {
  set_has_sparse_160_str();
  if (sparse_160_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_160_str_ = new ::std::string;
  }
  return sparse_160_str_;
}
inline ::std::string* Database_NoBench::release_sparse_160_str() {
  clear_has_sparse_160_str();
  if (sparse_160_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_160_str_;
    sparse_160_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_160_str(::std::string* sparse_160_str) {
  if (sparse_160_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_160_str_;
  }
  if (sparse_160_str) {
    set_has_sparse_160_str();
    sparse_160_str_ = sparse_160_str;
  } else {
    clear_has_sparse_160_str();
    sparse_160_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_161_str = 173;
inline bool Database_NoBench::has_sparse_161_str() const {
  return (_has_bits_[5] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_161_str() {
  _has_bits_[5] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_161_str() {
  _has_bits_[5] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_161_str() {
  if (sparse_161_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_161_str_->clear();
  }
  clear_has_sparse_161_str();
}
inline const ::std::string& Database_NoBench::sparse_161_str() const {
  return *sparse_161_str_;
}
inline void Database_NoBench::set_sparse_161_str(const ::std::string& value) {
  set_has_sparse_161_str();
  if (sparse_161_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_161_str_ = new ::std::string;
  }
  sparse_161_str_->assign(value);
}
inline void Database_NoBench::set_sparse_161_str(const char* value) {
  set_has_sparse_161_str();
  if (sparse_161_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_161_str_ = new ::std::string;
  }
  sparse_161_str_->assign(value);
}
inline void Database_NoBench::set_sparse_161_str(const char* value, size_t size) {
  set_has_sparse_161_str();
  if (sparse_161_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_161_str_ = new ::std::string;
  }
  sparse_161_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_161_str() {
  set_has_sparse_161_str();
  if (sparse_161_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_161_str_ = new ::std::string;
  }
  return sparse_161_str_;
}
inline ::std::string* Database_NoBench::release_sparse_161_str() {
  clear_has_sparse_161_str();
  if (sparse_161_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_161_str_;
    sparse_161_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_161_str(::std::string* sparse_161_str) {
  if (sparse_161_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_161_str_;
  }
  if (sparse_161_str) {
    set_has_sparse_161_str();
    sparse_161_str_ = sparse_161_str;
  } else {
    clear_has_sparse_161_str();
    sparse_161_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_162_str = 174;
inline bool Database_NoBench::has_sparse_162_str() const {
  return (_has_bits_[5] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_162_str() {
  _has_bits_[5] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_162_str() {
  _has_bits_[5] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_162_str() {
  if (sparse_162_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_162_str_->clear();
  }
  clear_has_sparse_162_str();
}
inline const ::std::string& Database_NoBench::sparse_162_str() const {
  return *sparse_162_str_;
}
inline void Database_NoBench::set_sparse_162_str(const ::std::string& value) {
  set_has_sparse_162_str();
  if (sparse_162_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_162_str_ = new ::std::string;
  }
  sparse_162_str_->assign(value);
}
inline void Database_NoBench::set_sparse_162_str(const char* value) {
  set_has_sparse_162_str();
  if (sparse_162_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_162_str_ = new ::std::string;
  }
  sparse_162_str_->assign(value);
}
inline void Database_NoBench::set_sparse_162_str(const char* value, size_t size) {
  set_has_sparse_162_str();
  if (sparse_162_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_162_str_ = new ::std::string;
  }
  sparse_162_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_162_str() {
  set_has_sparse_162_str();
  if (sparse_162_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_162_str_ = new ::std::string;
  }
  return sparse_162_str_;
}
inline ::std::string* Database_NoBench::release_sparse_162_str() {
  clear_has_sparse_162_str();
  if (sparse_162_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_162_str_;
    sparse_162_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_162_str(::std::string* sparse_162_str) {
  if (sparse_162_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_162_str_;
  }
  if (sparse_162_str) {
    set_has_sparse_162_str();
    sparse_162_str_ = sparse_162_str;
  } else {
    clear_has_sparse_162_str();
    sparse_162_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_163_str = 175;
inline bool Database_NoBench::has_sparse_163_str() const {
  return (_has_bits_[5] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_163_str() {
  _has_bits_[5] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_163_str() {
  _has_bits_[5] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_163_str() {
  if (sparse_163_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_163_str_->clear();
  }
  clear_has_sparse_163_str();
}
inline const ::std::string& Database_NoBench::sparse_163_str() const {
  return *sparse_163_str_;
}
inline void Database_NoBench::set_sparse_163_str(const ::std::string& value) {
  set_has_sparse_163_str();
  if (sparse_163_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_163_str_ = new ::std::string;
  }
  sparse_163_str_->assign(value);
}
inline void Database_NoBench::set_sparse_163_str(const char* value) {
  set_has_sparse_163_str();
  if (sparse_163_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_163_str_ = new ::std::string;
  }
  sparse_163_str_->assign(value);
}
inline void Database_NoBench::set_sparse_163_str(const char* value, size_t size) {
  set_has_sparse_163_str();
  if (sparse_163_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_163_str_ = new ::std::string;
  }
  sparse_163_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_163_str() {
  set_has_sparse_163_str();
  if (sparse_163_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_163_str_ = new ::std::string;
  }
  return sparse_163_str_;
}
inline ::std::string* Database_NoBench::release_sparse_163_str() {
  clear_has_sparse_163_str();
  if (sparse_163_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_163_str_;
    sparse_163_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_163_str(::std::string* sparse_163_str) {
  if (sparse_163_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_163_str_;
  }
  if (sparse_163_str) {
    set_has_sparse_163_str();
    sparse_163_str_ = sparse_163_str;
  } else {
    clear_has_sparse_163_str();
    sparse_163_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_164_str = 176;
inline bool Database_NoBench::has_sparse_164_str() const {
  return (_has_bits_[5] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_164_str() {
  _has_bits_[5] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_164_str() {
  _has_bits_[5] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_164_str() {
  if (sparse_164_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_164_str_->clear();
  }
  clear_has_sparse_164_str();
}
inline const ::std::string& Database_NoBench::sparse_164_str() const {
  return *sparse_164_str_;
}
inline void Database_NoBench::set_sparse_164_str(const ::std::string& value) {
  set_has_sparse_164_str();
  if (sparse_164_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_164_str_ = new ::std::string;
  }
  sparse_164_str_->assign(value);
}
inline void Database_NoBench::set_sparse_164_str(const char* value) {
  set_has_sparse_164_str();
  if (sparse_164_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_164_str_ = new ::std::string;
  }
  sparse_164_str_->assign(value);
}
inline void Database_NoBench::set_sparse_164_str(const char* value, size_t size) {
  set_has_sparse_164_str();
  if (sparse_164_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_164_str_ = new ::std::string;
  }
  sparse_164_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_164_str() {
  set_has_sparse_164_str();
  if (sparse_164_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_164_str_ = new ::std::string;
  }
  return sparse_164_str_;
}
inline ::std::string* Database_NoBench::release_sparse_164_str() {
  clear_has_sparse_164_str();
  if (sparse_164_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_164_str_;
    sparse_164_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_164_str(::std::string* sparse_164_str) {
  if (sparse_164_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_164_str_;
  }
  if (sparse_164_str) {
    set_has_sparse_164_str();
    sparse_164_str_ = sparse_164_str;
  } else {
    clear_has_sparse_164_str();
    sparse_164_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_165_str = 177;
inline bool Database_NoBench::has_sparse_165_str() const {
  return (_has_bits_[5] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_165_str() {
  _has_bits_[5] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_165_str() {
  _has_bits_[5] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_165_str() {
  if (sparse_165_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_165_str_->clear();
  }
  clear_has_sparse_165_str();
}
inline const ::std::string& Database_NoBench::sparse_165_str() const {
  return *sparse_165_str_;
}
inline void Database_NoBench::set_sparse_165_str(const ::std::string& value) {
  set_has_sparse_165_str();
  if (sparse_165_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_165_str_ = new ::std::string;
  }
  sparse_165_str_->assign(value);
}
inline void Database_NoBench::set_sparse_165_str(const char* value) {
  set_has_sparse_165_str();
  if (sparse_165_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_165_str_ = new ::std::string;
  }
  sparse_165_str_->assign(value);
}
inline void Database_NoBench::set_sparse_165_str(const char* value, size_t size) {
  set_has_sparse_165_str();
  if (sparse_165_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_165_str_ = new ::std::string;
  }
  sparse_165_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_165_str() {
  set_has_sparse_165_str();
  if (sparse_165_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_165_str_ = new ::std::string;
  }
  return sparse_165_str_;
}
inline ::std::string* Database_NoBench::release_sparse_165_str() {
  clear_has_sparse_165_str();
  if (sparse_165_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_165_str_;
    sparse_165_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_165_str(::std::string* sparse_165_str) {
  if (sparse_165_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_165_str_;
  }
  if (sparse_165_str) {
    set_has_sparse_165_str();
    sparse_165_str_ = sparse_165_str;
  } else {
    clear_has_sparse_165_str();
    sparse_165_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_166_str = 178;
inline bool Database_NoBench::has_sparse_166_str() const {
  return (_has_bits_[5] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_166_str() {
  _has_bits_[5] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_166_str() {
  _has_bits_[5] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_166_str() {
  if (sparse_166_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_166_str_->clear();
  }
  clear_has_sparse_166_str();
}
inline const ::std::string& Database_NoBench::sparse_166_str() const {
  return *sparse_166_str_;
}
inline void Database_NoBench::set_sparse_166_str(const ::std::string& value) {
  set_has_sparse_166_str();
  if (sparse_166_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_166_str_ = new ::std::string;
  }
  sparse_166_str_->assign(value);
}
inline void Database_NoBench::set_sparse_166_str(const char* value) {
  set_has_sparse_166_str();
  if (sparse_166_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_166_str_ = new ::std::string;
  }
  sparse_166_str_->assign(value);
}
inline void Database_NoBench::set_sparse_166_str(const char* value, size_t size) {
  set_has_sparse_166_str();
  if (sparse_166_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_166_str_ = new ::std::string;
  }
  sparse_166_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_166_str() {
  set_has_sparse_166_str();
  if (sparse_166_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_166_str_ = new ::std::string;
  }
  return sparse_166_str_;
}
inline ::std::string* Database_NoBench::release_sparse_166_str() {
  clear_has_sparse_166_str();
  if (sparse_166_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_166_str_;
    sparse_166_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_166_str(::std::string* sparse_166_str) {
  if (sparse_166_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_166_str_;
  }
  if (sparse_166_str) {
    set_has_sparse_166_str();
    sparse_166_str_ = sparse_166_str;
  } else {
    clear_has_sparse_166_str();
    sparse_166_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_167_str = 179;
inline bool Database_NoBench::has_sparse_167_str() const {
  return (_has_bits_[5] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_167_str() {
  _has_bits_[5] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_167_str() {
  _has_bits_[5] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_167_str() {
  if (sparse_167_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_167_str_->clear();
  }
  clear_has_sparse_167_str();
}
inline const ::std::string& Database_NoBench::sparse_167_str() const {
  return *sparse_167_str_;
}
inline void Database_NoBench::set_sparse_167_str(const ::std::string& value) {
  set_has_sparse_167_str();
  if (sparse_167_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_167_str_ = new ::std::string;
  }
  sparse_167_str_->assign(value);
}
inline void Database_NoBench::set_sparse_167_str(const char* value) {
  set_has_sparse_167_str();
  if (sparse_167_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_167_str_ = new ::std::string;
  }
  sparse_167_str_->assign(value);
}
inline void Database_NoBench::set_sparse_167_str(const char* value, size_t size) {
  set_has_sparse_167_str();
  if (sparse_167_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_167_str_ = new ::std::string;
  }
  sparse_167_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_167_str() {
  set_has_sparse_167_str();
  if (sparse_167_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_167_str_ = new ::std::string;
  }
  return sparse_167_str_;
}
inline ::std::string* Database_NoBench::release_sparse_167_str() {
  clear_has_sparse_167_str();
  if (sparse_167_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_167_str_;
    sparse_167_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_167_str(::std::string* sparse_167_str) {
  if (sparse_167_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_167_str_;
  }
  if (sparse_167_str) {
    set_has_sparse_167_str();
    sparse_167_str_ = sparse_167_str;
  } else {
    clear_has_sparse_167_str();
    sparse_167_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_168_str = 180;
inline bool Database_NoBench::has_sparse_168_str() const {
  return (_has_bits_[5] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_168_str() {
  _has_bits_[5] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_168_str() {
  _has_bits_[5] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_168_str() {
  if (sparse_168_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_168_str_->clear();
  }
  clear_has_sparse_168_str();
}
inline const ::std::string& Database_NoBench::sparse_168_str() const {
  return *sparse_168_str_;
}
inline void Database_NoBench::set_sparse_168_str(const ::std::string& value) {
  set_has_sparse_168_str();
  if (sparse_168_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_168_str_ = new ::std::string;
  }
  sparse_168_str_->assign(value);
}
inline void Database_NoBench::set_sparse_168_str(const char* value) {
  set_has_sparse_168_str();
  if (sparse_168_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_168_str_ = new ::std::string;
  }
  sparse_168_str_->assign(value);
}
inline void Database_NoBench::set_sparse_168_str(const char* value, size_t size) {
  set_has_sparse_168_str();
  if (sparse_168_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_168_str_ = new ::std::string;
  }
  sparse_168_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_168_str() {
  set_has_sparse_168_str();
  if (sparse_168_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_168_str_ = new ::std::string;
  }
  return sparse_168_str_;
}
inline ::std::string* Database_NoBench::release_sparse_168_str() {
  clear_has_sparse_168_str();
  if (sparse_168_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_168_str_;
    sparse_168_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_168_str(::std::string* sparse_168_str) {
  if (sparse_168_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_168_str_;
  }
  if (sparse_168_str) {
    set_has_sparse_168_str();
    sparse_168_str_ = sparse_168_str;
  } else {
    clear_has_sparse_168_str();
    sparse_168_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_169_str = 181;
inline bool Database_NoBench::has_sparse_169_str() const {
  return (_has_bits_[5] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_169_str() {
  _has_bits_[5] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_169_str() {
  _has_bits_[5] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_169_str() {
  if (sparse_169_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_169_str_->clear();
  }
  clear_has_sparse_169_str();
}
inline const ::std::string& Database_NoBench::sparse_169_str() const {
  return *sparse_169_str_;
}
inline void Database_NoBench::set_sparse_169_str(const ::std::string& value) {
  set_has_sparse_169_str();
  if (sparse_169_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_169_str_ = new ::std::string;
  }
  sparse_169_str_->assign(value);
}
inline void Database_NoBench::set_sparse_169_str(const char* value) {
  set_has_sparse_169_str();
  if (sparse_169_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_169_str_ = new ::std::string;
  }
  sparse_169_str_->assign(value);
}
inline void Database_NoBench::set_sparse_169_str(const char* value, size_t size) {
  set_has_sparse_169_str();
  if (sparse_169_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_169_str_ = new ::std::string;
  }
  sparse_169_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_169_str() {
  set_has_sparse_169_str();
  if (sparse_169_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_169_str_ = new ::std::string;
  }
  return sparse_169_str_;
}
inline ::std::string* Database_NoBench::release_sparse_169_str() {
  clear_has_sparse_169_str();
  if (sparse_169_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_169_str_;
    sparse_169_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_169_str(::std::string* sparse_169_str) {
  if (sparse_169_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_169_str_;
  }
  if (sparse_169_str) {
    set_has_sparse_169_str();
    sparse_169_str_ = sparse_169_str;
  } else {
    clear_has_sparse_169_str();
    sparse_169_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_170_str = 182;
inline bool Database_NoBench::has_sparse_170_str() const {
  return (_has_bits_[5] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_170_str() {
  _has_bits_[5] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_170_str() {
  _has_bits_[5] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_170_str() {
  if (sparse_170_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_170_str_->clear();
  }
  clear_has_sparse_170_str();
}
inline const ::std::string& Database_NoBench::sparse_170_str() const {
  return *sparse_170_str_;
}
inline void Database_NoBench::set_sparse_170_str(const ::std::string& value) {
  set_has_sparse_170_str();
  if (sparse_170_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_170_str_ = new ::std::string;
  }
  sparse_170_str_->assign(value);
}
inline void Database_NoBench::set_sparse_170_str(const char* value) {
  set_has_sparse_170_str();
  if (sparse_170_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_170_str_ = new ::std::string;
  }
  sparse_170_str_->assign(value);
}
inline void Database_NoBench::set_sparse_170_str(const char* value, size_t size) {
  set_has_sparse_170_str();
  if (sparse_170_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_170_str_ = new ::std::string;
  }
  sparse_170_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_170_str() {
  set_has_sparse_170_str();
  if (sparse_170_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_170_str_ = new ::std::string;
  }
  return sparse_170_str_;
}
inline ::std::string* Database_NoBench::release_sparse_170_str() {
  clear_has_sparse_170_str();
  if (sparse_170_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_170_str_;
    sparse_170_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_170_str(::std::string* sparse_170_str) {
  if (sparse_170_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_170_str_;
  }
  if (sparse_170_str) {
    set_has_sparse_170_str();
    sparse_170_str_ = sparse_170_str;
  } else {
    clear_has_sparse_170_str();
    sparse_170_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_171_str = 183;
inline bool Database_NoBench::has_sparse_171_str() const {
  return (_has_bits_[5] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_171_str() {
  _has_bits_[5] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_171_str() {
  _has_bits_[5] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_171_str() {
  if (sparse_171_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_171_str_->clear();
  }
  clear_has_sparse_171_str();
}
inline const ::std::string& Database_NoBench::sparse_171_str() const {
  return *sparse_171_str_;
}
inline void Database_NoBench::set_sparse_171_str(const ::std::string& value) {
  set_has_sparse_171_str();
  if (sparse_171_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_171_str_ = new ::std::string;
  }
  sparse_171_str_->assign(value);
}
inline void Database_NoBench::set_sparse_171_str(const char* value) {
  set_has_sparse_171_str();
  if (sparse_171_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_171_str_ = new ::std::string;
  }
  sparse_171_str_->assign(value);
}
inline void Database_NoBench::set_sparse_171_str(const char* value, size_t size) {
  set_has_sparse_171_str();
  if (sparse_171_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_171_str_ = new ::std::string;
  }
  sparse_171_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_171_str() {
  set_has_sparse_171_str();
  if (sparse_171_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_171_str_ = new ::std::string;
  }
  return sparse_171_str_;
}
inline ::std::string* Database_NoBench::release_sparse_171_str() {
  clear_has_sparse_171_str();
  if (sparse_171_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_171_str_;
    sparse_171_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_171_str(::std::string* sparse_171_str) {
  if (sparse_171_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_171_str_;
  }
  if (sparse_171_str) {
    set_has_sparse_171_str();
    sparse_171_str_ = sparse_171_str;
  } else {
    clear_has_sparse_171_str();
    sparse_171_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_172_str = 184;
inline bool Database_NoBench::has_sparse_172_str() const {
  return (_has_bits_[5] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_172_str() {
  _has_bits_[5] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_172_str() {
  _has_bits_[5] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_172_str() {
  if (sparse_172_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_172_str_->clear();
  }
  clear_has_sparse_172_str();
}
inline const ::std::string& Database_NoBench::sparse_172_str() const {
  return *sparse_172_str_;
}
inline void Database_NoBench::set_sparse_172_str(const ::std::string& value) {
  set_has_sparse_172_str();
  if (sparse_172_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_172_str_ = new ::std::string;
  }
  sparse_172_str_->assign(value);
}
inline void Database_NoBench::set_sparse_172_str(const char* value) {
  set_has_sparse_172_str();
  if (sparse_172_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_172_str_ = new ::std::string;
  }
  sparse_172_str_->assign(value);
}
inline void Database_NoBench::set_sparse_172_str(const char* value, size_t size) {
  set_has_sparse_172_str();
  if (sparse_172_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_172_str_ = new ::std::string;
  }
  sparse_172_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_172_str() {
  set_has_sparse_172_str();
  if (sparse_172_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_172_str_ = new ::std::string;
  }
  return sparse_172_str_;
}
inline ::std::string* Database_NoBench::release_sparse_172_str() {
  clear_has_sparse_172_str();
  if (sparse_172_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_172_str_;
    sparse_172_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_172_str(::std::string* sparse_172_str) {
  if (sparse_172_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_172_str_;
  }
  if (sparse_172_str) {
    set_has_sparse_172_str();
    sparse_172_str_ = sparse_172_str;
  } else {
    clear_has_sparse_172_str();
    sparse_172_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_173_str = 185;
inline bool Database_NoBench::has_sparse_173_str() const {
  return (_has_bits_[5] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_173_str() {
  _has_bits_[5] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_173_str() {
  _has_bits_[5] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_173_str() {
  if (sparse_173_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_173_str_->clear();
  }
  clear_has_sparse_173_str();
}
inline const ::std::string& Database_NoBench::sparse_173_str() const {
  return *sparse_173_str_;
}
inline void Database_NoBench::set_sparse_173_str(const ::std::string& value) {
  set_has_sparse_173_str();
  if (sparse_173_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_173_str_ = new ::std::string;
  }
  sparse_173_str_->assign(value);
}
inline void Database_NoBench::set_sparse_173_str(const char* value) {
  set_has_sparse_173_str();
  if (sparse_173_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_173_str_ = new ::std::string;
  }
  sparse_173_str_->assign(value);
}
inline void Database_NoBench::set_sparse_173_str(const char* value, size_t size) {
  set_has_sparse_173_str();
  if (sparse_173_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_173_str_ = new ::std::string;
  }
  sparse_173_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_173_str() {
  set_has_sparse_173_str();
  if (sparse_173_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_173_str_ = new ::std::string;
  }
  return sparse_173_str_;
}
inline ::std::string* Database_NoBench::release_sparse_173_str() {
  clear_has_sparse_173_str();
  if (sparse_173_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_173_str_;
    sparse_173_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_173_str(::std::string* sparse_173_str) {
  if (sparse_173_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_173_str_;
  }
  if (sparse_173_str) {
    set_has_sparse_173_str();
    sparse_173_str_ = sparse_173_str;
  } else {
    clear_has_sparse_173_str();
    sparse_173_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_174_str = 186;
inline bool Database_NoBench::has_sparse_174_str() const {
  return (_has_bits_[5] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_174_str() {
  _has_bits_[5] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_174_str() {
  _has_bits_[5] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_174_str() {
  if (sparse_174_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_174_str_->clear();
  }
  clear_has_sparse_174_str();
}
inline const ::std::string& Database_NoBench::sparse_174_str() const {
  return *sparse_174_str_;
}
inline void Database_NoBench::set_sparse_174_str(const ::std::string& value) {
  set_has_sparse_174_str();
  if (sparse_174_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_174_str_ = new ::std::string;
  }
  sparse_174_str_->assign(value);
}
inline void Database_NoBench::set_sparse_174_str(const char* value) {
  set_has_sparse_174_str();
  if (sparse_174_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_174_str_ = new ::std::string;
  }
  sparse_174_str_->assign(value);
}
inline void Database_NoBench::set_sparse_174_str(const char* value, size_t size) {
  set_has_sparse_174_str();
  if (sparse_174_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_174_str_ = new ::std::string;
  }
  sparse_174_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_174_str() {
  set_has_sparse_174_str();
  if (sparse_174_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_174_str_ = new ::std::string;
  }
  return sparse_174_str_;
}
inline ::std::string* Database_NoBench::release_sparse_174_str() {
  clear_has_sparse_174_str();
  if (sparse_174_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_174_str_;
    sparse_174_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_174_str(::std::string* sparse_174_str) {
  if (sparse_174_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_174_str_;
  }
  if (sparse_174_str) {
    set_has_sparse_174_str();
    sparse_174_str_ = sparse_174_str;
  } else {
    clear_has_sparse_174_str();
    sparse_174_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_175_str = 187;
inline bool Database_NoBench::has_sparse_175_str() const {
  return (_has_bits_[5] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_175_str() {
  _has_bits_[5] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_175_str() {
  _has_bits_[5] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_175_str() {
  if (sparse_175_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_175_str_->clear();
  }
  clear_has_sparse_175_str();
}
inline const ::std::string& Database_NoBench::sparse_175_str() const {
  return *sparse_175_str_;
}
inline void Database_NoBench::set_sparse_175_str(const ::std::string& value) {
  set_has_sparse_175_str();
  if (sparse_175_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_175_str_ = new ::std::string;
  }
  sparse_175_str_->assign(value);
}
inline void Database_NoBench::set_sparse_175_str(const char* value) {
  set_has_sparse_175_str();
  if (sparse_175_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_175_str_ = new ::std::string;
  }
  sparse_175_str_->assign(value);
}
inline void Database_NoBench::set_sparse_175_str(const char* value, size_t size) {
  set_has_sparse_175_str();
  if (sparse_175_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_175_str_ = new ::std::string;
  }
  sparse_175_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_175_str() {
  set_has_sparse_175_str();
  if (sparse_175_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_175_str_ = new ::std::string;
  }
  return sparse_175_str_;
}
inline ::std::string* Database_NoBench::release_sparse_175_str() {
  clear_has_sparse_175_str();
  if (sparse_175_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_175_str_;
    sparse_175_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_175_str(::std::string* sparse_175_str) {
  if (sparse_175_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_175_str_;
  }
  if (sparse_175_str) {
    set_has_sparse_175_str();
    sparse_175_str_ = sparse_175_str;
  } else {
    clear_has_sparse_175_str();
    sparse_175_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_176_str = 188;
inline bool Database_NoBench::has_sparse_176_str() const {
  return (_has_bits_[5] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_176_str() {
  _has_bits_[5] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_176_str() {
  _has_bits_[5] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_176_str() {
  if (sparse_176_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_176_str_->clear();
  }
  clear_has_sparse_176_str();
}
inline const ::std::string& Database_NoBench::sparse_176_str() const {
  return *sparse_176_str_;
}
inline void Database_NoBench::set_sparse_176_str(const ::std::string& value) {
  set_has_sparse_176_str();
  if (sparse_176_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_176_str_ = new ::std::string;
  }
  sparse_176_str_->assign(value);
}
inline void Database_NoBench::set_sparse_176_str(const char* value) {
  set_has_sparse_176_str();
  if (sparse_176_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_176_str_ = new ::std::string;
  }
  sparse_176_str_->assign(value);
}
inline void Database_NoBench::set_sparse_176_str(const char* value, size_t size) {
  set_has_sparse_176_str();
  if (sparse_176_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_176_str_ = new ::std::string;
  }
  sparse_176_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_176_str() {
  set_has_sparse_176_str();
  if (sparse_176_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_176_str_ = new ::std::string;
  }
  return sparse_176_str_;
}
inline ::std::string* Database_NoBench::release_sparse_176_str() {
  clear_has_sparse_176_str();
  if (sparse_176_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_176_str_;
    sparse_176_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_176_str(::std::string* sparse_176_str) {
  if (sparse_176_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_176_str_;
  }
  if (sparse_176_str) {
    set_has_sparse_176_str();
    sparse_176_str_ = sparse_176_str;
  } else {
    clear_has_sparse_176_str();
    sparse_176_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_177_str = 189;
inline bool Database_NoBench::has_sparse_177_str() const {
  return (_has_bits_[5] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_177_str() {
  _has_bits_[5] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_177_str() {
  _has_bits_[5] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_177_str() {
  if (sparse_177_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_177_str_->clear();
  }
  clear_has_sparse_177_str();
}
inline const ::std::string& Database_NoBench::sparse_177_str() const {
  return *sparse_177_str_;
}
inline void Database_NoBench::set_sparse_177_str(const ::std::string& value) {
  set_has_sparse_177_str();
  if (sparse_177_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_177_str_ = new ::std::string;
  }
  sparse_177_str_->assign(value);
}
inline void Database_NoBench::set_sparse_177_str(const char* value) {
  set_has_sparse_177_str();
  if (sparse_177_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_177_str_ = new ::std::string;
  }
  sparse_177_str_->assign(value);
}
inline void Database_NoBench::set_sparse_177_str(const char* value, size_t size) {
  set_has_sparse_177_str();
  if (sparse_177_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_177_str_ = new ::std::string;
  }
  sparse_177_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_177_str() {
  set_has_sparse_177_str();
  if (sparse_177_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_177_str_ = new ::std::string;
  }
  return sparse_177_str_;
}
inline ::std::string* Database_NoBench::release_sparse_177_str() {
  clear_has_sparse_177_str();
  if (sparse_177_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_177_str_;
    sparse_177_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_177_str(::std::string* sparse_177_str) {
  if (sparse_177_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_177_str_;
  }
  if (sparse_177_str) {
    set_has_sparse_177_str();
    sparse_177_str_ = sparse_177_str;
  } else {
    clear_has_sparse_177_str();
    sparse_177_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_178_str = 190;
inline bool Database_NoBench::has_sparse_178_str() const {
  return (_has_bits_[5] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_178_str() {
  _has_bits_[5] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_178_str() {
  _has_bits_[5] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_178_str() {
  if (sparse_178_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_178_str_->clear();
  }
  clear_has_sparse_178_str();
}
inline const ::std::string& Database_NoBench::sparse_178_str() const {
  return *sparse_178_str_;
}
inline void Database_NoBench::set_sparse_178_str(const ::std::string& value) {
  set_has_sparse_178_str();
  if (sparse_178_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_178_str_ = new ::std::string;
  }
  sparse_178_str_->assign(value);
}
inline void Database_NoBench::set_sparse_178_str(const char* value) {
  set_has_sparse_178_str();
  if (sparse_178_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_178_str_ = new ::std::string;
  }
  sparse_178_str_->assign(value);
}
inline void Database_NoBench::set_sparse_178_str(const char* value, size_t size) {
  set_has_sparse_178_str();
  if (sparse_178_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_178_str_ = new ::std::string;
  }
  sparse_178_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_178_str() {
  set_has_sparse_178_str();
  if (sparse_178_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_178_str_ = new ::std::string;
  }
  return sparse_178_str_;
}
inline ::std::string* Database_NoBench::release_sparse_178_str() {
  clear_has_sparse_178_str();
  if (sparse_178_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_178_str_;
    sparse_178_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_178_str(::std::string* sparse_178_str) {
  if (sparse_178_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_178_str_;
  }
  if (sparse_178_str) {
    set_has_sparse_178_str();
    sparse_178_str_ = sparse_178_str;
  } else {
    clear_has_sparse_178_str();
    sparse_178_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_179_str = 191;
inline bool Database_NoBench::has_sparse_179_str() const {
  return (_has_bits_[6] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_179_str() {
  _has_bits_[6] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_179_str() {
  _has_bits_[6] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_179_str() {
  if (sparse_179_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_179_str_->clear();
  }
  clear_has_sparse_179_str();
}
inline const ::std::string& Database_NoBench::sparse_179_str() const {
  return *sparse_179_str_;
}
inline void Database_NoBench::set_sparse_179_str(const ::std::string& value) {
  set_has_sparse_179_str();
  if (sparse_179_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_179_str_ = new ::std::string;
  }
  sparse_179_str_->assign(value);
}
inline void Database_NoBench::set_sparse_179_str(const char* value) {
  set_has_sparse_179_str();
  if (sparse_179_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_179_str_ = new ::std::string;
  }
  sparse_179_str_->assign(value);
}
inline void Database_NoBench::set_sparse_179_str(const char* value, size_t size) {
  set_has_sparse_179_str();
  if (sparse_179_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_179_str_ = new ::std::string;
  }
  sparse_179_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_179_str() {
  set_has_sparse_179_str();
  if (sparse_179_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_179_str_ = new ::std::string;
  }
  return sparse_179_str_;
}
inline ::std::string* Database_NoBench::release_sparse_179_str() {
  clear_has_sparse_179_str();
  if (sparse_179_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_179_str_;
    sparse_179_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_179_str(::std::string* sparse_179_str) {
  if (sparse_179_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_179_str_;
  }
  if (sparse_179_str) {
    set_has_sparse_179_str();
    sparse_179_str_ = sparse_179_str;
  } else {
    clear_has_sparse_179_str();
    sparse_179_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_180_str = 192;
inline bool Database_NoBench::has_sparse_180_str() const {
  return (_has_bits_[6] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_180_str() {
  _has_bits_[6] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_180_str() {
  _has_bits_[6] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_180_str() {
  if (sparse_180_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_180_str_->clear();
  }
  clear_has_sparse_180_str();
}
inline const ::std::string& Database_NoBench::sparse_180_str() const {
  return *sparse_180_str_;
}
inline void Database_NoBench::set_sparse_180_str(const ::std::string& value) {
  set_has_sparse_180_str();
  if (sparse_180_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_180_str_ = new ::std::string;
  }
  sparse_180_str_->assign(value);
}
inline void Database_NoBench::set_sparse_180_str(const char* value) {
  set_has_sparse_180_str();
  if (sparse_180_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_180_str_ = new ::std::string;
  }
  sparse_180_str_->assign(value);
}
inline void Database_NoBench::set_sparse_180_str(const char* value, size_t size) {
  set_has_sparse_180_str();
  if (sparse_180_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_180_str_ = new ::std::string;
  }
  sparse_180_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_180_str() {
  set_has_sparse_180_str();
  if (sparse_180_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_180_str_ = new ::std::string;
  }
  return sparse_180_str_;
}
inline ::std::string* Database_NoBench::release_sparse_180_str() {
  clear_has_sparse_180_str();
  if (sparse_180_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_180_str_;
    sparse_180_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_180_str(::std::string* sparse_180_str) {
  if (sparse_180_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_180_str_;
  }
  if (sparse_180_str) {
    set_has_sparse_180_str();
    sparse_180_str_ = sparse_180_str;
  } else {
    clear_has_sparse_180_str();
    sparse_180_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_181_str = 193;
inline bool Database_NoBench::has_sparse_181_str() const {
  return (_has_bits_[6] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_181_str() {
  _has_bits_[6] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_181_str() {
  _has_bits_[6] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_181_str() {
  if (sparse_181_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_181_str_->clear();
  }
  clear_has_sparse_181_str();
}
inline const ::std::string& Database_NoBench::sparse_181_str() const {
  return *sparse_181_str_;
}
inline void Database_NoBench::set_sparse_181_str(const ::std::string& value) {
  set_has_sparse_181_str();
  if (sparse_181_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_181_str_ = new ::std::string;
  }
  sparse_181_str_->assign(value);
}
inline void Database_NoBench::set_sparse_181_str(const char* value) {
  set_has_sparse_181_str();
  if (sparse_181_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_181_str_ = new ::std::string;
  }
  sparse_181_str_->assign(value);
}
inline void Database_NoBench::set_sparse_181_str(const char* value, size_t size) {
  set_has_sparse_181_str();
  if (sparse_181_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_181_str_ = new ::std::string;
  }
  sparse_181_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_181_str() {
  set_has_sparse_181_str();
  if (sparse_181_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_181_str_ = new ::std::string;
  }
  return sparse_181_str_;
}
inline ::std::string* Database_NoBench::release_sparse_181_str() {
  clear_has_sparse_181_str();
  if (sparse_181_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_181_str_;
    sparse_181_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_181_str(::std::string* sparse_181_str) {
  if (sparse_181_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_181_str_;
  }
  if (sparse_181_str) {
    set_has_sparse_181_str();
    sparse_181_str_ = sparse_181_str;
  } else {
    clear_has_sparse_181_str();
    sparse_181_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_182_str = 194;
inline bool Database_NoBench::has_sparse_182_str() const {
  return (_has_bits_[6] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_182_str() {
  _has_bits_[6] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_182_str() {
  _has_bits_[6] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_182_str() {
  if (sparse_182_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_182_str_->clear();
  }
  clear_has_sparse_182_str();
}
inline const ::std::string& Database_NoBench::sparse_182_str() const {
  return *sparse_182_str_;
}
inline void Database_NoBench::set_sparse_182_str(const ::std::string& value) {
  set_has_sparse_182_str();
  if (sparse_182_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_182_str_ = new ::std::string;
  }
  sparse_182_str_->assign(value);
}
inline void Database_NoBench::set_sparse_182_str(const char* value) {
  set_has_sparse_182_str();
  if (sparse_182_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_182_str_ = new ::std::string;
  }
  sparse_182_str_->assign(value);
}
inline void Database_NoBench::set_sparse_182_str(const char* value, size_t size) {
  set_has_sparse_182_str();
  if (sparse_182_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_182_str_ = new ::std::string;
  }
  sparse_182_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_182_str() {
  set_has_sparse_182_str();
  if (sparse_182_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_182_str_ = new ::std::string;
  }
  return sparse_182_str_;
}
inline ::std::string* Database_NoBench::release_sparse_182_str() {
  clear_has_sparse_182_str();
  if (sparse_182_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_182_str_;
    sparse_182_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_182_str(::std::string* sparse_182_str) {
  if (sparse_182_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_182_str_;
  }
  if (sparse_182_str) {
    set_has_sparse_182_str();
    sparse_182_str_ = sparse_182_str;
  } else {
    clear_has_sparse_182_str();
    sparse_182_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_183_str = 195;
inline bool Database_NoBench::has_sparse_183_str() const {
  return (_has_bits_[6] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_183_str() {
  _has_bits_[6] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_183_str() {
  _has_bits_[6] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_183_str() {
  if (sparse_183_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_183_str_->clear();
  }
  clear_has_sparse_183_str();
}
inline const ::std::string& Database_NoBench::sparse_183_str() const {
  return *sparse_183_str_;
}
inline void Database_NoBench::set_sparse_183_str(const ::std::string& value) {
  set_has_sparse_183_str();
  if (sparse_183_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_183_str_ = new ::std::string;
  }
  sparse_183_str_->assign(value);
}
inline void Database_NoBench::set_sparse_183_str(const char* value) {
  set_has_sparse_183_str();
  if (sparse_183_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_183_str_ = new ::std::string;
  }
  sparse_183_str_->assign(value);
}
inline void Database_NoBench::set_sparse_183_str(const char* value, size_t size) {
  set_has_sparse_183_str();
  if (sparse_183_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_183_str_ = new ::std::string;
  }
  sparse_183_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_183_str() {
  set_has_sparse_183_str();
  if (sparse_183_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_183_str_ = new ::std::string;
  }
  return sparse_183_str_;
}
inline ::std::string* Database_NoBench::release_sparse_183_str() {
  clear_has_sparse_183_str();
  if (sparse_183_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_183_str_;
    sparse_183_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_183_str(::std::string* sparse_183_str) {
  if (sparse_183_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_183_str_;
  }
  if (sparse_183_str) {
    set_has_sparse_183_str();
    sparse_183_str_ = sparse_183_str;
  } else {
    clear_has_sparse_183_str();
    sparse_183_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_184_str = 196;
inline bool Database_NoBench::has_sparse_184_str() const {
  return (_has_bits_[6] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_184_str() {
  _has_bits_[6] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_184_str() {
  _has_bits_[6] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_184_str() {
  if (sparse_184_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_184_str_->clear();
  }
  clear_has_sparse_184_str();
}
inline const ::std::string& Database_NoBench::sparse_184_str() const {
  return *sparse_184_str_;
}
inline void Database_NoBench::set_sparse_184_str(const ::std::string& value) {
  set_has_sparse_184_str();
  if (sparse_184_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_184_str_ = new ::std::string;
  }
  sparse_184_str_->assign(value);
}
inline void Database_NoBench::set_sparse_184_str(const char* value) {
  set_has_sparse_184_str();
  if (sparse_184_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_184_str_ = new ::std::string;
  }
  sparse_184_str_->assign(value);
}
inline void Database_NoBench::set_sparse_184_str(const char* value, size_t size) {
  set_has_sparse_184_str();
  if (sparse_184_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_184_str_ = new ::std::string;
  }
  sparse_184_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_184_str() {
  set_has_sparse_184_str();
  if (sparse_184_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_184_str_ = new ::std::string;
  }
  return sparse_184_str_;
}
inline ::std::string* Database_NoBench::release_sparse_184_str() {
  clear_has_sparse_184_str();
  if (sparse_184_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_184_str_;
    sparse_184_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_184_str(::std::string* sparse_184_str) {
  if (sparse_184_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_184_str_;
  }
  if (sparse_184_str) {
    set_has_sparse_184_str();
    sparse_184_str_ = sparse_184_str;
  } else {
    clear_has_sparse_184_str();
    sparse_184_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_185_str = 197;
inline bool Database_NoBench::has_sparse_185_str() const {
  return (_has_bits_[6] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_185_str() {
  _has_bits_[6] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_185_str() {
  _has_bits_[6] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_185_str() {
  if (sparse_185_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_185_str_->clear();
  }
  clear_has_sparse_185_str();
}
inline const ::std::string& Database_NoBench::sparse_185_str() const {
  return *sparse_185_str_;
}
inline void Database_NoBench::set_sparse_185_str(const ::std::string& value) {
  set_has_sparse_185_str();
  if (sparse_185_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_185_str_ = new ::std::string;
  }
  sparse_185_str_->assign(value);
}
inline void Database_NoBench::set_sparse_185_str(const char* value) {
  set_has_sparse_185_str();
  if (sparse_185_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_185_str_ = new ::std::string;
  }
  sparse_185_str_->assign(value);
}
inline void Database_NoBench::set_sparse_185_str(const char* value, size_t size) {
  set_has_sparse_185_str();
  if (sparse_185_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_185_str_ = new ::std::string;
  }
  sparse_185_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_185_str() {
  set_has_sparse_185_str();
  if (sparse_185_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_185_str_ = new ::std::string;
  }
  return sparse_185_str_;
}
inline ::std::string* Database_NoBench::release_sparse_185_str() {
  clear_has_sparse_185_str();
  if (sparse_185_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_185_str_;
    sparse_185_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_185_str(::std::string* sparse_185_str) {
  if (sparse_185_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_185_str_;
  }
  if (sparse_185_str) {
    set_has_sparse_185_str();
    sparse_185_str_ = sparse_185_str;
  } else {
    clear_has_sparse_185_str();
    sparse_185_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_186_str = 198;
inline bool Database_NoBench::has_sparse_186_str() const {
  return (_has_bits_[6] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_186_str() {
  _has_bits_[6] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_186_str() {
  _has_bits_[6] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_186_str() {
  if (sparse_186_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_186_str_->clear();
  }
  clear_has_sparse_186_str();
}
inline const ::std::string& Database_NoBench::sparse_186_str() const {
  return *sparse_186_str_;
}
inline void Database_NoBench::set_sparse_186_str(const ::std::string& value) {
  set_has_sparse_186_str();
  if (sparse_186_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_186_str_ = new ::std::string;
  }
  sparse_186_str_->assign(value);
}
inline void Database_NoBench::set_sparse_186_str(const char* value) {
  set_has_sparse_186_str();
  if (sparse_186_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_186_str_ = new ::std::string;
  }
  sparse_186_str_->assign(value);
}
inline void Database_NoBench::set_sparse_186_str(const char* value, size_t size) {
  set_has_sparse_186_str();
  if (sparse_186_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_186_str_ = new ::std::string;
  }
  sparse_186_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_186_str() {
  set_has_sparse_186_str();
  if (sparse_186_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_186_str_ = new ::std::string;
  }
  return sparse_186_str_;
}
inline ::std::string* Database_NoBench::release_sparse_186_str() {
  clear_has_sparse_186_str();
  if (sparse_186_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_186_str_;
    sparse_186_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_186_str(::std::string* sparse_186_str) {
  if (sparse_186_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_186_str_;
  }
  if (sparse_186_str) {
    set_has_sparse_186_str();
    sparse_186_str_ = sparse_186_str;
  } else {
    clear_has_sparse_186_str();
    sparse_186_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_187_str = 199;
inline bool Database_NoBench::has_sparse_187_str() const {
  return (_has_bits_[6] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_187_str() {
  _has_bits_[6] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_187_str() {
  _has_bits_[6] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_187_str() {
  if (sparse_187_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_187_str_->clear();
  }
  clear_has_sparse_187_str();
}
inline const ::std::string& Database_NoBench::sparse_187_str() const {
  return *sparse_187_str_;
}
inline void Database_NoBench::set_sparse_187_str(const ::std::string& value) {
  set_has_sparse_187_str();
  if (sparse_187_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_187_str_ = new ::std::string;
  }
  sparse_187_str_->assign(value);
}
inline void Database_NoBench::set_sparse_187_str(const char* value) {
  set_has_sparse_187_str();
  if (sparse_187_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_187_str_ = new ::std::string;
  }
  sparse_187_str_->assign(value);
}
inline void Database_NoBench::set_sparse_187_str(const char* value, size_t size) {
  set_has_sparse_187_str();
  if (sparse_187_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_187_str_ = new ::std::string;
  }
  sparse_187_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_187_str() {
  set_has_sparse_187_str();
  if (sparse_187_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_187_str_ = new ::std::string;
  }
  return sparse_187_str_;
}
inline ::std::string* Database_NoBench::release_sparse_187_str() {
  clear_has_sparse_187_str();
  if (sparse_187_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_187_str_;
    sparse_187_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_187_str(::std::string* sparse_187_str) {
  if (sparse_187_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_187_str_;
  }
  if (sparse_187_str) {
    set_has_sparse_187_str();
    sparse_187_str_ = sparse_187_str;
  } else {
    clear_has_sparse_187_str();
    sparse_187_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_188_str = 200;
inline bool Database_NoBench::has_sparse_188_str() const {
  return (_has_bits_[6] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_188_str() {
  _has_bits_[6] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_188_str() {
  _has_bits_[6] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_188_str() {
  if (sparse_188_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_188_str_->clear();
  }
  clear_has_sparse_188_str();
}
inline const ::std::string& Database_NoBench::sparse_188_str() const {
  return *sparse_188_str_;
}
inline void Database_NoBench::set_sparse_188_str(const ::std::string& value) {
  set_has_sparse_188_str();
  if (sparse_188_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_188_str_ = new ::std::string;
  }
  sparse_188_str_->assign(value);
}
inline void Database_NoBench::set_sparse_188_str(const char* value) {
  set_has_sparse_188_str();
  if (sparse_188_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_188_str_ = new ::std::string;
  }
  sparse_188_str_->assign(value);
}
inline void Database_NoBench::set_sparse_188_str(const char* value, size_t size) {
  set_has_sparse_188_str();
  if (sparse_188_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_188_str_ = new ::std::string;
  }
  sparse_188_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_188_str() {
  set_has_sparse_188_str();
  if (sparse_188_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_188_str_ = new ::std::string;
  }
  return sparse_188_str_;
}
inline ::std::string* Database_NoBench::release_sparse_188_str() {
  clear_has_sparse_188_str();
  if (sparse_188_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_188_str_;
    sparse_188_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_188_str(::std::string* sparse_188_str) {
  if (sparse_188_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_188_str_;
  }
  if (sparse_188_str) {
    set_has_sparse_188_str();
    sparse_188_str_ = sparse_188_str;
  } else {
    clear_has_sparse_188_str();
    sparse_188_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_189_str = 201;
inline bool Database_NoBench::has_sparse_189_str() const {
  return (_has_bits_[6] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_189_str() {
  _has_bits_[6] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_189_str() {
  _has_bits_[6] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_189_str() {
  if (sparse_189_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_189_str_->clear();
  }
  clear_has_sparse_189_str();
}
inline const ::std::string& Database_NoBench::sparse_189_str() const {
  return *sparse_189_str_;
}
inline void Database_NoBench::set_sparse_189_str(const ::std::string& value) {
  set_has_sparse_189_str();
  if (sparse_189_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_189_str_ = new ::std::string;
  }
  sparse_189_str_->assign(value);
}
inline void Database_NoBench::set_sparse_189_str(const char* value) {
  set_has_sparse_189_str();
  if (sparse_189_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_189_str_ = new ::std::string;
  }
  sparse_189_str_->assign(value);
}
inline void Database_NoBench::set_sparse_189_str(const char* value, size_t size) {
  set_has_sparse_189_str();
  if (sparse_189_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_189_str_ = new ::std::string;
  }
  sparse_189_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_189_str() {
  set_has_sparse_189_str();
  if (sparse_189_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_189_str_ = new ::std::string;
  }
  return sparse_189_str_;
}
inline ::std::string* Database_NoBench::release_sparse_189_str() {
  clear_has_sparse_189_str();
  if (sparse_189_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_189_str_;
    sparse_189_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_189_str(::std::string* sparse_189_str) {
  if (sparse_189_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_189_str_;
  }
  if (sparse_189_str) {
    set_has_sparse_189_str();
    sparse_189_str_ = sparse_189_str;
  } else {
    clear_has_sparse_189_str();
    sparse_189_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_190_str = 202;
inline bool Database_NoBench::has_sparse_190_str() const {
  return (_has_bits_[6] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_190_str() {
  _has_bits_[6] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_190_str() {
  _has_bits_[6] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_190_str() {
  if (sparse_190_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_190_str_->clear();
  }
  clear_has_sparse_190_str();
}
inline const ::std::string& Database_NoBench::sparse_190_str() const {
  return *sparse_190_str_;
}
inline void Database_NoBench::set_sparse_190_str(const ::std::string& value) {
  set_has_sparse_190_str();
  if (sparse_190_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_190_str_ = new ::std::string;
  }
  sparse_190_str_->assign(value);
}
inline void Database_NoBench::set_sparse_190_str(const char* value) {
  set_has_sparse_190_str();
  if (sparse_190_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_190_str_ = new ::std::string;
  }
  sparse_190_str_->assign(value);
}
inline void Database_NoBench::set_sparse_190_str(const char* value, size_t size) {
  set_has_sparse_190_str();
  if (sparse_190_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_190_str_ = new ::std::string;
  }
  sparse_190_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_190_str() {
  set_has_sparse_190_str();
  if (sparse_190_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_190_str_ = new ::std::string;
  }
  return sparse_190_str_;
}
inline ::std::string* Database_NoBench::release_sparse_190_str() {
  clear_has_sparse_190_str();
  if (sparse_190_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_190_str_;
    sparse_190_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_190_str(::std::string* sparse_190_str) {
  if (sparse_190_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_190_str_;
  }
  if (sparse_190_str) {
    set_has_sparse_190_str();
    sparse_190_str_ = sparse_190_str;
  } else {
    clear_has_sparse_190_str();
    sparse_190_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_191_str = 203;
inline bool Database_NoBench::has_sparse_191_str() const {
  return (_has_bits_[6] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_191_str() {
  _has_bits_[6] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_191_str() {
  _has_bits_[6] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_191_str() {
  if (sparse_191_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_191_str_->clear();
  }
  clear_has_sparse_191_str();
}
inline const ::std::string& Database_NoBench::sparse_191_str() const {
  return *sparse_191_str_;
}
inline void Database_NoBench::set_sparse_191_str(const ::std::string& value) {
  set_has_sparse_191_str();
  if (sparse_191_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_191_str_ = new ::std::string;
  }
  sparse_191_str_->assign(value);
}
inline void Database_NoBench::set_sparse_191_str(const char* value) {
  set_has_sparse_191_str();
  if (sparse_191_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_191_str_ = new ::std::string;
  }
  sparse_191_str_->assign(value);
}
inline void Database_NoBench::set_sparse_191_str(const char* value, size_t size) {
  set_has_sparse_191_str();
  if (sparse_191_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_191_str_ = new ::std::string;
  }
  sparse_191_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_191_str() {
  set_has_sparse_191_str();
  if (sparse_191_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_191_str_ = new ::std::string;
  }
  return sparse_191_str_;
}
inline ::std::string* Database_NoBench::release_sparse_191_str() {
  clear_has_sparse_191_str();
  if (sparse_191_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_191_str_;
    sparse_191_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_191_str(::std::string* sparse_191_str) {
  if (sparse_191_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_191_str_;
  }
  if (sparse_191_str) {
    set_has_sparse_191_str();
    sparse_191_str_ = sparse_191_str;
  } else {
    clear_has_sparse_191_str();
    sparse_191_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_192_str = 204;
inline bool Database_NoBench::has_sparse_192_str() const {
  return (_has_bits_[6] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_192_str() {
  _has_bits_[6] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_192_str() {
  _has_bits_[6] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_192_str() {
  if (sparse_192_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_192_str_->clear();
  }
  clear_has_sparse_192_str();
}
inline const ::std::string& Database_NoBench::sparse_192_str() const {
  return *sparse_192_str_;
}
inline void Database_NoBench::set_sparse_192_str(const ::std::string& value) {
  set_has_sparse_192_str();
  if (sparse_192_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_192_str_ = new ::std::string;
  }
  sparse_192_str_->assign(value);
}
inline void Database_NoBench::set_sparse_192_str(const char* value) {
  set_has_sparse_192_str();
  if (sparse_192_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_192_str_ = new ::std::string;
  }
  sparse_192_str_->assign(value);
}
inline void Database_NoBench::set_sparse_192_str(const char* value, size_t size) {
  set_has_sparse_192_str();
  if (sparse_192_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_192_str_ = new ::std::string;
  }
  sparse_192_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_192_str() {
  set_has_sparse_192_str();
  if (sparse_192_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_192_str_ = new ::std::string;
  }
  return sparse_192_str_;
}
inline ::std::string* Database_NoBench::release_sparse_192_str() {
  clear_has_sparse_192_str();
  if (sparse_192_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_192_str_;
    sparse_192_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_192_str(::std::string* sparse_192_str) {
  if (sparse_192_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_192_str_;
  }
  if (sparse_192_str) {
    set_has_sparse_192_str();
    sparse_192_str_ = sparse_192_str;
  } else {
    clear_has_sparse_192_str();
    sparse_192_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_193_str = 205;
inline bool Database_NoBench::has_sparse_193_str() const {
  return (_has_bits_[6] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_193_str() {
  _has_bits_[6] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_193_str() {
  _has_bits_[6] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_193_str() {
  if (sparse_193_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_193_str_->clear();
  }
  clear_has_sparse_193_str();
}
inline const ::std::string& Database_NoBench::sparse_193_str() const {
  return *sparse_193_str_;
}
inline void Database_NoBench::set_sparse_193_str(const ::std::string& value) {
  set_has_sparse_193_str();
  if (sparse_193_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_193_str_ = new ::std::string;
  }
  sparse_193_str_->assign(value);
}
inline void Database_NoBench::set_sparse_193_str(const char* value) {
  set_has_sparse_193_str();
  if (sparse_193_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_193_str_ = new ::std::string;
  }
  sparse_193_str_->assign(value);
}
inline void Database_NoBench::set_sparse_193_str(const char* value, size_t size) {
  set_has_sparse_193_str();
  if (sparse_193_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_193_str_ = new ::std::string;
  }
  sparse_193_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_193_str() {
  set_has_sparse_193_str();
  if (sparse_193_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_193_str_ = new ::std::string;
  }
  return sparse_193_str_;
}
inline ::std::string* Database_NoBench::release_sparse_193_str() {
  clear_has_sparse_193_str();
  if (sparse_193_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_193_str_;
    sparse_193_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_193_str(::std::string* sparse_193_str) {
  if (sparse_193_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_193_str_;
  }
  if (sparse_193_str) {
    set_has_sparse_193_str();
    sparse_193_str_ = sparse_193_str;
  } else {
    clear_has_sparse_193_str();
    sparse_193_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_194_str = 206;
inline bool Database_NoBench::has_sparse_194_str() const {
  return (_has_bits_[6] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_194_str() {
  _has_bits_[6] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_194_str() {
  _has_bits_[6] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_194_str() {
  if (sparse_194_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_194_str_->clear();
  }
  clear_has_sparse_194_str();
}
inline const ::std::string& Database_NoBench::sparse_194_str() const {
  return *sparse_194_str_;
}
inline void Database_NoBench::set_sparse_194_str(const ::std::string& value) {
  set_has_sparse_194_str();
  if (sparse_194_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_194_str_ = new ::std::string;
  }
  sparse_194_str_->assign(value);
}
inline void Database_NoBench::set_sparse_194_str(const char* value) {
  set_has_sparse_194_str();
  if (sparse_194_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_194_str_ = new ::std::string;
  }
  sparse_194_str_->assign(value);
}
inline void Database_NoBench::set_sparse_194_str(const char* value, size_t size) {
  set_has_sparse_194_str();
  if (sparse_194_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_194_str_ = new ::std::string;
  }
  sparse_194_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_194_str() {
  set_has_sparse_194_str();
  if (sparse_194_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_194_str_ = new ::std::string;
  }
  return sparse_194_str_;
}
inline ::std::string* Database_NoBench::release_sparse_194_str() {
  clear_has_sparse_194_str();
  if (sparse_194_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_194_str_;
    sparse_194_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_194_str(::std::string* sparse_194_str) {
  if (sparse_194_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_194_str_;
  }
  if (sparse_194_str) {
    set_has_sparse_194_str();
    sparse_194_str_ = sparse_194_str;
  } else {
    clear_has_sparse_194_str();
    sparse_194_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_195_str = 207;
inline bool Database_NoBench::has_sparse_195_str() const {
  return (_has_bits_[6] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_195_str() {
  _has_bits_[6] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_195_str() {
  _has_bits_[6] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_195_str() {
  if (sparse_195_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_195_str_->clear();
  }
  clear_has_sparse_195_str();
}
inline const ::std::string& Database_NoBench::sparse_195_str() const {
  return *sparse_195_str_;
}
inline void Database_NoBench::set_sparse_195_str(const ::std::string& value) {
  set_has_sparse_195_str();
  if (sparse_195_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_195_str_ = new ::std::string;
  }
  sparse_195_str_->assign(value);
}
inline void Database_NoBench::set_sparse_195_str(const char* value) {
  set_has_sparse_195_str();
  if (sparse_195_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_195_str_ = new ::std::string;
  }
  sparse_195_str_->assign(value);
}
inline void Database_NoBench::set_sparse_195_str(const char* value, size_t size) {
  set_has_sparse_195_str();
  if (sparse_195_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_195_str_ = new ::std::string;
  }
  sparse_195_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_195_str() {
  set_has_sparse_195_str();
  if (sparse_195_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_195_str_ = new ::std::string;
  }
  return sparse_195_str_;
}
inline ::std::string* Database_NoBench::release_sparse_195_str() {
  clear_has_sparse_195_str();
  if (sparse_195_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_195_str_;
    sparse_195_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_195_str(::std::string* sparse_195_str) {
  if (sparse_195_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_195_str_;
  }
  if (sparse_195_str) {
    set_has_sparse_195_str();
    sparse_195_str_ = sparse_195_str;
  } else {
    clear_has_sparse_195_str();
    sparse_195_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_196_str = 208;
inline bool Database_NoBench::has_sparse_196_str() const {
  return (_has_bits_[6] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_196_str() {
  _has_bits_[6] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_196_str() {
  _has_bits_[6] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_196_str() {
  if (sparse_196_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_196_str_->clear();
  }
  clear_has_sparse_196_str();
}
inline const ::std::string& Database_NoBench::sparse_196_str() const {
  return *sparse_196_str_;
}
inline void Database_NoBench::set_sparse_196_str(const ::std::string& value) {
  set_has_sparse_196_str();
  if (sparse_196_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_196_str_ = new ::std::string;
  }
  sparse_196_str_->assign(value);
}
inline void Database_NoBench::set_sparse_196_str(const char* value) {
  set_has_sparse_196_str();
  if (sparse_196_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_196_str_ = new ::std::string;
  }
  sparse_196_str_->assign(value);
}
inline void Database_NoBench::set_sparse_196_str(const char* value, size_t size) {
  set_has_sparse_196_str();
  if (sparse_196_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_196_str_ = new ::std::string;
  }
  sparse_196_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_196_str() {
  set_has_sparse_196_str();
  if (sparse_196_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_196_str_ = new ::std::string;
  }
  return sparse_196_str_;
}
inline ::std::string* Database_NoBench::release_sparse_196_str() {
  clear_has_sparse_196_str();
  if (sparse_196_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_196_str_;
    sparse_196_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_196_str(::std::string* sparse_196_str) {
  if (sparse_196_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_196_str_;
  }
  if (sparse_196_str) {
    set_has_sparse_196_str();
    sparse_196_str_ = sparse_196_str;
  } else {
    clear_has_sparse_196_str();
    sparse_196_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_197_str = 209;
inline bool Database_NoBench::has_sparse_197_str() const {
  return (_has_bits_[6] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_197_str() {
  _has_bits_[6] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_197_str() {
  _has_bits_[6] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_197_str() {
  if (sparse_197_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_197_str_->clear();
  }
  clear_has_sparse_197_str();
}
inline const ::std::string& Database_NoBench::sparse_197_str() const {
  return *sparse_197_str_;
}
inline void Database_NoBench::set_sparse_197_str(const ::std::string& value) {
  set_has_sparse_197_str();
  if (sparse_197_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_197_str_ = new ::std::string;
  }
  sparse_197_str_->assign(value);
}
inline void Database_NoBench::set_sparse_197_str(const char* value) {
  set_has_sparse_197_str();
  if (sparse_197_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_197_str_ = new ::std::string;
  }
  sparse_197_str_->assign(value);
}
inline void Database_NoBench::set_sparse_197_str(const char* value, size_t size) {
  set_has_sparse_197_str();
  if (sparse_197_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_197_str_ = new ::std::string;
  }
  sparse_197_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_197_str() {
  set_has_sparse_197_str();
  if (sparse_197_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_197_str_ = new ::std::string;
  }
  return sparse_197_str_;
}
inline ::std::string* Database_NoBench::release_sparse_197_str() {
  clear_has_sparse_197_str();
  if (sparse_197_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_197_str_;
    sparse_197_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_197_str(::std::string* sparse_197_str) {
  if (sparse_197_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_197_str_;
  }
  if (sparse_197_str) {
    set_has_sparse_197_str();
    sparse_197_str_ = sparse_197_str;
  } else {
    clear_has_sparse_197_str();
    sparse_197_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_198_str = 210;
inline bool Database_NoBench::has_sparse_198_str() const {
  return (_has_bits_[6] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_198_str() {
  _has_bits_[6] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_198_str() {
  _has_bits_[6] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_198_str() {
  if (sparse_198_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_198_str_->clear();
  }
  clear_has_sparse_198_str();
}
inline const ::std::string& Database_NoBench::sparse_198_str() const {
  return *sparse_198_str_;
}
inline void Database_NoBench::set_sparse_198_str(const ::std::string& value) {
  set_has_sparse_198_str();
  if (sparse_198_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_198_str_ = new ::std::string;
  }
  sparse_198_str_->assign(value);
}
inline void Database_NoBench::set_sparse_198_str(const char* value) {
  set_has_sparse_198_str();
  if (sparse_198_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_198_str_ = new ::std::string;
  }
  sparse_198_str_->assign(value);
}
inline void Database_NoBench::set_sparse_198_str(const char* value, size_t size) {
  set_has_sparse_198_str();
  if (sparse_198_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_198_str_ = new ::std::string;
  }
  sparse_198_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_198_str() {
  set_has_sparse_198_str();
  if (sparse_198_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_198_str_ = new ::std::string;
  }
  return sparse_198_str_;
}
inline ::std::string* Database_NoBench::release_sparse_198_str() {
  clear_has_sparse_198_str();
  if (sparse_198_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_198_str_;
    sparse_198_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_198_str(::std::string* sparse_198_str) {
  if (sparse_198_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_198_str_;
  }
  if (sparse_198_str) {
    set_has_sparse_198_str();
    sparse_198_str_ = sparse_198_str;
  } else {
    clear_has_sparse_198_str();
    sparse_198_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_199_str = 211;
inline bool Database_NoBench::has_sparse_199_str() const {
  return (_has_bits_[6] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_199_str() {
  _has_bits_[6] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_199_str() {
  _has_bits_[6] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_199_str() {
  if (sparse_199_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_199_str_->clear();
  }
  clear_has_sparse_199_str();
}
inline const ::std::string& Database_NoBench::sparse_199_str() const {
  return *sparse_199_str_;
}
inline void Database_NoBench::set_sparse_199_str(const ::std::string& value) {
  set_has_sparse_199_str();
  if (sparse_199_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_199_str_ = new ::std::string;
  }
  sparse_199_str_->assign(value);
}
inline void Database_NoBench::set_sparse_199_str(const char* value) {
  set_has_sparse_199_str();
  if (sparse_199_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_199_str_ = new ::std::string;
  }
  sparse_199_str_->assign(value);
}
inline void Database_NoBench::set_sparse_199_str(const char* value, size_t size) {
  set_has_sparse_199_str();
  if (sparse_199_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_199_str_ = new ::std::string;
  }
  sparse_199_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_199_str() {
  set_has_sparse_199_str();
  if (sparse_199_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_199_str_ = new ::std::string;
  }
  return sparse_199_str_;
}
inline ::std::string* Database_NoBench::release_sparse_199_str() {
  clear_has_sparse_199_str();
  if (sparse_199_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_199_str_;
    sparse_199_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_199_str(::std::string* sparse_199_str) {
  if (sparse_199_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_199_str_;
  }
  if (sparse_199_str) {
    set_has_sparse_199_str();
    sparse_199_str_ = sparse_199_str;
  } else {
    clear_has_sparse_199_str();
    sparse_199_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_200_str = 212;
inline bool Database_NoBench::has_sparse_200_str() const {
  return (_has_bits_[6] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_200_str() {
  _has_bits_[6] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_200_str() {
  _has_bits_[6] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_200_str() {
  if (sparse_200_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_200_str_->clear();
  }
  clear_has_sparse_200_str();
}
inline const ::std::string& Database_NoBench::sparse_200_str() const {
  return *sparse_200_str_;
}
inline void Database_NoBench::set_sparse_200_str(const ::std::string& value) {
  set_has_sparse_200_str();
  if (sparse_200_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_200_str_ = new ::std::string;
  }
  sparse_200_str_->assign(value);
}
inline void Database_NoBench::set_sparse_200_str(const char* value) {
  set_has_sparse_200_str();
  if (sparse_200_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_200_str_ = new ::std::string;
  }
  sparse_200_str_->assign(value);
}
inline void Database_NoBench::set_sparse_200_str(const char* value, size_t size) {
  set_has_sparse_200_str();
  if (sparse_200_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_200_str_ = new ::std::string;
  }
  sparse_200_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_200_str() {
  set_has_sparse_200_str();
  if (sparse_200_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_200_str_ = new ::std::string;
  }
  return sparse_200_str_;
}
inline ::std::string* Database_NoBench::release_sparse_200_str() {
  clear_has_sparse_200_str();
  if (sparse_200_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_200_str_;
    sparse_200_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_200_str(::std::string* sparse_200_str) {
  if (sparse_200_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_200_str_;
  }
  if (sparse_200_str) {
    set_has_sparse_200_str();
    sparse_200_str_ = sparse_200_str;
  } else {
    clear_has_sparse_200_str();
    sparse_200_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_201_str = 213;
inline bool Database_NoBench::has_sparse_201_str() const {
  return (_has_bits_[6] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_201_str() {
  _has_bits_[6] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_201_str() {
  _has_bits_[6] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_201_str() {
  if (sparse_201_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_201_str_->clear();
  }
  clear_has_sparse_201_str();
}
inline const ::std::string& Database_NoBench::sparse_201_str() const {
  return *sparse_201_str_;
}
inline void Database_NoBench::set_sparse_201_str(const ::std::string& value) {
  set_has_sparse_201_str();
  if (sparse_201_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_201_str_ = new ::std::string;
  }
  sparse_201_str_->assign(value);
}
inline void Database_NoBench::set_sparse_201_str(const char* value) {
  set_has_sparse_201_str();
  if (sparse_201_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_201_str_ = new ::std::string;
  }
  sparse_201_str_->assign(value);
}
inline void Database_NoBench::set_sparse_201_str(const char* value, size_t size) {
  set_has_sparse_201_str();
  if (sparse_201_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_201_str_ = new ::std::string;
  }
  sparse_201_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_201_str() {
  set_has_sparse_201_str();
  if (sparse_201_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_201_str_ = new ::std::string;
  }
  return sparse_201_str_;
}
inline ::std::string* Database_NoBench::release_sparse_201_str() {
  clear_has_sparse_201_str();
  if (sparse_201_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_201_str_;
    sparse_201_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_201_str(::std::string* sparse_201_str) {
  if (sparse_201_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_201_str_;
  }
  if (sparse_201_str) {
    set_has_sparse_201_str();
    sparse_201_str_ = sparse_201_str;
  } else {
    clear_has_sparse_201_str();
    sparse_201_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_202_str = 214;
inline bool Database_NoBench::has_sparse_202_str() const {
  return (_has_bits_[6] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_202_str() {
  _has_bits_[6] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_202_str() {
  _has_bits_[6] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_202_str() {
  if (sparse_202_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_202_str_->clear();
  }
  clear_has_sparse_202_str();
}
inline const ::std::string& Database_NoBench::sparse_202_str() const {
  return *sparse_202_str_;
}
inline void Database_NoBench::set_sparse_202_str(const ::std::string& value) {
  set_has_sparse_202_str();
  if (sparse_202_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_202_str_ = new ::std::string;
  }
  sparse_202_str_->assign(value);
}
inline void Database_NoBench::set_sparse_202_str(const char* value) {
  set_has_sparse_202_str();
  if (sparse_202_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_202_str_ = new ::std::string;
  }
  sparse_202_str_->assign(value);
}
inline void Database_NoBench::set_sparse_202_str(const char* value, size_t size) {
  set_has_sparse_202_str();
  if (sparse_202_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_202_str_ = new ::std::string;
  }
  sparse_202_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_202_str() {
  set_has_sparse_202_str();
  if (sparse_202_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_202_str_ = new ::std::string;
  }
  return sparse_202_str_;
}
inline ::std::string* Database_NoBench::release_sparse_202_str() {
  clear_has_sparse_202_str();
  if (sparse_202_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_202_str_;
    sparse_202_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_202_str(::std::string* sparse_202_str) {
  if (sparse_202_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_202_str_;
  }
  if (sparse_202_str) {
    set_has_sparse_202_str();
    sparse_202_str_ = sparse_202_str;
  } else {
    clear_has_sparse_202_str();
    sparse_202_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_203_str = 215;
inline bool Database_NoBench::has_sparse_203_str() const {
  return (_has_bits_[6] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_203_str() {
  _has_bits_[6] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_203_str() {
  _has_bits_[6] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_203_str() {
  if (sparse_203_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_203_str_->clear();
  }
  clear_has_sparse_203_str();
}
inline const ::std::string& Database_NoBench::sparse_203_str() const {
  return *sparse_203_str_;
}
inline void Database_NoBench::set_sparse_203_str(const ::std::string& value) {
  set_has_sparse_203_str();
  if (sparse_203_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_203_str_ = new ::std::string;
  }
  sparse_203_str_->assign(value);
}
inline void Database_NoBench::set_sparse_203_str(const char* value) {
  set_has_sparse_203_str();
  if (sparse_203_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_203_str_ = new ::std::string;
  }
  sparse_203_str_->assign(value);
}
inline void Database_NoBench::set_sparse_203_str(const char* value, size_t size) {
  set_has_sparse_203_str();
  if (sparse_203_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_203_str_ = new ::std::string;
  }
  sparse_203_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_203_str() {
  set_has_sparse_203_str();
  if (sparse_203_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_203_str_ = new ::std::string;
  }
  return sparse_203_str_;
}
inline ::std::string* Database_NoBench::release_sparse_203_str() {
  clear_has_sparse_203_str();
  if (sparse_203_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_203_str_;
    sparse_203_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_203_str(::std::string* sparse_203_str) {
  if (sparse_203_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_203_str_;
  }
  if (sparse_203_str) {
    set_has_sparse_203_str();
    sparse_203_str_ = sparse_203_str;
  } else {
    clear_has_sparse_203_str();
    sparse_203_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_204_str = 216;
inline bool Database_NoBench::has_sparse_204_str() const {
  return (_has_bits_[6] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_204_str() {
  _has_bits_[6] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_204_str() {
  _has_bits_[6] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_204_str() {
  if (sparse_204_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_204_str_->clear();
  }
  clear_has_sparse_204_str();
}
inline const ::std::string& Database_NoBench::sparse_204_str() const {
  return *sparse_204_str_;
}
inline void Database_NoBench::set_sparse_204_str(const ::std::string& value) {
  set_has_sparse_204_str();
  if (sparse_204_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_204_str_ = new ::std::string;
  }
  sparse_204_str_->assign(value);
}
inline void Database_NoBench::set_sparse_204_str(const char* value) {
  set_has_sparse_204_str();
  if (sparse_204_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_204_str_ = new ::std::string;
  }
  sparse_204_str_->assign(value);
}
inline void Database_NoBench::set_sparse_204_str(const char* value, size_t size) {
  set_has_sparse_204_str();
  if (sparse_204_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_204_str_ = new ::std::string;
  }
  sparse_204_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_204_str() {
  set_has_sparse_204_str();
  if (sparse_204_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_204_str_ = new ::std::string;
  }
  return sparse_204_str_;
}
inline ::std::string* Database_NoBench::release_sparse_204_str() {
  clear_has_sparse_204_str();
  if (sparse_204_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_204_str_;
    sparse_204_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_204_str(::std::string* sparse_204_str) {
  if (sparse_204_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_204_str_;
  }
  if (sparse_204_str) {
    set_has_sparse_204_str();
    sparse_204_str_ = sparse_204_str;
  } else {
    clear_has_sparse_204_str();
    sparse_204_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_205_str = 217;
inline bool Database_NoBench::has_sparse_205_str() const {
  return (_has_bits_[6] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_205_str() {
  _has_bits_[6] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_205_str() {
  _has_bits_[6] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_205_str() {
  if (sparse_205_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_205_str_->clear();
  }
  clear_has_sparse_205_str();
}
inline const ::std::string& Database_NoBench::sparse_205_str() const {
  return *sparse_205_str_;
}
inline void Database_NoBench::set_sparse_205_str(const ::std::string& value) {
  set_has_sparse_205_str();
  if (sparse_205_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_205_str_ = new ::std::string;
  }
  sparse_205_str_->assign(value);
}
inline void Database_NoBench::set_sparse_205_str(const char* value) {
  set_has_sparse_205_str();
  if (sparse_205_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_205_str_ = new ::std::string;
  }
  sparse_205_str_->assign(value);
}
inline void Database_NoBench::set_sparse_205_str(const char* value, size_t size) {
  set_has_sparse_205_str();
  if (sparse_205_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_205_str_ = new ::std::string;
  }
  sparse_205_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_205_str() {
  set_has_sparse_205_str();
  if (sparse_205_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_205_str_ = new ::std::string;
  }
  return sparse_205_str_;
}
inline ::std::string* Database_NoBench::release_sparse_205_str() {
  clear_has_sparse_205_str();
  if (sparse_205_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_205_str_;
    sparse_205_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_205_str(::std::string* sparse_205_str) {
  if (sparse_205_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_205_str_;
  }
  if (sparse_205_str) {
    set_has_sparse_205_str();
    sparse_205_str_ = sparse_205_str;
  } else {
    clear_has_sparse_205_str();
    sparse_205_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_206_str = 218;
inline bool Database_NoBench::has_sparse_206_str() const {
  return (_has_bits_[6] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_206_str() {
  _has_bits_[6] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_206_str() {
  _has_bits_[6] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_206_str() {
  if (sparse_206_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_206_str_->clear();
  }
  clear_has_sparse_206_str();
}
inline const ::std::string& Database_NoBench::sparse_206_str() const {
  return *sparse_206_str_;
}
inline void Database_NoBench::set_sparse_206_str(const ::std::string& value) {
  set_has_sparse_206_str();
  if (sparse_206_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_206_str_ = new ::std::string;
  }
  sparse_206_str_->assign(value);
}
inline void Database_NoBench::set_sparse_206_str(const char* value) {
  set_has_sparse_206_str();
  if (sparse_206_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_206_str_ = new ::std::string;
  }
  sparse_206_str_->assign(value);
}
inline void Database_NoBench::set_sparse_206_str(const char* value, size_t size) {
  set_has_sparse_206_str();
  if (sparse_206_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_206_str_ = new ::std::string;
  }
  sparse_206_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_206_str() {
  set_has_sparse_206_str();
  if (sparse_206_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_206_str_ = new ::std::string;
  }
  return sparse_206_str_;
}
inline ::std::string* Database_NoBench::release_sparse_206_str() {
  clear_has_sparse_206_str();
  if (sparse_206_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_206_str_;
    sparse_206_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_206_str(::std::string* sparse_206_str) {
  if (sparse_206_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_206_str_;
  }
  if (sparse_206_str) {
    set_has_sparse_206_str();
    sparse_206_str_ = sparse_206_str;
  } else {
    clear_has_sparse_206_str();
    sparse_206_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_207_str = 219;
inline bool Database_NoBench::has_sparse_207_str() const {
  return (_has_bits_[6] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_207_str() {
  _has_bits_[6] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_207_str() {
  _has_bits_[6] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_207_str() {
  if (sparse_207_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_207_str_->clear();
  }
  clear_has_sparse_207_str();
}
inline const ::std::string& Database_NoBench::sparse_207_str() const {
  return *sparse_207_str_;
}
inline void Database_NoBench::set_sparse_207_str(const ::std::string& value) {
  set_has_sparse_207_str();
  if (sparse_207_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_207_str_ = new ::std::string;
  }
  sparse_207_str_->assign(value);
}
inline void Database_NoBench::set_sparse_207_str(const char* value) {
  set_has_sparse_207_str();
  if (sparse_207_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_207_str_ = new ::std::string;
  }
  sparse_207_str_->assign(value);
}
inline void Database_NoBench::set_sparse_207_str(const char* value, size_t size) {
  set_has_sparse_207_str();
  if (sparse_207_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_207_str_ = new ::std::string;
  }
  sparse_207_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_207_str() {
  set_has_sparse_207_str();
  if (sparse_207_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_207_str_ = new ::std::string;
  }
  return sparse_207_str_;
}
inline ::std::string* Database_NoBench::release_sparse_207_str() {
  clear_has_sparse_207_str();
  if (sparse_207_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_207_str_;
    sparse_207_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_207_str(::std::string* sparse_207_str) {
  if (sparse_207_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_207_str_;
  }
  if (sparse_207_str) {
    set_has_sparse_207_str();
    sparse_207_str_ = sparse_207_str;
  } else {
    clear_has_sparse_207_str();
    sparse_207_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_208_str = 220;
inline bool Database_NoBench::has_sparse_208_str() const {
  return (_has_bits_[6] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_208_str() {
  _has_bits_[6] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_208_str() {
  _has_bits_[6] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_208_str() {
  if (sparse_208_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_208_str_->clear();
  }
  clear_has_sparse_208_str();
}
inline const ::std::string& Database_NoBench::sparse_208_str() const {
  return *sparse_208_str_;
}
inline void Database_NoBench::set_sparse_208_str(const ::std::string& value) {
  set_has_sparse_208_str();
  if (sparse_208_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_208_str_ = new ::std::string;
  }
  sparse_208_str_->assign(value);
}
inline void Database_NoBench::set_sparse_208_str(const char* value) {
  set_has_sparse_208_str();
  if (sparse_208_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_208_str_ = new ::std::string;
  }
  sparse_208_str_->assign(value);
}
inline void Database_NoBench::set_sparse_208_str(const char* value, size_t size) {
  set_has_sparse_208_str();
  if (sparse_208_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_208_str_ = new ::std::string;
  }
  sparse_208_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_208_str() {
  set_has_sparse_208_str();
  if (sparse_208_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_208_str_ = new ::std::string;
  }
  return sparse_208_str_;
}
inline ::std::string* Database_NoBench::release_sparse_208_str() {
  clear_has_sparse_208_str();
  if (sparse_208_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_208_str_;
    sparse_208_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_208_str(::std::string* sparse_208_str) {
  if (sparse_208_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_208_str_;
  }
  if (sparse_208_str) {
    set_has_sparse_208_str();
    sparse_208_str_ = sparse_208_str;
  } else {
    clear_has_sparse_208_str();
    sparse_208_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_209_str = 221;
inline bool Database_NoBench::has_sparse_209_str() const {
  return (_has_bits_[6] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_209_str() {
  _has_bits_[6] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_209_str() {
  _has_bits_[6] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_209_str() {
  if (sparse_209_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_209_str_->clear();
  }
  clear_has_sparse_209_str();
}
inline const ::std::string& Database_NoBench::sparse_209_str() const {
  return *sparse_209_str_;
}
inline void Database_NoBench::set_sparse_209_str(const ::std::string& value) {
  set_has_sparse_209_str();
  if (sparse_209_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_209_str_ = new ::std::string;
  }
  sparse_209_str_->assign(value);
}
inline void Database_NoBench::set_sparse_209_str(const char* value) {
  set_has_sparse_209_str();
  if (sparse_209_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_209_str_ = new ::std::string;
  }
  sparse_209_str_->assign(value);
}
inline void Database_NoBench::set_sparse_209_str(const char* value, size_t size) {
  set_has_sparse_209_str();
  if (sparse_209_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_209_str_ = new ::std::string;
  }
  sparse_209_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_209_str() {
  set_has_sparse_209_str();
  if (sparse_209_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_209_str_ = new ::std::string;
  }
  return sparse_209_str_;
}
inline ::std::string* Database_NoBench::release_sparse_209_str() {
  clear_has_sparse_209_str();
  if (sparse_209_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_209_str_;
    sparse_209_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_209_str(::std::string* sparse_209_str) {
  if (sparse_209_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_209_str_;
  }
  if (sparse_209_str) {
    set_has_sparse_209_str();
    sparse_209_str_ = sparse_209_str;
  } else {
    clear_has_sparse_209_str();
    sparse_209_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_210_str = 222;
inline bool Database_NoBench::has_sparse_210_str() const {
  return (_has_bits_[6] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_210_str() {
  _has_bits_[6] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_210_str() {
  _has_bits_[6] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_210_str() {
  if (sparse_210_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_210_str_->clear();
  }
  clear_has_sparse_210_str();
}
inline const ::std::string& Database_NoBench::sparse_210_str() const {
  return *sparse_210_str_;
}
inline void Database_NoBench::set_sparse_210_str(const ::std::string& value) {
  set_has_sparse_210_str();
  if (sparse_210_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_210_str_ = new ::std::string;
  }
  sparse_210_str_->assign(value);
}
inline void Database_NoBench::set_sparse_210_str(const char* value) {
  set_has_sparse_210_str();
  if (sparse_210_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_210_str_ = new ::std::string;
  }
  sparse_210_str_->assign(value);
}
inline void Database_NoBench::set_sparse_210_str(const char* value, size_t size) {
  set_has_sparse_210_str();
  if (sparse_210_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_210_str_ = new ::std::string;
  }
  sparse_210_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_210_str() {
  set_has_sparse_210_str();
  if (sparse_210_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_210_str_ = new ::std::string;
  }
  return sparse_210_str_;
}
inline ::std::string* Database_NoBench::release_sparse_210_str() {
  clear_has_sparse_210_str();
  if (sparse_210_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_210_str_;
    sparse_210_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_210_str(::std::string* sparse_210_str) {
  if (sparse_210_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_210_str_;
  }
  if (sparse_210_str) {
    set_has_sparse_210_str();
    sparse_210_str_ = sparse_210_str;
  } else {
    clear_has_sparse_210_str();
    sparse_210_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_211_str = 223;
inline bool Database_NoBench::has_sparse_211_str() const {
  return (_has_bits_[7] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_211_str() {
  _has_bits_[7] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_211_str() {
  _has_bits_[7] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_211_str() {
  if (sparse_211_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_211_str_->clear();
  }
  clear_has_sparse_211_str();
}
inline const ::std::string& Database_NoBench::sparse_211_str() const {
  return *sparse_211_str_;
}
inline void Database_NoBench::set_sparse_211_str(const ::std::string& value) {
  set_has_sparse_211_str();
  if (sparse_211_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_211_str_ = new ::std::string;
  }
  sparse_211_str_->assign(value);
}
inline void Database_NoBench::set_sparse_211_str(const char* value) {
  set_has_sparse_211_str();
  if (sparse_211_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_211_str_ = new ::std::string;
  }
  sparse_211_str_->assign(value);
}
inline void Database_NoBench::set_sparse_211_str(const char* value, size_t size) {
  set_has_sparse_211_str();
  if (sparse_211_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_211_str_ = new ::std::string;
  }
  sparse_211_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_211_str() {
  set_has_sparse_211_str();
  if (sparse_211_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_211_str_ = new ::std::string;
  }
  return sparse_211_str_;
}
inline ::std::string* Database_NoBench::release_sparse_211_str() {
  clear_has_sparse_211_str();
  if (sparse_211_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_211_str_;
    sparse_211_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_211_str(::std::string* sparse_211_str) {
  if (sparse_211_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_211_str_;
  }
  if (sparse_211_str) {
    set_has_sparse_211_str();
    sparse_211_str_ = sparse_211_str;
  } else {
    clear_has_sparse_211_str();
    sparse_211_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_212_str = 224;
inline bool Database_NoBench::has_sparse_212_str() const {
  return (_has_bits_[7] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_212_str() {
  _has_bits_[7] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_212_str() {
  _has_bits_[7] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_212_str() {
  if (sparse_212_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_212_str_->clear();
  }
  clear_has_sparse_212_str();
}
inline const ::std::string& Database_NoBench::sparse_212_str() const {
  return *sparse_212_str_;
}
inline void Database_NoBench::set_sparse_212_str(const ::std::string& value) {
  set_has_sparse_212_str();
  if (sparse_212_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_212_str_ = new ::std::string;
  }
  sparse_212_str_->assign(value);
}
inline void Database_NoBench::set_sparse_212_str(const char* value) {
  set_has_sparse_212_str();
  if (sparse_212_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_212_str_ = new ::std::string;
  }
  sparse_212_str_->assign(value);
}
inline void Database_NoBench::set_sparse_212_str(const char* value, size_t size) {
  set_has_sparse_212_str();
  if (sparse_212_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_212_str_ = new ::std::string;
  }
  sparse_212_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_212_str() {
  set_has_sparse_212_str();
  if (sparse_212_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_212_str_ = new ::std::string;
  }
  return sparse_212_str_;
}
inline ::std::string* Database_NoBench::release_sparse_212_str() {
  clear_has_sparse_212_str();
  if (sparse_212_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_212_str_;
    sparse_212_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_212_str(::std::string* sparse_212_str) {
  if (sparse_212_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_212_str_;
  }
  if (sparse_212_str) {
    set_has_sparse_212_str();
    sparse_212_str_ = sparse_212_str;
  } else {
    clear_has_sparse_212_str();
    sparse_212_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_213_str = 225;
inline bool Database_NoBench::has_sparse_213_str() const {
  return (_has_bits_[7] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_213_str() {
  _has_bits_[7] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_213_str() {
  _has_bits_[7] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_213_str() {
  if (sparse_213_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_213_str_->clear();
  }
  clear_has_sparse_213_str();
}
inline const ::std::string& Database_NoBench::sparse_213_str() const {
  return *sparse_213_str_;
}
inline void Database_NoBench::set_sparse_213_str(const ::std::string& value) {
  set_has_sparse_213_str();
  if (sparse_213_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_213_str_ = new ::std::string;
  }
  sparse_213_str_->assign(value);
}
inline void Database_NoBench::set_sparse_213_str(const char* value) {
  set_has_sparse_213_str();
  if (sparse_213_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_213_str_ = new ::std::string;
  }
  sparse_213_str_->assign(value);
}
inline void Database_NoBench::set_sparse_213_str(const char* value, size_t size) {
  set_has_sparse_213_str();
  if (sparse_213_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_213_str_ = new ::std::string;
  }
  sparse_213_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_213_str() {
  set_has_sparse_213_str();
  if (sparse_213_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_213_str_ = new ::std::string;
  }
  return sparse_213_str_;
}
inline ::std::string* Database_NoBench::release_sparse_213_str() {
  clear_has_sparse_213_str();
  if (sparse_213_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_213_str_;
    sparse_213_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_213_str(::std::string* sparse_213_str) {
  if (sparse_213_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_213_str_;
  }
  if (sparse_213_str) {
    set_has_sparse_213_str();
    sparse_213_str_ = sparse_213_str;
  } else {
    clear_has_sparse_213_str();
    sparse_213_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_214_str = 226;
inline bool Database_NoBench::has_sparse_214_str() const {
  return (_has_bits_[7] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_214_str() {
  _has_bits_[7] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_214_str() {
  _has_bits_[7] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_214_str() {
  if (sparse_214_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_214_str_->clear();
  }
  clear_has_sparse_214_str();
}
inline const ::std::string& Database_NoBench::sparse_214_str() const {
  return *sparse_214_str_;
}
inline void Database_NoBench::set_sparse_214_str(const ::std::string& value) {
  set_has_sparse_214_str();
  if (sparse_214_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_214_str_ = new ::std::string;
  }
  sparse_214_str_->assign(value);
}
inline void Database_NoBench::set_sparse_214_str(const char* value) {
  set_has_sparse_214_str();
  if (sparse_214_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_214_str_ = new ::std::string;
  }
  sparse_214_str_->assign(value);
}
inline void Database_NoBench::set_sparse_214_str(const char* value, size_t size) {
  set_has_sparse_214_str();
  if (sparse_214_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_214_str_ = new ::std::string;
  }
  sparse_214_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_214_str() {
  set_has_sparse_214_str();
  if (sparse_214_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_214_str_ = new ::std::string;
  }
  return sparse_214_str_;
}
inline ::std::string* Database_NoBench::release_sparse_214_str() {
  clear_has_sparse_214_str();
  if (sparse_214_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_214_str_;
    sparse_214_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_214_str(::std::string* sparse_214_str) {
  if (sparse_214_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_214_str_;
  }
  if (sparse_214_str) {
    set_has_sparse_214_str();
    sparse_214_str_ = sparse_214_str;
  } else {
    clear_has_sparse_214_str();
    sparse_214_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_215_str = 227;
inline bool Database_NoBench::has_sparse_215_str() const {
  return (_has_bits_[7] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_215_str() {
  _has_bits_[7] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_215_str() {
  _has_bits_[7] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_215_str() {
  if (sparse_215_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_215_str_->clear();
  }
  clear_has_sparse_215_str();
}
inline const ::std::string& Database_NoBench::sparse_215_str() const {
  return *sparse_215_str_;
}
inline void Database_NoBench::set_sparse_215_str(const ::std::string& value) {
  set_has_sparse_215_str();
  if (sparse_215_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_215_str_ = new ::std::string;
  }
  sparse_215_str_->assign(value);
}
inline void Database_NoBench::set_sparse_215_str(const char* value) {
  set_has_sparse_215_str();
  if (sparse_215_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_215_str_ = new ::std::string;
  }
  sparse_215_str_->assign(value);
}
inline void Database_NoBench::set_sparse_215_str(const char* value, size_t size) {
  set_has_sparse_215_str();
  if (sparse_215_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_215_str_ = new ::std::string;
  }
  sparse_215_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_215_str() {
  set_has_sparse_215_str();
  if (sparse_215_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_215_str_ = new ::std::string;
  }
  return sparse_215_str_;
}
inline ::std::string* Database_NoBench::release_sparse_215_str() {
  clear_has_sparse_215_str();
  if (sparse_215_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_215_str_;
    sparse_215_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_215_str(::std::string* sparse_215_str) {
  if (sparse_215_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_215_str_;
  }
  if (sparse_215_str) {
    set_has_sparse_215_str();
    sparse_215_str_ = sparse_215_str;
  } else {
    clear_has_sparse_215_str();
    sparse_215_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_216_str = 228;
inline bool Database_NoBench::has_sparse_216_str() const {
  return (_has_bits_[7] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_216_str() {
  _has_bits_[7] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_216_str() {
  _has_bits_[7] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_216_str() {
  if (sparse_216_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_216_str_->clear();
  }
  clear_has_sparse_216_str();
}
inline const ::std::string& Database_NoBench::sparse_216_str() const {
  return *sparse_216_str_;
}
inline void Database_NoBench::set_sparse_216_str(const ::std::string& value) {
  set_has_sparse_216_str();
  if (sparse_216_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_216_str_ = new ::std::string;
  }
  sparse_216_str_->assign(value);
}
inline void Database_NoBench::set_sparse_216_str(const char* value) {
  set_has_sparse_216_str();
  if (sparse_216_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_216_str_ = new ::std::string;
  }
  sparse_216_str_->assign(value);
}
inline void Database_NoBench::set_sparse_216_str(const char* value, size_t size) {
  set_has_sparse_216_str();
  if (sparse_216_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_216_str_ = new ::std::string;
  }
  sparse_216_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_216_str() {
  set_has_sparse_216_str();
  if (sparse_216_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_216_str_ = new ::std::string;
  }
  return sparse_216_str_;
}
inline ::std::string* Database_NoBench::release_sparse_216_str() {
  clear_has_sparse_216_str();
  if (sparse_216_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_216_str_;
    sparse_216_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_216_str(::std::string* sparse_216_str) {
  if (sparse_216_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_216_str_;
  }
  if (sparse_216_str) {
    set_has_sparse_216_str();
    sparse_216_str_ = sparse_216_str;
  } else {
    clear_has_sparse_216_str();
    sparse_216_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_217_str = 229;
inline bool Database_NoBench::has_sparse_217_str() const {
  return (_has_bits_[7] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_217_str() {
  _has_bits_[7] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_217_str() {
  _has_bits_[7] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_217_str() {
  if (sparse_217_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_217_str_->clear();
  }
  clear_has_sparse_217_str();
}
inline const ::std::string& Database_NoBench::sparse_217_str() const {
  return *sparse_217_str_;
}
inline void Database_NoBench::set_sparse_217_str(const ::std::string& value) {
  set_has_sparse_217_str();
  if (sparse_217_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_217_str_ = new ::std::string;
  }
  sparse_217_str_->assign(value);
}
inline void Database_NoBench::set_sparse_217_str(const char* value) {
  set_has_sparse_217_str();
  if (sparse_217_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_217_str_ = new ::std::string;
  }
  sparse_217_str_->assign(value);
}
inline void Database_NoBench::set_sparse_217_str(const char* value, size_t size) {
  set_has_sparse_217_str();
  if (sparse_217_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_217_str_ = new ::std::string;
  }
  sparse_217_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_217_str() {
  set_has_sparse_217_str();
  if (sparse_217_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_217_str_ = new ::std::string;
  }
  return sparse_217_str_;
}
inline ::std::string* Database_NoBench::release_sparse_217_str() {
  clear_has_sparse_217_str();
  if (sparse_217_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_217_str_;
    sparse_217_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_217_str(::std::string* sparse_217_str) {
  if (sparse_217_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_217_str_;
  }
  if (sparse_217_str) {
    set_has_sparse_217_str();
    sparse_217_str_ = sparse_217_str;
  } else {
    clear_has_sparse_217_str();
    sparse_217_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_218_str = 230;
inline bool Database_NoBench::has_sparse_218_str() const {
  return (_has_bits_[7] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_218_str() {
  _has_bits_[7] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_218_str() {
  _has_bits_[7] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_218_str() {
  if (sparse_218_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_218_str_->clear();
  }
  clear_has_sparse_218_str();
}
inline const ::std::string& Database_NoBench::sparse_218_str() const {
  return *sparse_218_str_;
}
inline void Database_NoBench::set_sparse_218_str(const ::std::string& value) {
  set_has_sparse_218_str();
  if (sparse_218_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_218_str_ = new ::std::string;
  }
  sparse_218_str_->assign(value);
}
inline void Database_NoBench::set_sparse_218_str(const char* value) {
  set_has_sparse_218_str();
  if (sparse_218_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_218_str_ = new ::std::string;
  }
  sparse_218_str_->assign(value);
}
inline void Database_NoBench::set_sparse_218_str(const char* value, size_t size) {
  set_has_sparse_218_str();
  if (sparse_218_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_218_str_ = new ::std::string;
  }
  sparse_218_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_218_str() {
  set_has_sparse_218_str();
  if (sparse_218_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_218_str_ = new ::std::string;
  }
  return sparse_218_str_;
}
inline ::std::string* Database_NoBench::release_sparse_218_str() {
  clear_has_sparse_218_str();
  if (sparse_218_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_218_str_;
    sparse_218_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_218_str(::std::string* sparse_218_str) {
  if (sparse_218_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_218_str_;
  }
  if (sparse_218_str) {
    set_has_sparse_218_str();
    sparse_218_str_ = sparse_218_str;
  } else {
    clear_has_sparse_218_str();
    sparse_218_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_219_str = 231;
inline bool Database_NoBench::has_sparse_219_str() const {
  return (_has_bits_[7] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_219_str() {
  _has_bits_[7] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_219_str() {
  _has_bits_[7] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_219_str() {
  if (sparse_219_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_219_str_->clear();
  }
  clear_has_sparse_219_str();
}
inline const ::std::string& Database_NoBench::sparse_219_str() const {
  return *sparse_219_str_;
}
inline void Database_NoBench::set_sparse_219_str(const ::std::string& value) {
  set_has_sparse_219_str();
  if (sparse_219_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_219_str_ = new ::std::string;
  }
  sparse_219_str_->assign(value);
}
inline void Database_NoBench::set_sparse_219_str(const char* value) {
  set_has_sparse_219_str();
  if (sparse_219_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_219_str_ = new ::std::string;
  }
  sparse_219_str_->assign(value);
}
inline void Database_NoBench::set_sparse_219_str(const char* value, size_t size) {
  set_has_sparse_219_str();
  if (sparse_219_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_219_str_ = new ::std::string;
  }
  sparse_219_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_219_str() {
  set_has_sparse_219_str();
  if (sparse_219_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_219_str_ = new ::std::string;
  }
  return sparse_219_str_;
}
inline ::std::string* Database_NoBench::release_sparse_219_str() {
  clear_has_sparse_219_str();
  if (sparse_219_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_219_str_;
    sparse_219_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_219_str(::std::string* sparse_219_str) {
  if (sparse_219_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_219_str_;
  }
  if (sparse_219_str) {
    set_has_sparse_219_str();
    sparse_219_str_ = sparse_219_str;
  } else {
    clear_has_sparse_219_str();
    sparse_219_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_220_str = 232;
inline bool Database_NoBench::has_sparse_220_str() const {
  return (_has_bits_[7] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_220_str() {
  _has_bits_[7] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_220_str() {
  _has_bits_[7] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_220_str() {
  if (sparse_220_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_220_str_->clear();
  }
  clear_has_sparse_220_str();
}
inline const ::std::string& Database_NoBench::sparse_220_str() const {
  return *sparse_220_str_;
}
inline void Database_NoBench::set_sparse_220_str(const ::std::string& value) {
  set_has_sparse_220_str();
  if (sparse_220_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_220_str_ = new ::std::string;
  }
  sparse_220_str_->assign(value);
}
inline void Database_NoBench::set_sparse_220_str(const char* value) {
  set_has_sparse_220_str();
  if (sparse_220_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_220_str_ = new ::std::string;
  }
  sparse_220_str_->assign(value);
}
inline void Database_NoBench::set_sparse_220_str(const char* value, size_t size) {
  set_has_sparse_220_str();
  if (sparse_220_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_220_str_ = new ::std::string;
  }
  sparse_220_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_220_str() {
  set_has_sparse_220_str();
  if (sparse_220_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_220_str_ = new ::std::string;
  }
  return sparse_220_str_;
}
inline ::std::string* Database_NoBench::release_sparse_220_str() {
  clear_has_sparse_220_str();
  if (sparse_220_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_220_str_;
    sparse_220_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_220_str(::std::string* sparse_220_str) {
  if (sparse_220_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_220_str_;
  }
  if (sparse_220_str) {
    set_has_sparse_220_str();
    sparse_220_str_ = sparse_220_str;
  } else {
    clear_has_sparse_220_str();
    sparse_220_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_221_str = 233;
inline bool Database_NoBench::has_sparse_221_str() const {
  return (_has_bits_[7] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_221_str() {
  _has_bits_[7] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_221_str() {
  _has_bits_[7] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_221_str() {
  if (sparse_221_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_221_str_->clear();
  }
  clear_has_sparse_221_str();
}
inline const ::std::string& Database_NoBench::sparse_221_str() const {
  return *sparse_221_str_;
}
inline void Database_NoBench::set_sparse_221_str(const ::std::string& value) {
  set_has_sparse_221_str();
  if (sparse_221_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_221_str_ = new ::std::string;
  }
  sparse_221_str_->assign(value);
}
inline void Database_NoBench::set_sparse_221_str(const char* value) {
  set_has_sparse_221_str();
  if (sparse_221_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_221_str_ = new ::std::string;
  }
  sparse_221_str_->assign(value);
}
inline void Database_NoBench::set_sparse_221_str(const char* value, size_t size) {
  set_has_sparse_221_str();
  if (sparse_221_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_221_str_ = new ::std::string;
  }
  sparse_221_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_221_str() {
  set_has_sparse_221_str();
  if (sparse_221_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_221_str_ = new ::std::string;
  }
  return sparse_221_str_;
}
inline ::std::string* Database_NoBench::release_sparse_221_str() {
  clear_has_sparse_221_str();
  if (sparse_221_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_221_str_;
    sparse_221_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_221_str(::std::string* sparse_221_str) {
  if (sparse_221_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_221_str_;
  }
  if (sparse_221_str) {
    set_has_sparse_221_str();
    sparse_221_str_ = sparse_221_str;
  } else {
    clear_has_sparse_221_str();
    sparse_221_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_222_str = 234;
inline bool Database_NoBench::has_sparse_222_str() const {
  return (_has_bits_[7] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_222_str() {
  _has_bits_[7] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_222_str() {
  _has_bits_[7] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_222_str() {
  if (sparse_222_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_222_str_->clear();
  }
  clear_has_sparse_222_str();
}
inline const ::std::string& Database_NoBench::sparse_222_str() const {
  return *sparse_222_str_;
}
inline void Database_NoBench::set_sparse_222_str(const ::std::string& value) {
  set_has_sparse_222_str();
  if (sparse_222_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_222_str_ = new ::std::string;
  }
  sparse_222_str_->assign(value);
}
inline void Database_NoBench::set_sparse_222_str(const char* value) {
  set_has_sparse_222_str();
  if (sparse_222_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_222_str_ = new ::std::string;
  }
  sparse_222_str_->assign(value);
}
inline void Database_NoBench::set_sparse_222_str(const char* value, size_t size) {
  set_has_sparse_222_str();
  if (sparse_222_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_222_str_ = new ::std::string;
  }
  sparse_222_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_222_str() {
  set_has_sparse_222_str();
  if (sparse_222_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_222_str_ = new ::std::string;
  }
  return sparse_222_str_;
}
inline ::std::string* Database_NoBench::release_sparse_222_str() {
  clear_has_sparse_222_str();
  if (sparse_222_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_222_str_;
    sparse_222_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_222_str(::std::string* sparse_222_str) {
  if (sparse_222_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_222_str_;
  }
  if (sparse_222_str) {
    set_has_sparse_222_str();
    sparse_222_str_ = sparse_222_str;
  } else {
    clear_has_sparse_222_str();
    sparse_222_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_223_str = 235;
inline bool Database_NoBench::has_sparse_223_str() const {
  return (_has_bits_[7] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_223_str() {
  _has_bits_[7] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_223_str() {
  _has_bits_[7] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_223_str() {
  if (sparse_223_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_223_str_->clear();
  }
  clear_has_sparse_223_str();
}
inline const ::std::string& Database_NoBench::sparse_223_str() const {
  return *sparse_223_str_;
}
inline void Database_NoBench::set_sparse_223_str(const ::std::string& value) {
  set_has_sparse_223_str();
  if (sparse_223_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_223_str_ = new ::std::string;
  }
  sparse_223_str_->assign(value);
}
inline void Database_NoBench::set_sparse_223_str(const char* value) {
  set_has_sparse_223_str();
  if (sparse_223_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_223_str_ = new ::std::string;
  }
  sparse_223_str_->assign(value);
}
inline void Database_NoBench::set_sparse_223_str(const char* value, size_t size) {
  set_has_sparse_223_str();
  if (sparse_223_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_223_str_ = new ::std::string;
  }
  sparse_223_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_223_str() {
  set_has_sparse_223_str();
  if (sparse_223_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_223_str_ = new ::std::string;
  }
  return sparse_223_str_;
}
inline ::std::string* Database_NoBench::release_sparse_223_str() {
  clear_has_sparse_223_str();
  if (sparse_223_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_223_str_;
    sparse_223_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_223_str(::std::string* sparse_223_str) {
  if (sparse_223_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_223_str_;
  }
  if (sparse_223_str) {
    set_has_sparse_223_str();
    sparse_223_str_ = sparse_223_str;
  } else {
    clear_has_sparse_223_str();
    sparse_223_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_224_str = 236;
inline bool Database_NoBench::has_sparse_224_str() const {
  return (_has_bits_[7] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_224_str() {
  _has_bits_[7] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_224_str() {
  _has_bits_[7] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_224_str() {
  if (sparse_224_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_224_str_->clear();
  }
  clear_has_sparse_224_str();
}
inline const ::std::string& Database_NoBench::sparse_224_str() const {
  return *sparse_224_str_;
}
inline void Database_NoBench::set_sparse_224_str(const ::std::string& value) {
  set_has_sparse_224_str();
  if (sparse_224_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_224_str_ = new ::std::string;
  }
  sparse_224_str_->assign(value);
}
inline void Database_NoBench::set_sparse_224_str(const char* value) {
  set_has_sparse_224_str();
  if (sparse_224_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_224_str_ = new ::std::string;
  }
  sparse_224_str_->assign(value);
}
inline void Database_NoBench::set_sparse_224_str(const char* value, size_t size) {
  set_has_sparse_224_str();
  if (sparse_224_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_224_str_ = new ::std::string;
  }
  sparse_224_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_224_str() {
  set_has_sparse_224_str();
  if (sparse_224_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_224_str_ = new ::std::string;
  }
  return sparse_224_str_;
}
inline ::std::string* Database_NoBench::release_sparse_224_str() {
  clear_has_sparse_224_str();
  if (sparse_224_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_224_str_;
    sparse_224_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_224_str(::std::string* sparse_224_str) {
  if (sparse_224_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_224_str_;
  }
  if (sparse_224_str) {
    set_has_sparse_224_str();
    sparse_224_str_ = sparse_224_str;
  } else {
    clear_has_sparse_224_str();
    sparse_224_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_225_str = 237;
inline bool Database_NoBench::has_sparse_225_str() const {
  return (_has_bits_[7] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_225_str() {
  _has_bits_[7] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_225_str() {
  _has_bits_[7] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_225_str() {
  if (sparse_225_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_225_str_->clear();
  }
  clear_has_sparse_225_str();
}
inline const ::std::string& Database_NoBench::sparse_225_str() const {
  return *sparse_225_str_;
}
inline void Database_NoBench::set_sparse_225_str(const ::std::string& value) {
  set_has_sparse_225_str();
  if (sparse_225_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_225_str_ = new ::std::string;
  }
  sparse_225_str_->assign(value);
}
inline void Database_NoBench::set_sparse_225_str(const char* value) {
  set_has_sparse_225_str();
  if (sparse_225_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_225_str_ = new ::std::string;
  }
  sparse_225_str_->assign(value);
}
inline void Database_NoBench::set_sparse_225_str(const char* value, size_t size) {
  set_has_sparse_225_str();
  if (sparse_225_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_225_str_ = new ::std::string;
  }
  sparse_225_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_225_str() {
  set_has_sparse_225_str();
  if (sparse_225_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_225_str_ = new ::std::string;
  }
  return sparse_225_str_;
}
inline ::std::string* Database_NoBench::release_sparse_225_str() {
  clear_has_sparse_225_str();
  if (sparse_225_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_225_str_;
    sparse_225_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_225_str(::std::string* sparse_225_str) {
  if (sparse_225_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_225_str_;
  }
  if (sparse_225_str) {
    set_has_sparse_225_str();
    sparse_225_str_ = sparse_225_str;
  } else {
    clear_has_sparse_225_str();
    sparse_225_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_226_str = 238;
inline bool Database_NoBench::has_sparse_226_str() const {
  return (_has_bits_[7] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_226_str() {
  _has_bits_[7] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_226_str() {
  _has_bits_[7] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_226_str() {
  if (sparse_226_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_226_str_->clear();
  }
  clear_has_sparse_226_str();
}
inline const ::std::string& Database_NoBench::sparse_226_str() const {
  return *sparse_226_str_;
}
inline void Database_NoBench::set_sparse_226_str(const ::std::string& value) {
  set_has_sparse_226_str();
  if (sparse_226_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_226_str_ = new ::std::string;
  }
  sparse_226_str_->assign(value);
}
inline void Database_NoBench::set_sparse_226_str(const char* value) {
  set_has_sparse_226_str();
  if (sparse_226_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_226_str_ = new ::std::string;
  }
  sparse_226_str_->assign(value);
}
inline void Database_NoBench::set_sparse_226_str(const char* value, size_t size) {
  set_has_sparse_226_str();
  if (sparse_226_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_226_str_ = new ::std::string;
  }
  sparse_226_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_226_str() {
  set_has_sparse_226_str();
  if (sparse_226_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_226_str_ = new ::std::string;
  }
  return sparse_226_str_;
}
inline ::std::string* Database_NoBench::release_sparse_226_str() {
  clear_has_sparse_226_str();
  if (sparse_226_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_226_str_;
    sparse_226_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_226_str(::std::string* sparse_226_str) {
  if (sparse_226_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_226_str_;
  }
  if (sparse_226_str) {
    set_has_sparse_226_str();
    sparse_226_str_ = sparse_226_str;
  } else {
    clear_has_sparse_226_str();
    sparse_226_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_227_str = 239;
inline bool Database_NoBench::has_sparse_227_str() const {
  return (_has_bits_[7] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_227_str() {
  _has_bits_[7] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_227_str() {
  _has_bits_[7] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_227_str() {
  if (sparse_227_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_227_str_->clear();
  }
  clear_has_sparse_227_str();
}
inline const ::std::string& Database_NoBench::sparse_227_str() const {
  return *sparse_227_str_;
}
inline void Database_NoBench::set_sparse_227_str(const ::std::string& value) {
  set_has_sparse_227_str();
  if (sparse_227_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_227_str_ = new ::std::string;
  }
  sparse_227_str_->assign(value);
}
inline void Database_NoBench::set_sparse_227_str(const char* value) {
  set_has_sparse_227_str();
  if (sparse_227_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_227_str_ = new ::std::string;
  }
  sparse_227_str_->assign(value);
}
inline void Database_NoBench::set_sparse_227_str(const char* value, size_t size) {
  set_has_sparse_227_str();
  if (sparse_227_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_227_str_ = new ::std::string;
  }
  sparse_227_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_227_str() {
  set_has_sparse_227_str();
  if (sparse_227_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_227_str_ = new ::std::string;
  }
  return sparse_227_str_;
}
inline ::std::string* Database_NoBench::release_sparse_227_str() {
  clear_has_sparse_227_str();
  if (sparse_227_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_227_str_;
    sparse_227_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_227_str(::std::string* sparse_227_str) {
  if (sparse_227_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_227_str_;
  }
  if (sparse_227_str) {
    set_has_sparse_227_str();
    sparse_227_str_ = sparse_227_str;
  } else {
    clear_has_sparse_227_str();
    sparse_227_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_228_str = 240;
inline bool Database_NoBench::has_sparse_228_str() const {
  return (_has_bits_[7] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_228_str() {
  _has_bits_[7] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_228_str() {
  _has_bits_[7] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_228_str() {
  if (sparse_228_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_228_str_->clear();
  }
  clear_has_sparse_228_str();
}
inline const ::std::string& Database_NoBench::sparse_228_str() const {
  return *sparse_228_str_;
}
inline void Database_NoBench::set_sparse_228_str(const ::std::string& value) {
  set_has_sparse_228_str();
  if (sparse_228_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_228_str_ = new ::std::string;
  }
  sparse_228_str_->assign(value);
}
inline void Database_NoBench::set_sparse_228_str(const char* value) {
  set_has_sparse_228_str();
  if (sparse_228_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_228_str_ = new ::std::string;
  }
  sparse_228_str_->assign(value);
}
inline void Database_NoBench::set_sparse_228_str(const char* value, size_t size) {
  set_has_sparse_228_str();
  if (sparse_228_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_228_str_ = new ::std::string;
  }
  sparse_228_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_228_str() {
  set_has_sparse_228_str();
  if (sparse_228_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_228_str_ = new ::std::string;
  }
  return sparse_228_str_;
}
inline ::std::string* Database_NoBench::release_sparse_228_str() {
  clear_has_sparse_228_str();
  if (sparse_228_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_228_str_;
    sparse_228_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_228_str(::std::string* sparse_228_str) {
  if (sparse_228_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_228_str_;
  }
  if (sparse_228_str) {
    set_has_sparse_228_str();
    sparse_228_str_ = sparse_228_str;
  } else {
    clear_has_sparse_228_str();
    sparse_228_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_229_str = 241;
inline bool Database_NoBench::has_sparse_229_str() const {
  return (_has_bits_[7] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_229_str() {
  _has_bits_[7] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_229_str() {
  _has_bits_[7] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_229_str() {
  if (sparse_229_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_229_str_->clear();
  }
  clear_has_sparse_229_str();
}
inline const ::std::string& Database_NoBench::sparse_229_str() const {
  return *sparse_229_str_;
}
inline void Database_NoBench::set_sparse_229_str(const ::std::string& value) {
  set_has_sparse_229_str();
  if (sparse_229_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_229_str_ = new ::std::string;
  }
  sparse_229_str_->assign(value);
}
inline void Database_NoBench::set_sparse_229_str(const char* value) {
  set_has_sparse_229_str();
  if (sparse_229_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_229_str_ = new ::std::string;
  }
  sparse_229_str_->assign(value);
}
inline void Database_NoBench::set_sparse_229_str(const char* value, size_t size) {
  set_has_sparse_229_str();
  if (sparse_229_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_229_str_ = new ::std::string;
  }
  sparse_229_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_229_str() {
  set_has_sparse_229_str();
  if (sparse_229_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_229_str_ = new ::std::string;
  }
  return sparse_229_str_;
}
inline ::std::string* Database_NoBench::release_sparse_229_str() {
  clear_has_sparse_229_str();
  if (sparse_229_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_229_str_;
    sparse_229_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_229_str(::std::string* sparse_229_str) {
  if (sparse_229_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_229_str_;
  }
  if (sparse_229_str) {
    set_has_sparse_229_str();
    sparse_229_str_ = sparse_229_str;
  } else {
    clear_has_sparse_229_str();
    sparse_229_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_230_str = 242;
inline bool Database_NoBench::has_sparse_230_str() const {
  return (_has_bits_[7] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_230_str() {
  _has_bits_[7] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_230_str() {
  _has_bits_[7] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_230_str() {
  if (sparse_230_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_230_str_->clear();
  }
  clear_has_sparse_230_str();
}
inline const ::std::string& Database_NoBench::sparse_230_str() const {
  return *sparse_230_str_;
}
inline void Database_NoBench::set_sparse_230_str(const ::std::string& value) {
  set_has_sparse_230_str();
  if (sparse_230_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_230_str_ = new ::std::string;
  }
  sparse_230_str_->assign(value);
}
inline void Database_NoBench::set_sparse_230_str(const char* value) {
  set_has_sparse_230_str();
  if (sparse_230_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_230_str_ = new ::std::string;
  }
  sparse_230_str_->assign(value);
}
inline void Database_NoBench::set_sparse_230_str(const char* value, size_t size) {
  set_has_sparse_230_str();
  if (sparse_230_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_230_str_ = new ::std::string;
  }
  sparse_230_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_230_str() {
  set_has_sparse_230_str();
  if (sparse_230_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_230_str_ = new ::std::string;
  }
  return sparse_230_str_;
}
inline ::std::string* Database_NoBench::release_sparse_230_str() {
  clear_has_sparse_230_str();
  if (sparse_230_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_230_str_;
    sparse_230_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_230_str(::std::string* sparse_230_str) {
  if (sparse_230_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_230_str_;
  }
  if (sparse_230_str) {
    set_has_sparse_230_str();
    sparse_230_str_ = sparse_230_str;
  } else {
    clear_has_sparse_230_str();
    sparse_230_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_231_str = 243;
inline bool Database_NoBench::has_sparse_231_str() const {
  return (_has_bits_[7] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_231_str() {
  _has_bits_[7] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_231_str() {
  _has_bits_[7] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_231_str() {
  if (sparse_231_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_231_str_->clear();
  }
  clear_has_sparse_231_str();
}
inline const ::std::string& Database_NoBench::sparse_231_str() const {
  return *sparse_231_str_;
}
inline void Database_NoBench::set_sparse_231_str(const ::std::string& value) {
  set_has_sparse_231_str();
  if (sparse_231_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_231_str_ = new ::std::string;
  }
  sparse_231_str_->assign(value);
}
inline void Database_NoBench::set_sparse_231_str(const char* value) {
  set_has_sparse_231_str();
  if (sparse_231_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_231_str_ = new ::std::string;
  }
  sparse_231_str_->assign(value);
}
inline void Database_NoBench::set_sparse_231_str(const char* value, size_t size) {
  set_has_sparse_231_str();
  if (sparse_231_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_231_str_ = new ::std::string;
  }
  sparse_231_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_231_str() {
  set_has_sparse_231_str();
  if (sparse_231_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_231_str_ = new ::std::string;
  }
  return sparse_231_str_;
}
inline ::std::string* Database_NoBench::release_sparse_231_str() {
  clear_has_sparse_231_str();
  if (sparse_231_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_231_str_;
    sparse_231_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_231_str(::std::string* sparse_231_str) {
  if (sparse_231_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_231_str_;
  }
  if (sparse_231_str) {
    set_has_sparse_231_str();
    sparse_231_str_ = sparse_231_str;
  } else {
    clear_has_sparse_231_str();
    sparse_231_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_232_str = 244;
inline bool Database_NoBench::has_sparse_232_str() const {
  return (_has_bits_[7] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_232_str() {
  _has_bits_[7] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_232_str() {
  _has_bits_[7] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_232_str() {
  if (sparse_232_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_232_str_->clear();
  }
  clear_has_sparse_232_str();
}
inline const ::std::string& Database_NoBench::sparse_232_str() const {
  return *sparse_232_str_;
}
inline void Database_NoBench::set_sparse_232_str(const ::std::string& value) {
  set_has_sparse_232_str();
  if (sparse_232_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_232_str_ = new ::std::string;
  }
  sparse_232_str_->assign(value);
}
inline void Database_NoBench::set_sparse_232_str(const char* value) {
  set_has_sparse_232_str();
  if (sparse_232_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_232_str_ = new ::std::string;
  }
  sparse_232_str_->assign(value);
}
inline void Database_NoBench::set_sparse_232_str(const char* value, size_t size) {
  set_has_sparse_232_str();
  if (sparse_232_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_232_str_ = new ::std::string;
  }
  sparse_232_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_232_str() {
  set_has_sparse_232_str();
  if (sparse_232_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_232_str_ = new ::std::string;
  }
  return sparse_232_str_;
}
inline ::std::string* Database_NoBench::release_sparse_232_str() {
  clear_has_sparse_232_str();
  if (sparse_232_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_232_str_;
    sparse_232_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_232_str(::std::string* sparse_232_str) {
  if (sparse_232_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_232_str_;
  }
  if (sparse_232_str) {
    set_has_sparse_232_str();
    sparse_232_str_ = sparse_232_str;
  } else {
    clear_has_sparse_232_str();
    sparse_232_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_233_str = 245;
inline bool Database_NoBench::has_sparse_233_str() const {
  return (_has_bits_[7] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_233_str() {
  _has_bits_[7] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_233_str() {
  _has_bits_[7] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_233_str() {
  if (sparse_233_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_233_str_->clear();
  }
  clear_has_sparse_233_str();
}
inline const ::std::string& Database_NoBench::sparse_233_str() const {
  return *sparse_233_str_;
}
inline void Database_NoBench::set_sparse_233_str(const ::std::string& value) {
  set_has_sparse_233_str();
  if (sparse_233_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_233_str_ = new ::std::string;
  }
  sparse_233_str_->assign(value);
}
inline void Database_NoBench::set_sparse_233_str(const char* value) {
  set_has_sparse_233_str();
  if (sparse_233_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_233_str_ = new ::std::string;
  }
  sparse_233_str_->assign(value);
}
inline void Database_NoBench::set_sparse_233_str(const char* value, size_t size) {
  set_has_sparse_233_str();
  if (sparse_233_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_233_str_ = new ::std::string;
  }
  sparse_233_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_233_str() {
  set_has_sparse_233_str();
  if (sparse_233_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_233_str_ = new ::std::string;
  }
  return sparse_233_str_;
}
inline ::std::string* Database_NoBench::release_sparse_233_str() {
  clear_has_sparse_233_str();
  if (sparse_233_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_233_str_;
    sparse_233_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_233_str(::std::string* sparse_233_str) {
  if (sparse_233_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_233_str_;
  }
  if (sparse_233_str) {
    set_has_sparse_233_str();
    sparse_233_str_ = sparse_233_str;
  } else {
    clear_has_sparse_233_str();
    sparse_233_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_234_str = 246;
inline bool Database_NoBench::has_sparse_234_str() const {
  return (_has_bits_[7] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_234_str() {
  _has_bits_[7] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_234_str() {
  _has_bits_[7] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_234_str() {
  if (sparse_234_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_234_str_->clear();
  }
  clear_has_sparse_234_str();
}
inline const ::std::string& Database_NoBench::sparse_234_str() const {
  return *sparse_234_str_;
}
inline void Database_NoBench::set_sparse_234_str(const ::std::string& value) {
  set_has_sparse_234_str();
  if (sparse_234_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_234_str_ = new ::std::string;
  }
  sparse_234_str_->assign(value);
}
inline void Database_NoBench::set_sparse_234_str(const char* value) {
  set_has_sparse_234_str();
  if (sparse_234_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_234_str_ = new ::std::string;
  }
  sparse_234_str_->assign(value);
}
inline void Database_NoBench::set_sparse_234_str(const char* value, size_t size) {
  set_has_sparse_234_str();
  if (sparse_234_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_234_str_ = new ::std::string;
  }
  sparse_234_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_234_str() {
  set_has_sparse_234_str();
  if (sparse_234_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_234_str_ = new ::std::string;
  }
  return sparse_234_str_;
}
inline ::std::string* Database_NoBench::release_sparse_234_str() {
  clear_has_sparse_234_str();
  if (sparse_234_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_234_str_;
    sparse_234_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_234_str(::std::string* sparse_234_str) {
  if (sparse_234_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_234_str_;
  }
  if (sparse_234_str) {
    set_has_sparse_234_str();
    sparse_234_str_ = sparse_234_str;
  } else {
    clear_has_sparse_234_str();
    sparse_234_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_235_str = 247;
inline bool Database_NoBench::has_sparse_235_str() const {
  return (_has_bits_[7] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_235_str() {
  _has_bits_[7] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_235_str() {
  _has_bits_[7] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_235_str() {
  if (sparse_235_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_235_str_->clear();
  }
  clear_has_sparse_235_str();
}
inline const ::std::string& Database_NoBench::sparse_235_str() const {
  return *sparse_235_str_;
}
inline void Database_NoBench::set_sparse_235_str(const ::std::string& value) {
  set_has_sparse_235_str();
  if (sparse_235_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_235_str_ = new ::std::string;
  }
  sparse_235_str_->assign(value);
}
inline void Database_NoBench::set_sparse_235_str(const char* value) {
  set_has_sparse_235_str();
  if (sparse_235_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_235_str_ = new ::std::string;
  }
  sparse_235_str_->assign(value);
}
inline void Database_NoBench::set_sparse_235_str(const char* value, size_t size) {
  set_has_sparse_235_str();
  if (sparse_235_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_235_str_ = new ::std::string;
  }
  sparse_235_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_235_str() {
  set_has_sparse_235_str();
  if (sparse_235_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_235_str_ = new ::std::string;
  }
  return sparse_235_str_;
}
inline ::std::string* Database_NoBench::release_sparse_235_str() {
  clear_has_sparse_235_str();
  if (sparse_235_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_235_str_;
    sparse_235_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_235_str(::std::string* sparse_235_str) {
  if (sparse_235_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_235_str_;
  }
  if (sparse_235_str) {
    set_has_sparse_235_str();
    sparse_235_str_ = sparse_235_str;
  } else {
    clear_has_sparse_235_str();
    sparse_235_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_236_str = 248;
inline bool Database_NoBench::has_sparse_236_str() const {
  return (_has_bits_[7] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_236_str() {
  _has_bits_[7] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_236_str() {
  _has_bits_[7] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_236_str() {
  if (sparse_236_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_236_str_->clear();
  }
  clear_has_sparse_236_str();
}
inline const ::std::string& Database_NoBench::sparse_236_str() const {
  return *sparse_236_str_;
}
inline void Database_NoBench::set_sparse_236_str(const ::std::string& value) {
  set_has_sparse_236_str();
  if (sparse_236_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_236_str_ = new ::std::string;
  }
  sparse_236_str_->assign(value);
}
inline void Database_NoBench::set_sparse_236_str(const char* value) {
  set_has_sparse_236_str();
  if (sparse_236_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_236_str_ = new ::std::string;
  }
  sparse_236_str_->assign(value);
}
inline void Database_NoBench::set_sparse_236_str(const char* value, size_t size) {
  set_has_sparse_236_str();
  if (sparse_236_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_236_str_ = new ::std::string;
  }
  sparse_236_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_236_str() {
  set_has_sparse_236_str();
  if (sparse_236_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_236_str_ = new ::std::string;
  }
  return sparse_236_str_;
}
inline ::std::string* Database_NoBench::release_sparse_236_str() {
  clear_has_sparse_236_str();
  if (sparse_236_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_236_str_;
    sparse_236_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_236_str(::std::string* sparse_236_str) {
  if (sparse_236_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_236_str_;
  }
  if (sparse_236_str) {
    set_has_sparse_236_str();
    sparse_236_str_ = sparse_236_str;
  } else {
    clear_has_sparse_236_str();
    sparse_236_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_237_str = 249;
inline bool Database_NoBench::has_sparse_237_str() const {
  return (_has_bits_[7] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_237_str() {
  _has_bits_[7] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_237_str() {
  _has_bits_[7] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_237_str() {
  if (sparse_237_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_237_str_->clear();
  }
  clear_has_sparse_237_str();
}
inline const ::std::string& Database_NoBench::sparse_237_str() const {
  return *sparse_237_str_;
}
inline void Database_NoBench::set_sparse_237_str(const ::std::string& value) {
  set_has_sparse_237_str();
  if (sparse_237_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_237_str_ = new ::std::string;
  }
  sparse_237_str_->assign(value);
}
inline void Database_NoBench::set_sparse_237_str(const char* value) {
  set_has_sparse_237_str();
  if (sparse_237_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_237_str_ = new ::std::string;
  }
  sparse_237_str_->assign(value);
}
inline void Database_NoBench::set_sparse_237_str(const char* value, size_t size) {
  set_has_sparse_237_str();
  if (sparse_237_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_237_str_ = new ::std::string;
  }
  sparse_237_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_237_str() {
  set_has_sparse_237_str();
  if (sparse_237_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_237_str_ = new ::std::string;
  }
  return sparse_237_str_;
}
inline ::std::string* Database_NoBench::release_sparse_237_str() {
  clear_has_sparse_237_str();
  if (sparse_237_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_237_str_;
    sparse_237_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_237_str(::std::string* sparse_237_str) {
  if (sparse_237_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_237_str_;
  }
  if (sparse_237_str) {
    set_has_sparse_237_str();
    sparse_237_str_ = sparse_237_str;
  } else {
    clear_has_sparse_237_str();
    sparse_237_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_238_str = 250;
inline bool Database_NoBench::has_sparse_238_str() const {
  return (_has_bits_[7] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_238_str() {
  _has_bits_[7] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_238_str() {
  _has_bits_[7] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_238_str() {
  if (sparse_238_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_238_str_->clear();
  }
  clear_has_sparse_238_str();
}
inline const ::std::string& Database_NoBench::sparse_238_str() const {
  return *sparse_238_str_;
}
inline void Database_NoBench::set_sparse_238_str(const ::std::string& value) {
  set_has_sparse_238_str();
  if (sparse_238_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_238_str_ = new ::std::string;
  }
  sparse_238_str_->assign(value);
}
inline void Database_NoBench::set_sparse_238_str(const char* value) {
  set_has_sparse_238_str();
  if (sparse_238_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_238_str_ = new ::std::string;
  }
  sparse_238_str_->assign(value);
}
inline void Database_NoBench::set_sparse_238_str(const char* value, size_t size) {
  set_has_sparse_238_str();
  if (sparse_238_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_238_str_ = new ::std::string;
  }
  sparse_238_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_238_str() {
  set_has_sparse_238_str();
  if (sparse_238_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_238_str_ = new ::std::string;
  }
  return sparse_238_str_;
}
inline ::std::string* Database_NoBench::release_sparse_238_str() {
  clear_has_sparse_238_str();
  if (sparse_238_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_238_str_;
    sparse_238_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_238_str(::std::string* sparse_238_str) {
  if (sparse_238_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_238_str_;
  }
  if (sparse_238_str) {
    set_has_sparse_238_str();
    sparse_238_str_ = sparse_238_str;
  } else {
    clear_has_sparse_238_str();
    sparse_238_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_239_str = 251;
inline bool Database_NoBench::has_sparse_239_str() const {
  return (_has_bits_[7] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_239_str() {
  _has_bits_[7] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_239_str() {
  _has_bits_[7] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_239_str() {
  if (sparse_239_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_239_str_->clear();
  }
  clear_has_sparse_239_str();
}
inline const ::std::string& Database_NoBench::sparse_239_str() const {
  return *sparse_239_str_;
}
inline void Database_NoBench::set_sparse_239_str(const ::std::string& value) {
  set_has_sparse_239_str();
  if (sparse_239_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_239_str_ = new ::std::string;
  }
  sparse_239_str_->assign(value);
}
inline void Database_NoBench::set_sparse_239_str(const char* value) {
  set_has_sparse_239_str();
  if (sparse_239_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_239_str_ = new ::std::string;
  }
  sparse_239_str_->assign(value);
}
inline void Database_NoBench::set_sparse_239_str(const char* value, size_t size) {
  set_has_sparse_239_str();
  if (sparse_239_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_239_str_ = new ::std::string;
  }
  sparse_239_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_239_str() {
  set_has_sparse_239_str();
  if (sparse_239_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_239_str_ = new ::std::string;
  }
  return sparse_239_str_;
}
inline ::std::string* Database_NoBench::release_sparse_239_str() {
  clear_has_sparse_239_str();
  if (sparse_239_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_239_str_;
    sparse_239_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_239_str(::std::string* sparse_239_str) {
  if (sparse_239_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_239_str_;
  }
  if (sparse_239_str) {
    set_has_sparse_239_str();
    sparse_239_str_ = sparse_239_str;
  } else {
    clear_has_sparse_239_str();
    sparse_239_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_240_str = 252;
inline bool Database_NoBench::has_sparse_240_str() const {
  return (_has_bits_[7] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_240_str() {
  _has_bits_[7] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_240_str() {
  _has_bits_[7] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_240_str() {
  if (sparse_240_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_240_str_->clear();
  }
  clear_has_sparse_240_str();
}
inline const ::std::string& Database_NoBench::sparse_240_str() const {
  return *sparse_240_str_;
}
inline void Database_NoBench::set_sparse_240_str(const ::std::string& value) {
  set_has_sparse_240_str();
  if (sparse_240_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_240_str_ = new ::std::string;
  }
  sparse_240_str_->assign(value);
}
inline void Database_NoBench::set_sparse_240_str(const char* value) {
  set_has_sparse_240_str();
  if (sparse_240_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_240_str_ = new ::std::string;
  }
  sparse_240_str_->assign(value);
}
inline void Database_NoBench::set_sparse_240_str(const char* value, size_t size) {
  set_has_sparse_240_str();
  if (sparse_240_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_240_str_ = new ::std::string;
  }
  sparse_240_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_240_str() {
  set_has_sparse_240_str();
  if (sparse_240_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_240_str_ = new ::std::string;
  }
  return sparse_240_str_;
}
inline ::std::string* Database_NoBench::release_sparse_240_str() {
  clear_has_sparse_240_str();
  if (sparse_240_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_240_str_;
    sparse_240_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_240_str(::std::string* sparse_240_str) {
  if (sparse_240_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_240_str_;
  }
  if (sparse_240_str) {
    set_has_sparse_240_str();
    sparse_240_str_ = sparse_240_str;
  } else {
    clear_has_sparse_240_str();
    sparse_240_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_241_str = 253;
inline bool Database_NoBench::has_sparse_241_str() const {
  return (_has_bits_[7] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_241_str() {
  _has_bits_[7] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_241_str() {
  _has_bits_[7] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_241_str() {
  if (sparse_241_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_241_str_->clear();
  }
  clear_has_sparse_241_str();
}
inline const ::std::string& Database_NoBench::sparse_241_str() const {
  return *sparse_241_str_;
}
inline void Database_NoBench::set_sparse_241_str(const ::std::string& value) {
  set_has_sparse_241_str();
  if (sparse_241_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_241_str_ = new ::std::string;
  }
  sparse_241_str_->assign(value);
}
inline void Database_NoBench::set_sparse_241_str(const char* value) {
  set_has_sparse_241_str();
  if (sparse_241_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_241_str_ = new ::std::string;
  }
  sparse_241_str_->assign(value);
}
inline void Database_NoBench::set_sparse_241_str(const char* value, size_t size) {
  set_has_sparse_241_str();
  if (sparse_241_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_241_str_ = new ::std::string;
  }
  sparse_241_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_241_str() {
  set_has_sparse_241_str();
  if (sparse_241_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_241_str_ = new ::std::string;
  }
  return sparse_241_str_;
}
inline ::std::string* Database_NoBench::release_sparse_241_str() {
  clear_has_sparse_241_str();
  if (sparse_241_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_241_str_;
    sparse_241_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_241_str(::std::string* sparse_241_str) {
  if (sparse_241_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_241_str_;
  }
  if (sparse_241_str) {
    set_has_sparse_241_str();
    sparse_241_str_ = sparse_241_str;
  } else {
    clear_has_sparse_241_str();
    sparse_241_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_242_str = 254;
inline bool Database_NoBench::has_sparse_242_str() const {
  return (_has_bits_[7] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_242_str() {
  _has_bits_[7] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_242_str() {
  _has_bits_[7] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_242_str() {
  if (sparse_242_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_242_str_->clear();
  }
  clear_has_sparse_242_str();
}
inline const ::std::string& Database_NoBench::sparse_242_str() const {
  return *sparse_242_str_;
}
inline void Database_NoBench::set_sparse_242_str(const ::std::string& value) {
  set_has_sparse_242_str();
  if (sparse_242_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_242_str_ = new ::std::string;
  }
  sparse_242_str_->assign(value);
}
inline void Database_NoBench::set_sparse_242_str(const char* value) {
  set_has_sparse_242_str();
  if (sparse_242_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_242_str_ = new ::std::string;
  }
  sparse_242_str_->assign(value);
}
inline void Database_NoBench::set_sparse_242_str(const char* value, size_t size) {
  set_has_sparse_242_str();
  if (sparse_242_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_242_str_ = new ::std::string;
  }
  sparse_242_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_242_str() {
  set_has_sparse_242_str();
  if (sparse_242_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_242_str_ = new ::std::string;
  }
  return sparse_242_str_;
}
inline ::std::string* Database_NoBench::release_sparse_242_str() {
  clear_has_sparse_242_str();
  if (sparse_242_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_242_str_;
    sparse_242_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_242_str(::std::string* sparse_242_str) {
  if (sparse_242_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_242_str_;
  }
  if (sparse_242_str) {
    set_has_sparse_242_str();
    sparse_242_str_ = sparse_242_str;
  } else {
    clear_has_sparse_242_str();
    sparse_242_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_243_str = 255;
inline bool Database_NoBench::has_sparse_243_str() const {
  return (_has_bits_[8] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_243_str() {
  _has_bits_[8] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_243_str() {
  _has_bits_[8] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_243_str() {
  if (sparse_243_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_243_str_->clear();
  }
  clear_has_sparse_243_str();
}
inline const ::std::string& Database_NoBench::sparse_243_str() const {
  return *sparse_243_str_;
}
inline void Database_NoBench::set_sparse_243_str(const ::std::string& value) {
  set_has_sparse_243_str();
  if (sparse_243_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_243_str_ = new ::std::string;
  }
  sparse_243_str_->assign(value);
}
inline void Database_NoBench::set_sparse_243_str(const char* value) {
  set_has_sparse_243_str();
  if (sparse_243_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_243_str_ = new ::std::string;
  }
  sparse_243_str_->assign(value);
}
inline void Database_NoBench::set_sparse_243_str(const char* value, size_t size) {
  set_has_sparse_243_str();
  if (sparse_243_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_243_str_ = new ::std::string;
  }
  sparse_243_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_243_str() {
  set_has_sparse_243_str();
  if (sparse_243_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_243_str_ = new ::std::string;
  }
  return sparse_243_str_;
}
inline ::std::string* Database_NoBench::release_sparse_243_str() {
  clear_has_sparse_243_str();
  if (sparse_243_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_243_str_;
    sparse_243_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_243_str(::std::string* sparse_243_str) {
  if (sparse_243_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_243_str_;
  }
  if (sparse_243_str) {
    set_has_sparse_243_str();
    sparse_243_str_ = sparse_243_str;
  } else {
    clear_has_sparse_243_str();
    sparse_243_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_244_str = 256;
inline bool Database_NoBench::has_sparse_244_str() const {
  return (_has_bits_[8] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_244_str() {
  _has_bits_[8] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_244_str() {
  _has_bits_[8] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_244_str() {
  if (sparse_244_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_244_str_->clear();
  }
  clear_has_sparse_244_str();
}
inline const ::std::string& Database_NoBench::sparse_244_str() const {
  return *sparse_244_str_;
}
inline void Database_NoBench::set_sparse_244_str(const ::std::string& value) {
  set_has_sparse_244_str();
  if (sparse_244_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_244_str_ = new ::std::string;
  }
  sparse_244_str_->assign(value);
}
inline void Database_NoBench::set_sparse_244_str(const char* value) {
  set_has_sparse_244_str();
  if (sparse_244_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_244_str_ = new ::std::string;
  }
  sparse_244_str_->assign(value);
}
inline void Database_NoBench::set_sparse_244_str(const char* value, size_t size) {
  set_has_sparse_244_str();
  if (sparse_244_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_244_str_ = new ::std::string;
  }
  sparse_244_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_244_str() {
  set_has_sparse_244_str();
  if (sparse_244_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_244_str_ = new ::std::string;
  }
  return sparse_244_str_;
}
inline ::std::string* Database_NoBench::release_sparse_244_str() {
  clear_has_sparse_244_str();
  if (sparse_244_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_244_str_;
    sparse_244_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_244_str(::std::string* sparse_244_str) {
  if (sparse_244_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_244_str_;
  }
  if (sparse_244_str) {
    set_has_sparse_244_str();
    sparse_244_str_ = sparse_244_str;
  } else {
    clear_has_sparse_244_str();
    sparse_244_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_245_str = 257;
inline bool Database_NoBench::has_sparse_245_str() const {
  return (_has_bits_[8] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_245_str() {
  _has_bits_[8] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_245_str() {
  _has_bits_[8] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_245_str() {
  if (sparse_245_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_245_str_->clear();
  }
  clear_has_sparse_245_str();
}
inline const ::std::string& Database_NoBench::sparse_245_str() const {
  return *sparse_245_str_;
}
inline void Database_NoBench::set_sparse_245_str(const ::std::string& value) {
  set_has_sparse_245_str();
  if (sparse_245_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_245_str_ = new ::std::string;
  }
  sparse_245_str_->assign(value);
}
inline void Database_NoBench::set_sparse_245_str(const char* value) {
  set_has_sparse_245_str();
  if (sparse_245_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_245_str_ = new ::std::string;
  }
  sparse_245_str_->assign(value);
}
inline void Database_NoBench::set_sparse_245_str(const char* value, size_t size) {
  set_has_sparse_245_str();
  if (sparse_245_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_245_str_ = new ::std::string;
  }
  sparse_245_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_245_str() {
  set_has_sparse_245_str();
  if (sparse_245_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_245_str_ = new ::std::string;
  }
  return sparse_245_str_;
}
inline ::std::string* Database_NoBench::release_sparse_245_str() {
  clear_has_sparse_245_str();
  if (sparse_245_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_245_str_;
    sparse_245_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_245_str(::std::string* sparse_245_str) {
  if (sparse_245_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_245_str_;
  }
  if (sparse_245_str) {
    set_has_sparse_245_str();
    sparse_245_str_ = sparse_245_str;
  } else {
    clear_has_sparse_245_str();
    sparse_245_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_246_str = 258;
inline bool Database_NoBench::has_sparse_246_str() const {
  return (_has_bits_[8] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_246_str() {
  _has_bits_[8] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_246_str() {
  _has_bits_[8] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_246_str() {
  if (sparse_246_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_246_str_->clear();
  }
  clear_has_sparse_246_str();
}
inline const ::std::string& Database_NoBench::sparse_246_str() const {
  return *sparse_246_str_;
}
inline void Database_NoBench::set_sparse_246_str(const ::std::string& value) {
  set_has_sparse_246_str();
  if (sparse_246_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_246_str_ = new ::std::string;
  }
  sparse_246_str_->assign(value);
}
inline void Database_NoBench::set_sparse_246_str(const char* value) {
  set_has_sparse_246_str();
  if (sparse_246_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_246_str_ = new ::std::string;
  }
  sparse_246_str_->assign(value);
}
inline void Database_NoBench::set_sparse_246_str(const char* value, size_t size) {
  set_has_sparse_246_str();
  if (sparse_246_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_246_str_ = new ::std::string;
  }
  sparse_246_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_246_str() {
  set_has_sparse_246_str();
  if (sparse_246_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_246_str_ = new ::std::string;
  }
  return sparse_246_str_;
}
inline ::std::string* Database_NoBench::release_sparse_246_str() {
  clear_has_sparse_246_str();
  if (sparse_246_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_246_str_;
    sparse_246_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_246_str(::std::string* sparse_246_str) {
  if (sparse_246_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_246_str_;
  }
  if (sparse_246_str) {
    set_has_sparse_246_str();
    sparse_246_str_ = sparse_246_str;
  } else {
    clear_has_sparse_246_str();
    sparse_246_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_247_str = 259;
inline bool Database_NoBench::has_sparse_247_str() const {
  return (_has_bits_[8] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_247_str() {
  _has_bits_[8] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_247_str() {
  _has_bits_[8] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_247_str() {
  if (sparse_247_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_247_str_->clear();
  }
  clear_has_sparse_247_str();
}
inline const ::std::string& Database_NoBench::sparse_247_str() const {
  return *sparse_247_str_;
}
inline void Database_NoBench::set_sparse_247_str(const ::std::string& value) {
  set_has_sparse_247_str();
  if (sparse_247_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_247_str_ = new ::std::string;
  }
  sparse_247_str_->assign(value);
}
inline void Database_NoBench::set_sparse_247_str(const char* value) {
  set_has_sparse_247_str();
  if (sparse_247_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_247_str_ = new ::std::string;
  }
  sparse_247_str_->assign(value);
}
inline void Database_NoBench::set_sparse_247_str(const char* value, size_t size) {
  set_has_sparse_247_str();
  if (sparse_247_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_247_str_ = new ::std::string;
  }
  sparse_247_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_247_str() {
  set_has_sparse_247_str();
  if (sparse_247_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_247_str_ = new ::std::string;
  }
  return sparse_247_str_;
}
inline ::std::string* Database_NoBench::release_sparse_247_str() {
  clear_has_sparse_247_str();
  if (sparse_247_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_247_str_;
    sparse_247_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_247_str(::std::string* sparse_247_str) {
  if (sparse_247_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_247_str_;
  }
  if (sparse_247_str) {
    set_has_sparse_247_str();
    sparse_247_str_ = sparse_247_str;
  } else {
    clear_has_sparse_247_str();
    sparse_247_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_248_str = 260;
inline bool Database_NoBench::has_sparse_248_str() const {
  return (_has_bits_[8] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_248_str() {
  _has_bits_[8] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_248_str() {
  _has_bits_[8] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_248_str() {
  if (sparse_248_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_248_str_->clear();
  }
  clear_has_sparse_248_str();
}
inline const ::std::string& Database_NoBench::sparse_248_str() const {
  return *sparse_248_str_;
}
inline void Database_NoBench::set_sparse_248_str(const ::std::string& value) {
  set_has_sparse_248_str();
  if (sparse_248_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_248_str_ = new ::std::string;
  }
  sparse_248_str_->assign(value);
}
inline void Database_NoBench::set_sparse_248_str(const char* value) {
  set_has_sparse_248_str();
  if (sparse_248_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_248_str_ = new ::std::string;
  }
  sparse_248_str_->assign(value);
}
inline void Database_NoBench::set_sparse_248_str(const char* value, size_t size) {
  set_has_sparse_248_str();
  if (sparse_248_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_248_str_ = new ::std::string;
  }
  sparse_248_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_248_str() {
  set_has_sparse_248_str();
  if (sparse_248_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_248_str_ = new ::std::string;
  }
  return sparse_248_str_;
}
inline ::std::string* Database_NoBench::release_sparse_248_str() {
  clear_has_sparse_248_str();
  if (sparse_248_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_248_str_;
    sparse_248_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_248_str(::std::string* sparse_248_str) {
  if (sparse_248_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_248_str_;
  }
  if (sparse_248_str) {
    set_has_sparse_248_str();
    sparse_248_str_ = sparse_248_str;
  } else {
    clear_has_sparse_248_str();
    sparse_248_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_249_str = 261;
inline bool Database_NoBench::has_sparse_249_str() const {
  return (_has_bits_[8] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_249_str() {
  _has_bits_[8] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_249_str() {
  _has_bits_[8] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_249_str() {
  if (sparse_249_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_249_str_->clear();
  }
  clear_has_sparse_249_str();
}
inline const ::std::string& Database_NoBench::sparse_249_str() const {
  return *sparse_249_str_;
}
inline void Database_NoBench::set_sparse_249_str(const ::std::string& value) {
  set_has_sparse_249_str();
  if (sparse_249_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_249_str_ = new ::std::string;
  }
  sparse_249_str_->assign(value);
}
inline void Database_NoBench::set_sparse_249_str(const char* value) {
  set_has_sparse_249_str();
  if (sparse_249_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_249_str_ = new ::std::string;
  }
  sparse_249_str_->assign(value);
}
inline void Database_NoBench::set_sparse_249_str(const char* value, size_t size) {
  set_has_sparse_249_str();
  if (sparse_249_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_249_str_ = new ::std::string;
  }
  sparse_249_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_249_str() {
  set_has_sparse_249_str();
  if (sparse_249_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_249_str_ = new ::std::string;
  }
  return sparse_249_str_;
}
inline ::std::string* Database_NoBench::release_sparse_249_str() {
  clear_has_sparse_249_str();
  if (sparse_249_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_249_str_;
    sparse_249_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_249_str(::std::string* sparse_249_str) {
  if (sparse_249_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_249_str_;
  }
  if (sparse_249_str) {
    set_has_sparse_249_str();
    sparse_249_str_ = sparse_249_str;
  } else {
    clear_has_sparse_249_str();
    sparse_249_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_250_str = 262;
inline bool Database_NoBench::has_sparse_250_str() const {
  return (_has_bits_[8] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_250_str() {
  _has_bits_[8] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_250_str() {
  _has_bits_[8] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_250_str() {
  if (sparse_250_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_250_str_->clear();
  }
  clear_has_sparse_250_str();
}
inline const ::std::string& Database_NoBench::sparse_250_str() const {
  return *sparse_250_str_;
}
inline void Database_NoBench::set_sparse_250_str(const ::std::string& value) {
  set_has_sparse_250_str();
  if (sparse_250_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_250_str_ = new ::std::string;
  }
  sparse_250_str_->assign(value);
}
inline void Database_NoBench::set_sparse_250_str(const char* value) {
  set_has_sparse_250_str();
  if (sparse_250_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_250_str_ = new ::std::string;
  }
  sparse_250_str_->assign(value);
}
inline void Database_NoBench::set_sparse_250_str(const char* value, size_t size) {
  set_has_sparse_250_str();
  if (sparse_250_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_250_str_ = new ::std::string;
  }
  sparse_250_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_250_str() {
  set_has_sparse_250_str();
  if (sparse_250_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_250_str_ = new ::std::string;
  }
  return sparse_250_str_;
}
inline ::std::string* Database_NoBench::release_sparse_250_str() {
  clear_has_sparse_250_str();
  if (sparse_250_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_250_str_;
    sparse_250_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_250_str(::std::string* sparse_250_str) {
  if (sparse_250_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_250_str_;
  }
  if (sparse_250_str) {
    set_has_sparse_250_str();
    sparse_250_str_ = sparse_250_str;
  } else {
    clear_has_sparse_250_str();
    sparse_250_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_251_str = 263;
inline bool Database_NoBench::has_sparse_251_str() const {
  return (_has_bits_[8] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_251_str() {
  _has_bits_[8] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_251_str() {
  _has_bits_[8] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_251_str() {
  if (sparse_251_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_251_str_->clear();
  }
  clear_has_sparse_251_str();
}
inline const ::std::string& Database_NoBench::sparse_251_str() const {
  return *sparse_251_str_;
}
inline void Database_NoBench::set_sparse_251_str(const ::std::string& value) {
  set_has_sparse_251_str();
  if (sparse_251_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_251_str_ = new ::std::string;
  }
  sparse_251_str_->assign(value);
}
inline void Database_NoBench::set_sparse_251_str(const char* value) {
  set_has_sparse_251_str();
  if (sparse_251_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_251_str_ = new ::std::string;
  }
  sparse_251_str_->assign(value);
}
inline void Database_NoBench::set_sparse_251_str(const char* value, size_t size) {
  set_has_sparse_251_str();
  if (sparse_251_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_251_str_ = new ::std::string;
  }
  sparse_251_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_251_str() {
  set_has_sparse_251_str();
  if (sparse_251_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_251_str_ = new ::std::string;
  }
  return sparse_251_str_;
}
inline ::std::string* Database_NoBench::release_sparse_251_str() {
  clear_has_sparse_251_str();
  if (sparse_251_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_251_str_;
    sparse_251_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_251_str(::std::string* sparse_251_str) {
  if (sparse_251_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_251_str_;
  }
  if (sparse_251_str) {
    set_has_sparse_251_str();
    sparse_251_str_ = sparse_251_str;
  } else {
    clear_has_sparse_251_str();
    sparse_251_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_252_str = 264;
inline bool Database_NoBench::has_sparse_252_str() const {
  return (_has_bits_[8] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_252_str() {
  _has_bits_[8] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_252_str() {
  _has_bits_[8] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_252_str() {
  if (sparse_252_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_252_str_->clear();
  }
  clear_has_sparse_252_str();
}
inline const ::std::string& Database_NoBench::sparse_252_str() const {
  return *sparse_252_str_;
}
inline void Database_NoBench::set_sparse_252_str(const ::std::string& value) {
  set_has_sparse_252_str();
  if (sparse_252_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_252_str_ = new ::std::string;
  }
  sparse_252_str_->assign(value);
}
inline void Database_NoBench::set_sparse_252_str(const char* value) {
  set_has_sparse_252_str();
  if (sparse_252_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_252_str_ = new ::std::string;
  }
  sparse_252_str_->assign(value);
}
inline void Database_NoBench::set_sparse_252_str(const char* value, size_t size) {
  set_has_sparse_252_str();
  if (sparse_252_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_252_str_ = new ::std::string;
  }
  sparse_252_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_252_str() {
  set_has_sparse_252_str();
  if (sparse_252_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_252_str_ = new ::std::string;
  }
  return sparse_252_str_;
}
inline ::std::string* Database_NoBench::release_sparse_252_str() {
  clear_has_sparse_252_str();
  if (sparse_252_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_252_str_;
    sparse_252_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_252_str(::std::string* sparse_252_str) {
  if (sparse_252_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_252_str_;
  }
  if (sparse_252_str) {
    set_has_sparse_252_str();
    sparse_252_str_ = sparse_252_str;
  } else {
    clear_has_sparse_252_str();
    sparse_252_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_253_str = 265;
inline bool Database_NoBench::has_sparse_253_str() const {
  return (_has_bits_[8] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_253_str() {
  _has_bits_[8] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_253_str() {
  _has_bits_[8] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_253_str() {
  if (sparse_253_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_253_str_->clear();
  }
  clear_has_sparse_253_str();
}
inline const ::std::string& Database_NoBench::sparse_253_str() const {
  return *sparse_253_str_;
}
inline void Database_NoBench::set_sparse_253_str(const ::std::string& value) {
  set_has_sparse_253_str();
  if (sparse_253_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_253_str_ = new ::std::string;
  }
  sparse_253_str_->assign(value);
}
inline void Database_NoBench::set_sparse_253_str(const char* value) {
  set_has_sparse_253_str();
  if (sparse_253_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_253_str_ = new ::std::string;
  }
  sparse_253_str_->assign(value);
}
inline void Database_NoBench::set_sparse_253_str(const char* value, size_t size) {
  set_has_sparse_253_str();
  if (sparse_253_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_253_str_ = new ::std::string;
  }
  sparse_253_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_253_str() {
  set_has_sparse_253_str();
  if (sparse_253_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_253_str_ = new ::std::string;
  }
  return sparse_253_str_;
}
inline ::std::string* Database_NoBench::release_sparse_253_str() {
  clear_has_sparse_253_str();
  if (sparse_253_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_253_str_;
    sparse_253_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_253_str(::std::string* sparse_253_str) {
  if (sparse_253_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_253_str_;
  }
  if (sparse_253_str) {
    set_has_sparse_253_str();
    sparse_253_str_ = sparse_253_str;
  } else {
    clear_has_sparse_253_str();
    sparse_253_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_254_str = 266;
inline bool Database_NoBench::has_sparse_254_str() const {
  return (_has_bits_[8] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_254_str() {
  _has_bits_[8] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_254_str() {
  _has_bits_[8] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_254_str() {
  if (sparse_254_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_254_str_->clear();
  }
  clear_has_sparse_254_str();
}
inline const ::std::string& Database_NoBench::sparse_254_str() const {
  return *sparse_254_str_;
}
inline void Database_NoBench::set_sparse_254_str(const ::std::string& value) {
  set_has_sparse_254_str();
  if (sparse_254_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_254_str_ = new ::std::string;
  }
  sparse_254_str_->assign(value);
}
inline void Database_NoBench::set_sparse_254_str(const char* value) {
  set_has_sparse_254_str();
  if (sparse_254_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_254_str_ = new ::std::string;
  }
  sparse_254_str_->assign(value);
}
inline void Database_NoBench::set_sparse_254_str(const char* value, size_t size) {
  set_has_sparse_254_str();
  if (sparse_254_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_254_str_ = new ::std::string;
  }
  sparse_254_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_254_str() {
  set_has_sparse_254_str();
  if (sparse_254_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_254_str_ = new ::std::string;
  }
  return sparse_254_str_;
}
inline ::std::string* Database_NoBench::release_sparse_254_str() {
  clear_has_sparse_254_str();
  if (sparse_254_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_254_str_;
    sparse_254_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_254_str(::std::string* sparse_254_str) {
  if (sparse_254_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_254_str_;
  }
  if (sparse_254_str) {
    set_has_sparse_254_str();
    sparse_254_str_ = sparse_254_str;
  } else {
    clear_has_sparse_254_str();
    sparse_254_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_255_str = 267;
inline bool Database_NoBench::has_sparse_255_str() const {
  return (_has_bits_[8] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_255_str() {
  _has_bits_[8] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_255_str() {
  _has_bits_[8] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_255_str() {
  if (sparse_255_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_255_str_->clear();
  }
  clear_has_sparse_255_str();
}
inline const ::std::string& Database_NoBench::sparse_255_str() const {
  return *sparse_255_str_;
}
inline void Database_NoBench::set_sparse_255_str(const ::std::string& value) {
  set_has_sparse_255_str();
  if (sparse_255_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_255_str_ = new ::std::string;
  }
  sparse_255_str_->assign(value);
}
inline void Database_NoBench::set_sparse_255_str(const char* value) {
  set_has_sparse_255_str();
  if (sparse_255_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_255_str_ = new ::std::string;
  }
  sparse_255_str_->assign(value);
}
inline void Database_NoBench::set_sparse_255_str(const char* value, size_t size) {
  set_has_sparse_255_str();
  if (sparse_255_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_255_str_ = new ::std::string;
  }
  sparse_255_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_255_str() {
  set_has_sparse_255_str();
  if (sparse_255_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_255_str_ = new ::std::string;
  }
  return sparse_255_str_;
}
inline ::std::string* Database_NoBench::release_sparse_255_str() {
  clear_has_sparse_255_str();
  if (sparse_255_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_255_str_;
    sparse_255_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_255_str(::std::string* sparse_255_str) {
  if (sparse_255_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_255_str_;
  }
  if (sparse_255_str) {
    set_has_sparse_255_str();
    sparse_255_str_ = sparse_255_str;
  } else {
    clear_has_sparse_255_str();
    sparse_255_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_256_str = 268;
inline bool Database_NoBench::has_sparse_256_str() const {
  return (_has_bits_[8] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_256_str() {
  _has_bits_[8] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_256_str() {
  _has_bits_[8] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_256_str() {
  if (sparse_256_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_256_str_->clear();
  }
  clear_has_sparse_256_str();
}
inline const ::std::string& Database_NoBench::sparse_256_str() const {
  return *sparse_256_str_;
}
inline void Database_NoBench::set_sparse_256_str(const ::std::string& value) {
  set_has_sparse_256_str();
  if (sparse_256_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_256_str_ = new ::std::string;
  }
  sparse_256_str_->assign(value);
}
inline void Database_NoBench::set_sparse_256_str(const char* value) {
  set_has_sparse_256_str();
  if (sparse_256_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_256_str_ = new ::std::string;
  }
  sparse_256_str_->assign(value);
}
inline void Database_NoBench::set_sparse_256_str(const char* value, size_t size) {
  set_has_sparse_256_str();
  if (sparse_256_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_256_str_ = new ::std::string;
  }
  sparse_256_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_256_str() {
  set_has_sparse_256_str();
  if (sparse_256_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_256_str_ = new ::std::string;
  }
  return sparse_256_str_;
}
inline ::std::string* Database_NoBench::release_sparse_256_str() {
  clear_has_sparse_256_str();
  if (sparse_256_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_256_str_;
    sparse_256_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_256_str(::std::string* sparse_256_str) {
  if (sparse_256_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_256_str_;
  }
  if (sparse_256_str) {
    set_has_sparse_256_str();
    sparse_256_str_ = sparse_256_str;
  } else {
    clear_has_sparse_256_str();
    sparse_256_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_257_str = 269;
inline bool Database_NoBench::has_sparse_257_str() const {
  return (_has_bits_[8] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_257_str() {
  _has_bits_[8] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_257_str() {
  _has_bits_[8] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_257_str() {
  if (sparse_257_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_257_str_->clear();
  }
  clear_has_sparse_257_str();
}
inline const ::std::string& Database_NoBench::sparse_257_str() const {
  return *sparse_257_str_;
}
inline void Database_NoBench::set_sparse_257_str(const ::std::string& value) {
  set_has_sparse_257_str();
  if (sparse_257_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_257_str_ = new ::std::string;
  }
  sparse_257_str_->assign(value);
}
inline void Database_NoBench::set_sparse_257_str(const char* value) {
  set_has_sparse_257_str();
  if (sparse_257_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_257_str_ = new ::std::string;
  }
  sparse_257_str_->assign(value);
}
inline void Database_NoBench::set_sparse_257_str(const char* value, size_t size) {
  set_has_sparse_257_str();
  if (sparse_257_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_257_str_ = new ::std::string;
  }
  sparse_257_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_257_str() {
  set_has_sparse_257_str();
  if (sparse_257_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_257_str_ = new ::std::string;
  }
  return sparse_257_str_;
}
inline ::std::string* Database_NoBench::release_sparse_257_str() {
  clear_has_sparse_257_str();
  if (sparse_257_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_257_str_;
    sparse_257_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_257_str(::std::string* sparse_257_str) {
  if (sparse_257_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_257_str_;
  }
  if (sparse_257_str) {
    set_has_sparse_257_str();
    sparse_257_str_ = sparse_257_str;
  } else {
    clear_has_sparse_257_str();
    sparse_257_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_258_str = 270;
inline bool Database_NoBench::has_sparse_258_str() const {
  return (_has_bits_[8] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_258_str() {
  _has_bits_[8] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_258_str() {
  _has_bits_[8] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_258_str() {
  if (sparse_258_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_258_str_->clear();
  }
  clear_has_sparse_258_str();
}
inline const ::std::string& Database_NoBench::sparse_258_str() const {
  return *sparse_258_str_;
}
inline void Database_NoBench::set_sparse_258_str(const ::std::string& value) {
  set_has_sparse_258_str();
  if (sparse_258_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_258_str_ = new ::std::string;
  }
  sparse_258_str_->assign(value);
}
inline void Database_NoBench::set_sparse_258_str(const char* value) {
  set_has_sparse_258_str();
  if (sparse_258_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_258_str_ = new ::std::string;
  }
  sparse_258_str_->assign(value);
}
inline void Database_NoBench::set_sparse_258_str(const char* value, size_t size) {
  set_has_sparse_258_str();
  if (sparse_258_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_258_str_ = new ::std::string;
  }
  sparse_258_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_258_str() {
  set_has_sparse_258_str();
  if (sparse_258_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_258_str_ = new ::std::string;
  }
  return sparse_258_str_;
}
inline ::std::string* Database_NoBench::release_sparse_258_str() {
  clear_has_sparse_258_str();
  if (sparse_258_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_258_str_;
    sparse_258_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_258_str(::std::string* sparse_258_str) {
  if (sparse_258_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_258_str_;
  }
  if (sparse_258_str) {
    set_has_sparse_258_str();
    sparse_258_str_ = sparse_258_str;
  } else {
    clear_has_sparse_258_str();
    sparse_258_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_259_str = 271;
inline bool Database_NoBench::has_sparse_259_str() const {
  return (_has_bits_[8] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_259_str() {
  _has_bits_[8] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_259_str() {
  _has_bits_[8] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_259_str() {
  if (sparse_259_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_259_str_->clear();
  }
  clear_has_sparse_259_str();
}
inline const ::std::string& Database_NoBench::sparse_259_str() const {
  return *sparse_259_str_;
}
inline void Database_NoBench::set_sparse_259_str(const ::std::string& value) {
  set_has_sparse_259_str();
  if (sparse_259_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_259_str_ = new ::std::string;
  }
  sparse_259_str_->assign(value);
}
inline void Database_NoBench::set_sparse_259_str(const char* value) {
  set_has_sparse_259_str();
  if (sparse_259_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_259_str_ = new ::std::string;
  }
  sparse_259_str_->assign(value);
}
inline void Database_NoBench::set_sparse_259_str(const char* value, size_t size) {
  set_has_sparse_259_str();
  if (sparse_259_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_259_str_ = new ::std::string;
  }
  sparse_259_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_259_str() {
  set_has_sparse_259_str();
  if (sparse_259_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_259_str_ = new ::std::string;
  }
  return sparse_259_str_;
}
inline ::std::string* Database_NoBench::release_sparse_259_str() {
  clear_has_sparse_259_str();
  if (sparse_259_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_259_str_;
    sparse_259_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_259_str(::std::string* sparse_259_str) {
  if (sparse_259_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_259_str_;
  }
  if (sparse_259_str) {
    set_has_sparse_259_str();
    sparse_259_str_ = sparse_259_str;
  } else {
    clear_has_sparse_259_str();
    sparse_259_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_260_str = 272;
inline bool Database_NoBench::has_sparse_260_str() const {
  return (_has_bits_[8] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_260_str() {
  _has_bits_[8] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_260_str() {
  _has_bits_[8] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_260_str() {
  if (sparse_260_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_260_str_->clear();
  }
  clear_has_sparse_260_str();
}
inline const ::std::string& Database_NoBench::sparse_260_str() const {
  return *sparse_260_str_;
}
inline void Database_NoBench::set_sparse_260_str(const ::std::string& value) {
  set_has_sparse_260_str();
  if (sparse_260_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_260_str_ = new ::std::string;
  }
  sparse_260_str_->assign(value);
}
inline void Database_NoBench::set_sparse_260_str(const char* value) {
  set_has_sparse_260_str();
  if (sparse_260_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_260_str_ = new ::std::string;
  }
  sparse_260_str_->assign(value);
}
inline void Database_NoBench::set_sparse_260_str(const char* value, size_t size) {
  set_has_sparse_260_str();
  if (sparse_260_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_260_str_ = new ::std::string;
  }
  sparse_260_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_260_str() {
  set_has_sparse_260_str();
  if (sparse_260_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_260_str_ = new ::std::string;
  }
  return sparse_260_str_;
}
inline ::std::string* Database_NoBench::release_sparse_260_str() {
  clear_has_sparse_260_str();
  if (sparse_260_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_260_str_;
    sparse_260_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_260_str(::std::string* sparse_260_str) {
  if (sparse_260_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_260_str_;
  }
  if (sparse_260_str) {
    set_has_sparse_260_str();
    sparse_260_str_ = sparse_260_str;
  } else {
    clear_has_sparse_260_str();
    sparse_260_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_261_str = 273;
inline bool Database_NoBench::has_sparse_261_str() const {
  return (_has_bits_[8] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_261_str() {
  _has_bits_[8] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_261_str() {
  _has_bits_[8] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_261_str() {
  if (sparse_261_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_261_str_->clear();
  }
  clear_has_sparse_261_str();
}
inline const ::std::string& Database_NoBench::sparse_261_str() const {
  return *sparse_261_str_;
}
inline void Database_NoBench::set_sparse_261_str(const ::std::string& value) {
  set_has_sparse_261_str();
  if (sparse_261_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_261_str_ = new ::std::string;
  }
  sparse_261_str_->assign(value);
}
inline void Database_NoBench::set_sparse_261_str(const char* value) {
  set_has_sparse_261_str();
  if (sparse_261_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_261_str_ = new ::std::string;
  }
  sparse_261_str_->assign(value);
}
inline void Database_NoBench::set_sparse_261_str(const char* value, size_t size) {
  set_has_sparse_261_str();
  if (sparse_261_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_261_str_ = new ::std::string;
  }
  sparse_261_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_261_str() {
  set_has_sparse_261_str();
  if (sparse_261_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_261_str_ = new ::std::string;
  }
  return sparse_261_str_;
}
inline ::std::string* Database_NoBench::release_sparse_261_str() {
  clear_has_sparse_261_str();
  if (sparse_261_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_261_str_;
    sparse_261_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_261_str(::std::string* sparse_261_str) {
  if (sparse_261_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_261_str_;
  }
  if (sparse_261_str) {
    set_has_sparse_261_str();
    sparse_261_str_ = sparse_261_str;
  } else {
    clear_has_sparse_261_str();
    sparse_261_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_262_str = 274;
inline bool Database_NoBench::has_sparse_262_str() const {
  return (_has_bits_[8] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_262_str() {
  _has_bits_[8] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_262_str() {
  _has_bits_[8] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_262_str() {
  if (sparse_262_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_262_str_->clear();
  }
  clear_has_sparse_262_str();
}
inline const ::std::string& Database_NoBench::sparse_262_str() const {
  return *sparse_262_str_;
}
inline void Database_NoBench::set_sparse_262_str(const ::std::string& value) {
  set_has_sparse_262_str();
  if (sparse_262_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_262_str_ = new ::std::string;
  }
  sparse_262_str_->assign(value);
}
inline void Database_NoBench::set_sparse_262_str(const char* value) {
  set_has_sparse_262_str();
  if (sparse_262_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_262_str_ = new ::std::string;
  }
  sparse_262_str_->assign(value);
}
inline void Database_NoBench::set_sparse_262_str(const char* value, size_t size) {
  set_has_sparse_262_str();
  if (sparse_262_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_262_str_ = new ::std::string;
  }
  sparse_262_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_262_str() {
  set_has_sparse_262_str();
  if (sparse_262_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_262_str_ = new ::std::string;
  }
  return sparse_262_str_;
}
inline ::std::string* Database_NoBench::release_sparse_262_str() {
  clear_has_sparse_262_str();
  if (sparse_262_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_262_str_;
    sparse_262_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_262_str(::std::string* sparse_262_str) {
  if (sparse_262_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_262_str_;
  }
  if (sparse_262_str) {
    set_has_sparse_262_str();
    sparse_262_str_ = sparse_262_str;
  } else {
    clear_has_sparse_262_str();
    sparse_262_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_263_str = 275;
inline bool Database_NoBench::has_sparse_263_str() const {
  return (_has_bits_[8] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_263_str() {
  _has_bits_[8] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_263_str() {
  _has_bits_[8] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_263_str() {
  if (sparse_263_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_263_str_->clear();
  }
  clear_has_sparse_263_str();
}
inline const ::std::string& Database_NoBench::sparse_263_str() const {
  return *sparse_263_str_;
}
inline void Database_NoBench::set_sparse_263_str(const ::std::string& value) {
  set_has_sparse_263_str();
  if (sparse_263_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_263_str_ = new ::std::string;
  }
  sparse_263_str_->assign(value);
}
inline void Database_NoBench::set_sparse_263_str(const char* value) {
  set_has_sparse_263_str();
  if (sparse_263_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_263_str_ = new ::std::string;
  }
  sparse_263_str_->assign(value);
}
inline void Database_NoBench::set_sparse_263_str(const char* value, size_t size) {
  set_has_sparse_263_str();
  if (sparse_263_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_263_str_ = new ::std::string;
  }
  sparse_263_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_263_str() {
  set_has_sparse_263_str();
  if (sparse_263_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_263_str_ = new ::std::string;
  }
  return sparse_263_str_;
}
inline ::std::string* Database_NoBench::release_sparse_263_str() {
  clear_has_sparse_263_str();
  if (sparse_263_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_263_str_;
    sparse_263_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_263_str(::std::string* sparse_263_str) {
  if (sparse_263_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_263_str_;
  }
  if (sparse_263_str) {
    set_has_sparse_263_str();
    sparse_263_str_ = sparse_263_str;
  } else {
    clear_has_sparse_263_str();
    sparse_263_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_264_str = 276;
inline bool Database_NoBench::has_sparse_264_str() const {
  return (_has_bits_[8] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_264_str() {
  _has_bits_[8] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_264_str() {
  _has_bits_[8] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_264_str() {
  if (sparse_264_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_264_str_->clear();
  }
  clear_has_sparse_264_str();
}
inline const ::std::string& Database_NoBench::sparse_264_str() const {
  return *sparse_264_str_;
}
inline void Database_NoBench::set_sparse_264_str(const ::std::string& value) {
  set_has_sparse_264_str();
  if (sparse_264_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_264_str_ = new ::std::string;
  }
  sparse_264_str_->assign(value);
}
inline void Database_NoBench::set_sparse_264_str(const char* value) {
  set_has_sparse_264_str();
  if (sparse_264_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_264_str_ = new ::std::string;
  }
  sparse_264_str_->assign(value);
}
inline void Database_NoBench::set_sparse_264_str(const char* value, size_t size) {
  set_has_sparse_264_str();
  if (sparse_264_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_264_str_ = new ::std::string;
  }
  sparse_264_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_264_str() {
  set_has_sparse_264_str();
  if (sparse_264_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_264_str_ = new ::std::string;
  }
  return sparse_264_str_;
}
inline ::std::string* Database_NoBench::release_sparse_264_str() {
  clear_has_sparse_264_str();
  if (sparse_264_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_264_str_;
    sparse_264_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_264_str(::std::string* sparse_264_str) {
  if (sparse_264_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_264_str_;
  }
  if (sparse_264_str) {
    set_has_sparse_264_str();
    sparse_264_str_ = sparse_264_str;
  } else {
    clear_has_sparse_264_str();
    sparse_264_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_265_str = 277;
inline bool Database_NoBench::has_sparse_265_str() const {
  return (_has_bits_[8] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_265_str() {
  _has_bits_[8] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_265_str() {
  _has_bits_[8] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_265_str() {
  if (sparse_265_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_265_str_->clear();
  }
  clear_has_sparse_265_str();
}
inline const ::std::string& Database_NoBench::sparse_265_str() const {
  return *sparse_265_str_;
}
inline void Database_NoBench::set_sparse_265_str(const ::std::string& value) {
  set_has_sparse_265_str();
  if (sparse_265_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_265_str_ = new ::std::string;
  }
  sparse_265_str_->assign(value);
}
inline void Database_NoBench::set_sparse_265_str(const char* value) {
  set_has_sparse_265_str();
  if (sparse_265_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_265_str_ = new ::std::string;
  }
  sparse_265_str_->assign(value);
}
inline void Database_NoBench::set_sparse_265_str(const char* value, size_t size) {
  set_has_sparse_265_str();
  if (sparse_265_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_265_str_ = new ::std::string;
  }
  sparse_265_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_265_str() {
  set_has_sparse_265_str();
  if (sparse_265_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_265_str_ = new ::std::string;
  }
  return sparse_265_str_;
}
inline ::std::string* Database_NoBench::release_sparse_265_str() {
  clear_has_sparse_265_str();
  if (sparse_265_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_265_str_;
    sparse_265_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_265_str(::std::string* sparse_265_str) {
  if (sparse_265_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_265_str_;
  }
  if (sparse_265_str) {
    set_has_sparse_265_str();
    sparse_265_str_ = sparse_265_str;
  } else {
    clear_has_sparse_265_str();
    sparse_265_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_266_str = 278;
inline bool Database_NoBench::has_sparse_266_str() const {
  return (_has_bits_[8] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_266_str() {
  _has_bits_[8] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_266_str() {
  _has_bits_[8] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_266_str() {
  if (sparse_266_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_266_str_->clear();
  }
  clear_has_sparse_266_str();
}
inline const ::std::string& Database_NoBench::sparse_266_str() const {
  return *sparse_266_str_;
}
inline void Database_NoBench::set_sparse_266_str(const ::std::string& value) {
  set_has_sparse_266_str();
  if (sparse_266_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_266_str_ = new ::std::string;
  }
  sparse_266_str_->assign(value);
}
inline void Database_NoBench::set_sparse_266_str(const char* value) {
  set_has_sparse_266_str();
  if (sparse_266_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_266_str_ = new ::std::string;
  }
  sparse_266_str_->assign(value);
}
inline void Database_NoBench::set_sparse_266_str(const char* value, size_t size) {
  set_has_sparse_266_str();
  if (sparse_266_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_266_str_ = new ::std::string;
  }
  sparse_266_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_266_str() {
  set_has_sparse_266_str();
  if (sparse_266_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_266_str_ = new ::std::string;
  }
  return sparse_266_str_;
}
inline ::std::string* Database_NoBench::release_sparse_266_str() {
  clear_has_sparse_266_str();
  if (sparse_266_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_266_str_;
    sparse_266_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_266_str(::std::string* sparse_266_str) {
  if (sparse_266_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_266_str_;
  }
  if (sparse_266_str) {
    set_has_sparse_266_str();
    sparse_266_str_ = sparse_266_str;
  } else {
    clear_has_sparse_266_str();
    sparse_266_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_267_str = 279;
inline bool Database_NoBench::has_sparse_267_str() const {
  return (_has_bits_[8] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_267_str() {
  _has_bits_[8] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_267_str() {
  _has_bits_[8] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_267_str() {
  if (sparse_267_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_267_str_->clear();
  }
  clear_has_sparse_267_str();
}
inline const ::std::string& Database_NoBench::sparse_267_str() const {
  return *sparse_267_str_;
}
inline void Database_NoBench::set_sparse_267_str(const ::std::string& value) {
  set_has_sparse_267_str();
  if (sparse_267_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_267_str_ = new ::std::string;
  }
  sparse_267_str_->assign(value);
}
inline void Database_NoBench::set_sparse_267_str(const char* value) {
  set_has_sparse_267_str();
  if (sparse_267_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_267_str_ = new ::std::string;
  }
  sparse_267_str_->assign(value);
}
inline void Database_NoBench::set_sparse_267_str(const char* value, size_t size) {
  set_has_sparse_267_str();
  if (sparse_267_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_267_str_ = new ::std::string;
  }
  sparse_267_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_267_str() {
  set_has_sparse_267_str();
  if (sparse_267_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_267_str_ = new ::std::string;
  }
  return sparse_267_str_;
}
inline ::std::string* Database_NoBench::release_sparse_267_str() {
  clear_has_sparse_267_str();
  if (sparse_267_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_267_str_;
    sparse_267_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_267_str(::std::string* sparse_267_str) {
  if (sparse_267_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_267_str_;
  }
  if (sparse_267_str) {
    set_has_sparse_267_str();
    sparse_267_str_ = sparse_267_str;
  } else {
    clear_has_sparse_267_str();
    sparse_267_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_268_str = 280;
inline bool Database_NoBench::has_sparse_268_str() const {
  return (_has_bits_[8] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_268_str() {
  _has_bits_[8] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_268_str() {
  _has_bits_[8] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_268_str() {
  if (sparse_268_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_268_str_->clear();
  }
  clear_has_sparse_268_str();
}
inline const ::std::string& Database_NoBench::sparse_268_str() const {
  return *sparse_268_str_;
}
inline void Database_NoBench::set_sparse_268_str(const ::std::string& value) {
  set_has_sparse_268_str();
  if (sparse_268_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_268_str_ = new ::std::string;
  }
  sparse_268_str_->assign(value);
}
inline void Database_NoBench::set_sparse_268_str(const char* value) {
  set_has_sparse_268_str();
  if (sparse_268_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_268_str_ = new ::std::string;
  }
  sparse_268_str_->assign(value);
}
inline void Database_NoBench::set_sparse_268_str(const char* value, size_t size) {
  set_has_sparse_268_str();
  if (sparse_268_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_268_str_ = new ::std::string;
  }
  sparse_268_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_268_str() {
  set_has_sparse_268_str();
  if (sparse_268_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_268_str_ = new ::std::string;
  }
  return sparse_268_str_;
}
inline ::std::string* Database_NoBench::release_sparse_268_str() {
  clear_has_sparse_268_str();
  if (sparse_268_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_268_str_;
    sparse_268_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_268_str(::std::string* sparse_268_str) {
  if (sparse_268_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_268_str_;
  }
  if (sparse_268_str) {
    set_has_sparse_268_str();
    sparse_268_str_ = sparse_268_str;
  } else {
    clear_has_sparse_268_str();
    sparse_268_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_269_str = 281;
inline bool Database_NoBench::has_sparse_269_str() const {
  return (_has_bits_[8] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_269_str() {
  _has_bits_[8] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_269_str() {
  _has_bits_[8] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_269_str() {
  if (sparse_269_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_269_str_->clear();
  }
  clear_has_sparse_269_str();
}
inline const ::std::string& Database_NoBench::sparse_269_str() const {
  return *sparse_269_str_;
}
inline void Database_NoBench::set_sparse_269_str(const ::std::string& value) {
  set_has_sparse_269_str();
  if (sparse_269_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_269_str_ = new ::std::string;
  }
  sparse_269_str_->assign(value);
}
inline void Database_NoBench::set_sparse_269_str(const char* value) {
  set_has_sparse_269_str();
  if (sparse_269_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_269_str_ = new ::std::string;
  }
  sparse_269_str_->assign(value);
}
inline void Database_NoBench::set_sparse_269_str(const char* value, size_t size) {
  set_has_sparse_269_str();
  if (sparse_269_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_269_str_ = new ::std::string;
  }
  sparse_269_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_269_str() {
  set_has_sparse_269_str();
  if (sparse_269_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_269_str_ = new ::std::string;
  }
  return sparse_269_str_;
}
inline ::std::string* Database_NoBench::release_sparse_269_str() {
  clear_has_sparse_269_str();
  if (sparse_269_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_269_str_;
    sparse_269_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_269_str(::std::string* sparse_269_str) {
  if (sparse_269_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_269_str_;
  }
  if (sparse_269_str) {
    set_has_sparse_269_str();
    sparse_269_str_ = sparse_269_str;
  } else {
    clear_has_sparse_269_str();
    sparse_269_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_270_str = 282;
inline bool Database_NoBench::has_sparse_270_str() const {
  return (_has_bits_[8] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_270_str() {
  _has_bits_[8] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_270_str() {
  _has_bits_[8] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_270_str() {
  if (sparse_270_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_270_str_->clear();
  }
  clear_has_sparse_270_str();
}
inline const ::std::string& Database_NoBench::sparse_270_str() const {
  return *sparse_270_str_;
}
inline void Database_NoBench::set_sparse_270_str(const ::std::string& value) {
  set_has_sparse_270_str();
  if (sparse_270_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_270_str_ = new ::std::string;
  }
  sparse_270_str_->assign(value);
}
inline void Database_NoBench::set_sparse_270_str(const char* value) {
  set_has_sparse_270_str();
  if (sparse_270_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_270_str_ = new ::std::string;
  }
  sparse_270_str_->assign(value);
}
inline void Database_NoBench::set_sparse_270_str(const char* value, size_t size) {
  set_has_sparse_270_str();
  if (sparse_270_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_270_str_ = new ::std::string;
  }
  sparse_270_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_270_str() {
  set_has_sparse_270_str();
  if (sparse_270_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_270_str_ = new ::std::string;
  }
  return sparse_270_str_;
}
inline ::std::string* Database_NoBench::release_sparse_270_str() {
  clear_has_sparse_270_str();
  if (sparse_270_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_270_str_;
    sparse_270_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_270_str(::std::string* sparse_270_str) {
  if (sparse_270_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_270_str_;
  }
  if (sparse_270_str) {
    set_has_sparse_270_str();
    sparse_270_str_ = sparse_270_str;
  } else {
    clear_has_sparse_270_str();
    sparse_270_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_271_str = 283;
inline bool Database_NoBench::has_sparse_271_str() const {
  return (_has_bits_[8] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_271_str() {
  _has_bits_[8] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_271_str() {
  _has_bits_[8] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_271_str() {
  if (sparse_271_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_271_str_->clear();
  }
  clear_has_sparse_271_str();
}
inline const ::std::string& Database_NoBench::sparse_271_str() const {
  return *sparse_271_str_;
}
inline void Database_NoBench::set_sparse_271_str(const ::std::string& value) {
  set_has_sparse_271_str();
  if (sparse_271_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_271_str_ = new ::std::string;
  }
  sparse_271_str_->assign(value);
}
inline void Database_NoBench::set_sparse_271_str(const char* value) {
  set_has_sparse_271_str();
  if (sparse_271_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_271_str_ = new ::std::string;
  }
  sparse_271_str_->assign(value);
}
inline void Database_NoBench::set_sparse_271_str(const char* value, size_t size) {
  set_has_sparse_271_str();
  if (sparse_271_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_271_str_ = new ::std::string;
  }
  sparse_271_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_271_str() {
  set_has_sparse_271_str();
  if (sparse_271_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_271_str_ = new ::std::string;
  }
  return sparse_271_str_;
}
inline ::std::string* Database_NoBench::release_sparse_271_str() {
  clear_has_sparse_271_str();
  if (sparse_271_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_271_str_;
    sparse_271_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_271_str(::std::string* sparse_271_str) {
  if (sparse_271_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_271_str_;
  }
  if (sparse_271_str) {
    set_has_sparse_271_str();
    sparse_271_str_ = sparse_271_str;
  } else {
    clear_has_sparse_271_str();
    sparse_271_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_272_str = 284;
inline bool Database_NoBench::has_sparse_272_str() const {
  return (_has_bits_[8] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_272_str() {
  _has_bits_[8] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_272_str() {
  _has_bits_[8] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_272_str() {
  if (sparse_272_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_272_str_->clear();
  }
  clear_has_sparse_272_str();
}
inline const ::std::string& Database_NoBench::sparse_272_str() const {
  return *sparse_272_str_;
}
inline void Database_NoBench::set_sparse_272_str(const ::std::string& value) {
  set_has_sparse_272_str();
  if (sparse_272_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_272_str_ = new ::std::string;
  }
  sparse_272_str_->assign(value);
}
inline void Database_NoBench::set_sparse_272_str(const char* value) {
  set_has_sparse_272_str();
  if (sparse_272_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_272_str_ = new ::std::string;
  }
  sparse_272_str_->assign(value);
}
inline void Database_NoBench::set_sparse_272_str(const char* value, size_t size) {
  set_has_sparse_272_str();
  if (sparse_272_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_272_str_ = new ::std::string;
  }
  sparse_272_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_272_str() {
  set_has_sparse_272_str();
  if (sparse_272_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_272_str_ = new ::std::string;
  }
  return sparse_272_str_;
}
inline ::std::string* Database_NoBench::release_sparse_272_str() {
  clear_has_sparse_272_str();
  if (sparse_272_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_272_str_;
    sparse_272_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_272_str(::std::string* sparse_272_str) {
  if (sparse_272_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_272_str_;
  }
  if (sparse_272_str) {
    set_has_sparse_272_str();
    sparse_272_str_ = sparse_272_str;
  } else {
    clear_has_sparse_272_str();
    sparse_272_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_273_str = 285;
inline bool Database_NoBench::has_sparse_273_str() const {
  return (_has_bits_[8] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_273_str() {
  _has_bits_[8] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_273_str() {
  _has_bits_[8] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_273_str() {
  if (sparse_273_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_273_str_->clear();
  }
  clear_has_sparse_273_str();
}
inline const ::std::string& Database_NoBench::sparse_273_str() const {
  return *sparse_273_str_;
}
inline void Database_NoBench::set_sparse_273_str(const ::std::string& value) {
  set_has_sparse_273_str();
  if (sparse_273_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_273_str_ = new ::std::string;
  }
  sparse_273_str_->assign(value);
}
inline void Database_NoBench::set_sparse_273_str(const char* value) {
  set_has_sparse_273_str();
  if (sparse_273_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_273_str_ = new ::std::string;
  }
  sparse_273_str_->assign(value);
}
inline void Database_NoBench::set_sparse_273_str(const char* value, size_t size) {
  set_has_sparse_273_str();
  if (sparse_273_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_273_str_ = new ::std::string;
  }
  sparse_273_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_273_str() {
  set_has_sparse_273_str();
  if (sparse_273_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_273_str_ = new ::std::string;
  }
  return sparse_273_str_;
}
inline ::std::string* Database_NoBench::release_sparse_273_str() {
  clear_has_sparse_273_str();
  if (sparse_273_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_273_str_;
    sparse_273_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_273_str(::std::string* sparse_273_str) {
  if (sparse_273_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_273_str_;
  }
  if (sparse_273_str) {
    set_has_sparse_273_str();
    sparse_273_str_ = sparse_273_str;
  } else {
    clear_has_sparse_273_str();
    sparse_273_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_274_str = 286;
inline bool Database_NoBench::has_sparse_274_str() const {
  return (_has_bits_[8] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_274_str() {
  _has_bits_[8] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_274_str() {
  _has_bits_[8] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_274_str() {
  if (sparse_274_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_274_str_->clear();
  }
  clear_has_sparse_274_str();
}
inline const ::std::string& Database_NoBench::sparse_274_str() const {
  return *sparse_274_str_;
}
inline void Database_NoBench::set_sparse_274_str(const ::std::string& value) {
  set_has_sparse_274_str();
  if (sparse_274_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_274_str_ = new ::std::string;
  }
  sparse_274_str_->assign(value);
}
inline void Database_NoBench::set_sparse_274_str(const char* value) {
  set_has_sparse_274_str();
  if (sparse_274_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_274_str_ = new ::std::string;
  }
  sparse_274_str_->assign(value);
}
inline void Database_NoBench::set_sparse_274_str(const char* value, size_t size) {
  set_has_sparse_274_str();
  if (sparse_274_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_274_str_ = new ::std::string;
  }
  sparse_274_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_274_str() {
  set_has_sparse_274_str();
  if (sparse_274_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_274_str_ = new ::std::string;
  }
  return sparse_274_str_;
}
inline ::std::string* Database_NoBench::release_sparse_274_str() {
  clear_has_sparse_274_str();
  if (sparse_274_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_274_str_;
    sparse_274_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_274_str(::std::string* sparse_274_str) {
  if (sparse_274_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_274_str_;
  }
  if (sparse_274_str) {
    set_has_sparse_274_str();
    sparse_274_str_ = sparse_274_str;
  } else {
    clear_has_sparse_274_str();
    sparse_274_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_275_str = 287;
inline bool Database_NoBench::has_sparse_275_str() const {
  return (_has_bits_[9] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_275_str() {
  _has_bits_[9] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_275_str() {
  _has_bits_[9] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_275_str() {
  if (sparse_275_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_275_str_->clear();
  }
  clear_has_sparse_275_str();
}
inline const ::std::string& Database_NoBench::sparse_275_str() const {
  return *sparse_275_str_;
}
inline void Database_NoBench::set_sparse_275_str(const ::std::string& value) {
  set_has_sparse_275_str();
  if (sparse_275_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_275_str_ = new ::std::string;
  }
  sparse_275_str_->assign(value);
}
inline void Database_NoBench::set_sparse_275_str(const char* value) {
  set_has_sparse_275_str();
  if (sparse_275_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_275_str_ = new ::std::string;
  }
  sparse_275_str_->assign(value);
}
inline void Database_NoBench::set_sparse_275_str(const char* value, size_t size) {
  set_has_sparse_275_str();
  if (sparse_275_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_275_str_ = new ::std::string;
  }
  sparse_275_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_275_str() {
  set_has_sparse_275_str();
  if (sparse_275_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_275_str_ = new ::std::string;
  }
  return sparse_275_str_;
}
inline ::std::string* Database_NoBench::release_sparse_275_str() {
  clear_has_sparse_275_str();
  if (sparse_275_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_275_str_;
    sparse_275_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_275_str(::std::string* sparse_275_str) {
  if (sparse_275_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_275_str_;
  }
  if (sparse_275_str) {
    set_has_sparse_275_str();
    sparse_275_str_ = sparse_275_str;
  } else {
    clear_has_sparse_275_str();
    sparse_275_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_276_str = 288;
inline bool Database_NoBench::has_sparse_276_str() const {
  return (_has_bits_[9] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_276_str() {
  _has_bits_[9] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_276_str() {
  _has_bits_[9] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_276_str() {
  if (sparse_276_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_276_str_->clear();
  }
  clear_has_sparse_276_str();
}
inline const ::std::string& Database_NoBench::sparse_276_str() const {
  return *sparse_276_str_;
}
inline void Database_NoBench::set_sparse_276_str(const ::std::string& value) {
  set_has_sparse_276_str();
  if (sparse_276_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_276_str_ = new ::std::string;
  }
  sparse_276_str_->assign(value);
}
inline void Database_NoBench::set_sparse_276_str(const char* value) {
  set_has_sparse_276_str();
  if (sparse_276_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_276_str_ = new ::std::string;
  }
  sparse_276_str_->assign(value);
}
inline void Database_NoBench::set_sparse_276_str(const char* value, size_t size) {
  set_has_sparse_276_str();
  if (sparse_276_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_276_str_ = new ::std::string;
  }
  sparse_276_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_276_str() {
  set_has_sparse_276_str();
  if (sparse_276_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_276_str_ = new ::std::string;
  }
  return sparse_276_str_;
}
inline ::std::string* Database_NoBench::release_sparse_276_str() {
  clear_has_sparse_276_str();
  if (sparse_276_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_276_str_;
    sparse_276_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_276_str(::std::string* sparse_276_str) {
  if (sparse_276_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_276_str_;
  }
  if (sparse_276_str) {
    set_has_sparse_276_str();
    sparse_276_str_ = sparse_276_str;
  } else {
    clear_has_sparse_276_str();
    sparse_276_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_277_str = 289;
inline bool Database_NoBench::has_sparse_277_str() const {
  return (_has_bits_[9] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_277_str() {
  _has_bits_[9] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_277_str() {
  _has_bits_[9] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_277_str() {
  if (sparse_277_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_277_str_->clear();
  }
  clear_has_sparse_277_str();
}
inline const ::std::string& Database_NoBench::sparse_277_str() const {
  return *sparse_277_str_;
}
inline void Database_NoBench::set_sparse_277_str(const ::std::string& value) {
  set_has_sparse_277_str();
  if (sparse_277_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_277_str_ = new ::std::string;
  }
  sparse_277_str_->assign(value);
}
inline void Database_NoBench::set_sparse_277_str(const char* value) {
  set_has_sparse_277_str();
  if (sparse_277_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_277_str_ = new ::std::string;
  }
  sparse_277_str_->assign(value);
}
inline void Database_NoBench::set_sparse_277_str(const char* value, size_t size) {
  set_has_sparse_277_str();
  if (sparse_277_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_277_str_ = new ::std::string;
  }
  sparse_277_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_277_str() {
  set_has_sparse_277_str();
  if (sparse_277_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_277_str_ = new ::std::string;
  }
  return sparse_277_str_;
}
inline ::std::string* Database_NoBench::release_sparse_277_str() {
  clear_has_sparse_277_str();
  if (sparse_277_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_277_str_;
    sparse_277_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_277_str(::std::string* sparse_277_str) {
  if (sparse_277_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_277_str_;
  }
  if (sparse_277_str) {
    set_has_sparse_277_str();
    sparse_277_str_ = sparse_277_str;
  } else {
    clear_has_sparse_277_str();
    sparse_277_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_278_str = 290;
inline bool Database_NoBench::has_sparse_278_str() const {
  return (_has_bits_[9] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_278_str() {
  _has_bits_[9] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_278_str() {
  _has_bits_[9] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_278_str() {
  if (sparse_278_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_278_str_->clear();
  }
  clear_has_sparse_278_str();
}
inline const ::std::string& Database_NoBench::sparse_278_str() const {
  return *sparse_278_str_;
}
inline void Database_NoBench::set_sparse_278_str(const ::std::string& value) {
  set_has_sparse_278_str();
  if (sparse_278_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_278_str_ = new ::std::string;
  }
  sparse_278_str_->assign(value);
}
inline void Database_NoBench::set_sparse_278_str(const char* value) {
  set_has_sparse_278_str();
  if (sparse_278_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_278_str_ = new ::std::string;
  }
  sparse_278_str_->assign(value);
}
inline void Database_NoBench::set_sparse_278_str(const char* value, size_t size) {
  set_has_sparse_278_str();
  if (sparse_278_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_278_str_ = new ::std::string;
  }
  sparse_278_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_278_str() {
  set_has_sparse_278_str();
  if (sparse_278_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_278_str_ = new ::std::string;
  }
  return sparse_278_str_;
}
inline ::std::string* Database_NoBench::release_sparse_278_str() {
  clear_has_sparse_278_str();
  if (sparse_278_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_278_str_;
    sparse_278_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_278_str(::std::string* sparse_278_str) {
  if (sparse_278_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_278_str_;
  }
  if (sparse_278_str) {
    set_has_sparse_278_str();
    sparse_278_str_ = sparse_278_str;
  } else {
    clear_has_sparse_278_str();
    sparse_278_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_279_str = 291;
inline bool Database_NoBench::has_sparse_279_str() const {
  return (_has_bits_[9] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_279_str() {
  _has_bits_[9] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_279_str() {
  _has_bits_[9] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_279_str() {
  if (sparse_279_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_279_str_->clear();
  }
  clear_has_sparse_279_str();
}
inline const ::std::string& Database_NoBench::sparse_279_str() const {
  return *sparse_279_str_;
}
inline void Database_NoBench::set_sparse_279_str(const ::std::string& value) {
  set_has_sparse_279_str();
  if (sparse_279_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_279_str_ = new ::std::string;
  }
  sparse_279_str_->assign(value);
}
inline void Database_NoBench::set_sparse_279_str(const char* value) {
  set_has_sparse_279_str();
  if (sparse_279_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_279_str_ = new ::std::string;
  }
  sparse_279_str_->assign(value);
}
inline void Database_NoBench::set_sparse_279_str(const char* value, size_t size) {
  set_has_sparse_279_str();
  if (sparse_279_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_279_str_ = new ::std::string;
  }
  sparse_279_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_279_str() {
  set_has_sparse_279_str();
  if (sparse_279_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_279_str_ = new ::std::string;
  }
  return sparse_279_str_;
}
inline ::std::string* Database_NoBench::release_sparse_279_str() {
  clear_has_sparse_279_str();
  if (sparse_279_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_279_str_;
    sparse_279_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_279_str(::std::string* sparse_279_str) {
  if (sparse_279_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_279_str_;
  }
  if (sparse_279_str) {
    set_has_sparse_279_str();
    sparse_279_str_ = sparse_279_str;
  } else {
    clear_has_sparse_279_str();
    sparse_279_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_280_str = 292;
inline bool Database_NoBench::has_sparse_280_str() const {
  return (_has_bits_[9] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_280_str() {
  _has_bits_[9] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_280_str() {
  _has_bits_[9] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_280_str() {
  if (sparse_280_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_280_str_->clear();
  }
  clear_has_sparse_280_str();
}
inline const ::std::string& Database_NoBench::sparse_280_str() const {
  return *sparse_280_str_;
}
inline void Database_NoBench::set_sparse_280_str(const ::std::string& value) {
  set_has_sparse_280_str();
  if (sparse_280_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_280_str_ = new ::std::string;
  }
  sparse_280_str_->assign(value);
}
inline void Database_NoBench::set_sparse_280_str(const char* value) {
  set_has_sparse_280_str();
  if (sparse_280_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_280_str_ = new ::std::string;
  }
  sparse_280_str_->assign(value);
}
inline void Database_NoBench::set_sparse_280_str(const char* value, size_t size) {
  set_has_sparse_280_str();
  if (sparse_280_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_280_str_ = new ::std::string;
  }
  sparse_280_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_280_str() {
  set_has_sparse_280_str();
  if (sparse_280_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_280_str_ = new ::std::string;
  }
  return sparse_280_str_;
}
inline ::std::string* Database_NoBench::release_sparse_280_str() {
  clear_has_sparse_280_str();
  if (sparse_280_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_280_str_;
    sparse_280_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_280_str(::std::string* sparse_280_str) {
  if (sparse_280_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_280_str_;
  }
  if (sparse_280_str) {
    set_has_sparse_280_str();
    sparse_280_str_ = sparse_280_str;
  } else {
    clear_has_sparse_280_str();
    sparse_280_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_281_str = 293;
inline bool Database_NoBench::has_sparse_281_str() const {
  return (_has_bits_[9] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_281_str() {
  _has_bits_[9] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_281_str() {
  _has_bits_[9] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_281_str() {
  if (sparse_281_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_281_str_->clear();
  }
  clear_has_sparse_281_str();
}
inline const ::std::string& Database_NoBench::sparse_281_str() const {
  return *sparse_281_str_;
}
inline void Database_NoBench::set_sparse_281_str(const ::std::string& value) {
  set_has_sparse_281_str();
  if (sparse_281_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_281_str_ = new ::std::string;
  }
  sparse_281_str_->assign(value);
}
inline void Database_NoBench::set_sparse_281_str(const char* value) {
  set_has_sparse_281_str();
  if (sparse_281_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_281_str_ = new ::std::string;
  }
  sparse_281_str_->assign(value);
}
inline void Database_NoBench::set_sparse_281_str(const char* value, size_t size) {
  set_has_sparse_281_str();
  if (sparse_281_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_281_str_ = new ::std::string;
  }
  sparse_281_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_281_str() {
  set_has_sparse_281_str();
  if (sparse_281_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_281_str_ = new ::std::string;
  }
  return sparse_281_str_;
}
inline ::std::string* Database_NoBench::release_sparse_281_str() {
  clear_has_sparse_281_str();
  if (sparse_281_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_281_str_;
    sparse_281_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_281_str(::std::string* sparse_281_str) {
  if (sparse_281_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_281_str_;
  }
  if (sparse_281_str) {
    set_has_sparse_281_str();
    sparse_281_str_ = sparse_281_str;
  } else {
    clear_has_sparse_281_str();
    sparse_281_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_282_str = 294;
inline bool Database_NoBench::has_sparse_282_str() const {
  return (_has_bits_[9] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_282_str() {
  _has_bits_[9] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_282_str() {
  _has_bits_[9] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_282_str() {
  if (sparse_282_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_282_str_->clear();
  }
  clear_has_sparse_282_str();
}
inline const ::std::string& Database_NoBench::sparse_282_str() const {
  return *sparse_282_str_;
}
inline void Database_NoBench::set_sparse_282_str(const ::std::string& value) {
  set_has_sparse_282_str();
  if (sparse_282_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_282_str_ = new ::std::string;
  }
  sparse_282_str_->assign(value);
}
inline void Database_NoBench::set_sparse_282_str(const char* value) {
  set_has_sparse_282_str();
  if (sparse_282_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_282_str_ = new ::std::string;
  }
  sparse_282_str_->assign(value);
}
inline void Database_NoBench::set_sparse_282_str(const char* value, size_t size) {
  set_has_sparse_282_str();
  if (sparse_282_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_282_str_ = new ::std::string;
  }
  sparse_282_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_282_str() {
  set_has_sparse_282_str();
  if (sparse_282_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_282_str_ = new ::std::string;
  }
  return sparse_282_str_;
}
inline ::std::string* Database_NoBench::release_sparse_282_str() {
  clear_has_sparse_282_str();
  if (sparse_282_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_282_str_;
    sparse_282_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_282_str(::std::string* sparse_282_str) {
  if (sparse_282_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_282_str_;
  }
  if (sparse_282_str) {
    set_has_sparse_282_str();
    sparse_282_str_ = sparse_282_str;
  } else {
    clear_has_sparse_282_str();
    sparse_282_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_283_str = 295;
inline bool Database_NoBench::has_sparse_283_str() const {
  return (_has_bits_[9] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_283_str() {
  _has_bits_[9] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_283_str() {
  _has_bits_[9] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_283_str() {
  if (sparse_283_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_283_str_->clear();
  }
  clear_has_sparse_283_str();
}
inline const ::std::string& Database_NoBench::sparse_283_str() const {
  return *sparse_283_str_;
}
inline void Database_NoBench::set_sparse_283_str(const ::std::string& value) {
  set_has_sparse_283_str();
  if (sparse_283_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_283_str_ = new ::std::string;
  }
  sparse_283_str_->assign(value);
}
inline void Database_NoBench::set_sparse_283_str(const char* value) {
  set_has_sparse_283_str();
  if (sparse_283_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_283_str_ = new ::std::string;
  }
  sparse_283_str_->assign(value);
}
inline void Database_NoBench::set_sparse_283_str(const char* value, size_t size) {
  set_has_sparse_283_str();
  if (sparse_283_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_283_str_ = new ::std::string;
  }
  sparse_283_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_283_str() {
  set_has_sparse_283_str();
  if (sparse_283_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_283_str_ = new ::std::string;
  }
  return sparse_283_str_;
}
inline ::std::string* Database_NoBench::release_sparse_283_str() {
  clear_has_sparse_283_str();
  if (sparse_283_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_283_str_;
    sparse_283_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_283_str(::std::string* sparse_283_str) {
  if (sparse_283_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_283_str_;
  }
  if (sparse_283_str) {
    set_has_sparse_283_str();
    sparse_283_str_ = sparse_283_str;
  } else {
    clear_has_sparse_283_str();
    sparse_283_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_284_str = 296;
inline bool Database_NoBench::has_sparse_284_str() const {
  return (_has_bits_[9] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_284_str() {
  _has_bits_[9] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_284_str() {
  _has_bits_[9] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_284_str() {
  if (sparse_284_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_284_str_->clear();
  }
  clear_has_sparse_284_str();
}
inline const ::std::string& Database_NoBench::sparse_284_str() const {
  return *sparse_284_str_;
}
inline void Database_NoBench::set_sparse_284_str(const ::std::string& value) {
  set_has_sparse_284_str();
  if (sparse_284_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_284_str_ = new ::std::string;
  }
  sparse_284_str_->assign(value);
}
inline void Database_NoBench::set_sparse_284_str(const char* value) {
  set_has_sparse_284_str();
  if (sparse_284_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_284_str_ = new ::std::string;
  }
  sparse_284_str_->assign(value);
}
inline void Database_NoBench::set_sparse_284_str(const char* value, size_t size) {
  set_has_sparse_284_str();
  if (sparse_284_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_284_str_ = new ::std::string;
  }
  sparse_284_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_284_str() {
  set_has_sparse_284_str();
  if (sparse_284_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_284_str_ = new ::std::string;
  }
  return sparse_284_str_;
}
inline ::std::string* Database_NoBench::release_sparse_284_str() {
  clear_has_sparse_284_str();
  if (sparse_284_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_284_str_;
    sparse_284_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_284_str(::std::string* sparse_284_str) {
  if (sparse_284_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_284_str_;
  }
  if (sparse_284_str) {
    set_has_sparse_284_str();
    sparse_284_str_ = sparse_284_str;
  } else {
    clear_has_sparse_284_str();
    sparse_284_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_285_str = 297;
inline bool Database_NoBench::has_sparse_285_str() const {
  return (_has_bits_[9] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_285_str() {
  _has_bits_[9] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_285_str() {
  _has_bits_[9] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_285_str() {
  if (sparse_285_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_285_str_->clear();
  }
  clear_has_sparse_285_str();
}
inline const ::std::string& Database_NoBench::sparse_285_str() const {
  return *sparse_285_str_;
}
inline void Database_NoBench::set_sparse_285_str(const ::std::string& value) {
  set_has_sparse_285_str();
  if (sparse_285_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_285_str_ = new ::std::string;
  }
  sparse_285_str_->assign(value);
}
inline void Database_NoBench::set_sparse_285_str(const char* value) {
  set_has_sparse_285_str();
  if (sparse_285_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_285_str_ = new ::std::string;
  }
  sparse_285_str_->assign(value);
}
inline void Database_NoBench::set_sparse_285_str(const char* value, size_t size) {
  set_has_sparse_285_str();
  if (sparse_285_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_285_str_ = new ::std::string;
  }
  sparse_285_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_285_str() {
  set_has_sparse_285_str();
  if (sparse_285_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_285_str_ = new ::std::string;
  }
  return sparse_285_str_;
}
inline ::std::string* Database_NoBench::release_sparse_285_str() {
  clear_has_sparse_285_str();
  if (sparse_285_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_285_str_;
    sparse_285_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_285_str(::std::string* sparse_285_str) {
  if (sparse_285_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_285_str_;
  }
  if (sparse_285_str) {
    set_has_sparse_285_str();
    sparse_285_str_ = sparse_285_str;
  } else {
    clear_has_sparse_285_str();
    sparse_285_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_286_str = 298;
inline bool Database_NoBench::has_sparse_286_str() const {
  return (_has_bits_[9] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_286_str() {
  _has_bits_[9] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_286_str() {
  _has_bits_[9] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_286_str() {
  if (sparse_286_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_286_str_->clear();
  }
  clear_has_sparse_286_str();
}
inline const ::std::string& Database_NoBench::sparse_286_str() const {
  return *sparse_286_str_;
}
inline void Database_NoBench::set_sparse_286_str(const ::std::string& value) {
  set_has_sparse_286_str();
  if (sparse_286_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_286_str_ = new ::std::string;
  }
  sparse_286_str_->assign(value);
}
inline void Database_NoBench::set_sparse_286_str(const char* value) {
  set_has_sparse_286_str();
  if (sparse_286_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_286_str_ = new ::std::string;
  }
  sparse_286_str_->assign(value);
}
inline void Database_NoBench::set_sparse_286_str(const char* value, size_t size) {
  set_has_sparse_286_str();
  if (sparse_286_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_286_str_ = new ::std::string;
  }
  sparse_286_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_286_str() {
  set_has_sparse_286_str();
  if (sparse_286_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_286_str_ = new ::std::string;
  }
  return sparse_286_str_;
}
inline ::std::string* Database_NoBench::release_sparse_286_str() {
  clear_has_sparse_286_str();
  if (sparse_286_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_286_str_;
    sparse_286_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_286_str(::std::string* sparse_286_str) {
  if (sparse_286_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_286_str_;
  }
  if (sparse_286_str) {
    set_has_sparse_286_str();
    sparse_286_str_ = sparse_286_str;
  } else {
    clear_has_sparse_286_str();
    sparse_286_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_287_str = 299;
inline bool Database_NoBench::has_sparse_287_str() const {
  return (_has_bits_[9] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_287_str() {
  _has_bits_[9] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_287_str() {
  _has_bits_[9] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_287_str() {
  if (sparse_287_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_287_str_->clear();
  }
  clear_has_sparse_287_str();
}
inline const ::std::string& Database_NoBench::sparse_287_str() const {
  return *sparse_287_str_;
}
inline void Database_NoBench::set_sparse_287_str(const ::std::string& value) {
  set_has_sparse_287_str();
  if (sparse_287_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_287_str_ = new ::std::string;
  }
  sparse_287_str_->assign(value);
}
inline void Database_NoBench::set_sparse_287_str(const char* value) {
  set_has_sparse_287_str();
  if (sparse_287_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_287_str_ = new ::std::string;
  }
  sparse_287_str_->assign(value);
}
inline void Database_NoBench::set_sparse_287_str(const char* value, size_t size) {
  set_has_sparse_287_str();
  if (sparse_287_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_287_str_ = new ::std::string;
  }
  sparse_287_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_287_str() {
  set_has_sparse_287_str();
  if (sparse_287_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_287_str_ = new ::std::string;
  }
  return sparse_287_str_;
}
inline ::std::string* Database_NoBench::release_sparse_287_str() {
  clear_has_sparse_287_str();
  if (sparse_287_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_287_str_;
    sparse_287_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_287_str(::std::string* sparse_287_str) {
  if (sparse_287_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_287_str_;
  }
  if (sparse_287_str) {
    set_has_sparse_287_str();
    sparse_287_str_ = sparse_287_str;
  } else {
    clear_has_sparse_287_str();
    sparse_287_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_288_str = 300;
inline bool Database_NoBench::has_sparse_288_str() const {
  return (_has_bits_[9] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_288_str() {
  _has_bits_[9] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_288_str() {
  _has_bits_[9] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_288_str() {
  if (sparse_288_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_288_str_->clear();
  }
  clear_has_sparse_288_str();
}
inline const ::std::string& Database_NoBench::sparse_288_str() const {
  return *sparse_288_str_;
}
inline void Database_NoBench::set_sparse_288_str(const ::std::string& value) {
  set_has_sparse_288_str();
  if (sparse_288_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_288_str_ = new ::std::string;
  }
  sparse_288_str_->assign(value);
}
inline void Database_NoBench::set_sparse_288_str(const char* value) {
  set_has_sparse_288_str();
  if (sparse_288_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_288_str_ = new ::std::string;
  }
  sparse_288_str_->assign(value);
}
inline void Database_NoBench::set_sparse_288_str(const char* value, size_t size) {
  set_has_sparse_288_str();
  if (sparse_288_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_288_str_ = new ::std::string;
  }
  sparse_288_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_288_str() {
  set_has_sparse_288_str();
  if (sparse_288_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_288_str_ = new ::std::string;
  }
  return sparse_288_str_;
}
inline ::std::string* Database_NoBench::release_sparse_288_str() {
  clear_has_sparse_288_str();
  if (sparse_288_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_288_str_;
    sparse_288_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_288_str(::std::string* sparse_288_str) {
  if (sparse_288_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_288_str_;
  }
  if (sparse_288_str) {
    set_has_sparse_288_str();
    sparse_288_str_ = sparse_288_str;
  } else {
    clear_has_sparse_288_str();
    sparse_288_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_289_str = 301;
inline bool Database_NoBench::has_sparse_289_str() const {
  return (_has_bits_[9] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_289_str() {
  _has_bits_[9] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_289_str() {
  _has_bits_[9] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_289_str() {
  if (sparse_289_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_289_str_->clear();
  }
  clear_has_sparse_289_str();
}
inline const ::std::string& Database_NoBench::sparse_289_str() const {
  return *sparse_289_str_;
}
inline void Database_NoBench::set_sparse_289_str(const ::std::string& value) {
  set_has_sparse_289_str();
  if (sparse_289_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_289_str_ = new ::std::string;
  }
  sparse_289_str_->assign(value);
}
inline void Database_NoBench::set_sparse_289_str(const char* value) {
  set_has_sparse_289_str();
  if (sparse_289_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_289_str_ = new ::std::string;
  }
  sparse_289_str_->assign(value);
}
inline void Database_NoBench::set_sparse_289_str(const char* value, size_t size) {
  set_has_sparse_289_str();
  if (sparse_289_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_289_str_ = new ::std::string;
  }
  sparse_289_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_289_str() {
  set_has_sparse_289_str();
  if (sparse_289_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_289_str_ = new ::std::string;
  }
  return sparse_289_str_;
}
inline ::std::string* Database_NoBench::release_sparse_289_str() {
  clear_has_sparse_289_str();
  if (sparse_289_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_289_str_;
    sparse_289_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_289_str(::std::string* sparse_289_str) {
  if (sparse_289_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_289_str_;
  }
  if (sparse_289_str) {
    set_has_sparse_289_str();
    sparse_289_str_ = sparse_289_str;
  } else {
    clear_has_sparse_289_str();
    sparse_289_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_290_str = 302;
inline bool Database_NoBench::has_sparse_290_str() const {
  return (_has_bits_[9] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_290_str() {
  _has_bits_[9] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_290_str() {
  _has_bits_[9] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_290_str() {
  if (sparse_290_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_290_str_->clear();
  }
  clear_has_sparse_290_str();
}
inline const ::std::string& Database_NoBench::sparse_290_str() const {
  return *sparse_290_str_;
}
inline void Database_NoBench::set_sparse_290_str(const ::std::string& value) {
  set_has_sparse_290_str();
  if (sparse_290_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_290_str_ = new ::std::string;
  }
  sparse_290_str_->assign(value);
}
inline void Database_NoBench::set_sparse_290_str(const char* value) {
  set_has_sparse_290_str();
  if (sparse_290_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_290_str_ = new ::std::string;
  }
  sparse_290_str_->assign(value);
}
inline void Database_NoBench::set_sparse_290_str(const char* value, size_t size) {
  set_has_sparse_290_str();
  if (sparse_290_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_290_str_ = new ::std::string;
  }
  sparse_290_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_290_str() {
  set_has_sparse_290_str();
  if (sparse_290_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_290_str_ = new ::std::string;
  }
  return sparse_290_str_;
}
inline ::std::string* Database_NoBench::release_sparse_290_str() {
  clear_has_sparse_290_str();
  if (sparse_290_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_290_str_;
    sparse_290_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_290_str(::std::string* sparse_290_str) {
  if (sparse_290_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_290_str_;
  }
  if (sparse_290_str) {
    set_has_sparse_290_str();
    sparse_290_str_ = sparse_290_str;
  } else {
    clear_has_sparse_290_str();
    sparse_290_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_291_str = 303;
inline bool Database_NoBench::has_sparse_291_str() const {
  return (_has_bits_[9] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_291_str() {
  _has_bits_[9] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_291_str() {
  _has_bits_[9] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_291_str() {
  if (sparse_291_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_291_str_->clear();
  }
  clear_has_sparse_291_str();
}
inline const ::std::string& Database_NoBench::sparse_291_str() const {
  return *sparse_291_str_;
}
inline void Database_NoBench::set_sparse_291_str(const ::std::string& value) {
  set_has_sparse_291_str();
  if (sparse_291_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_291_str_ = new ::std::string;
  }
  sparse_291_str_->assign(value);
}
inline void Database_NoBench::set_sparse_291_str(const char* value) {
  set_has_sparse_291_str();
  if (sparse_291_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_291_str_ = new ::std::string;
  }
  sparse_291_str_->assign(value);
}
inline void Database_NoBench::set_sparse_291_str(const char* value, size_t size) {
  set_has_sparse_291_str();
  if (sparse_291_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_291_str_ = new ::std::string;
  }
  sparse_291_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_291_str() {
  set_has_sparse_291_str();
  if (sparse_291_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_291_str_ = new ::std::string;
  }
  return sparse_291_str_;
}
inline ::std::string* Database_NoBench::release_sparse_291_str() {
  clear_has_sparse_291_str();
  if (sparse_291_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_291_str_;
    sparse_291_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_291_str(::std::string* sparse_291_str) {
  if (sparse_291_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_291_str_;
  }
  if (sparse_291_str) {
    set_has_sparse_291_str();
    sparse_291_str_ = sparse_291_str;
  } else {
    clear_has_sparse_291_str();
    sparse_291_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_292_str = 304;
inline bool Database_NoBench::has_sparse_292_str() const {
  return (_has_bits_[9] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_292_str() {
  _has_bits_[9] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_292_str() {
  _has_bits_[9] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_292_str() {
  if (sparse_292_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_292_str_->clear();
  }
  clear_has_sparse_292_str();
}
inline const ::std::string& Database_NoBench::sparse_292_str() const {
  return *sparse_292_str_;
}
inline void Database_NoBench::set_sparse_292_str(const ::std::string& value) {
  set_has_sparse_292_str();
  if (sparse_292_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_292_str_ = new ::std::string;
  }
  sparse_292_str_->assign(value);
}
inline void Database_NoBench::set_sparse_292_str(const char* value) {
  set_has_sparse_292_str();
  if (sparse_292_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_292_str_ = new ::std::string;
  }
  sparse_292_str_->assign(value);
}
inline void Database_NoBench::set_sparse_292_str(const char* value, size_t size) {
  set_has_sparse_292_str();
  if (sparse_292_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_292_str_ = new ::std::string;
  }
  sparse_292_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_292_str() {
  set_has_sparse_292_str();
  if (sparse_292_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_292_str_ = new ::std::string;
  }
  return sparse_292_str_;
}
inline ::std::string* Database_NoBench::release_sparse_292_str() {
  clear_has_sparse_292_str();
  if (sparse_292_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_292_str_;
    sparse_292_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_292_str(::std::string* sparse_292_str) {
  if (sparse_292_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_292_str_;
  }
  if (sparse_292_str) {
    set_has_sparse_292_str();
    sparse_292_str_ = sparse_292_str;
  } else {
    clear_has_sparse_292_str();
    sparse_292_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_293_str = 305;
inline bool Database_NoBench::has_sparse_293_str() const {
  return (_has_bits_[9] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_293_str() {
  _has_bits_[9] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_293_str() {
  _has_bits_[9] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_293_str() {
  if (sparse_293_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_293_str_->clear();
  }
  clear_has_sparse_293_str();
}
inline const ::std::string& Database_NoBench::sparse_293_str() const {
  return *sparse_293_str_;
}
inline void Database_NoBench::set_sparse_293_str(const ::std::string& value) {
  set_has_sparse_293_str();
  if (sparse_293_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_293_str_ = new ::std::string;
  }
  sparse_293_str_->assign(value);
}
inline void Database_NoBench::set_sparse_293_str(const char* value) {
  set_has_sparse_293_str();
  if (sparse_293_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_293_str_ = new ::std::string;
  }
  sparse_293_str_->assign(value);
}
inline void Database_NoBench::set_sparse_293_str(const char* value, size_t size) {
  set_has_sparse_293_str();
  if (sparse_293_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_293_str_ = new ::std::string;
  }
  sparse_293_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_293_str() {
  set_has_sparse_293_str();
  if (sparse_293_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_293_str_ = new ::std::string;
  }
  return sparse_293_str_;
}
inline ::std::string* Database_NoBench::release_sparse_293_str() {
  clear_has_sparse_293_str();
  if (sparse_293_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_293_str_;
    sparse_293_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_293_str(::std::string* sparse_293_str) {
  if (sparse_293_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_293_str_;
  }
  if (sparse_293_str) {
    set_has_sparse_293_str();
    sparse_293_str_ = sparse_293_str;
  } else {
    clear_has_sparse_293_str();
    sparse_293_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_294_str = 306;
inline bool Database_NoBench::has_sparse_294_str() const {
  return (_has_bits_[9] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_294_str() {
  _has_bits_[9] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_294_str() {
  _has_bits_[9] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_294_str() {
  if (sparse_294_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_294_str_->clear();
  }
  clear_has_sparse_294_str();
}
inline const ::std::string& Database_NoBench::sparse_294_str() const {
  return *sparse_294_str_;
}
inline void Database_NoBench::set_sparse_294_str(const ::std::string& value) {
  set_has_sparse_294_str();
  if (sparse_294_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_294_str_ = new ::std::string;
  }
  sparse_294_str_->assign(value);
}
inline void Database_NoBench::set_sparse_294_str(const char* value) {
  set_has_sparse_294_str();
  if (sparse_294_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_294_str_ = new ::std::string;
  }
  sparse_294_str_->assign(value);
}
inline void Database_NoBench::set_sparse_294_str(const char* value, size_t size) {
  set_has_sparse_294_str();
  if (sparse_294_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_294_str_ = new ::std::string;
  }
  sparse_294_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_294_str() {
  set_has_sparse_294_str();
  if (sparse_294_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_294_str_ = new ::std::string;
  }
  return sparse_294_str_;
}
inline ::std::string* Database_NoBench::release_sparse_294_str() {
  clear_has_sparse_294_str();
  if (sparse_294_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_294_str_;
    sparse_294_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_294_str(::std::string* sparse_294_str) {
  if (sparse_294_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_294_str_;
  }
  if (sparse_294_str) {
    set_has_sparse_294_str();
    sparse_294_str_ = sparse_294_str;
  } else {
    clear_has_sparse_294_str();
    sparse_294_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_295_str = 307;
inline bool Database_NoBench::has_sparse_295_str() const {
  return (_has_bits_[9] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_295_str() {
  _has_bits_[9] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_295_str() {
  _has_bits_[9] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_295_str() {
  if (sparse_295_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_295_str_->clear();
  }
  clear_has_sparse_295_str();
}
inline const ::std::string& Database_NoBench::sparse_295_str() const {
  return *sparse_295_str_;
}
inline void Database_NoBench::set_sparse_295_str(const ::std::string& value) {
  set_has_sparse_295_str();
  if (sparse_295_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_295_str_ = new ::std::string;
  }
  sparse_295_str_->assign(value);
}
inline void Database_NoBench::set_sparse_295_str(const char* value) {
  set_has_sparse_295_str();
  if (sparse_295_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_295_str_ = new ::std::string;
  }
  sparse_295_str_->assign(value);
}
inline void Database_NoBench::set_sparse_295_str(const char* value, size_t size) {
  set_has_sparse_295_str();
  if (sparse_295_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_295_str_ = new ::std::string;
  }
  sparse_295_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_295_str() {
  set_has_sparse_295_str();
  if (sparse_295_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_295_str_ = new ::std::string;
  }
  return sparse_295_str_;
}
inline ::std::string* Database_NoBench::release_sparse_295_str() {
  clear_has_sparse_295_str();
  if (sparse_295_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_295_str_;
    sparse_295_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_295_str(::std::string* sparse_295_str) {
  if (sparse_295_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_295_str_;
  }
  if (sparse_295_str) {
    set_has_sparse_295_str();
    sparse_295_str_ = sparse_295_str;
  } else {
    clear_has_sparse_295_str();
    sparse_295_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_296_str = 308;
inline bool Database_NoBench::has_sparse_296_str() const {
  return (_has_bits_[9] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_296_str() {
  _has_bits_[9] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_296_str() {
  _has_bits_[9] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_296_str() {
  if (sparse_296_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_296_str_->clear();
  }
  clear_has_sparse_296_str();
}
inline const ::std::string& Database_NoBench::sparse_296_str() const {
  return *sparse_296_str_;
}
inline void Database_NoBench::set_sparse_296_str(const ::std::string& value) {
  set_has_sparse_296_str();
  if (sparse_296_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_296_str_ = new ::std::string;
  }
  sparse_296_str_->assign(value);
}
inline void Database_NoBench::set_sparse_296_str(const char* value) {
  set_has_sparse_296_str();
  if (sparse_296_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_296_str_ = new ::std::string;
  }
  sparse_296_str_->assign(value);
}
inline void Database_NoBench::set_sparse_296_str(const char* value, size_t size) {
  set_has_sparse_296_str();
  if (sparse_296_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_296_str_ = new ::std::string;
  }
  sparse_296_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_296_str() {
  set_has_sparse_296_str();
  if (sparse_296_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_296_str_ = new ::std::string;
  }
  return sparse_296_str_;
}
inline ::std::string* Database_NoBench::release_sparse_296_str() {
  clear_has_sparse_296_str();
  if (sparse_296_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_296_str_;
    sparse_296_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_296_str(::std::string* sparse_296_str) {
  if (sparse_296_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_296_str_;
  }
  if (sparse_296_str) {
    set_has_sparse_296_str();
    sparse_296_str_ = sparse_296_str;
  } else {
    clear_has_sparse_296_str();
    sparse_296_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_297_str = 309;
inline bool Database_NoBench::has_sparse_297_str() const {
  return (_has_bits_[9] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_297_str() {
  _has_bits_[9] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_297_str() {
  _has_bits_[9] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_297_str() {
  if (sparse_297_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_297_str_->clear();
  }
  clear_has_sparse_297_str();
}
inline const ::std::string& Database_NoBench::sparse_297_str() const {
  return *sparse_297_str_;
}
inline void Database_NoBench::set_sparse_297_str(const ::std::string& value) {
  set_has_sparse_297_str();
  if (sparse_297_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_297_str_ = new ::std::string;
  }
  sparse_297_str_->assign(value);
}
inline void Database_NoBench::set_sparse_297_str(const char* value) {
  set_has_sparse_297_str();
  if (sparse_297_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_297_str_ = new ::std::string;
  }
  sparse_297_str_->assign(value);
}
inline void Database_NoBench::set_sparse_297_str(const char* value, size_t size) {
  set_has_sparse_297_str();
  if (sparse_297_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_297_str_ = new ::std::string;
  }
  sparse_297_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_297_str() {
  set_has_sparse_297_str();
  if (sparse_297_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_297_str_ = new ::std::string;
  }
  return sparse_297_str_;
}
inline ::std::string* Database_NoBench::release_sparse_297_str() {
  clear_has_sparse_297_str();
  if (sparse_297_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_297_str_;
    sparse_297_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_297_str(::std::string* sparse_297_str) {
  if (sparse_297_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_297_str_;
  }
  if (sparse_297_str) {
    set_has_sparse_297_str();
    sparse_297_str_ = sparse_297_str;
  } else {
    clear_has_sparse_297_str();
    sparse_297_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_298_str = 310;
inline bool Database_NoBench::has_sparse_298_str() const {
  return (_has_bits_[9] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_298_str() {
  _has_bits_[9] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_298_str() {
  _has_bits_[9] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_298_str() {
  if (sparse_298_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_298_str_->clear();
  }
  clear_has_sparse_298_str();
}
inline const ::std::string& Database_NoBench::sparse_298_str() const {
  return *sparse_298_str_;
}
inline void Database_NoBench::set_sparse_298_str(const ::std::string& value) {
  set_has_sparse_298_str();
  if (sparse_298_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_298_str_ = new ::std::string;
  }
  sparse_298_str_->assign(value);
}
inline void Database_NoBench::set_sparse_298_str(const char* value) {
  set_has_sparse_298_str();
  if (sparse_298_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_298_str_ = new ::std::string;
  }
  sparse_298_str_->assign(value);
}
inline void Database_NoBench::set_sparse_298_str(const char* value, size_t size) {
  set_has_sparse_298_str();
  if (sparse_298_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_298_str_ = new ::std::string;
  }
  sparse_298_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_298_str() {
  set_has_sparse_298_str();
  if (sparse_298_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_298_str_ = new ::std::string;
  }
  return sparse_298_str_;
}
inline ::std::string* Database_NoBench::release_sparse_298_str() {
  clear_has_sparse_298_str();
  if (sparse_298_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_298_str_;
    sparse_298_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_298_str(::std::string* sparse_298_str) {
  if (sparse_298_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_298_str_;
  }
  if (sparse_298_str) {
    set_has_sparse_298_str();
    sparse_298_str_ = sparse_298_str;
  } else {
    clear_has_sparse_298_str();
    sparse_298_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_299_str = 311;
inline bool Database_NoBench::has_sparse_299_str() const {
  return (_has_bits_[9] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_299_str() {
  _has_bits_[9] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_299_str() {
  _has_bits_[9] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_299_str() {
  if (sparse_299_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_299_str_->clear();
  }
  clear_has_sparse_299_str();
}
inline const ::std::string& Database_NoBench::sparse_299_str() const {
  return *sparse_299_str_;
}
inline void Database_NoBench::set_sparse_299_str(const ::std::string& value) {
  set_has_sparse_299_str();
  if (sparse_299_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_299_str_ = new ::std::string;
  }
  sparse_299_str_->assign(value);
}
inline void Database_NoBench::set_sparse_299_str(const char* value) {
  set_has_sparse_299_str();
  if (sparse_299_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_299_str_ = new ::std::string;
  }
  sparse_299_str_->assign(value);
}
inline void Database_NoBench::set_sparse_299_str(const char* value, size_t size) {
  set_has_sparse_299_str();
  if (sparse_299_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_299_str_ = new ::std::string;
  }
  sparse_299_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_299_str() {
  set_has_sparse_299_str();
  if (sparse_299_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_299_str_ = new ::std::string;
  }
  return sparse_299_str_;
}
inline ::std::string* Database_NoBench::release_sparse_299_str() {
  clear_has_sparse_299_str();
  if (sparse_299_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_299_str_;
    sparse_299_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_299_str(::std::string* sparse_299_str) {
  if (sparse_299_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_299_str_;
  }
  if (sparse_299_str) {
    set_has_sparse_299_str();
    sparse_299_str_ = sparse_299_str;
  } else {
    clear_has_sparse_299_str();
    sparse_299_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_300_str = 312;
inline bool Database_NoBench::has_sparse_300_str() const {
  return (_has_bits_[9] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_300_str() {
  _has_bits_[9] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_300_str() {
  _has_bits_[9] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_300_str() {
  if (sparse_300_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_300_str_->clear();
  }
  clear_has_sparse_300_str();
}
inline const ::std::string& Database_NoBench::sparse_300_str() const {
  return *sparse_300_str_;
}
inline void Database_NoBench::set_sparse_300_str(const ::std::string& value) {
  set_has_sparse_300_str();
  if (sparse_300_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_300_str_ = new ::std::string;
  }
  sparse_300_str_->assign(value);
}
inline void Database_NoBench::set_sparse_300_str(const char* value) {
  set_has_sparse_300_str();
  if (sparse_300_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_300_str_ = new ::std::string;
  }
  sparse_300_str_->assign(value);
}
inline void Database_NoBench::set_sparse_300_str(const char* value, size_t size) {
  set_has_sparse_300_str();
  if (sparse_300_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_300_str_ = new ::std::string;
  }
  sparse_300_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_300_str() {
  set_has_sparse_300_str();
  if (sparse_300_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_300_str_ = new ::std::string;
  }
  return sparse_300_str_;
}
inline ::std::string* Database_NoBench::release_sparse_300_str() {
  clear_has_sparse_300_str();
  if (sparse_300_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_300_str_;
    sparse_300_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_300_str(::std::string* sparse_300_str) {
  if (sparse_300_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_300_str_;
  }
  if (sparse_300_str) {
    set_has_sparse_300_str();
    sparse_300_str_ = sparse_300_str;
  } else {
    clear_has_sparse_300_str();
    sparse_300_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_301_str = 313;
inline bool Database_NoBench::has_sparse_301_str() const {
  return (_has_bits_[9] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_301_str() {
  _has_bits_[9] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_301_str() {
  _has_bits_[9] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_301_str() {
  if (sparse_301_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_301_str_->clear();
  }
  clear_has_sparse_301_str();
}
inline const ::std::string& Database_NoBench::sparse_301_str() const {
  return *sparse_301_str_;
}
inline void Database_NoBench::set_sparse_301_str(const ::std::string& value) {
  set_has_sparse_301_str();
  if (sparse_301_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_301_str_ = new ::std::string;
  }
  sparse_301_str_->assign(value);
}
inline void Database_NoBench::set_sparse_301_str(const char* value) {
  set_has_sparse_301_str();
  if (sparse_301_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_301_str_ = new ::std::string;
  }
  sparse_301_str_->assign(value);
}
inline void Database_NoBench::set_sparse_301_str(const char* value, size_t size) {
  set_has_sparse_301_str();
  if (sparse_301_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_301_str_ = new ::std::string;
  }
  sparse_301_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_301_str() {
  set_has_sparse_301_str();
  if (sparse_301_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_301_str_ = new ::std::string;
  }
  return sparse_301_str_;
}
inline ::std::string* Database_NoBench::release_sparse_301_str() {
  clear_has_sparse_301_str();
  if (sparse_301_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_301_str_;
    sparse_301_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_301_str(::std::string* sparse_301_str) {
  if (sparse_301_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_301_str_;
  }
  if (sparse_301_str) {
    set_has_sparse_301_str();
    sparse_301_str_ = sparse_301_str;
  } else {
    clear_has_sparse_301_str();
    sparse_301_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_302_str = 314;
inline bool Database_NoBench::has_sparse_302_str() const {
  return (_has_bits_[9] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_302_str() {
  _has_bits_[9] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_302_str() {
  _has_bits_[9] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_302_str() {
  if (sparse_302_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_302_str_->clear();
  }
  clear_has_sparse_302_str();
}
inline const ::std::string& Database_NoBench::sparse_302_str() const {
  return *sparse_302_str_;
}
inline void Database_NoBench::set_sparse_302_str(const ::std::string& value) {
  set_has_sparse_302_str();
  if (sparse_302_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_302_str_ = new ::std::string;
  }
  sparse_302_str_->assign(value);
}
inline void Database_NoBench::set_sparse_302_str(const char* value) {
  set_has_sparse_302_str();
  if (sparse_302_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_302_str_ = new ::std::string;
  }
  sparse_302_str_->assign(value);
}
inline void Database_NoBench::set_sparse_302_str(const char* value, size_t size) {
  set_has_sparse_302_str();
  if (sparse_302_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_302_str_ = new ::std::string;
  }
  sparse_302_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_302_str() {
  set_has_sparse_302_str();
  if (sparse_302_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_302_str_ = new ::std::string;
  }
  return sparse_302_str_;
}
inline ::std::string* Database_NoBench::release_sparse_302_str() {
  clear_has_sparse_302_str();
  if (sparse_302_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_302_str_;
    sparse_302_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_302_str(::std::string* sparse_302_str) {
  if (sparse_302_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_302_str_;
  }
  if (sparse_302_str) {
    set_has_sparse_302_str();
    sparse_302_str_ = sparse_302_str;
  } else {
    clear_has_sparse_302_str();
    sparse_302_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_303_str = 315;
inline bool Database_NoBench::has_sparse_303_str() const {
  return (_has_bits_[9] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_303_str() {
  _has_bits_[9] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_303_str() {
  _has_bits_[9] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_303_str() {
  if (sparse_303_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_303_str_->clear();
  }
  clear_has_sparse_303_str();
}
inline const ::std::string& Database_NoBench::sparse_303_str() const {
  return *sparse_303_str_;
}
inline void Database_NoBench::set_sparse_303_str(const ::std::string& value) {
  set_has_sparse_303_str();
  if (sparse_303_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_303_str_ = new ::std::string;
  }
  sparse_303_str_->assign(value);
}
inline void Database_NoBench::set_sparse_303_str(const char* value) {
  set_has_sparse_303_str();
  if (sparse_303_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_303_str_ = new ::std::string;
  }
  sparse_303_str_->assign(value);
}
inline void Database_NoBench::set_sparse_303_str(const char* value, size_t size) {
  set_has_sparse_303_str();
  if (sparse_303_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_303_str_ = new ::std::string;
  }
  sparse_303_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_303_str() {
  set_has_sparse_303_str();
  if (sparse_303_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_303_str_ = new ::std::string;
  }
  return sparse_303_str_;
}
inline ::std::string* Database_NoBench::release_sparse_303_str() {
  clear_has_sparse_303_str();
  if (sparse_303_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_303_str_;
    sparse_303_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_303_str(::std::string* sparse_303_str) {
  if (sparse_303_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_303_str_;
  }
  if (sparse_303_str) {
    set_has_sparse_303_str();
    sparse_303_str_ = sparse_303_str;
  } else {
    clear_has_sparse_303_str();
    sparse_303_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_304_str = 316;
inline bool Database_NoBench::has_sparse_304_str() const {
  return (_has_bits_[9] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_304_str() {
  _has_bits_[9] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_304_str() {
  _has_bits_[9] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_304_str() {
  if (sparse_304_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_304_str_->clear();
  }
  clear_has_sparse_304_str();
}
inline const ::std::string& Database_NoBench::sparse_304_str() const {
  return *sparse_304_str_;
}
inline void Database_NoBench::set_sparse_304_str(const ::std::string& value) {
  set_has_sparse_304_str();
  if (sparse_304_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_304_str_ = new ::std::string;
  }
  sparse_304_str_->assign(value);
}
inline void Database_NoBench::set_sparse_304_str(const char* value) {
  set_has_sparse_304_str();
  if (sparse_304_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_304_str_ = new ::std::string;
  }
  sparse_304_str_->assign(value);
}
inline void Database_NoBench::set_sparse_304_str(const char* value, size_t size) {
  set_has_sparse_304_str();
  if (sparse_304_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_304_str_ = new ::std::string;
  }
  sparse_304_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_304_str() {
  set_has_sparse_304_str();
  if (sparse_304_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_304_str_ = new ::std::string;
  }
  return sparse_304_str_;
}
inline ::std::string* Database_NoBench::release_sparse_304_str() {
  clear_has_sparse_304_str();
  if (sparse_304_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_304_str_;
    sparse_304_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_304_str(::std::string* sparse_304_str) {
  if (sparse_304_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_304_str_;
  }
  if (sparse_304_str) {
    set_has_sparse_304_str();
    sparse_304_str_ = sparse_304_str;
  } else {
    clear_has_sparse_304_str();
    sparse_304_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_305_str = 317;
inline bool Database_NoBench::has_sparse_305_str() const {
  return (_has_bits_[9] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_305_str() {
  _has_bits_[9] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_305_str() {
  _has_bits_[9] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_305_str() {
  if (sparse_305_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_305_str_->clear();
  }
  clear_has_sparse_305_str();
}
inline const ::std::string& Database_NoBench::sparse_305_str() const {
  return *sparse_305_str_;
}
inline void Database_NoBench::set_sparse_305_str(const ::std::string& value) {
  set_has_sparse_305_str();
  if (sparse_305_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_305_str_ = new ::std::string;
  }
  sparse_305_str_->assign(value);
}
inline void Database_NoBench::set_sparse_305_str(const char* value) {
  set_has_sparse_305_str();
  if (sparse_305_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_305_str_ = new ::std::string;
  }
  sparse_305_str_->assign(value);
}
inline void Database_NoBench::set_sparse_305_str(const char* value, size_t size) {
  set_has_sparse_305_str();
  if (sparse_305_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_305_str_ = new ::std::string;
  }
  sparse_305_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_305_str() {
  set_has_sparse_305_str();
  if (sparse_305_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_305_str_ = new ::std::string;
  }
  return sparse_305_str_;
}
inline ::std::string* Database_NoBench::release_sparse_305_str() {
  clear_has_sparse_305_str();
  if (sparse_305_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_305_str_;
    sparse_305_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_305_str(::std::string* sparse_305_str) {
  if (sparse_305_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_305_str_;
  }
  if (sparse_305_str) {
    set_has_sparse_305_str();
    sparse_305_str_ = sparse_305_str;
  } else {
    clear_has_sparse_305_str();
    sparse_305_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_306_str = 318;
inline bool Database_NoBench::has_sparse_306_str() const {
  return (_has_bits_[9] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_306_str() {
  _has_bits_[9] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_306_str() {
  _has_bits_[9] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_306_str() {
  if (sparse_306_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_306_str_->clear();
  }
  clear_has_sparse_306_str();
}
inline const ::std::string& Database_NoBench::sparse_306_str() const {
  return *sparse_306_str_;
}
inline void Database_NoBench::set_sparse_306_str(const ::std::string& value) {
  set_has_sparse_306_str();
  if (sparse_306_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_306_str_ = new ::std::string;
  }
  sparse_306_str_->assign(value);
}
inline void Database_NoBench::set_sparse_306_str(const char* value) {
  set_has_sparse_306_str();
  if (sparse_306_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_306_str_ = new ::std::string;
  }
  sparse_306_str_->assign(value);
}
inline void Database_NoBench::set_sparse_306_str(const char* value, size_t size) {
  set_has_sparse_306_str();
  if (sparse_306_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_306_str_ = new ::std::string;
  }
  sparse_306_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_306_str() {
  set_has_sparse_306_str();
  if (sparse_306_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_306_str_ = new ::std::string;
  }
  return sparse_306_str_;
}
inline ::std::string* Database_NoBench::release_sparse_306_str() {
  clear_has_sparse_306_str();
  if (sparse_306_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_306_str_;
    sparse_306_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_306_str(::std::string* sparse_306_str) {
  if (sparse_306_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_306_str_;
  }
  if (sparse_306_str) {
    set_has_sparse_306_str();
    sparse_306_str_ = sparse_306_str;
  } else {
    clear_has_sparse_306_str();
    sparse_306_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_307_str = 319;
inline bool Database_NoBench::has_sparse_307_str() const {
  return (_has_bits_[10] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_307_str() {
  _has_bits_[10] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_307_str() {
  _has_bits_[10] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_307_str() {
  if (sparse_307_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_307_str_->clear();
  }
  clear_has_sparse_307_str();
}
inline const ::std::string& Database_NoBench::sparse_307_str() const {
  return *sparse_307_str_;
}
inline void Database_NoBench::set_sparse_307_str(const ::std::string& value) {
  set_has_sparse_307_str();
  if (sparse_307_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_307_str_ = new ::std::string;
  }
  sparse_307_str_->assign(value);
}
inline void Database_NoBench::set_sparse_307_str(const char* value) {
  set_has_sparse_307_str();
  if (sparse_307_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_307_str_ = new ::std::string;
  }
  sparse_307_str_->assign(value);
}
inline void Database_NoBench::set_sparse_307_str(const char* value, size_t size) {
  set_has_sparse_307_str();
  if (sparse_307_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_307_str_ = new ::std::string;
  }
  sparse_307_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_307_str() {
  set_has_sparse_307_str();
  if (sparse_307_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_307_str_ = new ::std::string;
  }
  return sparse_307_str_;
}
inline ::std::string* Database_NoBench::release_sparse_307_str() {
  clear_has_sparse_307_str();
  if (sparse_307_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_307_str_;
    sparse_307_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_307_str(::std::string* sparse_307_str) {
  if (sparse_307_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_307_str_;
  }
  if (sparse_307_str) {
    set_has_sparse_307_str();
    sparse_307_str_ = sparse_307_str;
  } else {
    clear_has_sparse_307_str();
    sparse_307_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_308_str = 320;
inline bool Database_NoBench::has_sparse_308_str() const {
  return (_has_bits_[10] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_308_str() {
  _has_bits_[10] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_308_str() {
  _has_bits_[10] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_308_str() {
  if (sparse_308_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_308_str_->clear();
  }
  clear_has_sparse_308_str();
}
inline const ::std::string& Database_NoBench::sparse_308_str() const {
  return *sparse_308_str_;
}
inline void Database_NoBench::set_sparse_308_str(const ::std::string& value) {
  set_has_sparse_308_str();
  if (sparse_308_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_308_str_ = new ::std::string;
  }
  sparse_308_str_->assign(value);
}
inline void Database_NoBench::set_sparse_308_str(const char* value) {
  set_has_sparse_308_str();
  if (sparse_308_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_308_str_ = new ::std::string;
  }
  sparse_308_str_->assign(value);
}
inline void Database_NoBench::set_sparse_308_str(const char* value, size_t size) {
  set_has_sparse_308_str();
  if (sparse_308_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_308_str_ = new ::std::string;
  }
  sparse_308_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_308_str() {
  set_has_sparse_308_str();
  if (sparse_308_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_308_str_ = new ::std::string;
  }
  return sparse_308_str_;
}
inline ::std::string* Database_NoBench::release_sparse_308_str() {
  clear_has_sparse_308_str();
  if (sparse_308_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_308_str_;
    sparse_308_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_308_str(::std::string* sparse_308_str) {
  if (sparse_308_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_308_str_;
  }
  if (sparse_308_str) {
    set_has_sparse_308_str();
    sparse_308_str_ = sparse_308_str;
  } else {
    clear_has_sparse_308_str();
    sparse_308_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_309_str = 321;
inline bool Database_NoBench::has_sparse_309_str() const {
  return (_has_bits_[10] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_309_str() {
  _has_bits_[10] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_309_str() {
  _has_bits_[10] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_309_str() {
  if (sparse_309_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_309_str_->clear();
  }
  clear_has_sparse_309_str();
}
inline const ::std::string& Database_NoBench::sparse_309_str() const {
  return *sparse_309_str_;
}
inline void Database_NoBench::set_sparse_309_str(const ::std::string& value) {
  set_has_sparse_309_str();
  if (sparse_309_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_309_str_ = new ::std::string;
  }
  sparse_309_str_->assign(value);
}
inline void Database_NoBench::set_sparse_309_str(const char* value) {
  set_has_sparse_309_str();
  if (sparse_309_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_309_str_ = new ::std::string;
  }
  sparse_309_str_->assign(value);
}
inline void Database_NoBench::set_sparse_309_str(const char* value, size_t size) {
  set_has_sparse_309_str();
  if (sparse_309_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_309_str_ = new ::std::string;
  }
  sparse_309_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_309_str() {
  set_has_sparse_309_str();
  if (sparse_309_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_309_str_ = new ::std::string;
  }
  return sparse_309_str_;
}
inline ::std::string* Database_NoBench::release_sparse_309_str() {
  clear_has_sparse_309_str();
  if (sparse_309_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_309_str_;
    sparse_309_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_309_str(::std::string* sparse_309_str) {
  if (sparse_309_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_309_str_;
  }
  if (sparse_309_str) {
    set_has_sparse_309_str();
    sparse_309_str_ = sparse_309_str;
  } else {
    clear_has_sparse_309_str();
    sparse_309_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_310_str = 322;
inline bool Database_NoBench::has_sparse_310_str() const {
  return (_has_bits_[10] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_310_str() {
  _has_bits_[10] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_310_str() {
  _has_bits_[10] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_310_str() {
  if (sparse_310_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_310_str_->clear();
  }
  clear_has_sparse_310_str();
}
inline const ::std::string& Database_NoBench::sparse_310_str() const {
  return *sparse_310_str_;
}
inline void Database_NoBench::set_sparse_310_str(const ::std::string& value) {
  set_has_sparse_310_str();
  if (sparse_310_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_310_str_ = new ::std::string;
  }
  sparse_310_str_->assign(value);
}
inline void Database_NoBench::set_sparse_310_str(const char* value) {
  set_has_sparse_310_str();
  if (sparse_310_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_310_str_ = new ::std::string;
  }
  sparse_310_str_->assign(value);
}
inline void Database_NoBench::set_sparse_310_str(const char* value, size_t size) {
  set_has_sparse_310_str();
  if (sparse_310_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_310_str_ = new ::std::string;
  }
  sparse_310_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_310_str() {
  set_has_sparse_310_str();
  if (sparse_310_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_310_str_ = new ::std::string;
  }
  return sparse_310_str_;
}
inline ::std::string* Database_NoBench::release_sparse_310_str() {
  clear_has_sparse_310_str();
  if (sparse_310_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_310_str_;
    sparse_310_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_310_str(::std::string* sparse_310_str) {
  if (sparse_310_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_310_str_;
  }
  if (sparse_310_str) {
    set_has_sparse_310_str();
    sparse_310_str_ = sparse_310_str;
  } else {
    clear_has_sparse_310_str();
    sparse_310_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_311_str = 323;
inline bool Database_NoBench::has_sparse_311_str() const {
  return (_has_bits_[10] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_311_str() {
  _has_bits_[10] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_311_str() {
  _has_bits_[10] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_311_str() {
  if (sparse_311_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_311_str_->clear();
  }
  clear_has_sparse_311_str();
}
inline const ::std::string& Database_NoBench::sparse_311_str() const {
  return *sparse_311_str_;
}
inline void Database_NoBench::set_sparse_311_str(const ::std::string& value) {
  set_has_sparse_311_str();
  if (sparse_311_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_311_str_ = new ::std::string;
  }
  sparse_311_str_->assign(value);
}
inline void Database_NoBench::set_sparse_311_str(const char* value) {
  set_has_sparse_311_str();
  if (sparse_311_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_311_str_ = new ::std::string;
  }
  sparse_311_str_->assign(value);
}
inline void Database_NoBench::set_sparse_311_str(const char* value, size_t size) {
  set_has_sparse_311_str();
  if (sparse_311_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_311_str_ = new ::std::string;
  }
  sparse_311_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_311_str() {
  set_has_sparse_311_str();
  if (sparse_311_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_311_str_ = new ::std::string;
  }
  return sparse_311_str_;
}
inline ::std::string* Database_NoBench::release_sparse_311_str() {
  clear_has_sparse_311_str();
  if (sparse_311_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_311_str_;
    sparse_311_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_311_str(::std::string* sparse_311_str) {
  if (sparse_311_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_311_str_;
  }
  if (sparse_311_str) {
    set_has_sparse_311_str();
    sparse_311_str_ = sparse_311_str;
  } else {
    clear_has_sparse_311_str();
    sparse_311_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_312_str = 324;
inline bool Database_NoBench::has_sparse_312_str() const {
  return (_has_bits_[10] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_312_str() {
  _has_bits_[10] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_312_str() {
  _has_bits_[10] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_312_str() {
  if (sparse_312_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_312_str_->clear();
  }
  clear_has_sparse_312_str();
}
inline const ::std::string& Database_NoBench::sparse_312_str() const {
  return *sparse_312_str_;
}
inline void Database_NoBench::set_sparse_312_str(const ::std::string& value) {
  set_has_sparse_312_str();
  if (sparse_312_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_312_str_ = new ::std::string;
  }
  sparse_312_str_->assign(value);
}
inline void Database_NoBench::set_sparse_312_str(const char* value) {
  set_has_sparse_312_str();
  if (sparse_312_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_312_str_ = new ::std::string;
  }
  sparse_312_str_->assign(value);
}
inline void Database_NoBench::set_sparse_312_str(const char* value, size_t size) {
  set_has_sparse_312_str();
  if (sparse_312_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_312_str_ = new ::std::string;
  }
  sparse_312_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_312_str() {
  set_has_sparse_312_str();
  if (sparse_312_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_312_str_ = new ::std::string;
  }
  return sparse_312_str_;
}
inline ::std::string* Database_NoBench::release_sparse_312_str() {
  clear_has_sparse_312_str();
  if (sparse_312_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_312_str_;
    sparse_312_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_312_str(::std::string* sparse_312_str) {
  if (sparse_312_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_312_str_;
  }
  if (sparse_312_str) {
    set_has_sparse_312_str();
    sparse_312_str_ = sparse_312_str;
  } else {
    clear_has_sparse_312_str();
    sparse_312_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_313_str = 325;
inline bool Database_NoBench::has_sparse_313_str() const {
  return (_has_bits_[10] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_313_str() {
  _has_bits_[10] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_313_str() {
  _has_bits_[10] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_313_str() {
  if (sparse_313_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_313_str_->clear();
  }
  clear_has_sparse_313_str();
}
inline const ::std::string& Database_NoBench::sparse_313_str() const {
  return *sparse_313_str_;
}
inline void Database_NoBench::set_sparse_313_str(const ::std::string& value) {
  set_has_sparse_313_str();
  if (sparse_313_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_313_str_ = new ::std::string;
  }
  sparse_313_str_->assign(value);
}
inline void Database_NoBench::set_sparse_313_str(const char* value) {
  set_has_sparse_313_str();
  if (sparse_313_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_313_str_ = new ::std::string;
  }
  sparse_313_str_->assign(value);
}
inline void Database_NoBench::set_sparse_313_str(const char* value, size_t size) {
  set_has_sparse_313_str();
  if (sparse_313_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_313_str_ = new ::std::string;
  }
  sparse_313_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_313_str() {
  set_has_sparse_313_str();
  if (sparse_313_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_313_str_ = new ::std::string;
  }
  return sparse_313_str_;
}
inline ::std::string* Database_NoBench::release_sparse_313_str() {
  clear_has_sparse_313_str();
  if (sparse_313_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_313_str_;
    sparse_313_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_313_str(::std::string* sparse_313_str) {
  if (sparse_313_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_313_str_;
  }
  if (sparse_313_str) {
    set_has_sparse_313_str();
    sparse_313_str_ = sparse_313_str;
  } else {
    clear_has_sparse_313_str();
    sparse_313_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_314_str = 326;
inline bool Database_NoBench::has_sparse_314_str() const {
  return (_has_bits_[10] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_314_str() {
  _has_bits_[10] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_314_str() {
  _has_bits_[10] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_314_str() {
  if (sparse_314_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_314_str_->clear();
  }
  clear_has_sparse_314_str();
}
inline const ::std::string& Database_NoBench::sparse_314_str() const {
  return *sparse_314_str_;
}
inline void Database_NoBench::set_sparse_314_str(const ::std::string& value) {
  set_has_sparse_314_str();
  if (sparse_314_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_314_str_ = new ::std::string;
  }
  sparse_314_str_->assign(value);
}
inline void Database_NoBench::set_sparse_314_str(const char* value) {
  set_has_sparse_314_str();
  if (sparse_314_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_314_str_ = new ::std::string;
  }
  sparse_314_str_->assign(value);
}
inline void Database_NoBench::set_sparse_314_str(const char* value, size_t size) {
  set_has_sparse_314_str();
  if (sparse_314_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_314_str_ = new ::std::string;
  }
  sparse_314_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_314_str() {
  set_has_sparse_314_str();
  if (sparse_314_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_314_str_ = new ::std::string;
  }
  return sparse_314_str_;
}
inline ::std::string* Database_NoBench::release_sparse_314_str() {
  clear_has_sparse_314_str();
  if (sparse_314_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_314_str_;
    sparse_314_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_314_str(::std::string* sparse_314_str) {
  if (sparse_314_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_314_str_;
  }
  if (sparse_314_str) {
    set_has_sparse_314_str();
    sparse_314_str_ = sparse_314_str;
  } else {
    clear_has_sparse_314_str();
    sparse_314_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_315_str = 327;
inline bool Database_NoBench::has_sparse_315_str() const {
  return (_has_bits_[10] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_315_str() {
  _has_bits_[10] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_315_str() {
  _has_bits_[10] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_315_str() {
  if (sparse_315_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_315_str_->clear();
  }
  clear_has_sparse_315_str();
}
inline const ::std::string& Database_NoBench::sparse_315_str() const {
  return *sparse_315_str_;
}
inline void Database_NoBench::set_sparse_315_str(const ::std::string& value) {
  set_has_sparse_315_str();
  if (sparse_315_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_315_str_ = new ::std::string;
  }
  sparse_315_str_->assign(value);
}
inline void Database_NoBench::set_sparse_315_str(const char* value) {
  set_has_sparse_315_str();
  if (sparse_315_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_315_str_ = new ::std::string;
  }
  sparse_315_str_->assign(value);
}
inline void Database_NoBench::set_sparse_315_str(const char* value, size_t size) {
  set_has_sparse_315_str();
  if (sparse_315_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_315_str_ = new ::std::string;
  }
  sparse_315_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_315_str() {
  set_has_sparse_315_str();
  if (sparse_315_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_315_str_ = new ::std::string;
  }
  return sparse_315_str_;
}
inline ::std::string* Database_NoBench::release_sparse_315_str() {
  clear_has_sparse_315_str();
  if (sparse_315_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_315_str_;
    sparse_315_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_315_str(::std::string* sparse_315_str) {
  if (sparse_315_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_315_str_;
  }
  if (sparse_315_str) {
    set_has_sparse_315_str();
    sparse_315_str_ = sparse_315_str;
  } else {
    clear_has_sparse_315_str();
    sparse_315_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_316_str = 328;
inline bool Database_NoBench::has_sparse_316_str() const {
  return (_has_bits_[10] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_316_str() {
  _has_bits_[10] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_316_str() {
  _has_bits_[10] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_316_str() {
  if (sparse_316_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_316_str_->clear();
  }
  clear_has_sparse_316_str();
}
inline const ::std::string& Database_NoBench::sparse_316_str() const {
  return *sparse_316_str_;
}
inline void Database_NoBench::set_sparse_316_str(const ::std::string& value) {
  set_has_sparse_316_str();
  if (sparse_316_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_316_str_ = new ::std::string;
  }
  sparse_316_str_->assign(value);
}
inline void Database_NoBench::set_sparse_316_str(const char* value) {
  set_has_sparse_316_str();
  if (sparse_316_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_316_str_ = new ::std::string;
  }
  sparse_316_str_->assign(value);
}
inline void Database_NoBench::set_sparse_316_str(const char* value, size_t size) {
  set_has_sparse_316_str();
  if (sparse_316_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_316_str_ = new ::std::string;
  }
  sparse_316_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_316_str() {
  set_has_sparse_316_str();
  if (sparse_316_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_316_str_ = new ::std::string;
  }
  return sparse_316_str_;
}
inline ::std::string* Database_NoBench::release_sparse_316_str() {
  clear_has_sparse_316_str();
  if (sparse_316_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_316_str_;
    sparse_316_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_316_str(::std::string* sparse_316_str) {
  if (sparse_316_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_316_str_;
  }
  if (sparse_316_str) {
    set_has_sparse_316_str();
    sparse_316_str_ = sparse_316_str;
  } else {
    clear_has_sparse_316_str();
    sparse_316_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_317_str = 329;
inline bool Database_NoBench::has_sparse_317_str() const {
  return (_has_bits_[10] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_317_str() {
  _has_bits_[10] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_317_str() {
  _has_bits_[10] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_317_str() {
  if (sparse_317_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_317_str_->clear();
  }
  clear_has_sparse_317_str();
}
inline const ::std::string& Database_NoBench::sparse_317_str() const {
  return *sparse_317_str_;
}
inline void Database_NoBench::set_sparse_317_str(const ::std::string& value) {
  set_has_sparse_317_str();
  if (sparse_317_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_317_str_ = new ::std::string;
  }
  sparse_317_str_->assign(value);
}
inline void Database_NoBench::set_sparse_317_str(const char* value) {
  set_has_sparse_317_str();
  if (sparse_317_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_317_str_ = new ::std::string;
  }
  sparse_317_str_->assign(value);
}
inline void Database_NoBench::set_sparse_317_str(const char* value, size_t size) {
  set_has_sparse_317_str();
  if (sparse_317_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_317_str_ = new ::std::string;
  }
  sparse_317_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_317_str() {
  set_has_sparse_317_str();
  if (sparse_317_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_317_str_ = new ::std::string;
  }
  return sparse_317_str_;
}
inline ::std::string* Database_NoBench::release_sparse_317_str() {
  clear_has_sparse_317_str();
  if (sparse_317_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_317_str_;
    sparse_317_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_317_str(::std::string* sparse_317_str) {
  if (sparse_317_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_317_str_;
  }
  if (sparse_317_str) {
    set_has_sparse_317_str();
    sparse_317_str_ = sparse_317_str;
  } else {
    clear_has_sparse_317_str();
    sparse_317_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_318_str = 330;
inline bool Database_NoBench::has_sparse_318_str() const {
  return (_has_bits_[10] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_318_str() {
  _has_bits_[10] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_318_str() {
  _has_bits_[10] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_318_str() {
  if (sparse_318_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_318_str_->clear();
  }
  clear_has_sparse_318_str();
}
inline const ::std::string& Database_NoBench::sparse_318_str() const {
  return *sparse_318_str_;
}
inline void Database_NoBench::set_sparse_318_str(const ::std::string& value) {
  set_has_sparse_318_str();
  if (sparse_318_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_318_str_ = new ::std::string;
  }
  sparse_318_str_->assign(value);
}
inline void Database_NoBench::set_sparse_318_str(const char* value) {
  set_has_sparse_318_str();
  if (sparse_318_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_318_str_ = new ::std::string;
  }
  sparse_318_str_->assign(value);
}
inline void Database_NoBench::set_sparse_318_str(const char* value, size_t size) {
  set_has_sparse_318_str();
  if (sparse_318_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_318_str_ = new ::std::string;
  }
  sparse_318_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_318_str() {
  set_has_sparse_318_str();
  if (sparse_318_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_318_str_ = new ::std::string;
  }
  return sparse_318_str_;
}
inline ::std::string* Database_NoBench::release_sparse_318_str() {
  clear_has_sparse_318_str();
  if (sparse_318_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_318_str_;
    sparse_318_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_318_str(::std::string* sparse_318_str) {
  if (sparse_318_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_318_str_;
  }
  if (sparse_318_str) {
    set_has_sparse_318_str();
    sparse_318_str_ = sparse_318_str;
  } else {
    clear_has_sparse_318_str();
    sparse_318_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_319_str = 331;
inline bool Database_NoBench::has_sparse_319_str() const {
  return (_has_bits_[10] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_319_str() {
  _has_bits_[10] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_319_str() {
  _has_bits_[10] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_319_str() {
  if (sparse_319_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_319_str_->clear();
  }
  clear_has_sparse_319_str();
}
inline const ::std::string& Database_NoBench::sparse_319_str() const {
  return *sparse_319_str_;
}
inline void Database_NoBench::set_sparse_319_str(const ::std::string& value) {
  set_has_sparse_319_str();
  if (sparse_319_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_319_str_ = new ::std::string;
  }
  sparse_319_str_->assign(value);
}
inline void Database_NoBench::set_sparse_319_str(const char* value) {
  set_has_sparse_319_str();
  if (sparse_319_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_319_str_ = new ::std::string;
  }
  sparse_319_str_->assign(value);
}
inline void Database_NoBench::set_sparse_319_str(const char* value, size_t size) {
  set_has_sparse_319_str();
  if (sparse_319_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_319_str_ = new ::std::string;
  }
  sparse_319_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_319_str() {
  set_has_sparse_319_str();
  if (sparse_319_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_319_str_ = new ::std::string;
  }
  return sparse_319_str_;
}
inline ::std::string* Database_NoBench::release_sparse_319_str() {
  clear_has_sparse_319_str();
  if (sparse_319_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_319_str_;
    sparse_319_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_319_str(::std::string* sparse_319_str) {
  if (sparse_319_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_319_str_;
  }
  if (sparse_319_str) {
    set_has_sparse_319_str();
    sparse_319_str_ = sparse_319_str;
  } else {
    clear_has_sparse_319_str();
    sparse_319_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_320_str = 332;
inline bool Database_NoBench::has_sparse_320_str() const {
  return (_has_bits_[10] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_320_str() {
  _has_bits_[10] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_320_str() {
  _has_bits_[10] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_320_str() {
  if (sparse_320_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_320_str_->clear();
  }
  clear_has_sparse_320_str();
}
inline const ::std::string& Database_NoBench::sparse_320_str() const {
  return *sparse_320_str_;
}
inline void Database_NoBench::set_sparse_320_str(const ::std::string& value) {
  set_has_sparse_320_str();
  if (sparse_320_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_320_str_ = new ::std::string;
  }
  sparse_320_str_->assign(value);
}
inline void Database_NoBench::set_sparse_320_str(const char* value) {
  set_has_sparse_320_str();
  if (sparse_320_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_320_str_ = new ::std::string;
  }
  sparse_320_str_->assign(value);
}
inline void Database_NoBench::set_sparse_320_str(const char* value, size_t size) {
  set_has_sparse_320_str();
  if (sparse_320_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_320_str_ = new ::std::string;
  }
  sparse_320_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_320_str() {
  set_has_sparse_320_str();
  if (sparse_320_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_320_str_ = new ::std::string;
  }
  return sparse_320_str_;
}
inline ::std::string* Database_NoBench::release_sparse_320_str() {
  clear_has_sparse_320_str();
  if (sparse_320_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_320_str_;
    sparse_320_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_320_str(::std::string* sparse_320_str) {
  if (sparse_320_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_320_str_;
  }
  if (sparse_320_str) {
    set_has_sparse_320_str();
    sparse_320_str_ = sparse_320_str;
  } else {
    clear_has_sparse_320_str();
    sparse_320_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_321_str = 333;
inline bool Database_NoBench::has_sparse_321_str() const {
  return (_has_bits_[10] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_321_str() {
  _has_bits_[10] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_321_str() {
  _has_bits_[10] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_321_str() {
  if (sparse_321_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_321_str_->clear();
  }
  clear_has_sparse_321_str();
}
inline const ::std::string& Database_NoBench::sparse_321_str() const {
  return *sparse_321_str_;
}
inline void Database_NoBench::set_sparse_321_str(const ::std::string& value) {
  set_has_sparse_321_str();
  if (sparse_321_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_321_str_ = new ::std::string;
  }
  sparse_321_str_->assign(value);
}
inline void Database_NoBench::set_sparse_321_str(const char* value) {
  set_has_sparse_321_str();
  if (sparse_321_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_321_str_ = new ::std::string;
  }
  sparse_321_str_->assign(value);
}
inline void Database_NoBench::set_sparse_321_str(const char* value, size_t size) {
  set_has_sparse_321_str();
  if (sparse_321_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_321_str_ = new ::std::string;
  }
  sparse_321_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_321_str() {
  set_has_sparse_321_str();
  if (sparse_321_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_321_str_ = new ::std::string;
  }
  return sparse_321_str_;
}
inline ::std::string* Database_NoBench::release_sparse_321_str() {
  clear_has_sparse_321_str();
  if (sparse_321_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_321_str_;
    sparse_321_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_321_str(::std::string* sparse_321_str) {
  if (sparse_321_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_321_str_;
  }
  if (sparse_321_str) {
    set_has_sparse_321_str();
    sparse_321_str_ = sparse_321_str;
  } else {
    clear_has_sparse_321_str();
    sparse_321_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_322_str = 334;
inline bool Database_NoBench::has_sparse_322_str() const {
  return (_has_bits_[10] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_322_str() {
  _has_bits_[10] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_322_str() {
  _has_bits_[10] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_322_str() {
  if (sparse_322_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_322_str_->clear();
  }
  clear_has_sparse_322_str();
}
inline const ::std::string& Database_NoBench::sparse_322_str() const {
  return *sparse_322_str_;
}
inline void Database_NoBench::set_sparse_322_str(const ::std::string& value) {
  set_has_sparse_322_str();
  if (sparse_322_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_322_str_ = new ::std::string;
  }
  sparse_322_str_->assign(value);
}
inline void Database_NoBench::set_sparse_322_str(const char* value) {
  set_has_sparse_322_str();
  if (sparse_322_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_322_str_ = new ::std::string;
  }
  sparse_322_str_->assign(value);
}
inline void Database_NoBench::set_sparse_322_str(const char* value, size_t size) {
  set_has_sparse_322_str();
  if (sparse_322_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_322_str_ = new ::std::string;
  }
  sparse_322_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_322_str() {
  set_has_sparse_322_str();
  if (sparse_322_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_322_str_ = new ::std::string;
  }
  return sparse_322_str_;
}
inline ::std::string* Database_NoBench::release_sparse_322_str() {
  clear_has_sparse_322_str();
  if (sparse_322_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_322_str_;
    sparse_322_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_322_str(::std::string* sparse_322_str) {
  if (sparse_322_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_322_str_;
  }
  if (sparse_322_str) {
    set_has_sparse_322_str();
    sparse_322_str_ = sparse_322_str;
  } else {
    clear_has_sparse_322_str();
    sparse_322_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_323_str = 335;
inline bool Database_NoBench::has_sparse_323_str() const {
  return (_has_bits_[10] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_323_str() {
  _has_bits_[10] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_323_str() {
  _has_bits_[10] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_323_str() {
  if (sparse_323_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_323_str_->clear();
  }
  clear_has_sparse_323_str();
}
inline const ::std::string& Database_NoBench::sparse_323_str() const {
  return *sparse_323_str_;
}
inline void Database_NoBench::set_sparse_323_str(const ::std::string& value) {
  set_has_sparse_323_str();
  if (sparse_323_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_323_str_ = new ::std::string;
  }
  sparse_323_str_->assign(value);
}
inline void Database_NoBench::set_sparse_323_str(const char* value) {
  set_has_sparse_323_str();
  if (sparse_323_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_323_str_ = new ::std::string;
  }
  sparse_323_str_->assign(value);
}
inline void Database_NoBench::set_sparse_323_str(const char* value, size_t size) {
  set_has_sparse_323_str();
  if (sparse_323_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_323_str_ = new ::std::string;
  }
  sparse_323_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_323_str() {
  set_has_sparse_323_str();
  if (sparse_323_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_323_str_ = new ::std::string;
  }
  return sparse_323_str_;
}
inline ::std::string* Database_NoBench::release_sparse_323_str() {
  clear_has_sparse_323_str();
  if (sparse_323_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_323_str_;
    sparse_323_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_323_str(::std::string* sparse_323_str) {
  if (sparse_323_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_323_str_;
  }
  if (sparse_323_str) {
    set_has_sparse_323_str();
    sparse_323_str_ = sparse_323_str;
  } else {
    clear_has_sparse_323_str();
    sparse_323_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_324_str = 336;
inline bool Database_NoBench::has_sparse_324_str() const {
  return (_has_bits_[10] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_324_str() {
  _has_bits_[10] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_324_str() {
  _has_bits_[10] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_324_str() {
  if (sparse_324_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_324_str_->clear();
  }
  clear_has_sparse_324_str();
}
inline const ::std::string& Database_NoBench::sparse_324_str() const {
  return *sparse_324_str_;
}
inline void Database_NoBench::set_sparse_324_str(const ::std::string& value) {
  set_has_sparse_324_str();
  if (sparse_324_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_324_str_ = new ::std::string;
  }
  sparse_324_str_->assign(value);
}
inline void Database_NoBench::set_sparse_324_str(const char* value) {
  set_has_sparse_324_str();
  if (sparse_324_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_324_str_ = new ::std::string;
  }
  sparse_324_str_->assign(value);
}
inline void Database_NoBench::set_sparse_324_str(const char* value, size_t size) {
  set_has_sparse_324_str();
  if (sparse_324_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_324_str_ = new ::std::string;
  }
  sparse_324_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_324_str() {
  set_has_sparse_324_str();
  if (sparse_324_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_324_str_ = new ::std::string;
  }
  return sparse_324_str_;
}
inline ::std::string* Database_NoBench::release_sparse_324_str() {
  clear_has_sparse_324_str();
  if (sparse_324_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_324_str_;
    sparse_324_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_324_str(::std::string* sparse_324_str) {
  if (sparse_324_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_324_str_;
  }
  if (sparse_324_str) {
    set_has_sparse_324_str();
    sparse_324_str_ = sparse_324_str;
  } else {
    clear_has_sparse_324_str();
    sparse_324_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_325_str = 337;
inline bool Database_NoBench::has_sparse_325_str() const {
  return (_has_bits_[10] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_325_str() {
  _has_bits_[10] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_325_str() {
  _has_bits_[10] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_325_str() {
  if (sparse_325_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_325_str_->clear();
  }
  clear_has_sparse_325_str();
}
inline const ::std::string& Database_NoBench::sparse_325_str() const {
  return *sparse_325_str_;
}
inline void Database_NoBench::set_sparse_325_str(const ::std::string& value) {
  set_has_sparse_325_str();
  if (sparse_325_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_325_str_ = new ::std::string;
  }
  sparse_325_str_->assign(value);
}
inline void Database_NoBench::set_sparse_325_str(const char* value) {
  set_has_sparse_325_str();
  if (sparse_325_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_325_str_ = new ::std::string;
  }
  sparse_325_str_->assign(value);
}
inline void Database_NoBench::set_sparse_325_str(const char* value, size_t size) {
  set_has_sparse_325_str();
  if (sparse_325_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_325_str_ = new ::std::string;
  }
  sparse_325_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_325_str() {
  set_has_sparse_325_str();
  if (sparse_325_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_325_str_ = new ::std::string;
  }
  return sparse_325_str_;
}
inline ::std::string* Database_NoBench::release_sparse_325_str() {
  clear_has_sparse_325_str();
  if (sparse_325_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_325_str_;
    sparse_325_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_325_str(::std::string* sparse_325_str) {
  if (sparse_325_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_325_str_;
  }
  if (sparse_325_str) {
    set_has_sparse_325_str();
    sparse_325_str_ = sparse_325_str;
  } else {
    clear_has_sparse_325_str();
    sparse_325_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_326_str = 338;
inline bool Database_NoBench::has_sparse_326_str() const {
  return (_has_bits_[10] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_326_str() {
  _has_bits_[10] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_326_str() {
  _has_bits_[10] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_326_str() {
  if (sparse_326_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_326_str_->clear();
  }
  clear_has_sparse_326_str();
}
inline const ::std::string& Database_NoBench::sparse_326_str() const {
  return *sparse_326_str_;
}
inline void Database_NoBench::set_sparse_326_str(const ::std::string& value) {
  set_has_sparse_326_str();
  if (sparse_326_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_326_str_ = new ::std::string;
  }
  sparse_326_str_->assign(value);
}
inline void Database_NoBench::set_sparse_326_str(const char* value) {
  set_has_sparse_326_str();
  if (sparse_326_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_326_str_ = new ::std::string;
  }
  sparse_326_str_->assign(value);
}
inline void Database_NoBench::set_sparse_326_str(const char* value, size_t size) {
  set_has_sparse_326_str();
  if (sparse_326_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_326_str_ = new ::std::string;
  }
  sparse_326_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_326_str() {
  set_has_sparse_326_str();
  if (sparse_326_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_326_str_ = new ::std::string;
  }
  return sparse_326_str_;
}
inline ::std::string* Database_NoBench::release_sparse_326_str() {
  clear_has_sparse_326_str();
  if (sparse_326_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_326_str_;
    sparse_326_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_326_str(::std::string* sparse_326_str) {
  if (sparse_326_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_326_str_;
  }
  if (sparse_326_str) {
    set_has_sparse_326_str();
    sparse_326_str_ = sparse_326_str;
  } else {
    clear_has_sparse_326_str();
    sparse_326_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_327_str = 339;
inline bool Database_NoBench::has_sparse_327_str() const {
  return (_has_bits_[10] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_327_str() {
  _has_bits_[10] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_327_str() {
  _has_bits_[10] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_327_str() {
  if (sparse_327_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_327_str_->clear();
  }
  clear_has_sparse_327_str();
}
inline const ::std::string& Database_NoBench::sparse_327_str() const {
  return *sparse_327_str_;
}
inline void Database_NoBench::set_sparse_327_str(const ::std::string& value) {
  set_has_sparse_327_str();
  if (sparse_327_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_327_str_ = new ::std::string;
  }
  sparse_327_str_->assign(value);
}
inline void Database_NoBench::set_sparse_327_str(const char* value) {
  set_has_sparse_327_str();
  if (sparse_327_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_327_str_ = new ::std::string;
  }
  sparse_327_str_->assign(value);
}
inline void Database_NoBench::set_sparse_327_str(const char* value, size_t size) {
  set_has_sparse_327_str();
  if (sparse_327_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_327_str_ = new ::std::string;
  }
  sparse_327_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_327_str() {
  set_has_sparse_327_str();
  if (sparse_327_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_327_str_ = new ::std::string;
  }
  return sparse_327_str_;
}
inline ::std::string* Database_NoBench::release_sparse_327_str() {
  clear_has_sparse_327_str();
  if (sparse_327_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_327_str_;
    sparse_327_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_327_str(::std::string* sparse_327_str) {
  if (sparse_327_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_327_str_;
  }
  if (sparse_327_str) {
    set_has_sparse_327_str();
    sparse_327_str_ = sparse_327_str;
  } else {
    clear_has_sparse_327_str();
    sparse_327_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_328_str = 340;
inline bool Database_NoBench::has_sparse_328_str() const {
  return (_has_bits_[10] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_328_str() {
  _has_bits_[10] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_328_str() {
  _has_bits_[10] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_328_str() {
  if (sparse_328_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_328_str_->clear();
  }
  clear_has_sparse_328_str();
}
inline const ::std::string& Database_NoBench::sparse_328_str() const {
  return *sparse_328_str_;
}
inline void Database_NoBench::set_sparse_328_str(const ::std::string& value) {
  set_has_sparse_328_str();
  if (sparse_328_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_328_str_ = new ::std::string;
  }
  sparse_328_str_->assign(value);
}
inline void Database_NoBench::set_sparse_328_str(const char* value) {
  set_has_sparse_328_str();
  if (sparse_328_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_328_str_ = new ::std::string;
  }
  sparse_328_str_->assign(value);
}
inline void Database_NoBench::set_sparse_328_str(const char* value, size_t size) {
  set_has_sparse_328_str();
  if (sparse_328_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_328_str_ = new ::std::string;
  }
  sparse_328_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_328_str() {
  set_has_sparse_328_str();
  if (sparse_328_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_328_str_ = new ::std::string;
  }
  return sparse_328_str_;
}
inline ::std::string* Database_NoBench::release_sparse_328_str() {
  clear_has_sparse_328_str();
  if (sparse_328_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_328_str_;
    sparse_328_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_328_str(::std::string* sparse_328_str) {
  if (sparse_328_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_328_str_;
  }
  if (sparse_328_str) {
    set_has_sparse_328_str();
    sparse_328_str_ = sparse_328_str;
  } else {
    clear_has_sparse_328_str();
    sparse_328_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_329_str = 341;
inline bool Database_NoBench::has_sparse_329_str() const {
  return (_has_bits_[10] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_329_str() {
  _has_bits_[10] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_329_str() {
  _has_bits_[10] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_329_str() {
  if (sparse_329_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_329_str_->clear();
  }
  clear_has_sparse_329_str();
}
inline const ::std::string& Database_NoBench::sparse_329_str() const {
  return *sparse_329_str_;
}
inline void Database_NoBench::set_sparse_329_str(const ::std::string& value) {
  set_has_sparse_329_str();
  if (sparse_329_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_329_str_ = new ::std::string;
  }
  sparse_329_str_->assign(value);
}
inline void Database_NoBench::set_sparse_329_str(const char* value) {
  set_has_sparse_329_str();
  if (sparse_329_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_329_str_ = new ::std::string;
  }
  sparse_329_str_->assign(value);
}
inline void Database_NoBench::set_sparse_329_str(const char* value, size_t size) {
  set_has_sparse_329_str();
  if (sparse_329_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_329_str_ = new ::std::string;
  }
  sparse_329_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_329_str() {
  set_has_sparse_329_str();
  if (sparse_329_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_329_str_ = new ::std::string;
  }
  return sparse_329_str_;
}
inline ::std::string* Database_NoBench::release_sparse_329_str() {
  clear_has_sparse_329_str();
  if (sparse_329_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_329_str_;
    sparse_329_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_329_str(::std::string* sparse_329_str) {
  if (sparse_329_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_329_str_;
  }
  if (sparse_329_str) {
    set_has_sparse_329_str();
    sparse_329_str_ = sparse_329_str;
  } else {
    clear_has_sparse_329_str();
    sparse_329_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_330_str = 342;
inline bool Database_NoBench::has_sparse_330_str() const {
  return (_has_bits_[10] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_330_str() {
  _has_bits_[10] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_330_str() {
  _has_bits_[10] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_330_str() {
  if (sparse_330_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_330_str_->clear();
  }
  clear_has_sparse_330_str();
}
inline const ::std::string& Database_NoBench::sparse_330_str() const {
  return *sparse_330_str_;
}
inline void Database_NoBench::set_sparse_330_str(const ::std::string& value) {
  set_has_sparse_330_str();
  if (sparse_330_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_330_str_ = new ::std::string;
  }
  sparse_330_str_->assign(value);
}
inline void Database_NoBench::set_sparse_330_str(const char* value) {
  set_has_sparse_330_str();
  if (sparse_330_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_330_str_ = new ::std::string;
  }
  sparse_330_str_->assign(value);
}
inline void Database_NoBench::set_sparse_330_str(const char* value, size_t size) {
  set_has_sparse_330_str();
  if (sparse_330_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_330_str_ = new ::std::string;
  }
  sparse_330_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_330_str() {
  set_has_sparse_330_str();
  if (sparse_330_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_330_str_ = new ::std::string;
  }
  return sparse_330_str_;
}
inline ::std::string* Database_NoBench::release_sparse_330_str() {
  clear_has_sparse_330_str();
  if (sparse_330_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_330_str_;
    sparse_330_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_330_str(::std::string* sparse_330_str) {
  if (sparse_330_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_330_str_;
  }
  if (sparse_330_str) {
    set_has_sparse_330_str();
    sparse_330_str_ = sparse_330_str;
  } else {
    clear_has_sparse_330_str();
    sparse_330_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_331_str = 343;
inline bool Database_NoBench::has_sparse_331_str() const {
  return (_has_bits_[10] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_331_str() {
  _has_bits_[10] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_331_str() {
  _has_bits_[10] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_331_str() {
  if (sparse_331_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_331_str_->clear();
  }
  clear_has_sparse_331_str();
}
inline const ::std::string& Database_NoBench::sparse_331_str() const {
  return *sparse_331_str_;
}
inline void Database_NoBench::set_sparse_331_str(const ::std::string& value) {
  set_has_sparse_331_str();
  if (sparse_331_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_331_str_ = new ::std::string;
  }
  sparse_331_str_->assign(value);
}
inline void Database_NoBench::set_sparse_331_str(const char* value) {
  set_has_sparse_331_str();
  if (sparse_331_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_331_str_ = new ::std::string;
  }
  sparse_331_str_->assign(value);
}
inline void Database_NoBench::set_sparse_331_str(const char* value, size_t size) {
  set_has_sparse_331_str();
  if (sparse_331_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_331_str_ = new ::std::string;
  }
  sparse_331_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_331_str() {
  set_has_sparse_331_str();
  if (sparse_331_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_331_str_ = new ::std::string;
  }
  return sparse_331_str_;
}
inline ::std::string* Database_NoBench::release_sparse_331_str() {
  clear_has_sparse_331_str();
  if (sparse_331_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_331_str_;
    sparse_331_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_331_str(::std::string* sparse_331_str) {
  if (sparse_331_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_331_str_;
  }
  if (sparse_331_str) {
    set_has_sparse_331_str();
    sparse_331_str_ = sparse_331_str;
  } else {
    clear_has_sparse_331_str();
    sparse_331_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_332_str = 344;
inline bool Database_NoBench::has_sparse_332_str() const {
  return (_has_bits_[10] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_332_str() {
  _has_bits_[10] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_332_str() {
  _has_bits_[10] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_332_str() {
  if (sparse_332_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_332_str_->clear();
  }
  clear_has_sparse_332_str();
}
inline const ::std::string& Database_NoBench::sparse_332_str() const {
  return *sparse_332_str_;
}
inline void Database_NoBench::set_sparse_332_str(const ::std::string& value) {
  set_has_sparse_332_str();
  if (sparse_332_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_332_str_ = new ::std::string;
  }
  sparse_332_str_->assign(value);
}
inline void Database_NoBench::set_sparse_332_str(const char* value) {
  set_has_sparse_332_str();
  if (sparse_332_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_332_str_ = new ::std::string;
  }
  sparse_332_str_->assign(value);
}
inline void Database_NoBench::set_sparse_332_str(const char* value, size_t size) {
  set_has_sparse_332_str();
  if (sparse_332_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_332_str_ = new ::std::string;
  }
  sparse_332_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_332_str() {
  set_has_sparse_332_str();
  if (sparse_332_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_332_str_ = new ::std::string;
  }
  return sparse_332_str_;
}
inline ::std::string* Database_NoBench::release_sparse_332_str() {
  clear_has_sparse_332_str();
  if (sparse_332_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_332_str_;
    sparse_332_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_332_str(::std::string* sparse_332_str) {
  if (sparse_332_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_332_str_;
  }
  if (sparse_332_str) {
    set_has_sparse_332_str();
    sparse_332_str_ = sparse_332_str;
  } else {
    clear_has_sparse_332_str();
    sparse_332_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_333_str = 345;
inline bool Database_NoBench::has_sparse_333_str() const {
  return (_has_bits_[10] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_333_str() {
  _has_bits_[10] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_333_str() {
  _has_bits_[10] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_333_str() {
  if (sparse_333_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_333_str_->clear();
  }
  clear_has_sparse_333_str();
}
inline const ::std::string& Database_NoBench::sparse_333_str() const {
  return *sparse_333_str_;
}
inline void Database_NoBench::set_sparse_333_str(const ::std::string& value) {
  set_has_sparse_333_str();
  if (sparse_333_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_333_str_ = new ::std::string;
  }
  sparse_333_str_->assign(value);
}
inline void Database_NoBench::set_sparse_333_str(const char* value) {
  set_has_sparse_333_str();
  if (sparse_333_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_333_str_ = new ::std::string;
  }
  sparse_333_str_->assign(value);
}
inline void Database_NoBench::set_sparse_333_str(const char* value, size_t size) {
  set_has_sparse_333_str();
  if (sparse_333_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_333_str_ = new ::std::string;
  }
  sparse_333_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_333_str() {
  set_has_sparse_333_str();
  if (sparse_333_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_333_str_ = new ::std::string;
  }
  return sparse_333_str_;
}
inline ::std::string* Database_NoBench::release_sparse_333_str() {
  clear_has_sparse_333_str();
  if (sparse_333_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_333_str_;
    sparse_333_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_333_str(::std::string* sparse_333_str) {
  if (sparse_333_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_333_str_;
  }
  if (sparse_333_str) {
    set_has_sparse_333_str();
    sparse_333_str_ = sparse_333_str;
  } else {
    clear_has_sparse_333_str();
    sparse_333_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_334_str = 346;
inline bool Database_NoBench::has_sparse_334_str() const {
  return (_has_bits_[10] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_334_str() {
  _has_bits_[10] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_334_str() {
  _has_bits_[10] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_334_str() {
  if (sparse_334_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_334_str_->clear();
  }
  clear_has_sparse_334_str();
}
inline const ::std::string& Database_NoBench::sparse_334_str() const {
  return *sparse_334_str_;
}
inline void Database_NoBench::set_sparse_334_str(const ::std::string& value) {
  set_has_sparse_334_str();
  if (sparse_334_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_334_str_ = new ::std::string;
  }
  sparse_334_str_->assign(value);
}
inline void Database_NoBench::set_sparse_334_str(const char* value) {
  set_has_sparse_334_str();
  if (sparse_334_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_334_str_ = new ::std::string;
  }
  sparse_334_str_->assign(value);
}
inline void Database_NoBench::set_sparse_334_str(const char* value, size_t size) {
  set_has_sparse_334_str();
  if (sparse_334_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_334_str_ = new ::std::string;
  }
  sparse_334_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_334_str() {
  set_has_sparse_334_str();
  if (sparse_334_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_334_str_ = new ::std::string;
  }
  return sparse_334_str_;
}
inline ::std::string* Database_NoBench::release_sparse_334_str() {
  clear_has_sparse_334_str();
  if (sparse_334_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_334_str_;
    sparse_334_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_334_str(::std::string* sparse_334_str) {
  if (sparse_334_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_334_str_;
  }
  if (sparse_334_str) {
    set_has_sparse_334_str();
    sparse_334_str_ = sparse_334_str;
  } else {
    clear_has_sparse_334_str();
    sparse_334_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_335_str = 347;
inline bool Database_NoBench::has_sparse_335_str() const {
  return (_has_bits_[10] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_335_str() {
  _has_bits_[10] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_335_str() {
  _has_bits_[10] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_335_str() {
  if (sparse_335_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_335_str_->clear();
  }
  clear_has_sparse_335_str();
}
inline const ::std::string& Database_NoBench::sparse_335_str() const {
  return *sparse_335_str_;
}
inline void Database_NoBench::set_sparse_335_str(const ::std::string& value) {
  set_has_sparse_335_str();
  if (sparse_335_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_335_str_ = new ::std::string;
  }
  sparse_335_str_->assign(value);
}
inline void Database_NoBench::set_sparse_335_str(const char* value) {
  set_has_sparse_335_str();
  if (sparse_335_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_335_str_ = new ::std::string;
  }
  sparse_335_str_->assign(value);
}
inline void Database_NoBench::set_sparse_335_str(const char* value, size_t size) {
  set_has_sparse_335_str();
  if (sparse_335_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_335_str_ = new ::std::string;
  }
  sparse_335_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_335_str() {
  set_has_sparse_335_str();
  if (sparse_335_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_335_str_ = new ::std::string;
  }
  return sparse_335_str_;
}
inline ::std::string* Database_NoBench::release_sparse_335_str() {
  clear_has_sparse_335_str();
  if (sparse_335_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_335_str_;
    sparse_335_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_335_str(::std::string* sparse_335_str) {
  if (sparse_335_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_335_str_;
  }
  if (sparse_335_str) {
    set_has_sparse_335_str();
    sparse_335_str_ = sparse_335_str;
  } else {
    clear_has_sparse_335_str();
    sparse_335_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_336_str = 348;
inline bool Database_NoBench::has_sparse_336_str() const {
  return (_has_bits_[10] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_336_str() {
  _has_bits_[10] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_336_str() {
  _has_bits_[10] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_336_str() {
  if (sparse_336_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_336_str_->clear();
  }
  clear_has_sparse_336_str();
}
inline const ::std::string& Database_NoBench::sparse_336_str() const {
  return *sparse_336_str_;
}
inline void Database_NoBench::set_sparse_336_str(const ::std::string& value) {
  set_has_sparse_336_str();
  if (sparse_336_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_336_str_ = new ::std::string;
  }
  sparse_336_str_->assign(value);
}
inline void Database_NoBench::set_sparse_336_str(const char* value) {
  set_has_sparse_336_str();
  if (sparse_336_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_336_str_ = new ::std::string;
  }
  sparse_336_str_->assign(value);
}
inline void Database_NoBench::set_sparse_336_str(const char* value, size_t size) {
  set_has_sparse_336_str();
  if (sparse_336_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_336_str_ = new ::std::string;
  }
  sparse_336_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_336_str() {
  set_has_sparse_336_str();
  if (sparse_336_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_336_str_ = new ::std::string;
  }
  return sparse_336_str_;
}
inline ::std::string* Database_NoBench::release_sparse_336_str() {
  clear_has_sparse_336_str();
  if (sparse_336_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_336_str_;
    sparse_336_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_336_str(::std::string* sparse_336_str) {
  if (sparse_336_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_336_str_;
  }
  if (sparse_336_str) {
    set_has_sparse_336_str();
    sparse_336_str_ = sparse_336_str;
  } else {
    clear_has_sparse_336_str();
    sparse_336_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_337_str = 349;
inline bool Database_NoBench::has_sparse_337_str() const {
  return (_has_bits_[10] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_337_str() {
  _has_bits_[10] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_337_str() {
  _has_bits_[10] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_337_str() {
  if (sparse_337_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_337_str_->clear();
  }
  clear_has_sparse_337_str();
}
inline const ::std::string& Database_NoBench::sparse_337_str() const {
  return *sparse_337_str_;
}
inline void Database_NoBench::set_sparse_337_str(const ::std::string& value) {
  set_has_sparse_337_str();
  if (sparse_337_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_337_str_ = new ::std::string;
  }
  sparse_337_str_->assign(value);
}
inline void Database_NoBench::set_sparse_337_str(const char* value) {
  set_has_sparse_337_str();
  if (sparse_337_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_337_str_ = new ::std::string;
  }
  sparse_337_str_->assign(value);
}
inline void Database_NoBench::set_sparse_337_str(const char* value, size_t size) {
  set_has_sparse_337_str();
  if (sparse_337_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_337_str_ = new ::std::string;
  }
  sparse_337_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_337_str() {
  set_has_sparse_337_str();
  if (sparse_337_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_337_str_ = new ::std::string;
  }
  return sparse_337_str_;
}
inline ::std::string* Database_NoBench::release_sparse_337_str() {
  clear_has_sparse_337_str();
  if (sparse_337_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_337_str_;
    sparse_337_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_337_str(::std::string* sparse_337_str) {
  if (sparse_337_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_337_str_;
  }
  if (sparse_337_str) {
    set_has_sparse_337_str();
    sparse_337_str_ = sparse_337_str;
  } else {
    clear_has_sparse_337_str();
    sparse_337_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_338_str = 350;
inline bool Database_NoBench::has_sparse_338_str() const {
  return (_has_bits_[10] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_338_str() {
  _has_bits_[10] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_338_str() {
  _has_bits_[10] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_338_str() {
  if (sparse_338_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_338_str_->clear();
  }
  clear_has_sparse_338_str();
}
inline const ::std::string& Database_NoBench::sparse_338_str() const {
  return *sparse_338_str_;
}
inline void Database_NoBench::set_sparse_338_str(const ::std::string& value) {
  set_has_sparse_338_str();
  if (sparse_338_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_338_str_ = new ::std::string;
  }
  sparse_338_str_->assign(value);
}
inline void Database_NoBench::set_sparse_338_str(const char* value) {
  set_has_sparse_338_str();
  if (sparse_338_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_338_str_ = new ::std::string;
  }
  sparse_338_str_->assign(value);
}
inline void Database_NoBench::set_sparse_338_str(const char* value, size_t size) {
  set_has_sparse_338_str();
  if (sparse_338_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_338_str_ = new ::std::string;
  }
  sparse_338_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_338_str() {
  set_has_sparse_338_str();
  if (sparse_338_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_338_str_ = new ::std::string;
  }
  return sparse_338_str_;
}
inline ::std::string* Database_NoBench::release_sparse_338_str() {
  clear_has_sparse_338_str();
  if (sparse_338_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_338_str_;
    sparse_338_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_338_str(::std::string* sparse_338_str) {
  if (sparse_338_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_338_str_;
  }
  if (sparse_338_str) {
    set_has_sparse_338_str();
    sparse_338_str_ = sparse_338_str;
  } else {
    clear_has_sparse_338_str();
    sparse_338_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_339_str = 351;
inline bool Database_NoBench::has_sparse_339_str() const {
  return (_has_bits_[11] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_339_str() {
  _has_bits_[11] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_339_str() {
  _has_bits_[11] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_339_str() {
  if (sparse_339_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_339_str_->clear();
  }
  clear_has_sparse_339_str();
}
inline const ::std::string& Database_NoBench::sparse_339_str() const {
  return *sparse_339_str_;
}
inline void Database_NoBench::set_sparse_339_str(const ::std::string& value) {
  set_has_sparse_339_str();
  if (sparse_339_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_339_str_ = new ::std::string;
  }
  sparse_339_str_->assign(value);
}
inline void Database_NoBench::set_sparse_339_str(const char* value) {
  set_has_sparse_339_str();
  if (sparse_339_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_339_str_ = new ::std::string;
  }
  sparse_339_str_->assign(value);
}
inline void Database_NoBench::set_sparse_339_str(const char* value, size_t size) {
  set_has_sparse_339_str();
  if (sparse_339_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_339_str_ = new ::std::string;
  }
  sparse_339_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_339_str() {
  set_has_sparse_339_str();
  if (sparse_339_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_339_str_ = new ::std::string;
  }
  return sparse_339_str_;
}
inline ::std::string* Database_NoBench::release_sparse_339_str() {
  clear_has_sparse_339_str();
  if (sparse_339_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_339_str_;
    sparse_339_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_339_str(::std::string* sparse_339_str) {
  if (sparse_339_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_339_str_;
  }
  if (sparse_339_str) {
    set_has_sparse_339_str();
    sparse_339_str_ = sparse_339_str;
  } else {
    clear_has_sparse_339_str();
    sparse_339_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_340_str = 352;
inline bool Database_NoBench::has_sparse_340_str() const {
  return (_has_bits_[11] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_340_str() {
  _has_bits_[11] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_340_str() {
  _has_bits_[11] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_340_str() {
  if (sparse_340_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_340_str_->clear();
  }
  clear_has_sparse_340_str();
}
inline const ::std::string& Database_NoBench::sparse_340_str() const {
  return *sparse_340_str_;
}
inline void Database_NoBench::set_sparse_340_str(const ::std::string& value) {
  set_has_sparse_340_str();
  if (sparse_340_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_340_str_ = new ::std::string;
  }
  sparse_340_str_->assign(value);
}
inline void Database_NoBench::set_sparse_340_str(const char* value) {
  set_has_sparse_340_str();
  if (sparse_340_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_340_str_ = new ::std::string;
  }
  sparse_340_str_->assign(value);
}
inline void Database_NoBench::set_sparse_340_str(const char* value, size_t size) {
  set_has_sparse_340_str();
  if (sparse_340_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_340_str_ = new ::std::string;
  }
  sparse_340_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_340_str() {
  set_has_sparse_340_str();
  if (sparse_340_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_340_str_ = new ::std::string;
  }
  return sparse_340_str_;
}
inline ::std::string* Database_NoBench::release_sparse_340_str() {
  clear_has_sparse_340_str();
  if (sparse_340_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_340_str_;
    sparse_340_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_340_str(::std::string* sparse_340_str) {
  if (sparse_340_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_340_str_;
  }
  if (sparse_340_str) {
    set_has_sparse_340_str();
    sparse_340_str_ = sparse_340_str;
  } else {
    clear_has_sparse_340_str();
    sparse_340_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_341_str = 353;
inline bool Database_NoBench::has_sparse_341_str() const {
  return (_has_bits_[11] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_341_str() {
  _has_bits_[11] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_341_str() {
  _has_bits_[11] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_341_str() {
  if (sparse_341_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_341_str_->clear();
  }
  clear_has_sparse_341_str();
}
inline const ::std::string& Database_NoBench::sparse_341_str() const {
  return *sparse_341_str_;
}
inline void Database_NoBench::set_sparse_341_str(const ::std::string& value) {
  set_has_sparse_341_str();
  if (sparse_341_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_341_str_ = new ::std::string;
  }
  sparse_341_str_->assign(value);
}
inline void Database_NoBench::set_sparse_341_str(const char* value) {
  set_has_sparse_341_str();
  if (sparse_341_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_341_str_ = new ::std::string;
  }
  sparse_341_str_->assign(value);
}
inline void Database_NoBench::set_sparse_341_str(const char* value, size_t size) {
  set_has_sparse_341_str();
  if (sparse_341_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_341_str_ = new ::std::string;
  }
  sparse_341_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_341_str() {
  set_has_sparse_341_str();
  if (sparse_341_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_341_str_ = new ::std::string;
  }
  return sparse_341_str_;
}
inline ::std::string* Database_NoBench::release_sparse_341_str() {
  clear_has_sparse_341_str();
  if (sparse_341_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_341_str_;
    sparse_341_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_341_str(::std::string* sparse_341_str) {
  if (sparse_341_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_341_str_;
  }
  if (sparse_341_str) {
    set_has_sparse_341_str();
    sparse_341_str_ = sparse_341_str;
  } else {
    clear_has_sparse_341_str();
    sparse_341_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_342_str = 354;
inline bool Database_NoBench::has_sparse_342_str() const {
  return (_has_bits_[11] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_342_str() {
  _has_bits_[11] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_342_str() {
  _has_bits_[11] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_342_str() {
  if (sparse_342_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_342_str_->clear();
  }
  clear_has_sparse_342_str();
}
inline const ::std::string& Database_NoBench::sparse_342_str() const {
  return *sparse_342_str_;
}
inline void Database_NoBench::set_sparse_342_str(const ::std::string& value) {
  set_has_sparse_342_str();
  if (sparse_342_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_342_str_ = new ::std::string;
  }
  sparse_342_str_->assign(value);
}
inline void Database_NoBench::set_sparse_342_str(const char* value) {
  set_has_sparse_342_str();
  if (sparse_342_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_342_str_ = new ::std::string;
  }
  sparse_342_str_->assign(value);
}
inline void Database_NoBench::set_sparse_342_str(const char* value, size_t size) {
  set_has_sparse_342_str();
  if (sparse_342_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_342_str_ = new ::std::string;
  }
  sparse_342_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_342_str() {
  set_has_sparse_342_str();
  if (sparse_342_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_342_str_ = new ::std::string;
  }
  return sparse_342_str_;
}
inline ::std::string* Database_NoBench::release_sparse_342_str() {
  clear_has_sparse_342_str();
  if (sparse_342_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_342_str_;
    sparse_342_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_342_str(::std::string* sparse_342_str) {
  if (sparse_342_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_342_str_;
  }
  if (sparse_342_str) {
    set_has_sparse_342_str();
    sparse_342_str_ = sparse_342_str;
  } else {
    clear_has_sparse_342_str();
    sparse_342_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_343_str = 355;
inline bool Database_NoBench::has_sparse_343_str() const {
  return (_has_bits_[11] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_343_str() {
  _has_bits_[11] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_343_str() {
  _has_bits_[11] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_343_str() {
  if (sparse_343_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_343_str_->clear();
  }
  clear_has_sparse_343_str();
}
inline const ::std::string& Database_NoBench::sparse_343_str() const {
  return *sparse_343_str_;
}
inline void Database_NoBench::set_sparse_343_str(const ::std::string& value) {
  set_has_sparse_343_str();
  if (sparse_343_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_343_str_ = new ::std::string;
  }
  sparse_343_str_->assign(value);
}
inline void Database_NoBench::set_sparse_343_str(const char* value) {
  set_has_sparse_343_str();
  if (sparse_343_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_343_str_ = new ::std::string;
  }
  sparse_343_str_->assign(value);
}
inline void Database_NoBench::set_sparse_343_str(const char* value, size_t size) {
  set_has_sparse_343_str();
  if (sparse_343_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_343_str_ = new ::std::string;
  }
  sparse_343_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_343_str() {
  set_has_sparse_343_str();
  if (sparse_343_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_343_str_ = new ::std::string;
  }
  return sparse_343_str_;
}
inline ::std::string* Database_NoBench::release_sparse_343_str() {
  clear_has_sparse_343_str();
  if (sparse_343_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_343_str_;
    sparse_343_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_343_str(::std::string* sparse_343_str) {
  if (sparse_343_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_343_str_;
  }
  if (sparse_343_str) {
    set_has_sparse_343_str();
    sparse_343_str_ = sparse_343_str;
  } else {
    clear_has_sparse_343_str();
    sparse_343_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_344_str = 356;
inline bool Database_NoBench::has_sparse_344_str() const {
  return (_has_bits_[11] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_344_str() {
  _has_bits_[11] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_344_str() {
  _has_bits_[11] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_344_str() {
  if (sparse_344_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_344_str_->clear();
  }
  clear_has_sparse_344_str();
}
inline const ::std::string& Database_NoBench::sparse_344_str() const {
  return *sparse_344_str_;
}
inline void Database_NoBench::set_sparse_344_str(const ::std::string& value) {
  set_has_sparse_344_str();
  if (sparse_344_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_344_str_ = new ::std::string;
  }
  sparse_344_str_->assign(value);
}
inline void Database_NoBench::set_sparse_344_str(const char* value) {
  set_has_sparse_344_str();
  if (sparse_344_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_344_str_ = new ::std::string;
  }
  sparse_344_str_->assign(value);
}
inline void Database_NoBench::set_sparse_344_str(const char* value, size_t size) {
  set_has_sparse_344_str();
  if (sparse_344_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_344_str_ = new ::std::string;
  }
  sparse_344_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_344_str() {
  set_has_sparse_344_str();
  if (sparse_344_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_344_str_ = new ::std::string;
  }
  return sparse_344_str_;
}
inline ::std::string* Database_NoBench::release_sparse_344_str() {
  clear_has_sparse_344_str();
  if (sparse_344_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_344_str_;
    sparse_344_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_344_str(::std::string* sparse_344_str) {
  if (sparse_344_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_344_str_;
  }
  if (sparse_344_str) {
    set_has_sparse_344_str();
    sparse_344_str_ = sparse_344_str;
  } else {
    clear_has_sparse_344_str();
    sparse_344_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_345_str = 357;
inline bool Database_NoBench::has_sparse_345_str() const {
  return (_has_bits_[11] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_345_str() {
  _has_bits_[11] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_345_str() {
  _has_bits_[11] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_345_str() {
  if (sparse_345_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_345_str_->clear();
  }
  clear_has_sparse_345_str();
}
inline const ::std::string& Database_NoBench::sparse_345_str() const {
  return *sparse_345_str_;
}
inline void Database_NoBench::set_sparse_345_str(const ::std::string& value) {
  set_has_sparse_345_str();
  if (sparse_345_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_345_str_ = new ::std::string;
  }
  sparse_345_str_->assign(value);
}
inline void Database_NoBench::set_sparse_345_str(const char* value) {
  set_has_sparse_345_str();
  if (sparse_345_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_345_str_ = new ::std::string;
  }
  sparse_345_str_->assign(value);
}
inline void Database_NoBench::set_sparse_345_str(const char* value, size_t size) {
  set_has_sparse_345_str();
  if (sparse_345_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_345_str_ = new ::std::string;
  }
  sparse_345_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_345_str() {
  set_has_sparse_345_str();
  if (sparse_345_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_345_str_ = new ::std::string;
  }
  return sparse_345_str_;
}
inline ::std::string* Database_NoBench::release_sparse_345_str() {
  clear_has_sparse_345_str();
  if (sparse_345_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_345_str_;
    sparse_345_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_345_str(::std::string* sparse_345_str) {
  if (sparse_345_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_345_str_;
  }
  if (sparse_345_str) {
    set_has_sparse_345_str();
    sparse_345_str_ = sparse_345_str;
  } else {
    clear_has_sparse_345_str();
    sparse_345_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_346_str = 358;
inline bool Database_NoBench::has_sparse_346_str() const {
  return (_has_bits_[11] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_346_str() {
  _has_bits_[11] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_346_str() {
  _has_bits_[11] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_346_str() {
  if (sparse_346_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_346_str_->clear();
  }
  clear_has_sparse_346_str();
}
inline const ::std::string& Database_NoBench::sparse_346_str() const {
  return *sparse_346_str_;
}
inline void Database_NoBench::set_sparse_346_str(const ::std::string& value) {
  set_has_sparse_346_str();
  if (sparse_346_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_346_str_ = new ::std::string;
  }
  sparse_346_str_->assign(value);
}
inline void Database_NoBench::set_sparse_346_str(const char* value) {
  set_has_sparse_346_str();
  if (sparse_346_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_346_str_ = new ::std::string;
  }
  sparse_346_str_->assign(value);
}
inline void Database_NoBench::set_sparse_346_str(const char* value, size_t size) {
  set_has_sparse_346_str();
  if (sparse_346_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_346_str_ = new ::std::string;
  }
  sparse_346_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_346_str() {
  set_has_sparse_346_str();
  if (sparse_346_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_346_str_ = new ::std::string;
  }
  return sparse_346_str_;
}
inline ::std::string* Database_NoBench::release_sparse_346_str() {
  clear_has_sparse_346_str();
  if (sparse_346_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_346_str_;
    sparse_346_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_346_str(::std::string* sparse_346_str) {
  if (sparse_346_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_346_str_;
  }
  if (sparse_346_str) {
    set_has_sparse_346_str();
    sparse_346_str_ = sparse_346_str;
  } else {
    clear_has_sparse_346_str();
    sparse_346_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_347_str = 359;
inline bool Database_NoBench::has_sparse_347_str() const {
  return (_has_bits_[11] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_347_str() {
  _has_bits_[11] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_347_str() {
  _has_bits_[11] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_347_str() {
  if (sparse_347_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_347_str_->clear();
  }
  clear_has_sparse_347_str();
}
inline const ::std::string& Database_NoBench::sparse_347_str() const {
  return *sparse_347_str_;
}
inline void Database_NoBench::set_sparse_347_str(const ::std::string& value) {
  set_has_sparse_347_str();
  if (sparse_347_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_347_str_ = new ::std::string;
  }
  sparse_347_str_->assign(value);
}
inline void Database_NoBench::set_sparse_347_str(const char* value) {
  set_has_sparse_347_str();
  if (sparse_347_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_347_str_ = new ::std::string;
  }
  sparse_347_str_->assign(value);
}
inline void Database_NoBench::set_sparse_347_str(const char* value, size_t size) {
  set_has_sparse_347_str();
  if (sparse_347_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_347_str_ = new ::std::string;
  }
  sparse_347_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_347_str() {
  set_has_sparse_347_str();
  if (sparse_347_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_347_str_ = new ::std::string;
  }
  return sparse_347_str_;
}
inline ::std::string* Database_NoBench::release_sparse_347_str() {
  clear_has_sparse_347_str();
  if (sparse_347_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_347_str_;
    sparse_347_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_347_str(::std::string* sparse_347_str) {
  if (sparse_347_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_347_str_;
  }
  if (sparse_347_str) {
    set_has_sparse_347_str();
    sparse_347_str_ = sparse_347_str;
  } else {
    clear_has_sparse_347_str();
    sparse_347_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_348_str = 360;
inline bool Database_NoBench::has_sparse_348_str() const {
  return (_has_bits_[11] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_348_str() {
  _has_bits_[11] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_348_str() {
  _has_bits_[11] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_348_str() {
  if (sparse_348_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_348_str_->clear();
  }
  clear_has_sparse_348_str();
}
inline const ::std::string& Database_NoBench::sparse_348_str() const {
  return *sparse_348_str_;
}
inline void Database_NoBench::set_sparse_348_str(const ::std::string& value) {
  set_has_sparse_348_str();
  if (sparse_348_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_348_str_ = new ::std::string;
  }
  sparse_348_str_->assign(value);
}
inline void Database_NoBench::set_sparse_348_str(const char* value) {
  set_has_sparse_348_str();
  if (sparse_348_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_348_str_ = new ::std::string;
  }
  sparse_348_str_->assign(value);
}
inline void Database_NoBench::set_sparse_348_str(const char* value, size_t size) {
  set_has_sparse_348_str();
  if (sparse_348_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_348_str_ = new ::std::string;
  }
  sparse_348_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_348_str() {
  set_has_sparse_348_str();
  if (sparse_348_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_348_str_ = new ::std::string;
  }
  return sparse_348_str_;
}
inline ::std::string* Database_NoBench::release_sparse_348_str() {
  clear_has_sparse_348_str();
  if (sparse_348_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_348_str_;
    sparse_348_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_348_str(::std::string* sparse_348_str) {
  if (sparse_348_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_348_str_;
  }
  if (sparse_348_str) {
    set_has_sparse_348_str();
    sparse_348_str_ = sparse_348_str;
  } else {
    clear_has_sparse_348_str();
    sparse_348_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_349_str = 361;
inline bool Database_NoBench::has_sparse_349_str() const {
  return (_has_bits_[11] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_349_str() {
  _has_bits_[11] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_349_str() {
  _has_bits_[11] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_349_str() {
  if (sparse_349_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_349_str_->clear();
  }
  clear_has_sparse_349_str();
}
inline const ::std::string& Database_NoBench::sparse_349_str() const {
  return *sparse_349_str_;
}
inline void Database_NoBench::set_sparse_349_str(const ::std::string& value) {
  set_has_sparse_349_str();
  if (sparse_349_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_349_str_ = new ::std::string;
  }
  sparse_349_str_->assign(value);
}
inline void Database_NoBench::set_sparse_349_str(const char* value) {
  set_has_sparse_349_str();
  if (sparse_349_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_349_str_ = new ::std::string;
  }
  sparse_349_str_->assign(value);
}
inline void Database_NoBench::set_sparse_349_str(const char* value, size_t size) {
  set_has_sparse_349_str();
  if (sparse_349_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_349_str_ = new ::std::string;
  }
  sparse_349_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_349_str() {
  set_has_sparse_349_str();
  if (sparse_349_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_349_str_ = new ::std::string;
  }
  return sparse_349_str_;
}
inline ::std::string* Database_NoBench::release_sparse_349_str() {
  clear_has_sparse_349_str();
  if (sparse_349_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_349_str_;
    sparse_349_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_349_str(::std::string* sparse_349_str) {
  if (sparse_349_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_349_str_;
  }
  if (sparse_349_str) {
    set_has_sparse_349_str();
    sparse_349_str_ = sparse_349_str;
  } else {
    clear_has_sparse_349_str();
    sparse_349_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_350_str = 362;
inline bool Database_NoBench::has_sparse_350_str() const {
  return (_has_bits_[11] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_350_str() {
  _has_bits_[11] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_350_str() {
  _has_bits_[11] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_350_str() {
  if (sparse_350_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_350_str_->clear();
  }
  clear_has_sparse_350_str();
}
inline const ::std::string& Database_NoBench::sparse_350_str() const {
  return *sparse_350_str_;
}
inline void Database_NoBench::set_sparse_350_str(const ::std::string& value) {
  set_has_sparse_350_str();
  if (sparse_350_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_350_str_ = new ::std::string;
  }
  sparse_350_str_->assign(value);
}
inline void Database_NoBench::set_sparse_350_str(const char* value) {
  set_has_sparse_350_str();
  if (sparse_350_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_350_str_ = new ::std::string;
  }
  sparse_350_str_->assign(value);
}
inline void Database_NoBench::set_sparse_350_str(const char* value, size_t size) {
  set_has_sparse_350_str();
  if (sparse_350_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_350_str_ = new ::std::string;
  }
  sparse_350_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_350_str() {
  set_has_sparse_350_str();
  if (sparse_350_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_350_str_ = new ::std::string;
  }
  return sparse_350_str_;
}
inline ::std::string* Database_NoBench::release_sparse_350_str() {
  clear_has_sparse_350_str();
  if (sparse_350_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_350_str_;
    sparse_350_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_350_str(::std::string* sparse_350_str) {
  if (sparse_350_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_350_str_;
  }
  if (sparse_350_str) {
    set_has_sparse_350_str();
    sparse_350_str_ = sparse_350_str;
  } else {
    clear_has_sparse_350_str();
    sparse_350_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_351_str = 363;
inline bool Database_NoBench::has_sparse_351_str() const {
  return (_has_bits_[11] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_351_str() {
  _has_bits_[11] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_351_str() {
  _has_bits_[11] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_351_str() {
  if (sparse_351_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_351_str_->clear();
  }
  clear_has_sparse_351_str();
}
inline const ::std::string& Database_NoBench::sparse_351_str() const {
  return *sparse_351_str_;
}
inline void Database_NoBench::set_sparse_351_str(const ::std::string& value) {
  set_has_sparse_351_str();
  if (sparse_351_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_351_str_ = new ::std::string;
  }
  sparse_351_str_->assign(value);
}
inline void Database_NoBench::set_sparse_351_str(const char* value) {
  set_has_sparse_351_str();
  if (sparse_351_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_351_str_ = new ::std::string;
  }
  sparse_351_str_->assign(value);
}
inline void Database_NoBench::set_sparse_351_str(const char* value, size_t size) {
  set_has_sparse_351_str();
  if (sparse_351_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_351_str_ = new ::std::string;
  }
  sparse_351_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_351_str() {
  set_has_sparse_351_str();
  if (sparse_351_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_351_str_ = new ::std::string;
  }
  return sparse_351_str_;
}
inline ::std::string* Database_NoBench::release_sparse_351_str() {
  clear_has_sparse_351_str();
  if (sparse_351_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_351_str_;
    sparse_351_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_351_str(::std::string* sparse_351_str) {
  if (sparse_351_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_351_str_;
  }
  if (sparse_351_str) {
    set_has_sparse_351_str();
    sparse_351_str_ = sparse_351_str;
  } else {
    clear_has_sparse_351_str();
    sparse_351_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_352_str = 364;
inline bool Database_NoBench::has_sparse_352_str() const {
  return (_has_bits_[11] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_352_str() {
  _has_bits_[11] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_352_str() {
  _has_bits_[11] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_352_str() {
  if (sparse_352_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_352_str_->clear();
  }
  clear_has_sparse_352_str();
}
inline const ::std::string& Database_NoBench::sparse_352_str() const {
  return *sparse_352_str_;
}
inline void Database_NoBench::set_sparse_352_str(const ::std::string& value) {
  set_has_sparse_352_str();
  if (sparse_352_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_352_str_ = new ::std::string;
  }
  sparse_352_str_->assign(value);
}
inline void Database_NoBench::set_sparse_352_str(const char* value) {
  set_has_sparse_352_str();
  if (sparse_352_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_352_str_ = new ::std::string;
  }
  sparse_352_str_->assign(value);
}
inline void Database_NoBench::set_sparse_352_str(const char* value, size_t size) {
  set_has_sparse_352_str();
  if (sparse_352_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_352_str_ = new ::std::string;
  }
  sparse_352_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_352_str() {
  set_has_sparse_352_str();
  if (sparse_352_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_352_str_ = new ::std::string;
  }
  return sparse_352_str_;
}
inline ::std::string* Database_NoBench::release_sparse_352_str() {
  clear_has_sparse_352_str();
  if (sparse_352_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_352_str_;
    sparse_352_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_352_str(::std::string* sparse_352_str) {
  if (sparse_352_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_352_str_;
  }
  if (sparse_352_str) {
    set_has_sparse_352_str();
    sparse_352_str_ = sparse_352_str;
  } else {
    clear_has_sparse_352_str();
    sparse_352_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_353_str = 365;
inline bool Database_NoBench::has_sparse_353_str() const {
  return (_has_bits_[11] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_353_str() {
  _has_bits_[11] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_353_str() {
  _has_bits_[11] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_353_str() {
  if (sparse_353_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_353_str_->clear();
  }
  clear_has_sparse_353_str();
}
inline const ::std::string& Database_NoBench::sparse_353_str() const {
  return *sparse_353_str_;
}
inline void Database_NoBench::set_sparse_353_str(const ::std::string& value) {
  set_has_sparse_353_str();
  if (sparse_353_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_353_str_ = new ::std::string;
  }
  sparse_353_str_->assign(value);
}
inline void Database_NoBench::set_sparse_353_str(const char* value) {
  set_has_sparse_353_str();
  if (sparse_353_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_353_str_ = new ::std::string;
  }
  sparse_353_str_->assign(value);
}
inline void Database_NoBench::set_sparse_353_str(const char* value, size_t size) {
  set_has_sparse_353_str();
  if (sparse_353_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_353_str_ = new ::std::string;
  }
  sparse_353_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_353_str() {
  set_has_sparse_353_str();
  if (sparse_353_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_353_str_ = new ::std::string;
  }
  return sparse_353_str_;
}
inline ::std::string* Database_NoBench::release_sparse_353_str() {
  clear_has_sparse_353_str();
  if (sparse_353_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_353_str_;
    sparse_353_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_353_str(::std::string* sparse_353_str) {
  if (sparse_353_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_353_str_;
  }
  if (sparse_353_str) {
    set_has_sparse_353_str();
    sparse_353_str_ = sparse_353_str;
  } else {
    clear_has_sparse_353_str();
    sparse_353_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_354_str = 366;
inline bool Database_NoBench::has_sparse_354_str() const {
  return (_has_bits_[11] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_354_str() {
  _has_bits_[11] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_354_str() {
  _has_bits_[11] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_354_str() {
  if (sparse_354_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_354_str_->clear();
  }
  clear_has_sparse_354_str();
}
inline const ::std::string& Database_NoBench::sparse_354_str() const {
  return *sparse_354_str_;
}
inline void Database_NoBench::set_sparse_354_str(const ::std::string& value) {
  set_has_sparse_354_str();
  if (sparse_354_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_354_str_ = new ::std::string;
  }
  sparse_354_str_->assign(value);
}
inline void Database_NoBench::set_sparse_354_str(const char* value) {
  set_has_sparse_354_str();
  if (sparse_354_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_354_str_ = new ::std::string;
  }
  sparse_354_str_->assign(value);
}
inline void Database_NoBench::set_sparse_354_str(const char* value, size_t size) {
  set_has_sparse_354_str();
  if (sparse_354_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_354_str_ = new ::std::string;
  }
  sparse_354_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_354_str() {
  set_has_sparse_354_str();
  if (sparse_354_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_354_str_ = new ::std::string;
  }
  return sparse_354_str_;
}
inline ::std::string* Database_NoBench::release_sparse_354_str() {
  clear_has_sparse_354_str();
  if (sparse_354_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_354_str_;
    sparse_354_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_354_str(::std::string* sparse_354_str) {
  if (sparse_354_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_354_str_;
  }
  if (sparse_354_str) {
    set_has_sparse_354_str();
    sparse_354_str_ = sparse_354_str;
  } else {
    clear_has_sparse_354_str();
    sparse_354_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_355_str = 367;
inline bool Database_NoBench::has_sparse_355_str() const {
  return (_has_bits_[11] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_355_str() {
  _has_bits_[11] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_355_str() {
  _has_bits_[11] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_355_str() {
  if (sparse_355_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_355_str_->clear();
  }
  clear_has_sparse_355_str();
}
inline const ::std::string& Database_NoBench::sparse_355_str() const {
  return *sparse_355_str_;
}
inline void Database_NoBench::set_sparse_355_str(const ::std::string& value) {
  set_has_sparse_355_str();
  if (sparse_355_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_355_str_ = new ::std::string;
  }
  sparse_355_str_->assign(value);
}
inline void Database_NoBench::set_sparse_355_str(const char* value) {
  set_has_sparse_355_str();
  if (sparse_355_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_355_str_ = new ::std::string;
  }
  sparse_355_str_->assign(value);
}
inline void Database_NoBench::set_sparse_355_str(const char* value, size_t size) {
  set_has_sparse_355_str();
  if (sparse_355_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_355_str_ = new ::std::string;
  }
  sparse_355_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_355_str() {
  set_has_sparse_355_str();
  if (sparse_355_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_355_str_ = new ::std::string;
  }
  return sparse_355_str_;
}
inline ::std::string* Database_NoBench::release_sparse_355_str() {
  clear_has_sparse_355_str();
  if (sparse_355_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_355_str_;
    sparse_355_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_355_str(::std::string* sparse_355_str) {
  if (sparse_355_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_355_str_;
  }
  if (sparse_355_str) {
    set_has_sparse_355_str();
    sparse_355_str_ = sparse_355_str;
  } else {
    clear_has_sparse_355_str();
    sparse_355_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_356_str = 368;
inline bool Database_NoBench::has_sparse_356_str() const {
  return (_has_bits_[11] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_356_str() {
  _has_bits_[11] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_356_str() {
  _has_bits_[11] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_356_str() {
  if (sparse_356_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_356_str_->clear();
  }
  clear_has_sparse_356_str();
}
inline const ::std::string& Database_NoBench::sparse_356_str() const {
  return *sparse_356_str_;
}
inline void Database_NoBench::set_sparse_356_str(const ::std::string& value) {
  set_has_sparse_356_str();
  if (sparse_356_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_356_str_ = new ::std::string;
  }
  sparse_356_str_->assign(value);
}
inline void Database_NoBench::set_sparse_356_str(const char* value) {
  set_has_sparse_356_str();
  if (sparse_356_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_356_str_ = new ::std::string;
  }
  sparse_356_str_->assign(value);
}
inline void Database_NoBench::set_sparse_356_str(const char* value, size_t size) {
  set_has_sparse_356_str();
  if (sparse_356_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_356_str_ = new ::std::string;
  }
  sparse_356_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_356_str() {
  set_has_sparse_356_str();
  if (sparse_356_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_356_str_ = new ::std::string;
  }
  return sparse_356_str_;
}
inline ::std::string* Database_NoBench::release_sparse_356_str() {
  clear_has_sparse_356_str();
  if (sparse_356_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_356_str_;
    sparse_356_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_356_str(::std::string* sparse_356_str) {
  if (sparse_356_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_356_str_;
  }
  if (sparse_356_str) {
    set_has_sparse_356_str();
    sparse_356_str_ = sparse_356_str;
  } else {
    clear_has_sparse_356_str();
    sparse_356_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_357_str = 369;
inline bool Database_NoBench::has_sparse_357_str() const {
  return (_has_bits_[11] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_357_str() {
  _has_bits_[11] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_357_str() {
  _has_bits_[11] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_357_str() {
  if (sparse_357_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_357_str_->clear();
  }
  clear_has_sparse_357_str();
}
inline const ::std::string& Database_NoBench::sparse_357_str() const {
  return *sparse_357_str_;
}
inline void Database_NoBench::set_sparse_357_str(const ::std::string& value) {
  set_has_sparse_357_str();
  if (sparse_357_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_357_str_ = new ::std::string;
  }
  sparse_357_str_->assign(value);
}
inline void Database_NoBench::set_sparse_357_str(const char* value) {
  set_has_sparse_357_str();
  if (sparse_357_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_357_str_ = new ::std::string;
  }
  sparse_357_str_->assign(value);
}
inline void Database_NoBench::set_sparse_357_str(const char* value, size_t size) {
  set_has_sparse_357_str();
  if (sparse_357_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_357_str_ = new ::std::string;
  }
  sparse_357_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_357_str() {
  set_has_sparse_357_str();
  if (sparse_357_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_357_str_ = new ::std::string;
  }
  return sparse_357_str_;
}
inline ::std::string* Database_NoBench::release_sparse_357_str() {
  clear_has_sparse_357_str();
  if (sparse_357_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_357_str_;
    sparse_357_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_357_str(::std::string* sparse_357_str) {
  if (sparse_357_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_357_str_;
  }
  if (sparse_357_str) {
    set_has_sparse_357_str();
    sparse_357_str_ = sparse_357_str;
  } else {
    clear_has_sparse_357_str();
    sparse_357_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_358_str = 370;
inline bool Database_NoBench::has_sparse_358_str() const {
  return (_has_bits_[11] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_358_str() {
  _has_bits_[11] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_358_str() {
  _has_bits_[11] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_358_str() {
  if (sparse_358_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_358_str_->clear();
  }
  clear_has_sparse_358_str();
}
inline const ::std::string& Database_NoBench::sparse_358_str() const {
  return *sparse_358_str_;
}
inline void Database_NoBench::set_sparse_358_str(const ::std::string& value) {
  set_has_sparse_358_str();
  if (sparse_358_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_358_str_ = new ::std::string;
  }
  sparse_358_str_->assign(value);
}
inline void Database_NoBench::set_sparse_358_str(const char* value) {
  set_has_sparse_358_str();
  if (sparse_358_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_358_str_ = new ::std::string;
  }
  sparse_358_str_->assign(value);
}
inline void Database_NoBench::set_sparse_358_str(const char* value, size_t size) {
  set_has_sparse_358_str();
  if (sparse_358_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_358_str_ = new ::std::string;
  }
  sparse_358_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_358_str() {
  set_has_sparse_358_str();
  if (sparse_358_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_358_str_ = new ::std::string;
  }
  return sparse_358_str_;
}
inline ::std::string* Database_NoBench::release_sparse_358_str() {
  clear_has_sparse_358_str();
  if (sparse_358_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_358_str_;
    sparse_358_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_358_str(::std::string* sparse_358_str) {
  if (sparse_358_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_358_str_;
  }
  if (sparse_358_str) {
    set_has_sparse_358_str();
    sparse_358_str_ = sparse_358_str;
  } else {
    clear_has_sparse_358_str();
    sparse_358_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_359_str = 371;
inline bool Database_NoBench::has_sparse_359_str() const {
  return (_has_bits_[11] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_359_str() {
  _has_bits_[11] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_359_str() {
  _has_bits_[11] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_359_str() {
  if (sparse_359_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_359_str_->clear();
  }
  clear_has_sparse_359_str();
}
inline const ::std::string& Database_NoBench::sparse_359_str() const {
  return *sparse_359_str_;
}
inline void Database_NoBench::set_sparse_359_str(const ::std::string& value) {
  set_has_sparse_359_str();
  if (sparse_359_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_359_str_ = new ::std::string;
  }
  sparse_359_str_->assign(value);
}
inline void Database_NoBench::set_sparse_359_str(const char* value) {
  set_has_sparse_359_str();
  if (sparse_359_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_359_str_ = new ::std::string;
  }
  sparse_359_str_->assign(value);
}
inline void Database_NoBench::set_sparse_359_str(const char* value, size_t size) {
  set_has_sparse_359_str();
  if (sparse_359_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_359_str_ = new ::std::string;
  }
  sparse_359_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_359_str() {
  set_has_sparse_359_str();
  if (sparse_359_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_359_str_ = new ::std::string;
  }
  return sparse_359_str_;
}
inline ::std::string* Database_NoBench::release_sparse_359_str() {
  clear_has_sparse_359_str();
  if (sparse_359_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_359_str_;
    sparse_359_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_359_str(::std::string* sparse_359_str) {
  if (sparse_359_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_359_str_;
  }
  if (sparse_359_str) {
    set_has_sparse_359_str();
    sparse_359_str_ = sparse_359_str;
  } else {
    clear_has_sparse_359_str();
    sparse_359_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_360_str = 372;
inline bool Database_NoBench::has_sparse_360_str() const {
  return (_has_bits_[11] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_360_str() {
  _has_bits_[11] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_360_str() {
  _has_bits_[11] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_360_str() {
  if (sparse_360_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_360_str_->clear();
  }
  clear_has_sparse_360_str();
}
inline const ::std::string& Database_NoBench::sparse_360_str() const {
  return *sparse_360_str_;
}
inline void Database_NoBench::set_sparse_360_str(const ::std::string& value) {
  set_has_sparse_360_str();
  if (sparse_360_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_360_str_ = new ::std::string;
  }
  sparse_360_str_->assign(value);
}
inline void Database_NoBench::set_sparse_360_str(const char* value) {
  set_has_sparse_360_str();
  if (sparse_360_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_360_str_ = new ::std::string;
  }
  sparse_360_str_->assign(value);
}
inline void Database_NoBench::set_sparse_360_str(const char* value, size_t size) {
  set_has_sparse_360_str();
  if (sparse_360_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_360_str_ = new ::std::string;
  }
  sparse_360_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_360_str() {
  set_has_sparse_360_str();
  if (sparse_360_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_360_str_ = new ::std::string;
  }
  return sparse_360_str_;
}
inline ::std::string* Database_NoBench::release_sparse_360_str() {
  clear_has_sparse_360_str();
  if (sparse_360_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_360_str_;
    sparse_360_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_360_str(::std::string* sparse_360_str) {
  if (sparse_360_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_360_str_;
  }
  if (sparse_360_str) {
    set_has_sparse_360_str();
    sparse_360_str_ = sparse_360_str;
  } else {
    clear_has_sparse_360_str();
    sparse_360_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_361_str = 373;
inline bool Database_NoBench::has_sparse_361_str() const {
  return (_has_bits_[11] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_361_str() {
  _has_bits_[11] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_361_str() {
  _has_bits_[11] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_361_str() {
  if (sparse_361_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_361_str_->clear();
  }
  clear_has_sparse_361_str();
}
inline const ::std::string& Database_NoBench::sparse_361_str() const {
  return *sparse_361_str_;
}
inline void Database_NoBench::set_sparse_361_str(const ::std::string& value) {
  set_has_sparse_361_str();
  if (sparse_361_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_361_str_ = new ::std::string;
  }
  sparse_361_str_->assign(value);
}
inline void Database_NoBench::set_sparse_361_str(const char* value) {
  set_has_sparse_361_str();
  if (sparse_361_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_361_str_ = new ::std::string;
  }
  sparse_361_str_->assign(value);
}
inline void Database_NoBench::set_sparse_361_str(const char* value, size_t size) {
  set_has_sparse_361_str();
  if (sparse_361_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_361_str_ = new ::std::string;
  }
  sparse_361_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_361_str() {
  set_has_sparse_361_str();
  if (sparse_361_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_361_str_ = new ::std::string;
  }
  return sparse_361_str_;
}
inline ::std::string* Database_NoBench::release_sparse_361_str() {
  clear_has_sparse_361_str();
  if (sparse_361_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_361_str_;
    sparse_361_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_361_str(::std::string* sparse_361_str) {
  if (sparse_361_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_361_str_;
  }
  if (sparse_361_str) {
    set_has_sparse_361_str();
    sparse_361_str_ = sparse_361_str;
  } else {
    clear_has_sparse_361_str();
    sparse_361_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_362_str = 374;
inline bool Database_NoBench::has_sparse_362_str() const {
  return (_has_bits_[11] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_362_str() {
  _has_bits_[11] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_362_str() {
  _has_bits_[11] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_362_str() {
  if (sparse_362_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_362_str_->clear();
  }
  clear_has_sparse_362_str();
}
inline const ::std::string& Database_NoBench::sparse_362_str() const {
  return *sparse_362_str_;
}
inline void Database_NoBench::set_sparse_362_str(const ::std::string& value) {
  set_has_sparse_362_str();
  if (sparse_362_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_362_str_ = new ::std::string;
  }
  sparse_362_str_->assign(value);
}
inline void Database_NoBench::set_sparse_362_str(const char* value) {
  set_has_sparse_362_str();
  if (sparse_362_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_362_str_ = new ::std::string;
  }
  sparse_362_str_->assign(value);
}
inline void Database_NoBench::set_sparse_362_str(const char* value, size_t size) {
  set_has_sparse_362_str();
  if (sparse_362_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_362_str_ = new ::std::string;
  }
  sparse_362_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_362_str() {
  set_has_sparse_362_str();
  if (sparse_362_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_362_str_ = new ::std::string;
  }
  return sparse_362_str_;
}
inline ::std::string* Database_NoBench::release_sparse_362_str() {
  clear_has_sparse_362_str();
  if (sparse_362_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_362_str_;
    sparse_362_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_362_str(::std::string* sparse_362_str) {
  if (sparse_362_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_362_str_;
  }
  if (sparse_362_str) {
    set_has_sparse_362_str();
    sparse_362_str_ = sparse_362_str;
  } else {
    clear_has_sparse_362_str();
    sparse_362_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_363_str = 375;
inline bool Database_NoBench::has_sparse_363_str() const {
  return (_has_bits_[11] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_363_str() {
  _has_bits_[11] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_363_str() {
  _has_bits_[11] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_363_str() {
  if (sparse_363_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_363_str_->clear();
  }
  clear_has_sparse_363_str();
}
inline const ::std::string& Database_NoBench::sparse_363_str() const {
  return *sparse_363_str_;
}
inline void Database_NoBench::set_sparse_363_str(const ::std::string& value) {
  set_has_sparse_363_str();
  if (sparse_363_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_363_str_ = new ::std::string;
  }
  sparse_363_str_->assign(value);
}
inline void Database_NoBench::set_sparse_363_str(const char* value) {
  set_has_sparse_363_str();
  if (sparse_363_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_363_str_ = new ::std::string;
  }
  sparse_363_str_->assign(value);
}
inline void Database_NoBench::set_sparse_363_str(const char* value, size_t size) {
  set_has_sparse_363_str();
  if (sparse_363_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_363_str_ = new ::std::string;
  }
  sparse_363_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_363_str() {
  set_has_sparse_363_str();
  if (sparse_363_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_363_str_ = new ::std::string;
  }
  return sparse_363_str_;
}
inline ::std::string* Database_NoBench::release_sparse_363_str() {
  clear_has_sparse_363_str();
  if (sparse_363_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_363_str_;
    sparse_363_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_363_str(::std::string* sparse_363_str) {
  if (sparse_363_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_363_str_;
  }
  if (sparse_363_str) {
    set_has_sparse_363_str();
    sparse_363_str_ = sparse_363_str;
  } else {
    clear_has_sparse_363_str();
    sparse_363_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_364_str = 376;
inline bool Database_NoBench::has_sparse_364_str() const {
  return (_has_bits_[11] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_364_str() {
  _has_bits_[11] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_364_str() {
  _has_bits_[11] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_364_str() {
  if (sparse_364_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_364_str_->clear();
  }
  clear_has_sparse_364_str();
}
inline const ::std::string& Database_NoBench::sparse_364_str() const {
  return *sparse_364_str_;
}
inline void Database_NoBench::set_sparse_364_str(const ::std::string& value) {
  set_has_sparse_364_str();
  if (sparse_364_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_364_str_ = new ::std::string;
  }
  sparse_364_str_->assign(value);
}
inline void Database_NoBench::set_sparse_364_str(const char* value) {
  set_has_sparse_364_str();
  if (sparse_364_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_364_str_ = new ::std::string;
  }
  sparse_364_str_->assign(value);
}
inline void Database_NoBench::set_sparse_364_str(const char* value, size_t size) {
  set_has_sparse_364_str();
  if (sparse_364_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_364_str_ = new ::std::string;
  }
  sparse_364_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_364_str() {
  set_has_sparse_364_str();
  if (sparse_364_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_364_str_ = new ::std::string;
  }
  return sparse_364_str_;
}
inline ::std::string* Database_NoBench::release_sparse_364_str() {
  clear_has_sparse_364_str();
  if (sparse_364_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_364_str_;
    sparse_364_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_364_str(::std::string* sparse_364_str) {
  if (sparse_364_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_364_str_;
  }
  if (sparse_364_str) {
    set_has_sparse_364_str();
    sparse_364_str_ = sparse_364_str;
  } else {
    clear_has_sparse_364_str();
    sparse_364_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_365_str = 377;
inline bool Database_NoBench::has_sparse_365_str() const {
  return (_has_bits_[11] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_365_str() {
  _has_bits_[11] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_365_str() {
  _has_bits_[11] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_365_str() {
  if (sparse_365_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_365_str_->clear();
  }
  clear_has_sparse_365_str();
}
inline const ::std::string& Database_NoBench::sparse_365_str() const {
  return *sparse_365_str_;
}
inline void Database_NoBench::set_sparse_365_str(const ::std::string& value) {
  set_has_sparse_365_str();
  if (sparse_365_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_365_str_ = new ::std::string;
  }
  sparse_365_str_->assign(value);
}
inline void Database_NoBench::set_sparse_365_str(const char* value) {
  set_has_sparse_365_str();
  if (sparse_365_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_365_str_ = new ::std::string;
  }
  sparse_365_str_->assign(value);
}
inline void Database_NoBench::set_sparse_365_str(const char* value, size_t size) {
  set_has_sparse_365_str();
  if (sparse_365_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_365_str_ = new ::std::string;
  }
  sparse_365_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_365_str() {
  set_has_sparse_365_str();
  if (sparse_365_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_365_str_ = new ::std::string;
  }
  return sparse_365_str_;
}
inline ::std::string* Database_NoBench::release_sparse_365_str() {
  clear_has_sparse_365_str();
  if (sparse_365_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_365_str_;
    sparse_365_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_365_str(::std::string* sparse_365_str) {
  if (sparse_365_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_365_str_;
  }
  if (sparse_365_str) {
    set_has_sparse_365_str();
    sparse_365_str_ = sparse_365_str;
  } else {
    clear_has_sparse_365_str();
    sparse_365_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_366_str = 378;
inline bool Database_NoBench::has_sparse_366_str() const {
  return (_has_bits_[11] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_366_str() {
  _has_bits_[11] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_366_str() {
  _has_bits_[11] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_366_str() {
  if (sparse_366_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_366_str_->clear();
  }
  clear_has_sparse_366_str();
}
inline const ::std::string& Database_NoBench::sparse_366_str() const {
  return *sparse_366_str_;
}
inline void Database_NoBench::set_sparse_366_str(const ::std::string& value) {
  set_has_sparse_366_str();
  if (sparse_366_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_366_str_ = new ::std::string;
  }
  sparse_366_str_->assign(value);
}
inline void Database_NoBench::set_sparse_366_str(const char* value) {
  set_has_sparse_366_str();
  if (sparse_366_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_366_str_ = new ::std::string;
  }
  sparse_366_str_->assign(value);
}
inline void Database_NoBench::set_sparse_366_str(const char* value, size_t size) {
  set_has_sparse_366_str();
  if (sparse_366_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_366_str_ = new ::std::string;
  }
  sparse_366_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_366_str() {
  set_has_sparse_366_str();
  if (sparse_366_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_366_str_ = new ::std::string;
  }
  return sparse_366_str_;
}
inline ::std::string* Database_NoBench::release_sparse_366_str() {
  clear_has_sparse_366_str();
  if (sparse_366_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_366_str_;
    sparse_366_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_366_str(::std::string* sparse_366_str) {
  if (sparse_366_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_366_str_;
  }
  if (sparse_366_str) {
    set_has_sparse_366_str();
    sparse_366_str_ = sparse_366_str;
  } else {
    clear_has_sparse_366_str();
    sparse_366_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_367_str = 379;
inline bool Database_NoBench::has_sparse_367_str() const {
  return (_has_bits_[11] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_367_str() {
  _has_bits_[11] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_367_str() {
  _has_bits_[11] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_367_str() {
  if (sparse_367_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_367_str_->clear();
  }
  clear_has_sparse_367_str();
}
inline const ::std::string& Database_NoBench::sparse_367_str() const {
  return *sparse_367_str_;
}
inline void Database_NoBench::set_sparse_367_str(const ::std::string& value) {
  set_has_sparse_367_str();
  if (sparse_367_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_367_str_ = new ::std::string;
  }
  sparse_367_str_->assign(value);
}
inline void Database_NoBench::set_sparse_367_str(const char* value) {
  set_has_sparse_367_str();
  if (sparse_367_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_367_str_ = new ::std::string;
  }
  sparse_367_str_->assign(value);
}
inline void Database_NoBench::set_sparse_367_str(const char* value, size_t size) {
  set_has_sparse_367_str();
  if (sparse_367_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_367_str_ = new ::std::string;
  }
  sparse_367_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_367_str() {
  set_has_sparse_367_str();
  if (sparse_367_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_367_str_ = new ::std::string;
  }
  return sparse_367_str_;
}
inline ::std::string* Database_NoBench::release_sparse_367_str() {
  clear_has_sparse_367_str();
  if (sparse_367_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_367_str_;
    sparse_367_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_367_str(::std::string* sparse_367_str) {
  if (sparse_367_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_367_str_;
  }
  if (sparse_367_str) {
    set_has_sparse_367_str();
    sparse_367_str_ = sparse_367_str;
  } else {
    clear_has_sparse_367_str();
    sparse_367_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_368_str = 380;
inline bool Database_NoBench::has_sparse_368_str() const {
  return (_has_bits_[11] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_368_str() {
  _has_bits_[11] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_368_str() {
  _has_bits_[11] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_368_str() {
  if (sparse_368_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_368_str_->clear();
  }
  clear_has_sparse_368_str();
}
inline const ::std::string& Database_NoBench::sparse_368_str() const {
  return *sparse_368_str_;
}
inline void Database_NoBench::set_sparse_368_str(const ::std::string& value) {
  set_has_sparse_368_str();
  if (sparse_368_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_368_str_ = new ::std::string;
  }
  sparse_368_str_->assign(value);
}
inline void Database_NoBench::set_sparse_368_str(const char* value) {
  set_has_sparse_368_str();
  if (sparse_368_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_368_str_ = new ::std::string;
  }
  sparse_368_str_->assign(value);
}
inline void Database_NoBench::set_sparse_368_str(const char* value, size_t size) {
  set_has_sparse_368_str();
  if (sparse_368_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_368_str_ = new ::std::string;
  }
  sparse_368_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_368_str() {
  set_has_sparse_368_str();
  if (sparse_368_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_368_str_ = new ::std::string;
  }
  return sparse_368_str_;
}
inline ::std::string* Database_NoBench::release_sparse_368_str() {
  clear_has_sparse_368_str();
  if (sparse_368_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_368_str_;
    sparse_368_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_368_str(::std::string* sparse_368_str) {
  if (sparse_368_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_368_str_;
  }
  if (sparse_368_str) {
    set_has_sparse_368_str();
    sparse_368_str_ = sparse_368_str;
  } else {
    clear_has_sparse_368_str();
    sparse_368_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_369_str = 381;
inline bool Database_NoBench::has_sparse_369_str() const {
  return (_has_bits_[11] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_369_str() {
  _has_bits_[11] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_369_str() {
  _has_bits_[11] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_369_str() {
  if (sparse_369_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_369_str_->clear();
  }
  clear_has_sparse_369_str();
}
inline const ::std::string& Database_NoBench::sparse_369_str() const {
  return *sparse_369_str_;
}
inline void Database_NoBench::set_sparse_369_str(const ::std::string& value) {
  set_has_sparse_369_str();
  if (sparse_369_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_369_str_ = new ::std::string;
  }
  sparse_369_str_->assign(value);
}
inline void Database_NoBench::set_sparse_369_str(const char* value) {
  set_has_sparse_369_str();
  if (sparse_369_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_369_str_ = new ::std::string;
  }
  sparse_369_str_->assign(value);
}
inline void Database_NoBench::set_sparse_369_str(const char* value, size_t size) {
  set_has_sparse_369_str();
  if (sparse_369_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_369_str_ = new ::std::string;
  }
  sparse_369_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_369_str() {
  set_has_sparse_369_str();
  if (sparse_369_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_369_str_ = new ::std::string;
  }
  return sparse_369_str_;
}
inline ::std::string* Database_NoBench::release_sparse_369_str() {
  clear_has_sparse_369_str();
  if (sparse_369_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_369_str_;
    sparse_369_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_369_str(::std::string* sparse_369_str) {
  if (sparse_369_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_369_str_;
  }
  if (sparse_369_str) {
    set_has_sparse_369_str();
    sparse_369_str_ = sparse_369_str;
  } else {
    clear_has_sparse_369_str();
    sparse_369_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_370_str = 382;
inline bool Database_NoBench::has_sparse_370_str() const {
  return (_has_bits_[11] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_370_str() {
  _has_bits_[11] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_370_str() {
  _has_bits_[11] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_370_str() {
  if (sparse_370_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_370_str_->clear();
  }
  clear_has_sparse_370_str();
}
inline const ::std::string& Database_NoBench::sparse_370_str() const {
  return *sparse_370_str_;
}
inline void Database_NoBench::set_sparse_370_str(const ::std::string& value) {
  set_has_sparse_370_str();
  if (sparse_370_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_370_str_ = new ::std::string;
  }
  sparse_370_str_->assign(value);
}
inline void Database_NoBench::set_sparse_370_str(const char* value) {
  set_has_sparse_370_str();
  if (sparse_370_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_370_str_ = new ::std::string;
  }
  sparse_370_str_->assign(value);
}
inline void Database_NoBench::set_sparse_370_str(const char* value, size_t size) {
  set_has_sparse_370_str();
  if (sparse_370_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_370_str_ = new ::std::string;
  }
  sparse_370_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_370_str() {
  set_has_sparse_370_str();
  if (sparse_370_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_370_str_ = new ::std::string;
  }
  return sparse_370_str_;
}
inline ::std::string* Database_NoBench::release_sparse_370_str() {
  clear_has_sparse_370_str();
  if (sparse_370_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_370_str_;
    sparse_370_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_370_str(::std::string* sparse_370_str) {
  if (sparse_370_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_370_str_;
  }
  if (sparse_370_str) {
    set_has_sparse_370_str();
    sparse_370_str_ = sparse_370_str;
  } else {
    clear_has_sparse_370_str();
    sparse_370_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_371_str = 383;
inline bool Database_NoBench::has_sparse_371_str() const {
  return (_has_bits_[12] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_371_str() {
  _has_bits_[12] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_371_str() {
  _has_bits_[12] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_371_str() {
  if (sparse_371_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_371_str_->clear();
  }
  clear_has_sparse_371_str();
}
inline const ::std::string& Database_NoBench::sparse_371_str() const {
  return *sparse_371_str_;
}
inline void Database_NoBench::set_sparse_371_str(const ::std::string& value) {
  set_has_sparse_371_str();
  if (sparse_371_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_371_str_ = new ::std::string;
  }
  sparse_371_str_->assign(value);
}
inline void Database_NoBench::set_sparse_371_str(const char* value) {
  set_has_sparse_371_str();
  if (sparse_371_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_371_str_ = new ::std::string;
  }
  sparse_371_str_->assign(value);
}
inline void Database_NoBench::set_sparse_371_str(const char* value, size_t size) {
  set_has_sparse_371_str();
  if (sparse_371_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_371_str_ = new ::std::string;
  }
  sparse_371_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_371_str() {
  set_has_sparse_371_str();
  if (sparse_371_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_371_str_ = new ::std::string;
  }
  return sparse_371_str_;
}
inline ::std::string* Database_NoBench::release_sparse_371_str() {
  clear_has_sparse_371_str();
  if (sparse_371_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_371_str_;
    sparse_371_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_371_str(::std::string* sparse_371_str) {
  if (sparse_371_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_371_str_;
  }
  if (sparse_371_str) {
    set_has_sparse_371_str();
    sparse_371_str_ = sparse_371_str;
  } else {
    clear_has_sparse_371_str();
    sparse_371_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_372_str = 384;
inline bool Database_NoBench::has_sparse_372_str() const {
  return (_has_bits_[12] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_372_str() {
  _has_bits_[12] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_372_str() {
  _has_bits_[12] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_372_str() {
  if (sparse_372_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_372_str_->clear();
  }
  clear_has_sparse_372_str();
}
inline const ::std::string& Database_NoBench::sparse_372_str() const {
  return *sparse_372_str_;
}
inline void Database_NoBench::set_sparse_372_str(const ::std::string& value) {
  set_has_sparse_372_str();
  if (sparse_372_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_372_str_ = new ::std::string;
  }
  sparse_372_str_->assign(value);
}
inline void Database_NoBench::set_sparse_372_str(const char* value) {
  set_has_sparse_372_str();
  if (sparse_372_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_372_str_ = new ::std::string;
  }
  sparse_372_str_->assign(value);
}
inline void Database_NoBench::set_sparse_372_str(const char* value, size_t size) {
  set_has_sparse_372_str();
  if (sparse_372_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_372_str_ = new ::std::string;
  }
  sparse_372_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_372_str() {
  set_has_sparse_372_str();
  if (sparse_372_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_372_str_ = new ::std::string;
  }
  return sparse_372_str_;
}
inline ::std::string* Database_NoBench::release_sparse_372_str() {
  clear_has_sparse_372_str();
  if (sparse_372_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_372_str_;
    sparse_372_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_372_str(::std::string* sparse_372_str) {
  if (sparse_372_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_372_str_;
  }
  if (sparse_372_str) {
    set_has_sparse_372_str();
    sparse_372_str_ = sparse_372_str;
  } else {
    clear_has_sparse_372_str();
    sparse_372_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_373_str = 385;
inline bool Database_NoBench::has_sparse_373_str() const {
  return (_has_bits_[12] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_373_str() {
  _has_bits_[12] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_373_str() {
  _has_bits_[12] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_373_str() {
  if (sparse_373_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_373_str_->clear();
  }
  clear_has_sparse_373_str();
}
inline const ::std::string& Database_NoBench::sparse_373_str() const {
  return *sparse_373_str_;
}
inline void Database_NoBench::set_sparse_373_str(const ::std::string& value) {
  set_has_sparse_373_str();
  if (sparse_373_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_373_str_ = new ::std::string;
  }
  sparse_373_str_->assign(value);
}
inline void Database_NoBench::set_sparse_373_str(const char* value) {
  set_has_sparse_373_str();
  if (sparse_373_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_373_str_ = new ::std::string;
  }
  sparse_373_str_->assign(value);
}
inline void Database_NoBench::set_sparse_373_str(const char* value, size_t size) {
  set_has_sparse_373_str();
  if (sparse_373_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_373_str_ = new ::std::string;
  }
  sparse_373_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_373_str() {
  set_has_sparse_373_str();
  if (sparse_373_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_373_str_ = new ::std::string;
  }
  return sparse_373_str_;
}
inline ::std::string* Database_NoBench::release_sparse_373_str() {
  clear_has_sparse_373_str();
  if (sparse_373_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_373_str_;
    sparse_373_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_373_str(::std::string* sparse_373_str) {
  if (sparse_373_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_373_str_;
  }
  if (sparse_373_str) {
    set_has_sparse_373_str();
    sparse_373_str_ = sparse_373_str;
  } else {
    clear_has_sparse_373_str();
    sparse_373_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_374_str = 386;
inline bool Database_NoBench::has_sparse_374_str() const {
  return (_has_bits_[12] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_374_str() {
  _has_bits_[12] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_374_str() {
  _has_bits_[12] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_374_str() {
  if (sparse_374_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_374_str_->clear();
  }
  clear_has_sparse_374_str();
}
inline const ::std::string& Database_NoBench::sparse_374_str() const {
  return *sparse_374_str_;
}
inline void Database_NoBench::set_sparse_374_str(const ::std::string& value) {
  set_has_sparse_374_str();
  if (sparse_374_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_374_str_ = new ::std::string;
  }
  sparse_374_str_->assign(value);
}
inline void Database_NoBench::set_sparse_374_str(const char* value) {
  set_has_sparse_374_str();
  if (sparse_374_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_374_str_ = new ::std::string;
  }
  sparse_374_str_->assign(value);
}
inline void Database_NoBench::set_sparse_374_str(const char* value, size_t size) {
  set_has_sparse_374_str();
  if (sparse_374_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_374_str_ = new ::std::string;
  }
  sparse_374_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_374_str() {
  set_has_sparse_374_str();
  if (sparse_374_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_374_str_ = new ::std::string;
  }
  return sparse_374_str_;
}
inline ::std::string* Database_NoBench::release_sparse_374_str() {
  clear_has_sparse_374_str();
  if (sparse_374_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_374_str_;
    sparse_374_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_374_str(::std::string* sparse_374_str) {
  if (sparse_374_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_374_str_;
  }
  if (sparse_374_str) {
    set_has_sparse_374_str();
    sparse_374_str_ = sparse_374_str;
  } else {
    clear_has_sparse_374_str();
    sparse_374_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_375_str = 387;
inline bool Database_NoBench::has_sparse_375_str() const {
  return (_has_bits_[12] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_375_str() {
  _has_bits_[12] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_375_str() {
  _has_bits_[12] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_375_str() {
  if (sparse_375_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_375_str_->clear();
  }
  clear_has_sparse_375_str();
}
inline const ::std::string& Database_NoBench::sparse_375_str() const {
  return *sparse_375_str_;
}
inline void Database_NoBench::set_sparse_375_str(const ::std::string& value) {
  set_has_sparse_375_str();
  if (sparse_375_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_375_str_ = new ::std::string;
  }
  sparse_375_str_->assign(value);
}
inline void Database_NoBench::set_sparse_375_str(const char* value) {
  set_has_sparse_375_str();
  if (sparse_375_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_375_str_ = new ::std::string;
  }
  sparse_375_str_->assign(value);
}
inline void Database_NoBench::set_sparse_375_str(const char* value, size_t size) {
  set_has_sparse_375_str();
  if (sparse_375_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_375_str_ = new ::std::string;
  }
  sparse_375_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_375_str() {
  set_has_sparse_375_str();
  if (sparse_375_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_375_str_ = new ::std::string;
  }
  return sparse_375_str_;
}
inline ::std::string* Database_NoBench::release_sparse_375_str() {
  clear_has_sparse_375_str();
  if (sparse_375_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_375_str_;
    sparse_375_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_375_str(::std::string* sparse_375_str) {
  if (sparse_375_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_375_str_;
  }
  if (sparse_375_str) {
    set_has_sparse_375_str();
    sparse_375_str_ = sparse_375_str;
  } else {
    clear_has_sparse_375_str();
    sparse_375_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_376_str = 388;
inline bool Database_NoBench::has_sparse_376_str() const {
  return (_has_bits_[12] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_376_str() {
  _has_bits_[12] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_376_str() {
  _has_bits_[12] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_376_str() {
  if (sparse_376_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_376_str_->clear();
  }
  clear_has_sparse_376_str();
}
inline const ::std::string& Database_NoBench::sparse_376_str() const {
  return *sparse_376_str_;
}
inline void Database_NoBench::set_sparse_376_str(const ::std::string& value) {
  set_has_sparse_376_str();
  if (sparse_376_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_376_str_ = new ::std::string;
  }
  sparse_376_str_->assign(value);
}
inline void Database_NoBench::set_sparse_376_str(const char* value) {
  set_has_sparse_376_str();
  if (sparse_376_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_376_str_ = new ::std::string;
  }
  sparse_376_str_->assign(value);
}
inline void Database_NoBench::set_sparse_376_str(const char* value, size_t size) {
  set_has_sparse_376_str();
  if (sparse_376_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_376_str_ = new ::std::string;
  }
  sparse_376_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_376_str() {
  set_has_sparse_376_str();
  if (sparse_376_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_376_str_ = new ::std::string;
  }
  return sparse_376_str_;
}
inline ::std::string* Database_NoBench::release_sparse_376_str() {
  clear_has_sparse_376_str();
  if (sparse_376_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_376_str_;
    sparse_376_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_376_str(::std::string* sparse_376_str) {
  if (sparse_376_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_376_str_;
  }
  if (sparse_376_str) {
    set_has_sparse_376_str();
    sparse_376_str_ = sparse_376_str;
  } else {
    clear_has_sparse_376_str();
    sparse_376_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_377_str = 389;
inline bool Database_NoBench::has_sparse_377_str() const {
  return (_has_bits_[12] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_377_str() {
  _has_bits_[12] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_377_str() {
  _has_bits_[12] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_377_str() {
  if (sparse_377_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_377_str_->clear();
  }
  clear_has_sparse_377_str();
}
inline const ::std::string& Database_NoBench::sparse_377_str() const {
  return *sparse_377_str_;
}
inline void Database_NoBench::set_sparse_377_str(const ::std::string& value) {
  set_has_sparse_377_str();
  if (sparse_377_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_377_str_ = new ::std::string;
  }
  sparse_377_str_->assign(value);
}
inline void Database_NoBench::set_sparse_377_str(const char* value) {
  set_has_sparse_377_str();
  if (sparse_377_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_377_str_ = new ::std::string;
  }
  sparse_377_str_->assign(value);
}
inline void Database_NoBench::set_sparse_377_str(const char* value, size_t size) {
  set_has_sparse_377_str();
  if (sparse_377_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_377_str_ = new ::std::string;
  }
  sparse_377_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_377_str() {
  set_has_sparse_377_str();
  if (sparse_377_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_377_str_ = new ::std::string;
  }
  return sparse_377_str_;
}
inline ::std::string* Database_NoBench::release_sparse_377_str() {
  clear_has_sparse_377_str();
  if (sparse_377_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_377_str_;
    sparse_377_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_377_str(::std::string* sparse_377_str) {
  if (sparse_377_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_377_str_;
  }
  if (sparse_377_str) {
    set_has_sparse_377_str();
    sparse_377_str_ = sparse_377_str;
  } else {
    clear_has_sparse_377_str();
    sparse_377_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_378_str = 390;
inline bool Database_NoBench::has_sparse_378_str() const {
  return (_has_bits_[12] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_378_str() {
  _has_bits_[12] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_378_str() {
  _has_bits_[12] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_378_str() {
  if (sparse_378_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_378_str_->clear();
  }
  clear_has_sparse_378_str();
}
inline const ::std::string& Database_NoBench::sparse_378_str() const {
  return *sparse_378_str_;
}
inline void Database_NoBench::set_sparse_378_str(const ::std::string& value) {
  set_has_sparse_378_str();
  if (sparse_378_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_378_str_ = new ::std::string;
  }
  sparse_378_str_->assign(value);
}
inline void Database_NoBench::set_sparse_378_str(const char* value) {
  set_has_sparse_378_str();
  if (sparse_378_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_378_str_ = new ::std::string;
  }
  sparse_378_str_->assign(value);
}
inline void Database_NoBench::set_sparse_378_str(const char* value, size_t size) {
  set_has_sparse_378_str();
  if (sparse_378_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_378_str_ = new ::std::string;
  }
  sparse_378_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_378_str() {
  set_has_sparse_378_str();
  if (sparse_378_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_378_str_ = new ::std::string;
  }
  return sparse_378_str_;
}
inline ::std::string* Database_NoBench::release_sparse_378_str() {
  clear_has_sparse_378_str();
  if (sparse_378_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_378_str_;
    sparse_378_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_378_str(::std::string* sparse_378_str) {
  if (sparse_378_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_378_str_;
  }
  if (sparse_378_str) {
    set_has_sparse_378_str();
    sparse_378_str_ = sparse_378_str;
  } else {
    clear_has_sparse_378_str();
    sparse_378_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_379_str = 391;
inline bool Database_NoBench::has_sparse_379_str() const {
  return (_has_bits_[12] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_379_str() {
  _has_bits_[12] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_379_str() {
  _has_bits_[12] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_379_str() {
  if (sparse_379_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_379_str_->clear();
  }
  clear_has_sparse_379_str();
}
inline const ::std::string& Database_NoBench::sparse_379_str() const {
  return *sparse_379_str_;
}
inline void Database_NoBench::set_sparse_379_str(const ::std::string& value) {
  set_has_sparse_379_str();
  if (sparse_379_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_379_str_ = new ::std::string;
  }
  sparse_379_str_->assign(value);
}
inline void Database_NoBench::set_sparse_379_str(const char* value) {
  set_has_sparse_379_str();
  if (sparse_379_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_379_str_ = new ::std::string;
  }
  sparse_379_str_->assign(value);
}
inline void Database_NoBench::set_sparse_379_str(const char* value, size_t size) {
  set_has_sparse_379_str();
  if (sparse_379_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_379_str_ = new ::std::string;
  }
  sparse_379_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_379_str() {
  set_has_sparse_379_str();
  if (sparse_379_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_379_str_ = new ::std::string;
  }
  return sparse_379_str_;
}
inline ::std::string* Database_NoBench::release_sparse_379_str() {
  clear_has_sparse_379_str();
  if (sparse_379_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_379_str_;
    sparse_379_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_379_str(::std::string* sparse_379_str) {
  if (sparse_379_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_379_str_;
  }
  if (sparse_379_str) {
    set_has_sparse_379_str();
    sparse_379_str_ = sparse_379_str;
  } else {
    clear_has_sparse_379_str();
    sparse_379_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_380_str = 392;
inline bool Database_NoBench::has_sparse_380_str() const {
  return (_has_bits_[12] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_380_str() {
  _has_bits_[12] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_380_str() {
  _has_bits_[12] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_380_str() {
  if (sparse_380_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_380_str_->clear();
  }
  clear_has_sparse_380_str();
}
inline const ::std::string& Database_NoBench::sparse_380_str() const {
  return *sparse_380_str_;
}
inline void Database_NoBench::set_sparse_380_str(const ::std::string& value) {
  set_has_sparse_380_str();
  if (sparse_380_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_380_str_ = new ::std::string;
  }
  sparse_380_str_->assign(value);
}
inline void Database_NoBench::set_sparse_380_str(const char* value) {
  set_has_sparse_380_str();
  if (sparse_380_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_380_str_ = new ::std::string;
  }
  sparse_380_str_->assign(value);
}
inline void Database_NoBench::set_sparse_380_str(const char* value, size_t size) {
  set_has_sparse_380_str();
  if (sparse_380_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_380_str_ = new ::std::string;
  }
  sparse_380_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_380_str() {
  set_has_sparse_380_str();
  if (sparse_380_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_380_str_ = new ::std::string;
  }
  return sparse_380_str_;
}
inline ::std::string* Database_NoBench::release_sparse_380_str() {
  clear_has_sparse_380_str();
  if (sparse_380_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_380_str_;
    sparse_380_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_380_str(::std::string* sparse_380_str) {
  if (sparse_380_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_380_str_;
  }
  if (sparse_380_str) {
    set_has_sparse_380_str();
    sparse_380_str_ = sparse_380_str;
  } else {
    clear_has_sparse_380_str();
    sparse_380_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_381_str = 393;
inline bool Database_NoBench::has_sparse_381_str() const {
  return (_has_bits_[12] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_381_str() {
  _has_bits_[12] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_381_str() {
  _has_bits_[12] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_381_str() {
  if (sparse_381_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_381_str_->clear();
  }
  clear_has_sparse_381_str();
}
inline const ::std::string& Database_NoBench::sparse_381_str() const {
  return *sparse_381_str_;
}
inline void Database_NoBench::set_sparse_381_str(const ::std::string& value) {
  set_has_sparse_381_str();
  if (sparse_381_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_381_str_ = new ::std::string;
  }
  sparse_381_str_->assign(value);
}
inline void Database_NoBench::set_sparse_381_str(const char* value) {
  set_has_sparse_381_str();
  if (sparse_381_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_381_str_ = new ::std::string;
  }
  sparse_381_str_->assign(value);
}
inline void Database_NoBench::set_sparse_381_str(const char* value, size_t size) {
  set_has_sparse_381_str();
  if (sparse_381_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_381_str_ = new ::std::string;
  }
  sparse_381_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_381_str() {
  set_has_sparse_381_str();
  if (sparse_381_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_381_str_ = new ::std::string;
  }
  return sparse_381_str_;
}
inline ::std::string* Database_NoBench::release_sparse_381_str() {
  clear_has_sparse_381_str();
  if (sparse_381_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_381_str_;
    sparse_381_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_381_str(::std::string* sparse_381_str) {
  if (sparse_381_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_381_str_;
  }
  if (sparse_381_str) {
    set_has_sparse_381_str();
    sparse_381_str_ = sparse_381_str;
  } else {
    clear_has_sparse_381_str();
    sparse_381_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_382_str = 394;
inline bool Database_NoBench::has_sparse_382_str() const {
  return (_has_bits_[12] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_382_str() {
  _has_bits_[12] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_382_str() {
  _has_bits_[12] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_382_str() {
  if (sparse_382_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_382_str_->clear();
  }
  clear_has_sparse_382_str();
}
inline const ::std::string& Database_NoBench::sparse_382_str() const {
  return *sparse_382_str_;
}
inline void Database_NoBench::set_sparse_382_str(const ::std::string& value) {
  set_has_sparse_382_str();
  if (sparse_382_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_382_str_ = new ::std::string;
  }
  sparse_382_str_->assign(value);
}
inline void Database_NoBench::set_sparse_382_str(const char* value) {
  set_has_sparse_382_str();
  if (sparse_382_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_382_str_ = new ::std::string;
  }
  sparse_382_str_->assign(value);
}
inline void Database_NoBench::set_sparse_382_str(const char* value, size_t size) {
  set_has_sparse_382_str();
  if (sparse_382_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_382_str_ = new ::std::string;
  }
  sparse_382_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_382_str() {
  set_has_sparse_382_str();
  if (sparse_382_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_382_str_ = new ::std::string;
  }
  return sparse_382_str_;
}
inline ::std::string* Database_NoBench::release_sparse_382_str() {
  clear_has_sparse_382_str();
  if (sparse_382_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_382_str_;
    sparse_382_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_382_str(::std::string* sparse_382_str) {
  if (sparse_382_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_382_str_;
  }
  if (sparse_382_str) {
    set_has_sparse_382_str();
    sparse_382_str_ = sparse_382_str;
  } else {
    clear_has_sparse_382_str();
    sparse_382_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_383_str = 395;
inline bool Database_NoBench::has_sparse_383_str() const {
  return (_has_bits_[12] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_383_str() {
  _has_bits_[12] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_383_str() {
  _has_bits_[12] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_383_str() {
  if (sparse_383_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_383_str_->clear();
  }
  clear_has_sparse_383_str();
}
inline const ::std::string& Database_NoBench::sparse_383_str() const {
  return *sparse_383_str_;
}
inline void Database_NoBench::set_sparse_383_str(const ::std::string& value) {
  set_has_sparse_383_str();
  if (sparse_383_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_383_str_ = new ::std::string;
  }
  sparse_383_str_->assign(value);
}
inline void Database_NoBench::set_sparse_383_str(const char* value) {
  set_has_sparse_383_str();
  if (sparse_383_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_383_str_ = new ::std::string;
  }
  sparse_383_str_->assign(value);
}
inline void Database_NoBench::set_sparse_383_str(const char* value, size_t size) {
  set_has_sparse_383_str();
  if (sparse_383_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_383_str_ = new ::std::string;
  }
  sparse_383_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_383_str() {
  set_has_sparse_383_str();
  if (sparse_383_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_383_str_ = new ::std::string;
  }
  return sparse_383_str_;
}
inline ::std::string* Database_NoBench::release_sparse_383_str() {
  clear_has_sparse_383_str();
  if (sparse_383_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_383_str_;
    sparse_383_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_383_str(::std::string* sparse_383_str) {
  if (sparse_383_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_383_str_;
  }
  if (sparse_383_str) {
    set_has_sparse_383_str();
    sparse_383_str_ = sparse_383_str;
  } else {
    clear_has_sparse_383_str();
    sparse_383_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_384_str = 396;
inline bool Database_NoBench::has_sparse_384_str() const {
  return (_has_bits_[12] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_384_str() {
  _has_bits_[12] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_384_str() {
  _has_bits_[12] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_384_str() {
  if (sparse_384_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_384_str_->clear();
  }
  clear_has_sparse_384_str();
}
inline const ::std::string& Database_NoBench::sparse_384_str() const {
  return *sparse_384_str_;
}
inline void Database_NoBench::set_sparse_384_str(const ::std::string& value) {
  set_has_sparse_384_str();
  if (sparse_384_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_384_str_ = new ::std::string;
  }
  sparse_384_str_->assign(value);
}
inline void Database_NoBench::set_sparse_384_str(const char* value) {
  set_has_sparse_384_str();
  if (sparse_384_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_384_str_ = new ::std::string;
  }
  sparse_384_str_->assign(value);
}
inline void Database_NoBench::set_sparse_384_str(const char* value, size_t size) {
  set_has_sparse_384_str();
  if (sparse_384_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_384_str_ = new ::std::string;
  }
  sparse_384_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_384_str() {
  set_has_sparse_384_str();
  if (sparse_384_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_384_str_ = new ::std::string;
  }
  return sparse_384_str_;
}
inline ::std::string* Database_NoBench::release_sparse_384_str() {
  clear_has_sparse_384_str();
  if (sparse_384_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_384_str_;
    sparse_384_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_384_str(::std::string* sparse_384_str) {
  if (sparse_384_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_384_str_;
  }
  if (sparse_384_str) {
    set_has_sparse_384_str();
    sparse_384_str_ = sparse_384_str;
  } else {
    clear_has_sparse_384_str();
    sparse_384_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_385_str = 397;
inline bool Database_NoBench::has_sparse_385_str() const {
  return (_has_bits_[12] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_385_str() {
  _has_bits_[12] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_385_str() {
  _has_bits_[12] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_385_str() {
  if (sparse_385_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_385_str_->clear();
  }
  clear_has_sparse_385_str();
}
inline const ::std::string& Database_NoBench::sparse_385_str() const {
  return *sparse_385_str_;
}
inline void Database_NoBench::set_sparse_385_str(const ::std::string& value) {
  set_has_sparse_385_str();
  if (sparse_385_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_385_str_ = new ::std::string;
  }
  sparse_385_str_->assign(value);
}
inline void Database_NoBench::set_sparse_385_str(const char* value) {
  set_has_sparse_385_str();
  if (sparse_385_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_385_str_ = new ::std::string;
  }
  sparse_385_str_->assign(value);
}
inline void Database_NoBench::set_sparse_385_str(const char* value, size_t size) {
  set_has_sparse_385_str();
  if (sparse_385_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_385_str_ = new ::std::string;
  }
  sparse_385_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_385_str() {
  set_has_sparse_385_str();
  if (sparse_385_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_385_str_ = new ::std::string;
  }
  return sparse_385_str_;
}
inline ::std::string* Database_NoBench::release_sparse_385_str() {
  clear_has_sparse_385_str();
  if (sparse_385_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_385_str_;
    sparse_385_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_385_str(::std::string* sparse_385_str) {
  if (sparse_385_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_385_str_;
  }
  if (sparse_385_str) {
    set_has_sparse_385_str();
    sparse_385_str_ = sparse_385_str;
  } else {
    clear_has_sparse_385_str();
    sparse_385_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_386_str = 398;
inline bool Database_NoBench::has_sparse_386_str() const {
  return (_has_bits_[12] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_386_str() {
  _has_bits_[12] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_386_str() {
  _has_bits_[12] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_386_str() {
  if (sparse_386_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_386_str_->clear();
  }
  clear_has_sparse_386_str();
}
inline const ::std::string& Database_NoBench::sparse_386_str() const {
  return *sparse_386_str_;
}
inline void Database_NoBench::set_sparse_386_str(const ::std::string& value) {
  set_has_sparse_386_str();
  if (sparse_386_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_386_str_ = new ::std::string;
  }
  sparse_386_str_->assign(value);
}
inline void Database_NoBench::set_sparse_386_str(const char* value) {
  set_has_sparse_386_str();
  if (sparse_386_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_386_str_ = new ::std::string;
  }
  sparse_386_str_->assign(value);
}
inline void Database_NoBench::set_sparse_386_str(const char* value, size_t size) {
  set_has_sparse_386_str();
  if (sparse_386_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_386_str_ = new ::std::string;
  }
  sparse_386_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_386_str() {
  set_has_sparse_386_str();
  if (sparse_386_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_386_str_ = new ::std::string;
  }
  return sparse_386_str_;
}
inline ::std::string* Database_NoBench::release_sparse_386_str() {
  clear_has_sparse_386_str();
  if (sparse_386_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_386_str_;
    sparse_386_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_386_str(::std::string* sparse_386_str) {
  if (sparse_386_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_386_str_;
  }
  if (sparse_386_str) {
    set_has_sparse_386_str();
    sparse_386_str_ = sparse_386_str;
  } else {
    clear_has_sparse_386_str();
    sparse_386_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_387_str = 399;
inline bool Database_NoBench::has_sparse_387_str() const {
  return (_has_bits_[12] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_387_str() {
  _has_bits_[12] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_387_str() {
  _has_bits_[12] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_387_str() {
  if (sparse_387_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_387_str_->clear();
  }
  clear_has_sparse_387_str();
}
inline const ::std::string& Database_NoBench::sparse_387_str() const {
  return *sparse_387_str_;
}
inline void Database_NoBench::set_sparse_387_str(const ::std::string& value) {
  set_has_sparse_387_str();
  if (sparse_387_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_387_str_ = new ::std::string;
  }
  sparse_387_str_->assign(value);
}
inline void Database_NoBench::set_sparse_387_str(const char* value) {
  set_has_sparse_387_str();
  if (sparse_387_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_387_str_ = new ::std::string;
  }
  sparse_387_str_->assign(value);
}
inline void Database_NoBench::set_sparse_387_str(const char* value, size_t size) {
  set_has_sparse_387_str();
  if (sparse_387_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_387_str_ = new ::std::string;
  }
  sparse_387_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_387_str() {
  set_has_sparse_387_str();
  if (sparse_387_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_387_str_ = new ::std::string;
  }
  return sparse_387_str_;
}
inline ::std::string* Database_NoBench::release_sparse_387_str() {
  clear_has_sparse_387_str();
  if (sparse_387_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_387_str_;
    sparse_387_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_387_str(::std::string* sparse_387_str) {
  if (sparse_387_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_387_str_;
  }
  if (sparse_387_str) {
    set_has_sparse_387_str();
    sparse_387_str_ = sparse_387_str;
  } else {
    clear_has_sparse_387_str();
    sparse_387_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_388_str = 400;
inline bool Database_NoBench::has_sparse_388_str() const {
  return (_has_bits_[12] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_388_str() {
  _has_bits_[12] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_388_str() {
  _has_bits_[12] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_388_str() {
  if (sparse_388_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_388_str_->clear();
  }
  clear_has_sparse_388_str();
}
inline const ::std::string& Database_NoBench::sparse_388_str() const {
  return *sparse_388_str_;
}
inline void Database_NoBench::set_sparse_388_str(const ::std::string& value) {
  set_has_sparse_388_str();
  if (sparse_388_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_388_str_ = new ::std::string;
  }
  sparse_388_str_->assign(value);
}
inline void Database_NoBench::set_sparse_388_str(const char* value) {
  set_has_sparse_388_str();
  if (sparse_388_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_388_str_ = new ::std::string;
  }
  sparse_388_str_->assign(value);
}
inline void Database_NoBench::set_sparse_388_str(const char* value, size_t size) {
  set_has_sparse_388_str();
  if (sparse_388_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_388_str_ = new ::std::string;
  }
  sparse_388_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_388_str() {
  set_has_sparse_388_str();
  if (sparse_388_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_388_str_ = new ::std::string;
  }
  return sparse_388_str_;
}
inline ::std::string* Database_NoBench::release_sparse_388_str() {
  clear_has_sparse_388_str();
  if (sparse_388_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_388_str_;
    sparse_388_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_388_str(::std::string* sparse_388_str) {
  if (sparse_388_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_388_str_;
  }
  if (sparse_388_str) {
    set_has_sparse_388_str();
    sparse_388_str_ = sparse_388_str;
  } else {
    clear_has_sparse_388_str();
    sparse_388_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_389_str = 401;
inline bool Database_NoBench::has_sparse_389_str() const {
  return (_has_bits_[12] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_389_str() {
  _has_bits_[12] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_389_str() {
  _has_bits_[12] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_389_str() {
  if (sparse_389_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_389_str_->clear();
  }
  clear_has_sparse_389_str();
}
inline const ::std::string& Database_NoBench::sparse_389_str() const {
  return *sparse_389_str_;
}
inline void Database_NoBench::set_sparse_389_str(const ::std::string& value) {
  set_has_sparse_389_str();
  if (sparse_389_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_389_str_ = new ::std::string;
  }
  sparse_389_str_->assign(value);
}
inline void Database_NoBench::set_sparse_389_str(const char* value) {
  set_has_sparse_389_str();
  if (sparse_389_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_389_str_ = new ::std::string;
  }
  sparse_389_str_->assign(value);
}
inline void Database_NoBench::set_sparse_389_str(const char* value, size_t size) {
  set_has_sparse_389_str();
  if (sparse_389_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_389_str_ = new ::std::string;
  }
  sparse_389_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_389_str() {
  set_has_sparse_389_str();
  if (sparse_389_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_389_str_ = new ::std::string;
  }
  return sparse_389_str_;
}
inline ::std::string* Database_NoBench::release_sparse_389_str() {
  clear_has_sparse_389_str();
  if (sparse_389_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_389_str_;
    sparse_389_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_389_str(::std::string* sparse_389_str) {
  if (sparse_389_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_389_str_;
  }
  if (sparse_389_str) {
    set_has_sparse_389_str();
    sparse_389_str_ = sparse_389_str;
  } else {
    clear_has_sparse_389_str();
    sparse_389_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_390_str = 402;
inline bool Database_NoBench::has_sparse_390_str() const {
  return (_has_bits_[12] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_390_str() {
  _has_bits_[12] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_390_str() {
  _has_bits_[12] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_390_str() {
  if (sparse_390_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_390_str_->clear();
  }
  clear_has_sparse_390_str();
}
inline const ::std::string& Database_NoBench::sparse_390_str() const {
  return *sparse_390_str_;
}
inline void Database_NoBench::set_sparse_390_str(const ::std::string& value) {
  set_has_sparse_390_str();
  if (sparse_390_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_390_str_ = new ::std::string;
  }
  sparse_390_str_->assign(value);
}
inline void Database_NoBench::set_sparse_390_str(const char* value) {
  set_has_sparse_390_str();
  if (sparse_390_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_390_str_ = new ::std::string;
  }
  sparse_390_str_->assign(value);
}
inline void Database_NoBench::set_sparse_390_str(const char* value, size_t size) {
  set_has_sparse_390_str();
  if (sparse_390_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_390_str_ = new ::std::string;
  }
  sparse_390_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_390_str() {
  set_has_sparse_390_str();
  if (sparse_390_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_390_str_ = new ::std::string;
  }
  return sparse_390_str_;
}
inline ::std::string* Database_NoBench::release_sparse_390_str() {
  clear_has_sparse_390_str();
  if (sparse_390_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_390_str_;
    sparse_390_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_390_str(::std::string* sparse_390_str) {
  if (sparse_390_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_390_str_;
  }
  if (sparse_390_str) {
    set_has_sparse_390_str();
    sparse_390_str_ = sparse_390_str;
  } else {
    clear_has_sparse_390_str();
    sparse_390_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_391_str = 403;
inline bool Database_NoBench::has_sparse_391_str() const {
  return (_has_bits_[12] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_391_str() {
  _has_bits_[12] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_391_str() {
  _has_bits_[12] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_391_str() {
  if (sparse_391_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_391_str_->clear();
  }
  clear_has_sparse_391_str();
}
inline const ::std::string& Database_NoBench::sparse_391_str() const {
  return *sparse_391_str_;
}
inline void Database_NoBench::set_sparse_391_str(const ::std::string& value) {
  set_has_sparse_391_str();
  if (sparse_391_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_391_str_ = new ::std::string;
  }
  sparse_391_str_->assign(value);
}
inline void Database_NoBench::set_sparse_391_str(const char* value) {
  set_has_sparse_391_str();
  if (sparse_391_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_391_str_ = new ::std::string;
  }
  sparse_391_str_->assign(value);
}
inline void Database_NoBench::set_sparse_391_str(const char* value, size_t size) {
  set_has_sparse_391_str();
  if (sparse_391_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_391_str_ = new ::std::string;
  }
  sparse_391_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_391_str() {
  set_has_sparse_391_str();
  if (sparse_391_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_391_str_ = new ::std::string;
  }
  return sparse_391_str_;
}
inline ::std::string* Database_NoBench::release_sparse_391_str() {
  clear_has_sparse_391_str();
  if (sparse_391_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_391_str_;
    sparse_391_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_391_str(::std::string* sparse_391_str) {
  if (sparse_391_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_391_str_;
  }
  if (sparse_391_str) {
    set_has_sparse_391_str();
    sparse_391_str_ = sparse_391_str;
  } else {
    clear_has_sparse_391_str();
    sparse_391_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_392_str = 404;
inline bool Database_NoBench::has_sparse_392_str() const {
  return (_has_bits_[12] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_392_str() {
  _has_bits_[12] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_392_str() {
  _has_bits_[12] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_392_str() {
  if (sparse_392_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_392_str_->clear();
  }
  clear_has_sparse_392_str();
}
inline const ::std::string& Database_NoBench::sparse_392_str() const {
  return *sparse_392_str_;
}
inline void Database_NoBench::set_sparse_392_str(const ::std::string& value) {
  set_has_sparse_392_str();
  if (sparse_392_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_392_str_ = new ::std::string;
  }
  sparse_392_str_->assign(value);
}
inline void Database_NoBench::set_sparse_392_str(const char* value) {
  set_has_sparse_392_str();
  if (sparse_392_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_392_str_ = new ::std::string;
  }
  sparse_392_str_->assign(value);
}
inline void Database_NoBench::set_sparse_392_str(const char* value, size_t size) {
  set_has_sparse_392_str();
  if (sparse_392_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_392_str_ = new ::std::string;
  }
  sparse_392_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_392_str() {
  set_has_sparse_392_str();
  if (sparse_392_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_392_str_ = new ::std::string;
  }
  return sparse_392_str_;
}
inline ::std::string* Database_NoBench::release_sparse_392_str() {
  clear_has_sparse_392_str();
  if (sparse_392_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_392_str_;
    sparse_392_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_392_str(::std::string* sparse_392_str) {
  if (sparse_392_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_392_str_;
  }
  if (sparse_392_str) {
    set_has_sparse_392_str();
    sparse_392_str_ = sparse_392_str;
  } else {
    clear_has_sparse_392_str();
    sparse_392_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_393_str = 405;
inline bool Database_NoBench::has_sparse_393_str() const {
  return (_has_bits_[12] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_393_str() {
  _has_bits_[12] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_393_str() {
  _has_bits_[12] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_393_str() {
  if (sparse_393_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_393_str_->clear();
  }
  clear_has_sparse_393_str();
}
inline const ::std::string& Database_NoBench::sparse_393_str() const {
  return *sparse_393_str_;
}
inline void Database_NoBench::set_sparse_393_str(const ::std::string& value) {
  set_has_sparse_393_str();
  if (sparse_393_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_393_str_ = new ::std::string;
  }
  sparse_393_str_->assign(value);
}
inline void Database_NoBench::set_sparse_393_str(const char* value) {
  set_has_sparse_393_str();
  if (sparse_393_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_393_str_ = new ::std::string;
  }
  sparse_393_str_->assign(value);
}
inline void Database_NoBench::set_sparse_393_str(const char* value, size_t size) {
  set_has_sparse_393_str();
  if (sparse_393_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_393_str_ = new ::std::string;
  }
  sparse_393_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_393_str() {
  set_has_sparse_393_str();
  if (sparse_393_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_393_str_ = new ::std::string;
  }
  return sparse_393_str_;
}
inline ::std::string* Database_NoBench::release_sparse_393_str() {
  clear_has_sparse_393_str();
  if (sparse_393_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_393_str_;
    sparse_393_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_393_str(::std::string* sparse_393_str) {
  if (sparse_393_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_393_str_;
  }
  if (sparse_393_str) {
    set_has_sparse_393_str();
    sparse_393_str_ = sparse_393_str;
  } else {
    clear_has_sparse_393_str();
    sparse_393_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_394_str = 406;
inline bool Database_NoBench::has_sparse_394_str() const {
  return (_has_bits_[12] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_394_str() {
  _has_bits_[12] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_394_str() {
  _has_bits_[12] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_394_str() {
  if (sparse_394_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_394_str_->clear();
  }
  clear_has_sparse_394_str();
}
inline const ::std::string& Database_NoBench::sparse_394_str() const {
  return *sparse_394_str_;
}
inline void Database_NoBench::set_sparse_394_str(const ::std::string& value) {
  set_has_sparse_394_str();
  if (sparse_394_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_394_str_ = new ::std::string;
  }
  sparse_394_str_->assign(value);
}
inline void Database_NoBench::set_sparse_394_str(const char* value) {
  set_has_sparse_394_str();
  if (sparse_394_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_394_str_ = new ::std::string;
  }
  sparse_394_str_->assign(value);
}
inline void Database_NoBench::set_sparse_394_str(const char* value, size_t size) {
  set_has_sparse_394_str();
  if (sparse_394_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_394_str_ = new ::std::string;
  }
  sparse_394_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_394_str() {
  set_has_sparse_394_str();
  if (sparse_394_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_394_str_ = new ::std::string;
  }
  return sparse_394_str_;
}
inline ::std::string* Database_NoBench::release_sparse_394_str() {
  clear_has_sparse_394_str();
  if (sparse_394_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_394_str_;
    sparse_394_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_394_str(::std::string* sparse_394_str) {
  if (sparse_394_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_394_str_;
  }
  if (sparse_394_str) {
    set_has_sparse_394_str();
    sparse_394_str_ = sparse_394_str;
  } else {
    clear_has_sparse_394_str();
    sparse_394_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_395_str = 407;
inline bool Database_NoBench::has_sparse_395_str() const {
  return (_has_bits_[12] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_395_str() {
  _has_bits_[12] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_395_str() {
  _has_bits_[12] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_395_str() {
  if (sparse_395_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_395_str_->clear();
  }
  clear_has_sparse_395_str();
}
inline const ::std::string& Database_NoBench::sparse_395_str() const {
  return *sparse_395_str_;
}
inline void Database_NoBench::set_sparse_395_str(const ::std::string& value) {
  set_has_sparse_395_str();
  if (sparse_395_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_395_str_ = new ::std::string;
  }
  sparse_395_str_->assign(value);
}
inline void Database_NoBench::set_sparse_395_str(const char* value) {
  set_has_sparse_395_str();
  if (sparse_395_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_395_str_ = new ::std::string;
  }
  sparse_395_str_->assign(value);
}
inline void Database_NoBench::set_sparse_395_str(const char* value, size_t size) {
  set_has_sparse_395_str();
  if (sparse_395_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_395_str_ = new ::std::string;
  }
  sparse_395_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_395_str() {
  set_has_sparse_395_str();
  if (sparse_395_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_395_str_ = new ::std::string;
  }
  return sparse_395_str_;
}
inline ::std::string* Database_NoBench::release_sparse_395_str() {
  clear_has_sparse_395_str();
  if (sparse_395_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_395_str_;
    sparse_395_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_395_str(::std::string* sparse_395_str) {
  if (sparse_395_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_395_str_;
  }
  if (sparse_395_str) {
    set_has_sparse_395_str();
    sparse_395_str_ = sparse_395_str;
  } else {
    clear_has_sparse_395_str();
    sparse_395_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_396_str = 408;
inline bool Database_NoBench::has_sparse_396_str() const {
  return (_has_bits_[12] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_396_str() {
  _has_bits_[12] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_396_str() {
  _has_bits_[12] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_396_str() {
  if (sparse_396_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_396_str_->clear();
  }
  clear_has_sparse_396_str();
}
inline const ::std::string& Database_NoBench::sparse_396_str() const {
  return *sparse_396_str_;
}
inline void Database_NoBench::set_sparse_396_str(const ::std::string& value) {
  set_has_sparse_396_str();
  if (sparse_396_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_396_str_ = new ::std::string;
  }
  sparse_396_str_->assign(value);
}
inline void Database_NoBench::set_sparse_396_str(const char* value) {
  set_has_sparse_396_str();
  if (sparse_396_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_396_str_ = new ::std::string;
  }
  sparse_396_str_->assign(value);
}
inline void Database_NoBench::set_sparse_396_str(const char* value, size_t size) {
  set_has_sparse_396_str();
  if (sparse_396_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_396_str_ = new ::std::string;
  }
  sparse_396_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_396_str() {
  set_has_sparse_396_str();
  if (sparse_396_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_396_str_ = new ::std::string;
  }
  return sparse_396_str_;
}
inline ::std::string* Database_NoBench::release_sparse_396_str() {
  clear_has_sparse_396_str();
  if (sparse_396_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_396_str_;
    sparse_396_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_396_str(::std::string* sparse_396_str) {
  if (sparse_396_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_396_str_;
  }
  if (sparse_396_str) {
    set_has_sparse_396_str();
    sparse_396_str_ = sparse_396_str;
  } else {
    clear_has_sparse_396_str();
    sparse_396_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_397_str = 409;
inline bool Database_NoBench::has_sparse_397_str() const {
  return (_has_bits_[12] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_397_str() {
  _has_bits_[12] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_397_str() {
  _has_bits_[12] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_397_str() {
  if (sparse_397_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_397_str_->clear();
  }
  clear_has_sparse_397_str();
}
inline const ::std::string& Database_NoBench::sparse_397_str() const {
  return *sparse_397_str_;
}
inline void Database_NoBench::set_sparse_397_str(const ::std::string& value) {
  set_has_sparse_397_str();
  if (sparse_397_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_397_str_ = new ::std::string;
  }
  sparse_397_str_->assign(value);
}
inline void Database_NoBench::set_sparse_397_str(const char* value) {
  set_has_sparse_397_str();
  if (sparse_397_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_397_str_ = new ::std::string;
  }
  sparse_397_str_->assign(value);
}
inline void Database_NoBench::set_sparse_397_str(const char* value, size_t size) {
  set_has_sparse_397_str();
  if (sparse_397_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_397_str_ = new ::std::string;
  }
  sparse_397_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_397_str() {
  set_has_sparse_397_str();
  if (sparse_397_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_397_str_ = new ::std::string;
  }
  return sparse_397_str_;
}
inline ::std::string* Database_NoBench::release_sparse_397_str() {
  clear_has_sparse_397_str();
  if (sparse_397_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_397_str_;
    sparse_397_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_397_str(::std::string* sparse_397_str) {
  if (sparse_397_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_397_str_;
  }
  if (sparse_397_str) {
    set_has_sparse_397_str();
    sparse_397_str_ = sparse_397_str;
  } else {
    clear_has_sparse_397_str();
    sparse_397_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_398_str = 410;
inline bool Database_NoBench::has_sparse_398_str() const {
  return (_has_bits_[12] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_398_str() {
  _has_bits_[12] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_398_str() {
  _has_bits_[12] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_398_str() {
  if (sparse_398_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_398_str_->clear();
  }
  clear_has_sparse_398_str();
}
inline const ::std::string& Database_NoBench::sparse_398_str() const {
  return *sparse_398_str_;
}
inline void Database_NoBench::set_sparse_398_str(const ::std::string& value) {
  set_has_sparse_398_str();
  if (sparse_398_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_398_str_ = new ::std::string;
  }
  sparse_398_str_->assign(value);
}
inline void Database_NoBench::set_sparse_398_str(const char* value) {
  set_has_sparse_398_str();
  if (sparse_398_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_398_str_ = new ::std::string;
  }
  sparse_398_str_->assign(value);
}
inline void Database_NoBench::set_sparse_398_str(const char* value, size_t size) {
  set_has_sparse_398_str();
  if (sparse_398_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_398_str_ = new ::std::string;
  }
  sparse_398_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_398_str() {
  set_has_sparse_398_str();
  if (sparse_398_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_398_str_ = new ::std::string;
  }
  return sparse_398_str_;
}
inline ::std::string* Database_NoBench::release_sparse_398_str() {
  clear_has_sparse_398_str();
  if (sparse_398_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_398_str_;
    sparse_398_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_398_str(::std::string* sparse_398_str) {
  if (sparse_398_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_398_str_;
  }
  if (sparse_398_str) {
    set_has_sparse_398_str();
    sparse_398_str_ = sparse_398_str;
  } else {
    clear_has_sparse_398_str();
    sparse_398_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_399_str = 411;
inline bool Database_NoBench::has_sparse_399_str() const {
  return (_has_bits_[12] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_399_str() {
  _has_bits_[12] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_399_str() {
  _has_bits_[12] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_399_str() {
  if (sparse_399_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_399_str_->clear();
  }
  clear_has_sparse_399_str();
}
inline const ::std::string& Database_NoBench::sparse_399_str() const {
  return *sparse_399_str_;
}
inline void Database_NoBench::set_sparse_399_str(const ::std::string& value) {
  set_has_sparse_399_str();
  if (sparse_399_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_399_str_ = new ::std::string;
  }
  sparse_399_str_->assign(value);
}
inline void Database_NoBench::set_sparse_399_str(const char* value) {
  set_has_sparse_399_str();
  if (sparse_399_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_399_str_ = new ::std::string;
  }
  sparse_399_str_->assign(value);
}
inline void Database_NoBench::set_sparse_399_str(const char* value, size_t size) {
  set_has_sparse_399_str();
  if (sparse_399_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_399_str_ = new ::std::string;
  }
  sparse_399_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_399_str() {
  set_has_sparse_399_str();
  if (sparse_399_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_399_str_ = new ::std::string;
  }
  return sparse_399_str_;
}
inline ::std::string* Database_NoBench::release_sparse_399_str() {
  clear_has_sparse_399_str();
  if (sparse_399_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_399_str_;
    sparse_399_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_399_str(::std::string* sparse_399_str) {
  if (sparse_399_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_399_str_;
  }
  if (sparse_399_str) {
    set_has_sparse_399_str();
    sparse_399_str_ = sparse_399_str;
  } else {
    clear_has_sparse_399_str();
    sparse_399_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_400_str = 412;
inline bool Database_NoBench::has_sparse_400_str() const {
  return (_has_bits_[12] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_400_str() {
  _has_bits_[12] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_400_str() {
  _has_bits_[12] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_400_str() {
  if (sparse_400_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_400_str_->clear();
  }
  clear_has_sparse_400_str();
}
inline const ::std::string& Database_NoBench::sparse_400_str() const {
  return *sparse_400_str_;
}
inline void Database_NoBench::set_sparse_400_str(const ::std::string& value) {
  set_has_sparse_400_str();
  if (sparse_400_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_400_str_ = new ::std::string;
  }
  sparse_400_str_->assign(value);
}
inline void Database_NoBench::set_sparse_400_str(const char* value) {
  set_has_sparse_400_str();
  if (sparse_400_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_400_str_ = new ::std::string;
  }
  sparse_400_str_->assign(value);
}
inline void Database_NoBench::set_sparse_400_str(const char* value, size_t size) {
  set_has_sparse_400_str();
  if (sparse_400_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_400_str_ = new ::std::string;
  }
  sparse_400_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_400_str() {
  set_has_sparse_400_str();
  if (sparse_400_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_400_str_ = new ::std::string;
  }
  return sparse_400_str_;
}
inline ::std::string* Database_NoBench::release_sparse_400_str() {
  clear_has_sparse_400_str();
  if (sparse_400_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_400_str_;
    sparse_400_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_400_str(::std::string* sparse_400_str) {
  if (sparse_400_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_400_str_;
  }
  if (sparse_400_str) {
    set_has_sparse_400_str();
    sparse_400_str_ = sparse_400_str;
  } else {
    clear_has_sparse_400_str();
    sparse_400_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_401_str = 413;
inline bool Database_NoBench::has_sparse_401_str() const {
  return (_has_bits_[12] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_401_str() {
  _has_bits_[12] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_401_str() {
  _has_bits_[12] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_401_str() {
  if (sparse_401_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_401_str_->clear();
  }
  clear_has_sparse_401_str();
}
inline const ::std::string& Database_NoBench::sparse_401_str() const {
  return *sparse_401_str_;
}
inline void Database_NoBench::set_sparse_401_str(const ::std::string& value) {
  set_has_sparse_401_str();
  if (sparse_401_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_401_str_ = new ::std::string;
  }
  sparse_401_str_->assign(value);
}
inline void Database_NoBench::set_sparse_401_str(const char* value) {
  set_has_sparse_401_str();
  if (sparse_401_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_401_str_ = new ::std::string;
  }
  sparse_401_str_->assign(value);
}
inline void Database_NoBench::set_sparse_401_str(const char* value, size_t size) {
  set_has_sparse_401_str();
  if (sparse_401_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_401_str_ = new ::std::string;
  }
  sparse_401_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_401_str() {
  set_has_sparse_401_str();
  if (sparse_401_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_401_str_ = new ::std::string;
  }
  return sparse_401_str_;
}
inline ::std::string* Database_NoBench::release_sparse_401_str() {
  clear_has_sparse_401_str();
  if (sparse_401_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_401_str_;
    sparse_401_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_401_str(::std::string* sparse_401_str) {
  if (sparse_401_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_401_str_;
  }
  if (sparse_401_str) {
    set_has_sparse_401_str();
    sparse_401_str_ = sparse_401_str;
  } else {
    clear_has_sparse_401_str();
    sparse_401_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_402_str = 414;
inline bool Database_NoBench::has_sparse_402_str() const {
  return (_has_bits_[12] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_402_str() {
  _has_bits_[12] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_402_str() {
  _has_bits_[12] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_402_str() {
  if (sparse_402_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_402_str_->clear();
  }
  clear_has_sparse_402_str();
}
inline const ::std::string& Database_NoBench::sparse_402_str() const {
  return *sparse_402_str_;
}
inline void Database_NoBench::set_sparse_402_str(const ::std::string& value) {
  set_has_sparse_402_str();
  if (sparse_402_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_402_str_ = new ::std::string;
  }
  sparse_402_str_->assign(value);
}
inline void Database_NoBench::set_sparse_402_str(const char* value) {
  set_has_sparse_402_str();
  if (sparse_402_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_402_str_ = new ::std::string;
  }
  sparse_402_str_->assign(value);
}
inline void Database_NoBench::set_sparse_402_str(const char* value, size_t size) {
  set_has_sparse_402_str();
  if (sparse_402_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_402_str_ = new ::std::string;
  }
  sparse_402_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_402_str() {
  set_has_sparse_402_str();
  if (sparse_402_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_402_str_ = new ::std::string;
  }
  return sparse_402_str_;
}
inline ::std::string* Database_NoBench::release_sparse_402_str() {
  clear_has_sparse_402_str();
  if (sparse_402_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_402_str_;
    sparse_402_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_402_str(::std::string* sparse_402_str) {
  if (sparse_402_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_402_str_;
  }
  if (sparse_402_str) {
    set_has_sparse_402_str();
    sparse_402_str_ = sparse_402_str;
  } else {
    clear_has_sparse_402_str();
    sparse_402_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_403_str = 415;
inline bool Database_NoBench::has_sparse_403_str() const {
  return (_has_bits_[13] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_403_str() {
  _has_bits_[13] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_403_str() {
  _has_bits_[13] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_403_str() {
  if (sparse_403_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_403_str_->clear();
  }
  clear_has_sparse_403_str();
}
inline const ::std::string& Database_NoBench::sparse_403_str() const {
  return *sparse_403_str_;
}
inline void Database_NoBench::set_sparse_403_str(const ::std::string& value) {
  set_has_sparse_403_str();
  if (sparse_403_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_403_str_ = new ::std::string;
  }
  sparse_403_str_->assign(value);
}
inline void Database_NoBench::set_sparse_403_str(const char* value) {
  set_has_sparse_403_str();
  if (sparse_403_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_403_str_ = new ::std::string;
  }
  sparse_403_str_->assign(value);
}
inline void Database_NoBench::set_sparse_403_str(const char* value, size_t size) {
  set_has_sparse_403_str();
  if (sparse_403_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_403_str_ = new ::std::string;
  }
  sparse_403_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_403_str() {
  set_has_sparse_403_str();
  if (sparse_403_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_403_str_ = new ::std::string;
  }
  return sparse_403_str_;
}
inline ::std::string* Database_NoBench::release_sparse_403_str() {
  clear_has_sparse_403_str();
  if (sparse_403_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_403_str_;
    sparse_403_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_403_str(::std::string* sparse_403_str) {
  if (sparse_403_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_403_str_;
  }
  if (sparse_403_str) {
    set_has_sparse_403_str();
    sparse_403_str_ = sparse_403_str;
  } else {
    clear_has_sparse_403_str();
    sparse_403_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_404_str = 416;
inline bool Database_NoBench::has_sparse_404_str() const {
  return (_has_bits_[13] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_404_str() {
  _has_bits_[13] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_404_str() {
  _has_bits_[13] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_404_str() {
  if (sparse_404_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_404_str_->clear();
  }
  clear_has_sparse_404_str();
}
inline const ::std::string& Database_NoBench::sparse_404_str() const {
  return *sparse_404_str_;
}
inline void Database_NoBench::set_sparse_404_str(const ::std::string& value) {
  set_has_sparse_404_str();
  if (sparse_404_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_404_str_ = new ::std::string;
  }
  sparse_404_str_->assign(value);
}
inline void Database_NoBench::set_sparse_404_str(const char* value) {
  set_has_sparse_404_str();
  if (sparse_404_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_404_str_ = new ::std::string;
  }
  sparse_404_str_->assign(value);
}
inline void Database_NoBench::set_sparse_404_str(const char* value, size_t size) {
  set_has_sparse_404_str();
  if (sparse_404_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_404_str_ = new ::std::string;
  }
  sparse_404_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_404_str() {
  set_has_sparse_404_str();
  if (sparse_404_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_404_str_ = new ::std::string;
  }
  return sparse_404_str_;
}
inline ::std::string* Database_NoBench::release_sparse_404_str() {
  clear_has_sparse_404_str();
  if (sparse_404_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_404_str_;
    sparse_404_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_404_str(::std::string* sparse_404_str) {
  if (sparse_404_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_404_str_;
  }
  if (sparse_404_str) {
    set_has_sparse_404_str();
    sparse_404_str_ = sparse_404_str;
  } else {
    clear_has_sparse_404_str();
    sparse_404_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_405_str = 417;
inline bool Database_NoBench::has_sparse_405_str() const {
  return (_has_bits_[13] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_405_str() {
  _has_bits_[13] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_405_str() {
  _has_bits_[13] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_405_str() {
  if (sparse_405_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_405_str_->clear();
  }
  clear_has_sparse_405_str();
}
inline const ::std::string& Database_NoBench::sparse_405_str() const {
  return *sparse_405_str_;
}
inline void Database_NoBench::set_sparse_405_str(const ::std::string& value) {
  set_has_sparse_405_str();
  if (sparse_405_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_405_str_ = new ::std::string;
  }
  sparse_405_str_->assign(value);
}
inline void Database_NoBench::set_sparse_405_str(const char* value) {
  set_has_sparse_405_str();
  if (sparse_405_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_405_str_ = new ::std::string;
  }
  sparse_405_str_->assign(value);
}
inline void Database_NoBench::set_sparse_405_str(const char* value, size_t size) {
  set_has_sparse_405_str();
  if (sparse_405_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_405_str_ = new ::std::string;
  }
  sparse_405_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_405_str() {
  set_has_sparse_405_str();
  if (sparse_405_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_405_str_ = new ::std::string;
  }
  return sparse_405_str_;
}
inline ::std::string* Database_NoBench::release_sparse_405_str() {
  clear_has_sparse_405_str();
  if (sparse_405_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_405_str_;
    sparse_405_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_405_str(::std::string* sparse_405_str) {
  if (sparse_405_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_405_str_;
  }
  if (sparse_405_str) {
    set_has_sparse_405_str();
    sparse_405_str_ = sparse_405_str;
  } else {
    clear_has_sparse_405_str();
    sparse_405_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_406_str = 418;
inline bool Database_NoBench::has_sparse_406_str() const {
  return (_has_bits_[13] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_406_str() {
  _has_bits_[13] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_406_str() {
  _has_bits_[13] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_406_str() {
  if (sparse_406_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_406_str_->clear();
  }
  clear_has_sparse_406_str();
}
inline const ::std::string& Database_NoBench::sparse_406_str() const {
  return *sparse_406_str_;
}
inline void Database_NoBench::set_sparse_406_str(const ::std::string& value) {
  set_has_sparse_406_str();
  if (sparse_406_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_406_str_ = new ::std::string;
  }
  sparse_406_str_->assign(value);
}
inline void Database_NoBench::set_sparse_406_str(const char* value) {
  set_has_sparse_406_str();
  if (sparse_406_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_406_str_ = new ::std::string;
  }
  sparse_406_str_->assign(value);
}
inline void Database_NoBench::set_sparse_406_str(const char* value, size_t size) {
  set_has_sparse_406_str();
  if (sparse_406_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_406_str_ = new ::std::string;
  }
  sparse_406_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_406_str() {
  set_has_sparse_406_str();
  if (sparse_406_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_406_str_ = new ::std::string;
  }
  return sparse_406_str_;
}
inline ::std::string* Database_NoBench::release_sparse_406_str() {
  clear_has_sparse_406_str();
  if (sparse_406_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_406_str_;
    sparse_406_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_406_str(::std::string* sparse_406_str) {
  if (sparse_406_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_406_str_;
  }
  if (sparse_406_str) {
    set_has_sparse_406_str();
    sparse_406_str_ = sparse_406_str;
  } else {
    clear_has_sparse_406_str();
    sparse_406_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_407_str = 419;
inline bool Database_NoBench::has_sparse_407_str() const {
  return (_has_bits_[13] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_407_str() {
  _has_bits_[13] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_407_str() {
  _has_bits_[13] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_407_str() {
  if (sparse_407_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_407_str_->clear();
  }
  clear_has_sparse_407_str();
}
inline const ::std::string& Database_NoBench::sparse_407_str() const {
  return *sparse_407_str_;
}
inline void Database_NoBench::set_sparse_407_str(const ::std::string& value) {
  set_has_sparse_407_str();
  if (sparse_407_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_407_str_ = new ::std::string;
  }
  sparse_407_str_->assign(value);
}
inline void Database_NoBench::set_sparse_407_str(const char* value) {
  set_has_sparse_407_str();
  if (sparse_407_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_407_str_ = new ::std::string;
  }
  sparse_407_str_->assign(value);
}
inline void Database_NoBench::set_sparse_407_str(const char* value, size_t size) {
  set_has_sparse_407_str();
  if (sparse_407_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_407_str_ = new ::std::string;
  }
  sparse_407_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_407_str() {
  set_has_sparse_407_str();
  if (sparse_407_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_407_str_ = new ::std::string;
  }
  return sparse_407_str_;
}
inline ::std::string* Database_NoBench::release_sparse_407_str() {
  clear_has_sparse_407_str();
  if (sparse_407_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_407_str_;
    sparse_407_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_407_str(::std::string* sparse_407_str) {
  if (sparse_407_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_407_str_;
  }
  if (sparse_407_str) {
    set_has_sparse_407_str();
    sparse_407_str_ = sparse_407_str;
  } else {
    clear_has_sparse_407_str();
    sparse_407_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_408_str = 420;
inline bool Database_NoBench::has_sparse_408_str() const {
  return (_has_bits_[13] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_408_str() {
  _has_bits_[13] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_408_str() {
  _has_bits_[13] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_408_str() {
  if (sparse_408_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_408_str_->clear();
  }
  clear_has_sparse_408_str();
}
inline const ::std::string& Database_NoBench::sparse_408_str() const {
  return *sparse_408_str_;
}
inline void Database_NoBench::set_sparse_408_str(const ::std::string& value) {
  set_has_sparse_408_str();
  if (sparse_408_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_408_str_ = new ::std::string;
  }
  sparse_408_str_->assign(value);
}
inline void Database_NoBench::set_sparse_408_str(const char* value) {
  set_has_sparse_408_str();
  if (sparse_408_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_408_str_ = new ::std::string;
  }
  sparse_408_str_->assign(value);
}
inline void Database_NoBench::set_sparse_408_str(const char* value, size_t size) {
  set_has_sparse_408_str();
  if (sparse_408_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_408_str_ = new ::std::string;
  }
  sparse_408_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_408_str() {
  set_has_sparse_408_str();
  if (sparse_408_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_408_str_ = new ::std::string;
  }
  return sparse_408_str_;
}
inline ::std::string* Database_NoBench::release_sparse_408_str() {
  clear_has_sparse_408_str();
  if (sparse_408_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_408_str_;
    sparse_408_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_408_str(::std::string* sparse_408_str) {
  if (sparse_408_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_408_str_;
  }
  if (sparse_408_str) {
    set_has_sparse_408_str();
    sparse_408_str_ = sparse_408_str;
  } else {
    clear_has_sparse_408_str();
    sparse_408_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_409_str = 421;
inline bool Database_NoBench::has_sparse_409_str() const {
  return (_has_bits_[13] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_409_str() {
  _has_bits_[13] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_409_str() {
  _has_bits_[13] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_409_str() {
  if (sparse_409_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_409_str_->clear();
  }
  clear_has_sparse_409_str();
}
inline const ::std::string& Database_NoBench::sparse_409_str() const {
  return *sparse_409_str_;
}
inline void Database_NoBench::set_sparse_409_str(const ::std::string& value) {
  set_has_sparse_409_str();
  if (sparse_409_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_409_str_ = new ::std::string;
  }
  sparse_409_str_->assign(value);
}
inline void Database_NoBench::set_sparse_409_str(const char* value) {
  set_has_sparse_409_str();
  if (sparse_409_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_409_str_ = new ::std::string;
  }
  sparse_409_str_->assign(value);
}
inline void Database_NoBench::set_sparse_409_str(const char* value, size_t size) {
  set_has_sparse_409_str();
  if (sparse_409_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_409_str_ = new ::std::string;
  }
  sparse_409_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_409_str() {
  set_has_sparse_409_str();
  if (sparse_409_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_409_str_ = new ::std::string;
  }
  return sparse_409_str_;
}
inline ::std::string* Database_NoBench::release_sparse_409_str() {
  clear_has_sparse_409_str();
  if (sparse_409_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_409_str_;
    sparse_409_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_409_str(::std::string* sparse_409_str) {
  if (sparse_409_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_409_str_;
  }
  if (sparse_409_str) {
    set_has_sparse_409_str();
    sparse_409_str_ = sparse_409_str;
  } else {
    clear_has_sparse_409_str();
    sparse_409_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_410_str = 422;
inline bool Database_NoBench::has_sparse_410_str() const {
  return (_has_bits_[13] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_410_str() {
  _has_bits_[13] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_410_str() {
  _has_bits_[13] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_410_str() {
  if (sparse_410_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_410_str_->clear();
  }
  clear_has_sparse_410_str();
}
inline const ::std::string& Database_NoBench::sparse_410_str() const {
  return *sparse_410_str_;
}
inline void Database_NoBench::set_sparse_410_str(const ::std::string& value) {
  set_has_sparse_410_str();
  if (sparse_410_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_410_str_ = new ::std::string;
  }
  sparse_410_str_->assign(value);
}
inline void Database_NoBench::set_sparse_410_str(const char* value) {
  set_has_sparse_410_str();
  if (sparse_410_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_410_str_ = new ::std::string;
  }
  sparse_410_str_->assign(value);
}
inline void Database_NoBench::set_sparse_410_str(const char* value, size_t size) {
  set_has_sparse_410_str();
  if (sparse_410_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_410_str_ = new ::std::string;
  }
  sparse_410_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_410_str() {
  set_has_sparse_410_str();
  if (sparse_410_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_410_str_ = new ::std::string;
  }
  return sparse_410_str_;
}
inline ::std::string* Database_NoBench::release_sparse_410_str() {
  clear_has_sparse_410_str();
  if (sparse_410_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_410_str_;
    sparse_410_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_410_str(::std::string* sparse_410_str) {
  if (sparse_410_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_410_str_;
  }
  if (sparse_410_str) {
    set_has_sparse_410_str();
    sparse_410_str_ = sparse_410_str;
  } else {
    clear_has_sparse_410_str();
    sparse_410_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_411_str = 423;
inline bool Database_NoBench::has_sparse_411_str() const {
  return (_has_bits_[13] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_411_str() {
  _has_bits_[13] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_411_str() {
  _has_bits_[13] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_411_str() {
  if (sparse_411_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_411_str_->clear();
  }
  clear_has_sparse_411_str();
}
inline const ::std::string& Database_NoBench::sparse_411_str() const {
  return *sparse_411_str_;
}
inline void Database_NoBench::set_sparse_411_str(const ::std::string& value) {
  set_has_sparse_411_str();
  if (sparse_411_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_411_str_ = new ::std::string;
  }
  sparse_411_str_->assign(value);
}
inline void Database_NoBench::set_sparse_411_str(const char* value) {
  set_has_sparse_411_str();
  if (sparse_411_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_411_str_ = new ::std::string;
  }
  sparse_411_str_->assign(value);
}
inline void Database_NoBench::set_sparse_411_str(const char* value, size_t size) {
  set_has_sparse_411_str();
  if (sparse_411_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_411_str_ = new ::std::string;
  }
  sparse_411_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_411_str() {
  set_has_sparse_411_str();
  if (sparse_411_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_411_str_ = new ::std::string;
  }
  return sparse_411_str_;
}
inline ::std::string* Database_NoBench::release_sparse_411_str() {
  clear_has_sparse_411_str();
  if (sparse_411_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_411_str_;
    sparse_411_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_411_str(::std::string* sparse_411_str) {
  if (sparse_411_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_411_str_;
  }
  if (sparse_411_str) {
    set_has_sparse_411_str();
    sparse_411_str_ = sparse_411_str;
  } else {
    clear_has_sparse_411_str();
    sparse_411_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_412_str = 424;
inline bool Database_NoBench::has_sparse_412_str() const {
  return (_has_bits_[13] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_412_str() {
  _has_bits_[13] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_412_str() {
  _has_bits_[13] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_412_str() {
  if (sparse_412_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_412_str_->clear();
  }
  clear_has_sparse_412_str();
}
inline const ::std::string& Database_NoBench::sparse_412_str() const {
  return *sparse_412_str_;
}
inline void Database_NoBench::set_sparse_412_str(const ::std::string& value) {
  set_has_sparse_412_str();
  if (sparse_412_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_412_str_ = new ::std::string;
  }
  sparse_412_str_->assign(value);
}
inline void Database_NoBench::set_sparse_412_str(const char* value) {
  set_has_sparse_412_str();
  if (sparse_412_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_412_str_ = new ::std::string;
  }
  sparse_412_str_->assign(value);
}
inline void Database_NoBench::set_sparse_412_str(const char* value, size_t size) {
  set_has_sparse_412_str();
  if (sparse_412_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_412_str_ = new ::std::string;
  }
  sparse_412_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_412_str() {
  set_has_sparse_412_str();
  if (sparse_412_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_412_str_ = new ::std::string;
  }
  return sparse_412_str_;
}
inline ::std::string* Database_NoBench::release_sparse_412_str() {
  clear_has_sparse_412_str();
  if (sparse_412_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_412_str_;
    sparse_412_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_412_str(::std::string* sparse_412_str) {
  if (sparse_412_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_412_str_;
  }
  if (sparse_412_str) {
    set_has_sparse_412_str();
    sparse_412_str_ = sparse_412_str;
  } else {
    clear_has_sparse_412_str();
    sparse_412_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_413_str = 425;
inline bool Database_NoBench::has_sparse_413_str() const {
  return (_has_bits_[13] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_413_str() {
  _has_bits_[13] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_413_str() {
  _has_bits_[13] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_413_str() {
  if (sparse_413_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_413_str_->clear();
  }
  clear_has_sparse_413_str();
}
inline const ::std::string& Database_NoBench::sparse_413_str() const {
  return *sparse_413_str_;
}
inline void Database_NoBench::set_sparse_413_str(const ::std::string& value) {
  set_has_sparse_413_str();
  if (sparse_413_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_413_str_ = new ::std::string;
  }
  sparse_413_str_->assign(value);
}
inline void Database_NoBench::set_sparse_413_str(const char* value) {
  set_has_sparse_413_str();
  if (sparse_413_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_413_str_ = new ::std::string;
  }
  sparse_413_str_->assign(value);
}
inline void Database_NoBench::set_sparse_413_str(const char* value, size_t size) {
  set_has_sparse_413_str();
  if (sparse_413_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_413_str_ = new ::std::string;
  }
  sparse_413_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_413_str() {
  set_has_sparse_413_str();
  if (sparse_413_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_413_str_ = new ::std::string;
  }
  return sparse_413_str_;
}
inline ::std::string* Database_NoBench::release_sparse_413_str() {
  clear_has_sparse_413_str();
  if (sparse_413_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_413_str_;
    sparse_413_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_413_str(::std::string* sparse_413_str) {
  if (sparse_413_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_413_str_;
  }
  if (sparse_413_str) {
    set_has_sparse_413_str();
    sparse_413_str_ = sparse_413_str;
  } else {
    clear_has_sparse_413_str();
    sparse_413_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_414_str = 426;
inline bool Database_NoBench::has_sparse_414_str() const {
  return (_has_bits_[13] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_414_str() {
  _has_bits_[13] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_414_str() {
  _has_bits_[13] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_414_str() {
  if (sparse_414_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_414_str_->clear();
  }
  clear_has_sparse_414_str();
}
inline const ::std::string& Database_NoBench::sparse_414_str() const {
  return *sparse_414_str_;
}
inline void Database_NoBench::set_sparse_414_str(const ::std::string& value) {
  set_has_sparse_414_str();
  if (sparse_414_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_414_str_ = new ::std::string;
  }
  sparse_414_str_->assign(value);
}
inline void Database_NoBench::set_sparse_414_str(const char* value) {
  set_has_sparse_414_str();
  if (sparse_414_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_414_str_ = new ::std::string;
  }
  sparse_414_str_->assign(value);
}
inline void Database_NoBench::set_sparse_414_str(const char* value, size_t size) {
  set_has_sparse_414_str();
  if (sparse_414_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_414_str_ = new ::std::string;
  }
  sparse_414_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_414_str() {
  set_has_sparse_414_str();
  if (sparse_414_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_414_str_ = new ::std::string;
  }
  return sparse_414_str_;
}
inline ::std::string* Database_NoBench::release_sparse_414_str() {
  clear_has_sparse_414_str();
  if (sparse_414_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_414_str_;
    sparse_414_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_414_str(::std::string* sparse_414_str) {
  if (sparse_414_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_414_str_;
  }
  if (sparse_414_str) {
    set_has_sparse_414_str();
    sparse_414_str_ = sparse_414_str;
  } else {
    clear_has_sparse_414_str();
    sparse_414_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_415_str = 427;
inline bool Database_NoBench::has_sparse_415_str() const {
  return (_has_bits_[13] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_415_str() {
  _has_bits_[13] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_415_str() {
  _has_bits_[13] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_415_str() {
  if (sparse_415_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_415_str_->clear();
  }
  clear_has_sparse_415_str();
}
inline const ::std::string& Database_NoBench::sparse_415_str() const {
  return *sparse_415_str_;
}
inline void Database_NoBench::set_sparse_415_str(const ::std::string& value) {
  set_has_sparse_415_str();
  if (sparse_415_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_415_str_ = new ::std::string;
  }
  sparse_415_str_->assign(value);
}
inline void Database_NoBench::set_sparse_415_str(const char* value) {
  set_has_sparse_415_str();
  if (sparse_415_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_415_str_ = new ::std::string;
  }
  sparse_415_str_->assign(value);
}
inline void Database_NoBench::set_sparse_415_str(const char* value, size_t size) {
  set_has_sparse_415_str();
  if (sparse_415_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_415_str_ = new ::std::string;
  }
  sparse_415_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_415_str() {
  set_has_sparse_415_str();
  if (sparse_415_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_415_str_ = new ::std::string;
  }
  return sparse_415_str_;
}
inline ::std::string* Database_NoBench::release_sparse_415_str() {
  clear_has_sparse_415_str();
  if (sparse_415_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_415_str_;
    sparse_415_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_415_str(::std::string* sparse_415_str) {
  if (sparse_415_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_415_str_;
  }
  if (sparse_415_str) {
    set_has_sparse_415_str();
    sparse_415_str_ = sparse_415_str;
  } else {
    clear_has_sparse_415_str();
    sparse_415_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_416_str = 428;
inline bool Database_NoBench::has_sparse_416_str() const {
  return (_has_bits_[13] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_416_str() {
  _has_bits_[13] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_416_str() {
  _has_bits_[13] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_416_str() {
  if (sparse_416_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_416_str_->clear();
  }
  clear_has_sparse_416_str();
}
inline const ::std::string& Database_NoBench::sparse_416_str() const {
  return *sparse_416_str_;
}
inline void Database_NoBench::set_sparse_416_str(const ::std::string& value) {
  set_has_sparse_416_str();
  if (sparse_416_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_416_str_ = new ::std::string;
  }
  sparse_416_str_->assign(value);
}
inline void Database_NoBench::set_sparse_416_str(const char* value) {
  set_has_sparse_416_str();
  if (sparse_416_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_416_str_ = new ::std::string;
  }
  sparse_416_str_->assign(value);
}
inline void Database_NoBench::set_sparse_416_str(const char* value, size_t size) {
  set_has_sparse_416_str();
  if (sparse_416_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_416_str_ = new ::std::string;
  }
  sparse_416_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_416_str() {
  set_has_sparse_416_str();
  if (sparse_416_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_416_str_ = new ::std::string;
  }
  return sparse_416_str_;
}
inline ::std::string* Database_NoBench::release_sparse_416_str() {
  clear_has_sparse_416_str();
  if (sparse_416_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_416_str_;
    sparse_416_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_416_str(::std::string* sparse_416_str) {
  if (sparse_416_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_416_str_;
  }
  if (sparse_416_str) {
    set_has_sparse_416_str();
    sparse_416_str_ = sparse_416_str;
  } else {
    clear_has_sparse_416_str();
    sparse_416_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_417_str = 429;
inline bool Database_NoBench::has_sparse_417_str() const {
  return (_has_bits_[13] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_417_str() {
  _has_bits_[13] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_417_str() {
  _has_bits_[13] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_417_str() {
  if (sparse_417_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_417_str_->clear();
  }
  clear_has_sparse_417_str();
}
inline const ::std::string& Database_NoBench::sparse_417_str() const {
  return *sparse_417_str_;
}
inline void Database_NoBench::set_sparse_417_str(const ::std::string& value) {
  set_has_sparse_417_str();
  if (sparse_417_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_417_str_ = new ::std::string;
  }
  sparse_417_str_->assign(value);
}
inline void Database_NoBench::set_sparse_417_str(const char* value) {
  set_has_sparse_417_str();
  if (sparse_417_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_417_str_ = new ::std::string;
  }
  sparse_417_str_->assign(value);
}
inline void Database_NoBench::set_sparse_417_str(const char* value, size_t size) {
  set_has_sparse_417_str();
  if (sparse_417_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_417_str_ = new ::std::string;
  }
  sparse_417_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_417_str() {
  set_has_sparse_417_str();
  if (sparse_417_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_417_str_ = new ::std::string;
  }
  return sparse_417_str_;
}
inline ::std::string* Database_NoBench::release_sparse_417_str() {
  clear_has_sparse_417_str();
  if (sparse_417_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_417_str_;
    sparse_417_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_417_str(::std::string* sparse_417_str) {
  if (sparse_417_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_417_str_;
  }
  if (sparse_417_str) {
    set_has_sparse_417_str();
    sparse_417_str_ = sparse_417_str;
  } else {
    clear_has_sparse_417_str();
    sparse_417_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_418_str = 430;
inline bool Database_NoBench::has_sparse_418_str() const {
  return (_has_bits_[13] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_418_str() {
  _has_bits_[13] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_418_str() {
  _has_bits_[13] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_418_str() {
  if (sparse_418_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_418_str_->clear();
  }
  clear_has_sparse_418_str();
}
inline const ::std::string& Database_NoBench::sparse_418_str() const {
  return *sparse_418_str_;
}
inline void Database_NoBench::set_sparse_418_str(const ::std::string& value) {
  set_has_sparse_418_str();
  if (sparse_418_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_418_str_ = new ::std::string;
  }
  sparse_418_str_->assign(value);
}
inline void Database_NoBench::set_sparse_418_str(const char* value) {
  set_has_sparse_418_str();
  if (sparse_418_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_418_str_ = new ::std::string;
  }
  sparse_418_str_->assign(value);
}
inline void Database_NoBench::set_sparse_418_str(const char* value, size_t size) {
  set_has_sparse_418_str();
  if (sparse_418_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_418_str_ = new ::std::string;
  }
  sparse_418_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_418_str() {
  set_has_sparse_418_str();
  if (sparse_418_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_418_str_ = new ::std::string;
  }
  return sparse_418_str_;
}
inline ::std::string* Database_NoBench::release_sparse_418_str() {
  clear_has_sparse_418_str();
  if (sparse_418_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_418_str_;
    sparse_418_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_418_str(::std::string* sparse_418_str) {
  if (sparse_418_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_418_str_;
  }
  if (sparse_418_str) {
    set_has_sparse_418_str();
    sparse_418_str_ = sparse_418_str;
  } else {
    clear_has_sparse_418_str();
    sparse_418_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_419_str = 431;
inline bool Database_NoBench::has_sparse_419_str() const {
  return (_has_bits_[13] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_419_str() {
  _has_bits_[13] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_419_str() {
  _has_bits_[13] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_419_str() {
  if (sparse_419_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_419_str_->clear();
  }
  clear_has_sparse_419_str();
}
inline const ::std::string& Database_NoBench::sparse_419_str() const {
  return *sparse_419_str_;
}
inline void Database_NoBench::set_sparse_419_str(const ::std::string& value) {
  set_has_sparse_419_str();
  if (sparse_419_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_419_str_ = new ::std::string;
  }
  sparse_419_str_->assign(value);
}
inline void Database_NoBench::set_sparse_419_str(const char* value) {
  set_has_sparse_419_str();
  if (sparse_419_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_419_str_ = new ::std::string;
  }
  sparse_419_str_->assign(value);
}
inline void Database_NoBench::set_sparse_419_str(const char* value, size_t size) {
  set_has_sparse_419_str();
  if (sparse_419_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_419_str_ = new ::std::string;
  }
  sparse_419_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_419_str() {
  set_has_sparse_419_str();
  if (sparse_419_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_419_str_ = new ::std::string;
  }
  return sparse_419_str_;
}
inline ::std::string* Database_NoBench::release_sparse_419_str() {
  clear_has_sparse_419_str();
  if (sparse_419_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_419_str_;
    sparse_419_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_419_str(::std::string* sparse_419_str) {
  if (sparse_419_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_419_str_;
  }
  if (sparse_419_str) {
    set_has_sparse_419_str();
    sparse_419_str_ = sparse_419_str;
  } else {
    clear_has_sparse_419_str();
    sparse_419_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_420_str = 432;
inline bool Database_NoBench::has_sparse_420_str() const {
  return (_has_bits_[13] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_420_str() {
  _has_bits_[13] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_420_str() {
  _has_bits_[13] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_420_str() {
  if (sparse_420_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_420_str_->clear();
  }
  clear_has_sparse_420_str();
}
inline const ::std::string& Database_NoBench::sparse_420_str() const {
  return *sparse_420_str_;
}
inline void Database_NoBench::set_sparse_420_str(const ::std::string& value) {
  set_has_sparse_420_str();
  if (sparse_420_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_420_str_ = new ::std::string;
  }
  sparse_420_str_->assign(value);
}
inline void Database_NoBench::set_sparse_420_str(const char* value) {
  set_has_sparse_420_str();
  if (sparse_420_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_420_str_ = new ::std::string;
  }
  sparse_420_str_->assign(value);
}
inline void Database_NoBench::set_sparse_420_str(const char* value, size_t size) {
  set_has_sparse_420_str();
  if (sparse_420_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_420_str_ = new ::std::string;
  }
  sparse_420_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_420_str() {
  set_has_sparse_420_str();
  if (sparse_420_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_420_str_ = new ::std::string;
  }
  return sparse_420_str_;
}
inline ::std::string* Database_NoBench::release_sparse_420_str() {
  clear_has_sparse_420_str();
  if (sparse_420_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_420_str_;
    sparse_420_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_420_str(::std::string* sparse_420_str) {
  if (sparse_420_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_420_str_;
  }
  if (sparse_420_str) {
    set_has_sparse_420_str();
    sparse_420_str_ = sparse_420_str;
  } else {
    clear_has_sparse_420_str();
    sparse_420_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_421_str = 433;
inline bool Database_NoBench::has_sparse_421_str() const {
  return (_has_bits_[13] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_421_str() {
  _has_bits_[13] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_421_str() {
  _has_bits_[13] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_421_str() {
  if (sparse_421_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_421_str_->clear();
  }
  clear_has_sparse_421_str();
}
inline const ::std::string& Database_NoBench::sparse_421_str() const {
  return *sparse_421_str_;
}
inline void Database_NoBench::set_sparse_421_str(const ::std::string& value) {
  set_has_sparse_421_str();
  if (sparse_421_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_421_str_ = new ::std::string;
  }
  sparse_421_str_->assign(value);
}
inline void Database_NoBench::set_sparse_421_str(const char* value) {
  set_has_sparse_421_str();
  if (sparse_421_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_421_str_ = new ::std::string;
  }
  sparse_421_str_->assign(value);
}
inline void Database_NoBench::set_sparse_421_str(const char* value, size_t size) {
  set_has_sparse_421_str();
  if (sparse_421_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_421_str_ = new ::std::string;
  }
  sparse_421_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_421_str() {
  set_has_sparse_421_str();
  if (sparse_421_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_421_str_ = new ::std::string;
  }
  return sparse_421_str_;
}
inline ::std::string* Database_NoBench::release_sparse_421_str() {
  clear_has_sparse_421_str();
  if (sparse_421_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_421_str_;
    sparse_421_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_421_str(::std::string* sparse_421_str) {
  if (sparse_421_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_421_str_;
  }
  if (sparse_421_str) {
    set_has_sparse_421_str();
    sparse_421_str_ = sparse_421_str;
  } else {
    clear_has_sparse_421_str();
    sparse_421_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_422_str = 434;
inline bool Database_NoBench::has_sparse_422_str() const {
  return (_has_bits_[13] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_422_str() {
  _has_bits_[13] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_422_str() {
  _has_bits_[13] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_422_str() {
  if (sparse_422_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_422_str_->clear();
  }
  clear_has_sparse_422_str();
}
inline const ::std::string& Database_NoBench::sparse_422_str() const {
  return *sparse_422_str_;
}
inline void Database_NoBench::set_sparse_422_str(const ::std::string& value) {
  set_has_sparse_422_str();
  if (sparse_422_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_422_str_ = new ::std::string;
  }
  sparse_422_str_->assign(value);
}
inline void Database_NoBench::set_sparse_422_str(const char* value) {
  set_has_sparse_422_str();
  if (sparse_422_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_422_str_ = new ::std::string;
  }
  sparse_422_str_->assign(value);
}
inline void Database_NoBench::set_sparse_422_str(const char* value, size_t size) {
  set_has_sparse_422_str();
  if (sparse_422_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_422_str_ = new ::std::string;
  }
  sparse_422_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_422_str() {
  set_has_sparse_422_str();
  if (sparse_422_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_422_str_ = new ::std::string;
  }
  return sparse_422_str_;
}
inline ::std::string* Database_NoBench::release_sparse_422_str() {
  clear_has_sparse_422_str();
  if (sparse_422_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_422_str_;
    sparse_422_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_422_str(::std::string* sparse_422_str) {
  if (sparse_422_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_422_str_;
  }
  if (sparse_422_str) {
    set_has_sparse_422_str();
    sparse_422_str_ = sparse_422_str;
  } else {
    clear_has_sparse_422_str();
    sparse_422_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_423_str = 435;
inline bool Database_NoBench::has_sparse_423_str() const {
  return (_has_bits_[13] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_423_str() {
  _has_bits_[13] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_423_str() {
  _has_bits_[13] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_423_str() {
  if (sparse_423_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_423_str_->clear();
  }
  clear_has_sparse_423_str();
}
inline const ::std::string& Database_NoBench::sparse_423_str() const {
  return *sparse_423_str_;
}
inline void Database_NoBench::set_sparse_423_str(const ::std::string& value) {
  set_has_sparse_423_str();
  if (sparse_423_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_423_str_ = new ::std::string;
  }
  sparse_423_str_->assign(value);
}
inline void Database_NoBench::set_sparse_423_str(const char* value) {
  set_has_sparse_423_str();
  if (sparse_423_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_423_str_ = new ::std::string;
  }
  sparse_423_str_->assign(value);
}
inline void Database_NoBench::set_sparse_423_str(const char* value, size_t size) {
  set_has_sparse_423_str();
  if (sparse_423_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_423_str_ = new ::std::string;
  }
  sparse_423_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_423_str() {
  set_has_sparse_423_str();
  if (sparse_423_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_423_str_ = new ::std::string;
  }
  return sparse_423_str_;
}
inline ::std::string* Database_NoBench::release_sparse_423_str() {
  clear_has_sparse_423_str();
  if (sparse_423_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_423_str_;
    sparse_423_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_423_str(::std::string* sparse_423_str) {
  if (sparse_423_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_423_str_;
  }
  if (sparse_423_str) {
    set_has_sparse_423_str();
    sparse_423_str_ = sparse_423_str;
  } else {
    clear_has_sparse_423_str();
    sparse_423_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_424_str = 436;
inline bool Database_NoBench::has_sparse_424_str() const {
  return (_has_bits_[13] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_424_str() {
  _has_bits_[13] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_424_str() {
  _has_bits_[13] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_424_str() {
  if (sparse_424_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_424_str_->clear();
  }
  clear_has_sparse_424_str();
}
inline const ::std::string& Database_NoBench::sparse_424_str() const {
  return *sparse_424_str_;
}
inline void Database_NoBench::set_sparse_424_str(const ::std::string& value) {
  set_has_sparse_424_str();
  if (sparse_424_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_424_str_ = new ::std::string;
  }
  sparse_424_str_->assign(value);
}
inline void Database_NoBench::set_sparse_424_str(const char* value) {
  set_has_sparse_424_str();
  if (sparse_424_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_424_str_ = new ::std::string;
  }
  sparse_424_str_->assign(value);
}
inline void Database_NoBench::set_sparse_424_str(const char* value, size_t size) {
  set_has_sparse_424_str();
  if (sparse_424_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_424_str_ = new ::std::string;
  }
  sparse_424_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_424_str() {
  set_has_sparse_424_str();
  if (sparse_424_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_424_str_ = new ::std::string;
  }
  return sparse_424_str_;
}
inline ::std::string* Database_NoBench::release_sparse_424_str() {
  clear_has_sparse_424_str();
  if (sparse_424_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_424_str_;
    sparse_424_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_424_str(::std::string* sparse_424_str) {
  if (sparse_424_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_424_str_;
  }
  if (sparse_424_str) {
    set_has_sparse_424_str();
    sparse_424_str_ = sparse_424_str;
  } else {
    clear_has_sparse_424_str();
    sparse_424_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_425_str = 437;
inline bool Database_NoBench::has_sparse_425_str() const {
  return (_has_bits_[13] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_425_str() {
  _has_bits_[13] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_425_str() {
  _has_bits_[13] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_425_str() {
  if (sparse_425_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_425_str_->clear();
  }
  clear_has_sparse_425_str();
}
inline const ::std::string& Database_NoBench::sparse_425_str() const {
  return *sparse_425_str_;
}
inline void Database_NoBench::set_sparse_425_str(const ::std::string& value) {
  set_has_sparse_425_str();
  if (sparse_425_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_425_str_ = new ::std::string;
  }
  sparse_425_str_->assign(value);
}
inline void Database_NoBench::set_sparse_425_str(const char* value) {
  set_has_sparse_425_str();
  if (sparse_425_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_425_str_ = new ::std::string;
  }
  sparse_425_str_->assign(value);
}
inline void Database_NoBench::set_sparse_425_str(const char* value, size_t size) {
  set_has_sparse_425_str();
  if (sparse_425_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_425_str_ = new ::std::string;
  }
  sparse_425_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_425_str() {
  set_has_sparse_425_str();
  if (sparse_425_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_425_str_ = new ::std::string;
  }
  return sparse_425_str_;
}
inline ::std::string* Database_NoBench::release_sparse_425_str() {
  clear_has_sparse_425_str();
  if (sparse_425_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_425_str_;
    sparse_425_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_425_str(::std::string* sparse_425_str) {
  if (sparse_425_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_425_str_;
  }
  if (sparse_425_str) {
    set_has_sparse_425_str();
    sparse_425_str_ = sparse_425_str;
  } else {
    clear_has_sparse_425_str();
    sparse_425_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_426_str = 438;
inline bool Database_NoBench::has_sparse_426_str() const {
  return (_has_bits_[13] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_426_str() {
  _has_bits_[13] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_426_str() {
  _has_bits_[13] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_426_str() {
  if (sparse_426_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_426_str_->clear();
  }
  clear_has_sparse_426_str();
}
inline const ::std::string& Database_NoBench::sparse_426_str() const {
  return *sparse_426_str_;
}
inline void Database_NoBench::set_sparse_426_str(const ::std::string& value) {
  set_has_sparse_426_str();
  if (sparse_426_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_426_str_ = new ::std::string;
  }
  sparse_426_str_->assign(value);
}
inline void Database_NoBench::set_sparse_426_str(const char* value) {
  set_has_sparse_426_str();
  if (sparse_426_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_426_str_ = new ::std::string;
  }
  sparse_426_str_->assign(value);
}
inline void Database_NoBench::set_sparse_426_str(const char* value, size_t size) {
  set_has_sparse_426_str();
  if (sparse_426_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_426_str_ = new ::std::string;
  }
  sparse_426_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_426_str() {
  set_has_sparse_426_str();
  if (sparse_426_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_426_str_ = new ::std::string;
  }
  return sparse_426_str_;
}
inline ::std::string* Database_NoBench::release_sparse_426_str() {
  clear_has_sparse_426_str();
  if (sparse_426_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_426_str_;
    sparse_426_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_426_str(::std::string* sparse_426_str) {
  if (sparse_426_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_426_str_;
  }
  if (sparse_426_str) {
    set_has_sparse_426_str();
    sparse_426_str_ = sparse_426_str;
  } else {
    clear_has_sparse_426_str();
    sparse_426_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_427_str = 439;
inline bool Database_NoBench::has_sparse_427_str() const {
  return (_has_bits_[13] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_427_str() {
  _has_bits_[13] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_427_str() {
  _has_bits_[13] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_427_str() {
  if (sparse_427_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_427_str_->clear();
  }
  clear_has_sparse_427_str();
}
inline const ::std::string& Database_NoBench::sparse_427_str() const {
  return *sparse_427_str_;
}
inline void Database_NoBench::set_sparse_427_str(const ::std::string& value) {
  set_has_sparse_427_str();
  if (sparse_427_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_427_str_ = new ::std::string;
  }
  sparse_427_str_->assign(value);
}
inline void Database_NoBench::set_sparse_427_str(const char* value) {
  set_has_sparse_427_str();
  if (sparse_427_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_427_str_ = new ::std::string;
  }
  sparse_427_str_->assign(value);
}
inline void Database_NoBench::set_sparse_427_str(const char* value, size_t size) {
  set_has_sparse_427_str();
  if (sparse_427_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_427_str_ = new ::std::string;
  }
  sparse_427_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_427_str() {
  set_has_sparse_427_str();
  if (sparse_427_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_427_str_ = new ::std::string;
  }
  return sparse_427_str_;
}
inline ::std::string* Database_NoBench::release_sparse_427_str() {
  clear_has_sparse_427_str();
  if (sparse_427_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_427_str_;
    sparse_427_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_427_str(::std::string* sparse_427_str) {
  if (sparse_427_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_427_str_;
  }
  if (sparse_427_str) {
    set_has_sparse_427_str();
    sparse_427_str_ = sparse_427_str;
  } else {
    clear_has_sparse_427_str();
    sparse_427_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_428_str = 440;
inline bool Database_NoBench::has_sparse_428_str() const {
  return (_has_bits_[13] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_428_str() {
  _has_bits_[13] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_428_str() {
  _has_bits_[13] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_428_str() {
  if (sparse_428_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_428_str_->clear();
  }
  clear_has_sparse_428_str();
}
inline const ::std::string& Database_NoBench::sparse_428_str() const {
  return *sparse_428_str_;
}
inline void Database_NoBench::set_sparse_428_str(const ::std::string& value) {
  set_has_sparse_428_str();
  if (sparse_428_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_428_str_ = new ::std::string;
  }
  sparse_428_str_->assign(value);
}
inline void Database_NoBench::set_sparse_428_str(const char* value) {
  set_has_sparse_428_str();
  if (sparse_428_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_428_str_ = new ::std::string;
  }
  sparse_428_str_->assign(value);
}
inline void Database_NoBench::set_sparse_428_str(const char* value, size_t size) {
  set_has_sparse_428_str();
  if (sparse_428_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_428_str_ = new ::std::string;
  }
  sparse_428_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_428_str() {
  set_has_sparse_428_str();
  if (sparse_428_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_428_str_ = new ::std::string;
  }
  return sparse_428_str_;
}
inline ::std::string* Database_NoBench::release_sparse_428_str() {
  clear_has_sparse_428_str();
  if (sparse_428_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_428_str_;
    sparse_428_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_428_str(::std::string* sparse_428_str) {
  if (sparse_428_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_428_str_;
  }
  if (sparse_428_str) {
    set_has_sparse_428_str();
    sparse_428_str_ = sparse_428_str;
  } else {
    clear_has_sparse_428_str();
    sparse_428_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_429_str = 441;
inline bool Database_NoBench::has_sparse_429_str() const {
  return (_has_bits_[13] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_429_str() {
  _has_bits_[13] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_429_str() {
  _has_bits_[13] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_429_str() {
  if (sparse_429_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_429_str_->clear();
  }
  clear_has_sparse_429_str();
}
inline const ::std::string& Database_NoBench::sparse_429_str() const {
  return *sparse_429_str_;
}
inline void Database_NoBench::set_sparse_429_str(const ::std::string& value) {
  set_has_sparse_429_str();
  if (sparse_429_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_429_str_ = new ::std::string;
  }
  sparse_429_str_->assign(value);
}
inline void Database_NoBench::set_sparse_429_str(const char* value) {
  set_has_sparse_429_str();
  if (sparse_429_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_429_str_ = new ::std::string;
  }
  sparse_429_str_->assign(value);
}
inline void Database_NoBench::set_sparse_429_str(const char* value, size_t size) {
  set_has_sparse_429_str();
  if (sparse_429_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_429_str_ = new ::std::string;
  }
  sparse_429_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_429_str() {
  set_has_sparse_429_str();
  if (sparse_429_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_429_str_ = new ::std::string;
  }
  return sparse_429_str_;
}
inline ::std::string* Database_NoBench::release_sparse_429_str() {
  clear_has_sparse_429_str();
  if (sparse_429_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_429_str_;
    sparse_429_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_429_str(::std::string* sparse_429_str) {
  if (sparse_429_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_429_str_;
  }
  if (sparse_429_str) {
    set_has_sparse_429_str();
    sparse_429_str_ = sparse_429_str;
  } else {
    clear_has_sparse_429_str();
    sparse_429_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_430_str = 442;
inline bool Database_NoBench::has_sparse_430_str() const {
  return (_has_bits_[13] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_430_str() {
  _has_bits_[13] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_430_str() {
  _has_bits_[13] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_430_str() {
  if (sparse_430_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_430_str_->clear();
  }
  clear_has_sparse_430_str();
}
inline const ::std::string& Database_NoBench::sparse_430_str() const {
  return *sparse_430_str_;
}
inline void Database_NoBench::set_sparse_430_str(const ::std::string& value) {
  set_has_sparse_430_str();
  if (sparse_430_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_430_str_ = new ::std::string;
  }
  sparse_430_str_->assign(value);
}
inline void Database_NoBench::set_sparse_430_str(const char* value) {
  set_has_sparse_430_str();
  if (sparse_430_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_430_str_ = new ::std::string;
  }
  sparse_430_str_->assign(value);
}
inline void Database_NoBench::set_sparse_430_str(const char* value, size_t size) {
  set_has_sparse_430_str();
  if (sparse_430_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_430_str_ = new ::std::string;
  }
  sparse_430_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_430_str() {
  set_has_sparse_430_str();
  if (sparse_430_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_430_str_ = new ::std::string;
  }
  return sparse_430_str_;
}
inline ::std::string* Database_NoBench::release_sparse_430_str() {
  clear_has_sparse_430_str();
  if (sparse_430_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_430_str_;
    sparse_430_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_430_str(::std::string* sparse_430_str) {
  if (sparse_430_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_430_str_;
  }
  if (sparse_430_str) {
    set_has_sparse_430_str();
    sparse_430_str_ = sparse_430_str;
  } else {
    clear_has_sparse_430_str();
    sparse_430_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_431_str = 443;
inline bool Database_NoBench::has_sparse_431_str() const {
  return (_has_bits_[13] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_431_str() {
  _has_bits_[13] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_431_str() {
  _has_bits_[13] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_431_str() {
  if (sparse_431_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_431_str_->clear();
  }
  clear_has_sparse_431_str();
}
inline const ::std::string& Database_NoBench::sparse_431_str() const {
  return *sparse_431_str_;
}
inline void Database_NoBench::set_sparse_431_str(const ::std::string& value) {
  set_has_sparse_431_str();
  if (sparse_431_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_431_str_ = new ::std::string;
  }
  sparse_431_str_->assign(value);
}
inline void Database_NoBench::set_sparse_431_str(const char* value) {
  set_has_sparse_431_str();
  if (sparse_431_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_431_str_ = new ::std::string;
  }
  sparse_431_str_->assign(value);
}
inline void Database_NoBench::set_sparse_431_str(const char* value, size_t size) {
  set_has_sparse_431_str();
  if (sparse_431_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_431_str_ = new ::std::string;
  }
  sparse_431_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_431_str() {
  set_has_sparse_431_str();
  if (sparse_431_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_431_str_ = new ::std::string;
  }
  return sparse_431_str_;
}
inline ::std::string* Database_NoBench::release_sparse_431_str() {
  clear_has_sparse_431_str();
  if (sparse_431_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_431_str_;
    sparse_431_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_431_str(::std::string* sparse_431_str) {
  if (sparse_431_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_431_str_;
  }
  if (sparse_431_str) {
    set_has_sparse_431_str();
    sparse_431_str_ = sparse_431_str;
  } else {
    clear_has_sparse_431_str();
    sparse_431_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_432_str = 444;
inline bool Database_NoBench::has_sparse_432_str() const {
  return (_has_bits_[13] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_432_str() {
  _has_bits_[13] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_432_str() {
  _has_bits_[13] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_432_str() {
  if (sparse_432_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_432_str_->clear();
  }
  clear_has_sparse_432_str();
}
inline const ::std::string& Database_NoBench::sparse_432_str() const {
  return *sparse_432_str_;
}
inline void Database_NoBench::set_sparse_432_str(const ::std::string& value) {
  set_has_sparse_432_str();
  if (sparse_432_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_432_str_ = new ::std::string;
  }
  sparse_432_str_->assign(value);
}
inline void Database_NoBench::set_sparse_432_str(const char* value) {
  set_has_sparse_432_str();
  if (sparse_432_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_432_str_ = new ::std::string;
  }
  sparse_432_str_->assign(value);
}
inline void Database_NoBench::set_sparse_432_str(const char* value, size_t size) {
  set_has_sparse_432_str();
  if (sparse_432_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_432_str_ = new ::std::string;
  }
  sparse_432_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_432_str() {
  set_has_sparse_432_str();
  if (sparse_432_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_432_str_ = new ::std::string;
  }
  return sparse_432_str_;
}
inline ::std::string* Database_NoBench::release_sparse_432_str() {
  clear_has_sparse_432_str();
  if (sparse_432_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_432_str_;
    sparse_432_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_432_str(::std::string* sparse_432_str) {
  if (sparse_432_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_432_str_;
  }
  if (sparse_432_str) {
    set_has_sparse_432_str();
    sparse_432_str_ = sparse_432_str;
  } else {
    clear_has_sparse_432_str();
    sparse_432_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_433_str = 445;
inline bool Database_NoBench::has_sparse_433_str() const {
  return (_has_bits_[13] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_433_str() {
  _has_bits_[13] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_433_str() {
  _has_bits_[13] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_433_str() {
  if (sparse_433_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_433_str_->clear();
  }
  clear_has_sparse_433_str();
}
inline const ::std::string& Database_NoBench::sparse_433_str() const {
  return *sparse_433_str_;
}
inline void Database_NoBench::set_sparse_433_str(const ::std::string& value) {
  set_has_sparse_433_str();
  if (sparse_433_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_433_str_ = new ::std::string;
  }
  sparse_433_str_->assign(value);
}
inline void Database_NoBench::set_sparse_433_str(const char* value) {
  set_has_sparse_433_str();
  if (sparse_433_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_433_str_ = new ::std::string;
  }
  sparse_433_str_->assign(value);
}
inline void Database_NoBench::set_sparse_433_str(const char* value, size_t size) {
  set_has_sparse_433_str();
  if (sparse_433_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_433_str_ = new ::std::string;
  }
  sparse_433_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_433_str() {
  set_has_sparse_433_str();
  if (sparse_433_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_433_str_ = new ::std::string;
  }
  return sparse_433_str_;
}
inline ::std::string* Database_NoBench::release_sparse_433_str() {
  clear_has_sparse_433_str();
  if (sparse_433_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_433_str_;
    sparse_433_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_433_str(::std::string* sparse_433_str) {
  if (sparse_433_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_433_str_;
  }
  if (sparse_433_str) {
    set_has_sparse_433_str();
    sparse_433_str_ = sparse_433_str;
  } else {
    clear_has_sparse_433_str();
    sparse_433_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_434_str = 446;
inline bool Database_NoBench::has_sparse_434_str() const {
  return (_has_bits_[13] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_434_str() {
  _has_bits_[13] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_434_str() {
  _has_bits_[13] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_434_str() {
  if (sparse_434_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_434_str_->clear();
  }
  clear_has_sparse_434_str();
}
inline const ::std::string& Database_NoBench::sparse_434_str() const {
  return *sparse_434_str_;
}
inline void Database_NoBench::set_sparse_434_str(const ::std::string& value) {
  set_has_sparse_434_str();
  if (sparse_434_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_434_str_ = new ::std::string;
  }
  sparse_434_str_->assign(value);
}
inline void Database_NoBench::set_sparse_434_str(const char* value) {
  set_has_sparse_434_str();
  if (sparse_434_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_434_str_ = new ::std::string;
  }
  sparse_434_str_->assign(value);
}
inline void Database_NoBench::set_sparse_434_str(const char* value, size_t size) {
  set_has_sparse_434_str();
  if (sparse_434_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_434_str_ = new ::std::string;
  }
  sparse_434_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_434_str() {
  set_has_sparse_434_str();
  if (sparse_434_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_434_str_ = new ::std::string;
  }
  return sparse_434_str_;
}
inline ::std::string* Database_NoBench::release_sparse_434_str() {
  clear_has_sparse_434_str();
  if (sparse_434_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_434_str_;
    sparse_434_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_434_str(::std::string* sparse_434_str) {
  if (sparse_434_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_434_str_;
  }
  if (sparse_434_str) {
    set_has_sparse_434_str();
    sparse_434_str_ = sparse_434_str;
  } else {
    clear_has_sparse_434_str();
    sparse_434_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_435_str = 447;
inline bool Database_NoBench::has_sparse_435_str() const {
  return (_has_bits_[14] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_435_str() {
  _has_bits_[14] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_435_str() {
  _has_bits_[14] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_435_str() {
  if (sparse_435_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_435_str_->clear();
  }
  clear_has_sparse_435_str();
}
inline const ::std::string& Database_NoBench::sparse_435_str() const {
  return *sparse_435_str_;
}
inline void Database_NoBench::set_sparse_435_str(const ::std::string& value) {
  set_has_sparse_435_str();
  if (sparse_435_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_435_str_ = new ::std::string;
  }
  sparse_435_str_->assign(value);
}
inline void Database_NoBench::set_sparse_435_str(const char* value) {
  set_has_sparse_435_str();
  if (sparse_435_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_435_str_ = new ::std::string;
  }
  sparse_435_str_->assign(value);
}
inline void Database_NoBench::set_sparse_435_str(const char* value, size_t size) {
  set_has_sparse_435_str();
  if (sparse_435_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_435_str_ = new ::std::string;
  }
  sparse_435_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_435_str() {
  set_has_sparse_435_str();
  if (sparse_435_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_435_str_ = new ::std::string;
  }
  return sparse_435_str_;
}
inline ::std::string* Database_NoBench::release_sparse_435_str() {
  clear_has_sparse_435_str();
  if (sparse_435_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_435_str_;
    sparse_435_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_435_str(::std::string* sparse_435_str) {
  if (sparse_435_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_435_str_;
  }
  if (sparse_435_str) {
    set_has_sparse_435_str();
    sparse_435_str_ = sparse_435_str;
  } else {
    clear_has_sparse_435_str();
    sparse_435_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_436_str = 448;
inline bool Database_NoBench::has_sparse_436_str() const {
  return (_has_bits_[14] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_436_str() {
  _has_bits_[14] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_436_str() {
  _has_bits_[14] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_436_str() {
  if (sparse_436_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_436_str_->clear();
  }
  clear_has_sparse_436_str();
}
inline const ::std::string& Database_NoBench::sparse_436_str() const {
  return *sparse_436_str_;
}
inline void Database_NoBench::set_sparse_436_str(const ::std::string& value) {
  set_has_sparse_436_str();
  if (sparse_436_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_436_str_ = new ::std::string;
  }
  sparse_436_str_->assign(value);
}
inline void Database_NoBench::set_sparse_436_str(const char* value) {
  set_has_sparse_436_str();
  if (sparse_436_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_436_str_ = new ::std::string;
  }
  sparse_436_str_->assign(value);
}
inline void Database_NoBench::set_sparse_436_str(const char* value, size_t size) {
  set_has_sparse_436_str();
  if (sparse_436_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_436_str_ = new ::std::string;
  }
  sparse_436_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_436_str() {
  set_has_sparse_436_str();
  if (sparse_436_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_436_str_ = new ::std::string;
  }
  return sparse_436_str_;
}
inline ::std::string* Database_NoBench::release_sparse_436_str() {
  clear_has_sparse_436_str();
  if (sparse_436_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_436_str_;
    sparse_436_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_436_str(::std::string* sparse_436_str) {
  if (sparse_436_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_436_str_;
  }
  if (sparse_436_str) {
    set_has_sparse_436_str();
    sparse_436_str_ = sparse_436_str;
  } else {
    clear_has_sparse_436_str();
    sparse_436_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_437_str = 449;
inline bool Database_NoBench::has_sparse_437_str() const {
  return (_has_bits_[14] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_437_str() {
  _has_bits_[14] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_437_str() {
  _has_bits_[14] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_437_str() {
  if (sparse_437_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_437_str_->clear();
  }
  clear_has_sparse_437_str();
}
inline const ::std::string& Database_NoBench::sparse_437_str() const {
  return *sparse_437_str_;
}
inline void Database_NoBench::set_sparse_437_str(const ::std::string& value) {
  set_has_sparse_437_str();
  if (sparse_437_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_437_str_ = new ::std::string;
  }
  sparse_437_str_->assign(value);
}
inline void Database_NoBench::set_sparse_437_str(const char* value) {
  set_has_sparse_437_str();
  if (sparse_437_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_437_str_ = new ::std::string;
  }
  sparse_437_str_->assign(value);
}
inline void Database_NoBench::set_sparse_437_str(const char* value, size_t size) {
  set_has_sparse_437_str();
  if (sparse_437_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_437_str_ = new ::std::string;
  }
  sparse_437_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_437_str() {
  set_has_sparse_437_str();
  if (sparse_437_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_437_str_ = new ::std::string;
  }
  return sparse_437_str_;
}
inline ::std::string* Database_NoBench::release_sparse_437_str() {
  clear_has_sparse_437_str();
  if (sparse_437_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_437_str_;
    sparse_437_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_437_str(::std::string* sparse_437_str) {
  if (sparse_437_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_437_str_;
  }
  if (sparse_437_str) {
    set_has_sparse_437_str();
    sparse_437_str_ = sparse_437_str;
  } else {
    clear_has_sparse_437_str();
    sparse_437_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_438_str = 450;
inline bool Database_NoBench::has_sparse_438_str() const {
  return (_has_bits_[14] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_438_str() {
  _has_bits_[14] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_438_str() {
  _has_bits_[14] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_438_str() {
  if (sparse_438_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_438_str_->clear();
  }
  clear_has_sparse_438_str();
}
inline const ::std::string& Database_NoBench::sparse_438_str() const {
  return *sparse_438_str_;
}
inline void Database_NoBench::set_sparse_438_str(const ::std::string& value) {
  set_has_sparse_438_str();
  if (sparse_438_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_438_str_ = new ::std::string;
  }
  sparse_438_str_->assign(value);
}
inline void Database_NoBench::set_sparse_438_str(const char* value) {
  set_has_sparse_438_str();
  if (sparse_438_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_438_str_ = new ::std::string;
  }
  sparse_438_str_->assign(value);
}
inline void Database_NoBench::set_sparse_438_str(const char* value, size_t size) {
  set_has_sparse_438_str();
  if (sparse_438_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_438_str_ = new ::std::string;
  }
  sparse_438_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_438_str() {
  set_has_sparse_438_str();
  if (sparse_438_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_438_str_ = new ::std::string;
  }
  return sparse_438_str_;
}
inline ::std::string* Database_NoBench::release_sparse_438_str() {
  clear_has_sparse_438_str();
  if (sparse_438_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_438_str_;
    sparse_438_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_438_str(::std::string* sparse_438_str) {
  if (sparse_438_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_438_str_;
  }
  if (sparse_438_str) {
    set_has_sparse_438_str();
    sparse_438_str_ = sparse_438_str;
  } else {
    clear_has_sparse_438_str();
    sparse_438_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_439_str = 451;
inline bool Database_NoBench::has_sparse_439_str() const {
  return (_has_bits_[14] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_439_str() {
  _has_bits_[14] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_439_str() {
  _has_bits_[14] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_439_str() {
  if (sparse_439_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_439_str_->clear();
  }
  clear_has_sparse_439_str();
}
inline const ::std::string& Database_NoBench::sparse_439_str() const {
  return *sparse_439_str_;
}
inline void Database_NoBench::set_sparse_439_str(const ::std::string& value) {
  set_has_sparse_439_str();
  if (sparse_439_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_439_str_ = new ::std::string;
  }
  sparse_439_str_->assign(value);
}
inline void Database_NoBench::set_sparse_439_str(const char* value) {
  set_has_sparse_439_str();
  if (sparse_439_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_439_str_ = new ::std::string;
  }
  sparse_439_str_->assign(value);
}
inline void Database_NoBench::set_sparse_439_str(const char* value, size_t size) {
  set_has_sparse_439_str();
  if (sparse_439_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_439_str_ = new ::std::string;
  }
  sparse_439_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_439_str() {
  set_has_sparse_439_str();
  if (sparse_439_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_439_str_ = new ::std::string;
  }
  return sparse_439_str_;
}
inline ::std::string* Database_NoBench::release_sparse_439_str() {
  clear_has_sparse_439_str();
  if (sparse_439_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_439_str_;
    sparse_439_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_439_str(::std::string* sparse_439_str) {
  if (sparse_439_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_439_str_;
  }
  if (sparse_439_str) {
    set_has_sparse_439_str();
    sparse_439_str_ = sparse_439_str;
  } else {
    clear_has_sparse_439_str();
    sparse_439_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_440_str = 452;
inline bool Database_NoBench::has_sparse_440_str() const {
  return (_has_bits_[14] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_440_str() {
  _has_bits_[14] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_440_str() {
  _has_bits_[14] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_440_str() {
  if (sparse_440_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_440_str_->clear();
  }
  clear_has_sparse_440_str();
}
inline const ::std::string& Database_NoBench::sparse_440_str() const {
  return *sparse_440_str_;
}
inline void Database_NoBench::set_sparse_440_str(const ::std::string& value) {
  set_has_sparse_440_str();
  if (sparse_440_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_440_str_ = new ::std::string;
  }
  sparse_440_str_->assign(value);
}
inline void Database_NoBench::set_sparse_440_str(const char* value) {
  set_has_sparse_440_str();
  if (sparse_440_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_440_str_ = new ::std::string;
  }
  sparse_440_str_->assign(value);
}
inline void Database_NoBench::set_sparse_440_str(const char* value, size_t size) {
  set_has_sparse_440_str();
  if (sparse_440_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_440_str_ = new ::std::string;
  }
  sparse_440_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_440_str() {
  set_has_sparse_440_str();
  if (sparse_440_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_440_str_ = new ::std::string;
  }
  return sparse_440_str_;
}
inline ::std::string* Database_NoBench::release_sparse_440_str() {
  clear_has_sparse_440_str();
  if (sparse_440_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_440_str_;
    sparse_440_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_440_str(::std::string* sparse_440_str) {
  if (sparse_440_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_440_str_;
  }
  if (sparse_440_str) {
    set_has_sparse_440_str();
    sparse_440_str_ = sparse_440_str;
  } else {
    clear_has_sparse_440_str();
    sparse_440_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_441_str = 453;
inline bool Database_NoBench::has_sparse_441_str() const {
  return (_has_bits_[14] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_441_str() {
  _has_bits_[14] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_441_str() {
  _has_bits_[14] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_441_str() {
  if (sparse_441_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_441_str_->clear();
  }
  clear_has_sparse_441_str();
}
inline const ::std::string& Database_NoBench::sparse_441_str() const {
  return *sparse_441_str_;
}
inline void Database_NoBench::set_sparse_441_str(const ::std::string& value) {
  set_has_sparse_441_str();
  if (sparse_441_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_441_str_ = new ::std::string;
  }
  sparse_441_str_->assign(value);
}
inline void Database_NoBench::set_sparse_441_str(const char* value) {
  set_has_sparse_441_str();
  if (sparse_441_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_441_str_ = new ::std::string;
  }
  sparse_441_str_->assign(value);
}
inline void Database_NoBench::set_sparse_441_str(const char* value, size_t size) {
  set_has_sparse_441_str();
  if (sparse_441_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_441_str_ = new ::std::string;
  }
  sparse_441_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_441_str() {
  set_has_sparse_441_str();
  if (sparse_441_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_441_str_ = new ::std::string;
  }
  return sparse_441_str_;
}
inline ::std::string* Database_NoBench::release_sparse_441_str() {
  clear_has_sparse_441_str();
  if (sparse_441_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_441_str_;
    sparse_441_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_441_str(::std::string* sparse_441_str) {
  if (sparse_441_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_441_str_;
  }
  if (sparse_441_str) {
    set_has_sparse_441_str();
    sparse_441_str_ = sparse_441_str;
  } else {
    clear_has_sparse_441_str();
    sparse_441_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_442_str = 454;
inline bool Database_NoBench::has_sparse_442_str() const {
  return (_has_bits_[14] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_442_str() {
  _has_bits_[14] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_442_str() {
  _has_bits_[14] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_442_str() {
  if (sparse_442_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_442_str_->clear();
  }
  clear_has_sparse_442_str();
}
inline const ::std::string& Database_NoBench::sparse_442_str() const {
  return *sparse_442_str_;
}
inline void Database_NoBench::set_sparse_442_str(const ::std::string& value) {
  set_has_sparse_442_str();
  if (sparse_442_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_442_str_ = new ::std::string;
  }
  sparse_442_str_->assign(value);
}
inline void Database_NoBench::set_sparse_442_str(const char* value) {
  set_has_sparse_442_str();
  if (sparse_442_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_442_str_ = new ::std::string;
  }
  sparse_442_str_->assign(value);
}
inline void Database_NoBench::set_sparse_442_str(const char* value, size_t size) {
  set_has_sparse_442_str();
  if (sparse_442_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_442_str_ = new ::std::string;
  }
  sparse_442_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_442_str() {
  set_has_sparse_442_str();
  if (sparse_442_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_442_str_ = new ::std::string;
  }
  return sparse_442_str_;
}
inline ::std::string* Database_NoBench::release_sparse_442_str() {
  clear_has_sparse_442_str();
  if (sparse_442_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_442_str_;
    sparse_442_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_442_str(::std::string* sparse_442_str) {
  if (sparse_442_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_442_str_;
  }
  if (sparse_442_str) {
    set_has_sparse_442_str();
    sparse_442_str_ = sparse_442_str;
  } else {
    clear_has_sparse_442_str();
    sparse_442_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_443_str = 455;
inline bool Database_NoBench::has_sparse_443_str() const {
  return (_has_bits_[14] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_443_str() {
  _has_bits_[14] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_443_str() {
  _has_bits_[14] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_443_str() {
  if (sparse_443_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_443_str_->clear();
  }
  clear_has_sparse_443_str();
}
inline const ::std::string& Database_NoBench::sparse_443_str() const {
  return *sparse_443_str_;
}
inline void Database_NoBench::set_sparse_443_str(const ::std::string& value) {
  set_has_sparse_443_str();
  if (sparse_443_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_443_str_ = new ::std::string;
  }
  sparse_443_str_->assign(value);
}
inline void Database_NoBench::set_sparse_443_str(const char* value) {
  set_has_sparse_443_str();
  if (sparse_443_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_443_str_ = new ::std::string;
  }
  sparse_443_str_->assign(value);
}
inline void Database_NoBench::set_sparse_443_str(const char* value, size_t size) {
  set_has_sparse_443_str();
  if (sparse_443_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_443_str_ = new ::std::string;
  }
  sparse_443_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_443_str() {
  set_has_sparse_443_str();
  if (sparse_443_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_443_str_ = new ::std::string;
  }
  return sparse_443_str_;
}
inline ::std::string* Database_NoBench::release_sparse_443_str() {
  clear_has_sparse_443_str();
  if (sparse_443_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_443_str_;
    sparse_443_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_443_str(::std::string* sparse_443_str) {
  if (sparse_443_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_443_str_;
  }
  if (sparse_443_str) {
    set_has_sparse_443_str();
    sparse_443_str_ = sparse_443_str;
  } else {
    clear_has_sparse_443_str();
    sparse_443_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_444_str = 456;
inline bool Database_NoBench::has_sparse_444_str() const {
  return (_has_bits_[14] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_444_str() {
  _has_bits_[14] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_444_str() {
  _has_bits_[14] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_444_str() {
  if (sparse_444_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_444_str_->clear();
  }
  clear_has_sparse_444_str();
}
inline const ::std::string& Database_NoBench::sparse_444_str() const {
  return *sparse_444_str_;
}
inline void Database_NoBench::set_sparse_444_str(const ::std::string& value) {
  set_has_sparse_444_str();
  if (sparse_444_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_444_str_ = new ::std::string;
  }
  sparse_444_str_->assign(value);
}
inline void Database_NoBench::set_sparse_444_str(const char* value) {
  set_has_sparse_444_str();
  if (sparse_444_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_444_str_ = new ::std::string;
  }
  sparse_444_str_->assign(value);
}
inline void Database_NoBench::set_sparse_444_str(const char* value, size_t size) {
  set_has_sparse_444_str();
  if (sparse_444_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_444_str_ = new ::std::string;
  }
  sparse_444_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_444_str() {
  set_has_sparse_444_str();
  if (sparse_444_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_444_str_ = new ::std::string;
  }
  return sparse_444_str_;
}
inline ::std::string* Database_NoBench::release_sparse_444_str() {
  clear_has_sparse_444_str();
  if (sparse_444_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_444_str_;
    sparse_444_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_444_str(::std::string* sparse_444_str) {
  if (sparse_444_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_444_str_;
  }
  if (sparse_444_str) {
    set_has_sparse_444_str();
    sparse_444_str_ = sparse_444_str;
  } else {
    clear_has_sparse_444_str();
    sparse_444_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_445_str = 457;
inline bool Database_NoBench::has_sparse_445_str() const {
  return (_has_bits_[14] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_445_str() {
  _has_bits_[14] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_445_str() {
  _has_bits_[14] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_445_str() {
  if (sparse_445_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_445_str_->clear();
  }
  clear_has_sparse_445_str();
}
inline const ::std::string& Database_NoBench::sparse_445_str() const {
  return *sparse_445_str_;
}
inline void Database_NoBench::set_sparse_445_str(const ::std::string& value) {
  set_has_sparse_445_str();
  if (sparse_445_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_445_str_ = new ::std::string;
  }
  sparse_445_str_->assign(value);
}
inline void Database_NoBench::set_sparse_445_str(const char* value) {
  set_has_sparse_445_str();
  if (sparse_445_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_445_str_ = new ::std::string;
  }
  sparse_445_str_->assign(value);
}
inline void Database_NoBench::set_sparse_445_str(const char* value, size_t size) {
  set_has_sparse_445_str();
  if (sparse_445_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_445_str_ = new ::std::string;
  }
  sparse_445_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_445_str() {
  set_has_sparse_445_str();
  if (sparse_445_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_445_str_ = new ::std::string;
  }
  return sparse_445_str_;
}
inline ::std::string* Database_NoBench::release_sparse_445_str() {
  clear_has_sparse_445_str();
  if (sparse_445_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_445_str_;
    sparse_445_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_445_str(::std::string* sparse_445_str) {
  if (sparse_445_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_445_str_;
  }
  if (sparse_445_str) {
    set_has_sparse_445_str();
    sparse_445_str_ = sparse_445_str;
  } else {
    clear_has_sparse_445_str();
    sparse_445_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_446_str = 458;
inline bool Database_NoBench::has_sparse_446_str() const {
  return (_has_bits_[14] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_446_str() {
  _has_bits_[14] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_446_str() {
  _has_bits_[14] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_446_str() {
  if (sparse_446_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_446_str_->clear();
  }
  clear_has_sparse_446_str();
}
inline const ::std::string& Database_NoBench::sparse_446_str() const {
  return *sparse_446_str_;
}
inline void Database_NoBench::set_sparse_446_str(const ::std::string& value) {
  set_has_sparse_446_str();
  if (sparse_446_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_446_str_ = new ::std::string;
  }
  sparse_446_str_->assign(value);
}
inline void Database_NoBench::set_sparse_446_str(const char* value) {
  set_has_sparse_446_str();
  if (sparse_446_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_446_str_ = new ::std::string;
  }
  sparse_446_str_->assign(value);
}
inline void Database_NoBench::set_sparse_446_str(const char* value, size_t size) {
  set_has_sparse_446_str();
  if (sparse_446_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_446_str_ = new ::std::string;
  }
  sparse_446_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_446_str() {
  set_has_sparse_446_str();
  if (sparse_446_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_446_str_ = new ::std::string;
  }
  return sparse_446_str_;
}
inline ::std::string* Database_NoBench::release_sparse_446_str() {
  clear_has_sparse_446_str();
  if (sparse_446_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_446_str_;
    sparse_446_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_446_str(::std::string* sparse_446_str) {
  if (sparse_446_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_446_str_;
  }
  if (sparse_446_str) {
    set_has_sparse_446_str();
    sparse_446_str_ = sparse_446_str;
  } else {
    clear_has_sparse_446_str();
    sparse_446_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_447_str = 459;
inline bool Database_NoBench::has_sparse_447_str() const {
  return (_has_bits_[14] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_447_str() {
  _has_bits_[14] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_447_str() {
  _has_bits_[14] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_447_str() {
  if (sparse_447_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_447_str_->clear();
  }
  clear_has_sparse_447_str();
}
inline const ::std::string& Database_NoBench::sparse_447_str() const {
  return *sparse_447_str_;
}
inline void Database_NoBench::set_sparse_447_str(const ::std::string& value) {
  set_has_sparse_447_str();
  if (sparse_447_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_447_str_ = new ::std::string;
  }
  sparse_447_str_->assign(value);
}
inline void Database_NoBench::set_sparse_447_str(const char* value) {
  set_has_sparse_447_str();
  if (sparse_447_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_447_str_ = new ::std::string;
  }
  sparse_447_str_->assign(value);
}
inline void Database_NoBench::set_sparse_447_str(const char* value, size_t size) {
  set_has_sparse_447_str();
  if (sparse_447_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_447_str_ = new ::std::string;
  }
  sparse_447_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_447_str() {
  set_has_sparse_447_str();
  if (sparse_447_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_447_str_ = new ::std::string;
  }
  return sparse_447_str_;
}
inline ::std::string* Database_NoBench::release_sparse_447_str() {
  clear_has_sparse_447_str();
  if (sparse_447_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_447_str_;
    sparse_447_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_447_str(::std::string* sparse_447_str) {
  if (sparse_447_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_447_str_;
  }
  if (sparse_447_str) {
    set_has_sparse_447_str();
    sparse_447_str_ = sparse_447_str;
  } else {
    clear_has_sparse_447_str();
    sparse_447_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_448_str = 460;
inline bool Database_NoBench::has_sparse_448_str() const {
  return (_has_bits_[14] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_448_str() {
  _has_bits_[14] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_448_str() {
  _has_bits_[14] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_448_str() {
  if (sparse_448_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_448_str_->clear();
  }
  clear_has_sparse_448_str();
}
inline const ::std::string& Database_NoBench::sparse_448_str() const {
  return *sparse_448_str_;
}
inline void Database_NoBench::set_sparse_448_str(const ::std::string& value) {
  set_has_sparse_448_str();
  if (sparse_448_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_448_str_ = new ::std::string;
  }
  sparse_448_str_->assign(value);
}
inline void Database_NoBench::set_sparse_448_str(const char* value) {
  set_has_sparse_448_str();
  if (sparse_448_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_448_str_ = new ::std::string;
  }
  sparse_448_str_->assign(value);
}
inline void Database_NoBench::set_sparse_448_str(const char* value, size_t size) {
  set_has_sparse_448_str();
  if (sparse_448_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_448_str_ = new ::std::string;
  }
  sparse_448_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_448_str() {
  set_has_sparse_448_str();
  if (sparse_448_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_448_str_ = new ::std::string;
  }
  return sparse_448_str_;
}
inline ::std::string* Database_NoBench::release_sparse_448_str() {
  clear_has_sparse_448_str();
  if (sparse_448_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_448_str_;
    sparse_448_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_448_str(::std::string* sparse_448_str) {
  if (sparse_448_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_448_str_;
  }
  if (sparse_448_str) {
    set_has_sparse_448_str();
    sparse_448_str_ = sparse_448_str;
  } else {
    clear_has_sparse_448_str();
    sparse_448_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_449_str = 461;
inline bool Database_NoBench::has_sparse_449_str() const {
  return (_has_bits_[14] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_449_str() {
  _has_bits_[14] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_449_str() {
  _has_bits_[14] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_449_str() {
  if (sparse_449_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_449_str_->clear();
  }
  clear_has_sparse_449_str();
}
inline const ::std::string& Database_NoBench::sparse_449_str() const {
  return *sparse_449_str_;
}
inline void Database_NoBench::set_sparse_449_str(const ::std::string& value) {
  set_has_sparse_449_str();
  if (sparse_449_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_449_str_ = new ::std::string;
  }
  sparse_449_str_->assign(value);
}
inline void Database_NoBench::set_sparse_449_str(const char* value) {
  set_has_sparse_449_str();
  if (sparse_449_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_449_str_ = new ::std::string;
  }
  sparse_449_str_->assign(value);
}
inline void Database_NoBench::set_sparse_449_str(const char* value, size_t size) {
  set_has_sparse_449_str();
  if (sparse_449_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_449_str_ = new ::std::string;
  }
  sparse_449_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_449_str() {
  set_has_sparse_449_str();
  if (sparse_449_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_449_str_ = new ::std::string;
  }
  return sparse_449_str_;
}
inline ::std::string* Database_NoBench::release_sparse_449_str() {
  clear_has_sparse_449_str();
  if (sparse_449_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_449_str_;
    sparse_449_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_449_str(::std::string* sparse_449_str) {
  if (sparse_449_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_449_str_;
  }
  if (sparse_449_str) {
    set_has_sparse_449_str();
    sparse_449_str_ = sparse_449_str;
  } else {
    clear_has_sparse_449_str();
    sparse_449_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_450_str = 462;
inline bool Database_NoBench::has_sparse_450_str() const {
  return (_has_bits_[14] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_450_str() {
  _has_bits_[14] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_450_str() {
  _has_bits_[14] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_450_str() {
  if (sparse_450_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_450_str_->clear();
  }
  clear_has_sparse_450_str();
}
inline const ::std::string& Database_NoBench::sparse_450_str() const {
  return *sparse_450_str_;
}
inline void Database_NoBench::set_sparse_450_str(const ::std::string& value) {
  set_has_sparse_450_str();
  if (sparse_450_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_450_str_ = new ::std::string;
  }
  sparse_450_str_->assign(value);
}
inline void Database_NoBench::set_sparse_450_str(const char* value) {
  set_has_sparse_450_str();
  if (sparse_450_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_450_str_ = new ::std::string;
  }
  sparse_450_str_->assign(value);
}
inline void Database_NoBench::set_sparse_450_str(const char* value, size_t size) {
  set_has_sparse_450_str();
  if (sparse_450_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_450_str_ = new ::std::string;
  }
  sparse_450_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_450_str() {
  set_has_sparse_450_str();
  if (sparse_450_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_450_str_ = new ::std::string;
  }
  return sparse_450_str_;
}
inline ::std::string* Database_NoBench::release_sparse_450_str() {
  clear_has_sparse_450_str();
  if (sparse_450_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_450_str_;
    sparse_450_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_450_str(::std::string* sparse_450_str) {
  if (sparse_450_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_450_str_;
  }
  if (sparse_450_str) {
    set_has_sparse_450_str();
    sparse_450_str_ = sparse_450_str;
  } else {
    clear_has_sparse_450_str();
    sparse_450_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_451_str = 463;
inline bool Database_NoBench::has_sparse_451_str() const {
  return (_has_bits_[14] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_451_str() {
  _has_bits_[14] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_451_str() {
  _has_bits_[14] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_451_str() {
  if (sparse_451_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_451_str_->clear();
  }
  clear_has_sparse_451_str();
}
inline const ::std::string& Database_NoBench::sparse_451_str() const {
  return *sparse_451_str_;
}
inline void Database_NoBench::set_sparse_451_str(const ::std::string& value) {
  set_has_sparse_451_str();
  if (sparse_451_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_451_str_ = new ::std::string;
  }
  sparse_451_str_->assign(value);
}
inline void Database_NoBench::set_sparse_451_str(const char* value) {
  set_has_sparse_451_str();
  if (sparse_451_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_451_str_ = new ::std::string;
  }
  sparse_451_str_->assign(value);
}
inline void Database_NoBench::set_sparse_451_str(const char* value, size_t size) {
  set_has_sparse_451_str();
  if (sparse_451_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_451_str_ = new ::std::string;
  }
  sparse_451_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_451_str() {
  set_has_sparse_451_str();
  if (sparse_451_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_451_str_ = new ::std::string;
  }
  return sparse_451_str_;
}
inline ::std::string* Database_NoBench::release_sparse_451_str() {
  clear_has_sparse_451_str();
  if (sparse_451_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_451_str_;
    sparse_451_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_451_str(::std::string* sparse_451_str) {
  if (sparse_451_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_451_str_;
  }
  if (sparse_451_str) {
    set_has_sparse_451_str();
    sparse_451_str_ = sparse_451_str;
  } else {
    clear_has_sparse_451_str();
    sparse_451_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_452_str = 464;
inline bool Database_NoBench::has_sparse_452_str() const {
  return (_has_bits_[14] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_452_str() {
  _has_bits_[14] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_452_str() {
  _has_bits_[14] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_452_str() {
  if (sparse_452_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_452_str_->clear();
  }
  clear_has_sparse_452_str();
}
inline const ::std::string& Database_NoBench::sparse_452_str() const {
  return *sparse_452_str_;
}
inline void Database_NoBench::set_sparse_452_str(const ::std::string& value) {
  set_has_sparse_452_str();
  if (sparse_452_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_452_str_ = new ::std::string;
  }
  sparse_452_str_->assign(value);
}
inline void Database_NoBench::set_sparse_452_str(const char* value) {
  set_has_sparse_452_str();
  if (sparse_452_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_452_str_ = new ::std::string;
  }
  sparse_452_str_->assign(value);
}
inline void Database_NoBench::set_sparse_452_str(const char* value, size_t size) {
  set_has_sparse_452_str();
  if (sparse_452_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_452_str_ = new ::std::string;
  }
  sparse_452_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_452_str() {
  set_has_sparse_452_str();
  if (sparse_452_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_452_str_ = new ::std::string;
  }
  return sparse_452_str_;
}
inline ::std::string* Database_NoBench::release_sparse_452_str() {
  clear_has_sparse_452_str();
  if (sparse_452_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_452_str_;
    sparse_452_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_452_str(::std::string* sparse_452_str) {
  if (sparse_452_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_452_str_;
  }
  if (sparse_452_str) {
    set_has_sparse_452_str();
    sparse_452_str_ = sparse_452_str;
  } else {
    clear_has_sparse_452_str();
    sparse_452_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_453_str = 465;
inline bool Database_NoBench::has_sparse_453_str() const {
  return (_has_bits_[14] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_453_str() {
  _has_bits_[14] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_453_str() {
  _has_bits_[14] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_453_str() {
  if (sparse_453_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_453_str_->clear();
  }
  clear_has_sparse_453_str();
}
inline const ::std::string& Database_NoBench::sparse_453_str() const {
  return *sparse_453_str_;
}
inline void Database_NoBench::set_sparse_453_str(const ::std::string& value) {
  set_has_sparse_453_str();
  if (sparse_453_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_453_str_ = new ::std::string;
  }
  sparse_453_str_->assign(value);
}
inline void Database_NoBench::set_sparse_453_str(const char* value) {
  set_has_sparse_453_str();
  if (sparse_453_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_453_str_ = new ::std::string;
  }
  sparse_453_str_->assign(value);
}
inline void Database_NoBench::set_sparse_453_str(const char* value, size_t size) {
  set_has_sparse_453_str();
  if (sparse_453_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_453_str_ = new ::std::string;
  }
  sparse_453_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_453_str() {
  set_has_sparse_453_str();
  if (sparse_453_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_453_str_ = new ::std::string;
  }
  return sparse_453_str_;
}
inline ::std::string* Database_NoBench::release_sparse_453_str() {
  clear_has_sparse_453_str();
  if (sparse_453_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_453_str_;
    sparse_453_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_453_str(::std::string* sparse_453_str) {
  if (sparse_453_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_453_str_;
  }
  if (sparse_453_str) {
    set_has_sparse_453_str();
    sparse_453_str_ = sparse_453_str;
  } else {
    clear_has_sparse_453_str();
    sparse_453_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_454_str = 466;
inline bool Database_NoBench::has_sparse_454_str() const {
  return (_has_bits_[14] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_454_str() {
  _has_bits_[14] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_454_str() {
  _has_bits_[14] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_454_str() {
  if (sparse_454_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_454_str_->clear();
  }
  clear_has_sparse_454_str();
}
inline const ::std::string& Database_NoBench::sparse_454_str() const {
  return *sparse_454_str_;
}
inline void Database_NoBench::set_sparse_454_str(const ::std::string& value) {
  set_has_sparse_454_str();
  if (sparse_454_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_454_str_ = new ::std::string;
  }
  sparse_454_str_->assign(value);
}
inline void Database_NoBench::set_sparse_454_str(const char* value) {
  set_has_sparse_454_str();
  if (sparse_454_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_454_str_ = new ::std::string;
  }
  sparse_454_str_->assign(value);
}
inline void Database_NoBench::set_sparse_454_str(const char* value, size_t size) {
  set_has_sparse_454_str();
  if (sparse_454_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_454_str_ = new ::std::string;
  }
  sparse_454_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_454_str() {
  set_has_sparse_454_str();
  if (sparse_454_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_454_str_ = new ::std::string;
  }
  return sparse_454_str_;
}
inline ::std::string* Database_NoBench::release_sparse_454_str() {
  clear_has_sparse_454_str();
  if (sparse_454_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_454_str_;
    sparse_454_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_454_str(::std::string* sparse_454_str) {
  if (sparse_454_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_454_str_;
  }
  if (sparse_454_str) {
    set_has_sparse_454_str();
    sparse_454_str_ = sparse_454_str;
  } else {
    clear_has_sparse_454_str();
    sparse_454_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_455_str = 467;
inline bool Database_NoBench::has_sparse_455_str() const {
  return (_has_bits_[14] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_455_str() {
  _has_bits_[14] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_455_str() {
  _has_bits_[14] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_455_str() {
  if (sparse_455_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_455_str_->clear();
  }
  clear_has_sparse_455_str();
}
inline const ::std::string& Database_NoBench::sparse_455_str() const {
  return *sparse_455_str_;
}
inline void Database_NoBench::set_sparse_455_str(const ::std::string& value) {
  set_has_sparse_455_str();
  if (sparse_455_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_455_str_ = new ::std::string;
  }
  sparse_455_str_->assign(value);
}
inline void Database_NoBench::set_sparse_455_str(const char* value) {
  set_has_sparse_455_str();
  if (sparse_455_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_455_str_ = new ::std::string;
  }
  sparse_455_str_->assign(value);
}
inline void Database_NoBench::set_sparse_455_str(const char* value, size_t size) {
  set_has_sparse_455_str();
  if (sparse_455_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_455_str_ = new ::std::string;
  }
  sparse_455_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_455_str() {
  set_has_sparse_455_str();
  if (sparse_455_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_455_str_ = new ::std::string;
  }
  return sparse_455_str_;
}
inline ::std::string* Database_NoBench::release_sparse_455_str() {
  clear_has_sparse_455_str();
  if (sparse_455_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_455_str_;
    sparse_455_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_455_str(::std::string* sparse_455_str) {
  if (sparse_455_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_455_str_;
  }
  if (sparse_455_str) {
    set_has_sparse_455_str();
    sparse_455_str_ = sparse_455_str;
  } else {
    clear_has_sparse_455_str();
    sparse_455_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_456_str = 468;
inline bool Database_NoBench::has_sparse_456_str() const {
  return (_has_bits_[14] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_456_str() {
  _has_bits_[14] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_456_str() {
  _has_bits_[14] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_456_str() {
  if (sparse_456_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_456_str_->clear();
  }
  clear_has_sparse_456_str();
}
inline const ::std::string& Database_NoBench::sparse_456_str() const {
  return *sparse_456_str_;
}
inline void Database_NoBench::set_sparse_456_str(const ::std::string& value) {
  set_has_sparse_456_str();
  if (sparse_456_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_456_str_ = new ::std::string;
  }
  sparse_456_str_->assign(value);
}
inline void Database_NoBench::set_sparse_456_str(const char* value) {
  set_has_sparse_456_str();
  if (sparse_456_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_456_str_ = new ::std::string;
  }
  sparse_456_str_->assign(value);
}
inline void Database_NoBench::set_sparse_456_str(const char* value, size_t size) {
  set_has_sparse_456_str();
  if (sparse_456_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_456_str_ = new ::std::string;
  }
  sparse_456_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_456_str() {
  set_has_sparse_456_str();
  if (sparse_456_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_456_str_ = new ::std::string;
  }
  return sparse_456_str_;
}
inline ::std::string* Database_NoBench::release_sparse_456_str() {
  clear_has_sparse_456_str();
  if (sparse_456_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_456_str_;
    sparse_456_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_456_str(::std::string* sparse_456_str) {
  if (sparse_456_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_456_str_;
  }
  if (sparse_456_str) {
    set_has_sparse_456_str();
    sparse_456_str_ = sparse_456_str;
  } else {
    clear_has_sparse_456_str();
    sparse_456_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_457_str = 469;
inline bool Database_NoBench::has_sparse_457_str() const {
  return (_has_bits_[14] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_457_str() {
  _has_bits_[14] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_457_str() {
  _has_bits_[14] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_457_str() {
  if (sparse_457_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_457_str_->clear();
  }
  clear_has_sparse_457_str();
}
inline const ::std::string& Database_NoBench::sparse_457_str() const {
  return *sparse_457_str_;
}
inline void Database_NoBench::set_sparse_457_str(const ::std::string& value) {
  set_has_sparse_457_str();
  if (sparse_457_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_457_str_ = new ::std::string;
  }
  sparse_457_str_->assign(value);
}
inline void Database_NoBench::set_sparse_457_str(const char* value) {
  set_has_sparse_457_str();
  if (sparse_457_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_457_str_ = new ::std::string;
  }
  sparse_457_str_->assign(value);
}
inline void Database_NoBench::set_sparse_457_str(const char* value, size_t size) {
  set_has_sparse_457_str();
  if (sparse_457_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_457_str_ = new ::std::string;
  }
  sparse_457_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_457_str() {
  set_has_sparse_457_str();
  if (sparse_457_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_457_str_ = new ::std::string;
  }
  return sparse_457_str_;
}
inline ::std::string* Database_NoBench::release_sparse_457_str() {
  clear_has_sparse_457_str();
  if (sparse_457_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_457_str_;
    sparse_457_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_457_str(::std::string* sparse_457_str) {
  if (sparse_457_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_457_str_;
  }
  if (sparse_457_str) {
    set_has_sparse_457_str();
    sparse_457_str_ = sparse_457_str;
  } else {
    clear_has_sparse_457_str();
    sparse_457_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_458_str = 470;
inline bool Database_NoBench::has_sparse_458_str() const {
  return (_has_bits_[14] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_458_str() {
  _has_bits_[14] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_458_str() {
  _has_bits_[14] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_458_str() {
  if (sparse_458_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_458_str_->clear();
  }
  clear_has_sparse_458_str();
}
inline const ::std::string& Database_NoBench::sparse_458_str() const {
  return *sparse_458_str_;
}
inline void Database_NoBench::set_sparse_458_str(const ::std::string& value) {
  set_has_sparse_458_str();
  if (sparse_458_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_458_str_ = new ::std::string;
  }
  sparse_458_str_->assign(value);
}
inline void Database_NoBench::set_sparse_458_str(const char* value) {
  set_has_sparse_458_str();
  if (sparse_458_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_458_str_ = new ::std::string;
  }
  sparse_458_str_->assign(value);
}
inline void Database_NoBench::set_sparse_458_str(const char* value, size_t size) {
  set_has_sparse_458_str();
  if (sparse_458_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_458_str_ = new ::std::string;
  }
  sparse_458_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_458_str() {
  set_has_sparse_458_str();
  if (sparse_458_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_458_str_ = new ::std::string;
  }
  return sparse_458_str_;
}
inline ::std::string* Database_NoBench::release_sparse_458_str() {
  clear_has_sparse_458_str();
  if (sparse_458_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_458_str_;
    sparse_458_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_458_str(::std::string* sparse_458_str) {
  if (sparse_458_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_458_str_;
  }
  if (sparse_458_str) {
    set_has_sparse_458_str();
    sparse_458_str_ = sparse_458_str;
  } else {
    clear_has_sparse_458_str();
    sparse_458_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_459_str = 471;
inline bool Database_NoBench::has_sparse_459_str() const {
  return (_has_bits_[14] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_459_str() {
  _has_bits_[14] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_459_str() {
  _has_bits_[14] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_459_str() {
  if (sparse_459_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_459_str_->clear();
  }
  clear_has_sparse_459_str();
}
inline const ::std::string& Database_NoBench::sparse_459_str() const {
  return *sparse_459_str_;
}
inline void Database_NoBench::set_sparse_459_str(const ::std::string& value) {
  set_has_sparse_459_str();
  if (sparse_459_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_459_str_ = new ::std::string;
  }
  sparse_459_str_->assign(value);
}
inline void Database_NoBench::set_sparse_459_str(const char* value) {
  set_has_sparse_459_str();
  if (sparse_459_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_459_str_ = new ::std::string;
  }
  sparse_459_str_->assign(value);
}
inline void Database_NoBench::set_sparse_459_str(const char* value, size_t size) {
  set_has_sparse_459_str();
  if (sparse_459_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_459_str_ = new ::std::string;
  }
  sparse_459_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_459_str() {
  set_has_sparse_459_str();
  if (sparse_459_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_459_str_ = new ::std::string;
  }
  return sparse_459_str_;
}
inline ::std::string* Database_NoBench::release_sparse_459_str() {
  clear_has_sparse_459_str();
  if (sparse_459_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_459_str_;
    sparse_459_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_459_str(::std::string* sparse_459_str) {
  if (sparse_459_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_459_str_;
  }
  if (sparse_459_str) {
    set_has_sparse_459_str();
    sparse_459_str_ = sparse_459_str;
  } else {
    clear_has_sparse_459_str();
    sparse_459_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_460_str = 472;
inline bool Database_NoBench::has_sparse_460_str() const {
  return (_has_bits_[14] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_460_str() {
  _has_bits_[14] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_460_str() {
  _has_bits_[14] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_460_str() {
  if (sparse_460_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_460_str_->clear();
  }
  clear_has_sparse_460_str();
}
inline const ::std::string& Database_NoBench::sparse_460_str() const {
  return *sparse_460_str_;
}
inline void Database_NoBench::set_sparse_460_str(const ::std::string& value) {
  set_has_sparse_460_str();
  if (sparse_460_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_460_str_ = new ::std::string;
  }
  sparse_460_str_->assign(value);
}
inline void Database_NoBench::set_sparse_460_str(const char* value) {
  set_has_sparse_460_str();
  if (sparse_460_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_460_str_ = new ::std::string;
  }
  sparse_460_str_->assign(value);
}
inline void Database_NoBench::set_sparse_460_str(const char* value, size_t size) {
  set_has_sparse_460_str();
  if (sparse_460_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_460_str_ = new ::std::string;
  }
  sparse_460_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_460_str() {
  set_has_sparse_460_str();
  if (sparse_460_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_460_str_ = new ::std::string;
  }
  return sparse_460_str_;
}
inline ::std::string* Database_NoBench::release_sparse_460_str() {
  clear_has_sparse_460_str();
  if (sparse_460_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_460_str_;
    sparse_460_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_460_str(::std::string* sparse_460_str) {
  if (sparse_460_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_460_str_;
  }
  if (sparse_460_str) {
    set_has_sparse_460_str();
    sparse_460_str_ = sparse_460_str;
  } else {
    clear_has_sparse_460_str();
    sparse_460_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_461_str = 473;
inline bool Database_NoBench::has_sparse_461_str() const {
  return (_has_bits_[14] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_461_str() {
  _has_bits_[14] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_461_str() {
  _has_bits_[14] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_461_str() {
  if (sparse_461_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_461_str_->clear();
  }
  clear_has_sparse_461_str();
}
inline const ::std::string& Database_NoBench::sparse_461_str() const {
  return *sparse_461_str_;
}
inline void Database_NoBench::set_sparse_461_str(const ::std::string& value) {
  set_has_sparse_461_str();
  if (sparse_461_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_461_str_ = new ::std::string;
  }
  sparse_461_str_->assign(value);
}
inline void Database_NoBench::set_sparse_461_str(const char* value) {
  set_has_sparse_461_str();
  if (sparse_461_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_461_str_ = new ::std::string;
  }
  sparse_461_str_->assign(value);
}
inline void Database_NoBench::set_sparse_461_str(const char* value, size_t size) {
  set_has_sparse_461_str();
  if (sparse_461_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_461_str_ = new ::std::string;
  }
  sparse_461_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_461_str() {
  set_has_sparse_461_str();
  if (sparse_461_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_461_str_ = new ::std::string;
  }
  return sparse_461_str_;
}
inline ::std::string* Database_NoBench::release_sparse_461_str() {
  clear_has_sparse_461_str();
  if (sparse_461_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_461_str_;
    sparse_461_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_461_str(::std::string* sparse_461_str) {
  if (sparse_461_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_461_str_;
  }
  if (sparse_461_str) {
    set_has_sparse_461_str();
    sparse_461_str_ = sparse_461_str;
  } else {
    clear_has_sparse_461_str();
    sparse_461_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_462_str = 474;
inline bool Database_NoBench::has_sparse_462_str() const {
  return (_has_bits_[14] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_462_str() {
  _has_bits_[14] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_462_str() {
  _has_bits_[14] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_462_str() {
  if (sparse_462_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_462_str_->clear();
  }
  clear_has_sparse_462_str();
}
inline const ::std::string& Database_NoBench::sparse_462_str() const {
  return *sparse_462_str_;
}
inline void Database_NoBench::set_sparse_462_str(const ::std::string& value) {
  set_has_sparse_462_str();
  if (sparse_462_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_462_str_ = new ::std::string;
  }
  sparse_462_str_->assign(value);
}
inline void Database_NoBench::set_sparse_462_str(const char* value) {
  set_has_sparse_462_str();
  if (sparse_462_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_462_str_ = new ::std::string;
  }
  sparse_462_str_->assign(value);
}
inline void Database_NoBench::set_sparse_462_str(const char* value, size_t size) {
  set_has_sparse_462_str();
  if (sparse_462_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_462_str_ = new ::std::string;
  }
  sparse_462_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_462_str() {
  set_has_sparse_462_str();
  if (sparse_462_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_462_str_ = new ::std::string;
  }
  return sparse_462_str_;
}
inline ::std::string* Database_NoBench::release_sparse_462_str() {
  clear_has_sparse_462_str();
  if (sparse_462_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_462_str_;
    sparse_462_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_462_str(::std::string* sparse_462_str) {
  if (sparse_462_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_462_str_;
  }
  if (sparse_462_str) {
    set_has_sparse_462_str();
    sparse_462_str_ = sparse_462_str;
  } else {
    clear_has_sparse_462_str();
    sparse_462_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_463_str = 475;
inline bool Database_NoBench::has_sparse_463_str() const {
  return (_has_bits_[14] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_463_str() {
  _has_bits_[14] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_463_str() {
  _has_bits_[14] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_463_str() {
  if (sparse_463_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_463_str_->clear();
  }
  clear_has_sparse_463_str();
}
inline const ::std::string& Database_NoBench::sparse_463_str() const {
  return *sparse_463_str_;
}
inline void Database_NoBench::set_sparse_463_str(const ::std::string& value) {
  set_has_sparse_463_str();
  if (sparse_463_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_463_str_ = new ::std::string;
  }
  sparse_463_str_->assign(value);
}
inline void Database_NoBench::set_sparse_463_str(const char* value) {
  set_has_sparse_463_str();
  if (sparse_463_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_463_str_ = new ::std::string;
  }
  sparse_463_str_->assign(value);
}
inline void Database_NoBench::set_sparse_463_str(const char* value, size_t size) {
  set_has_sparse_463_str();
  if (sparse_463_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_463_str_ = new ::std::string;
  }
  sparse_463_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_463_str() {
  set_has_sparse_463_str();
  if (sparse_463_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_463_str_ = new ::std::string;
  }
  return sparse_463_str_;
}
inline ::std::string* Database_NoBench::release_sparse_463_str() {
  clear_has_sparse_463_str();
  if (sparse_463_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_463_str_;
    sparse_463_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_463_str(::std::string* sparse_463_str) {
  if (sparse_463_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_463_str_;
  }
  if (sparse_463_str) {
    set_has_sparse_463_str();
    sparse_463_str_ = sparse_463_str;
  } else {
    clear_has_sparse_463_str();
    sparse_463_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_464_str = 476;
inline bool Database_NoBench::has_sparse_464_str() const {
  return (_has_bits_[14] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_464_str() {
  _has_bits_[14] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_464_str() {
  _has_bits_[14] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_464_str() {
  if (sparse_464_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_464_str_->clear();
  }
  clear_has_sparse_464_str();
}
inline const ::std::string& Database_NoBench::sparse_464_str() const {
  return *sparse_464_str_;
}
inline void Database_NoBench::set_sparse_464_str(const ::std::string& value) {
  set_has_sparse_464_str();
  if (sparse_464_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_464_str_ = new ::std::string;
  }
  sparse_464_str_->assign(value);
}
inline void Database_NoBench::set_sparse_464_str(const char* value) {
  set_has_sparse_464_str();
  if (sparse_464_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_464_str_ = new ::std::string;
  }
  sparse_464_str_->assign(value);
}
inline void Database_NoBench::set_sparse_464_str(const char* value, size_t size) {
  set_has_sparse_464_str();
  if (sparse_464_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_464_str_ = new ::std::string;
  }
  sparse_464_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_464_str() {
  set_has_sparse_464_str();
  if (sparse_464_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_464_str_ = new ::std::string;
  }
  return sparse_464_str_;
}
inline ::std::string* Database_NoBench::release_sparse_464_str() {
  clear_has_sparse_464_str();
  if (sparse_464_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_464_str_;
    sparse_464_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_464_str(::std::string* sparse_464_str) {
  if (sparse_464_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_464_str_;
  }
  if (sparse_464_str) {
    set_has_sparse_464_str();
    sparse_464_str_ = sparse_464_str;
  } else {
    clear_has_sparse_464_str();
    sparse_464_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_465_str = 477;
inline bool Database_NoBench::has_sparse_465_str() const {
  return (_has_bits_[14] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_465_str() {
  _has_bits_[14] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_465_str() {
  _has_bits_[14] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_465_str() {
  if (sparse_465_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_465_str_->clear();
  }
  clear_has_sparse_465_str();
}
inline const ::std::string& Database_NoBench::sparse_465_str() const {
  return *sparse_465_str_;
}
inline void Database_NoBench::set_sparse_465_str(const ::std::string& value) {
  set_has_sparse_465_str();
  if (sparse_465_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_465_str_ = new ::std::string;
  }
  sparse_465_str_->assign(value);
}
inline void Database_NoBench::set_sparse_465_str(const char* value) {
  set_has_sparse_465_str();
  if (sparse_465_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_465_str_ = new ::std::string;
  }
  sparse_465_str_->assign(value);
}
inline void Database_NoBench::set_sparse_465_str(const char* value, size_t size) {
  set_has_sparse_465_str();
  if (sparse_465_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_465_str_ = new ::std::string;
  }
  sparse_465_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_465_str() {
  set_has_sparse_465_str();
  if (sparse_465_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_465_str_ = new ::std::string;
  }
  return sparse_465_str_;
}
inline ::std::string* Database_NoBench::release_sparse_465_str() {
  clear_has_sparse_465_str();
  if (sparse_465_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_465_str_;
    sparse_465_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_465_str(::std::string* sparse_465_str) {
  if (sparse_465_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_465_str_;
  }
  if (sparse_465_str) {
    set_has_sparse_465_str();
    sparse_465_str_ = sparse_465_str;
  } else {
    clear_has_sparse_465_str();
    sparse_465_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_466_str = 478;
inline bool Database_NoBench::has_sparse_466_str() const {
  return (_has_bits_[14] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_466_str() {
  _has_bits_[14] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_466_str() {
  _has_bits_[14] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_466_str() {
  if (sparse_466_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_466_str_->clear();
  }
  clear_has_sparse_466_str();
}
inline const ::std::string& Database_NoBench::sparse_466_str() const {
  return *sparse_466_str_;
}
inline void Database_NoBench::set_sparse_466_str(const ::std::string& value) {
  set_has_sparse_466_str();
  if (sparse_466_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_466_str_ = new ::std::string;
  }
  sparse_466_str_->assign(value);
}
inline void Database_NoBench::set_sparse_466_str(const char* value) {
  set_has_sparse_466_str();
  if (sparse_466_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_466_str_ = new ::std::string;
  }
  sparse_466_str_->assign(value);
}
inline void Database_NoBench::set_sparse_466_str(const char* value, size_t size) {
  set_has_sparse_466_str();
  if (sparse_466_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_466_str_ = new ::std::string;
  }
  sparse_466_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_466_str() {
  set_has_sparse_466_str();
  if (sparse_466_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_466_str_ = new ::std::string;
  }
  return sparse_466_str_;
}
inline ::std::string* Database_NoBench::release_sparse_466_str() {
  clear_has_sparse_466_str();
  if (sparse_466_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_466_str_;
    sparse_466_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_466_str(::std::string* sparse_466_str) {
  if (sparse_466_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_466_str_;
  }
  if (sparse_466_str) {
    set_has_sparse_466_str();
    sparse_466_str_ = sparse_466_str;
  } else {
    clear_has_sparse_466_str();
    sparse_466_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_467_str = 479;
inline bool Database_NoBench::has_sparse_467_str() const {
  return (_has_bits_[15] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_467_str() {
  _has_bits_[15] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_467_str() {
  _has_bits_[15] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_467_str() {
  if (sparse_467_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_467_str_->clear();
  }
  clear_has_sparse_467_str();
}
inline const ::std::string& Database_NoBench::sparse_467_str() const {
  return *sparse_467_str_;
}
inline void Database_NoBench::set_sparse_467_str(const ::std::string& value) {
  set_has_sparse_467_str();
  if (sparse_467_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_467_str_ = new ::std::string;
  }
  sparse_467_str_->assign(value);
}
inline void Database_NoBench::set_sparse_467_str(const char* value) {
  set_has_sparse_467_str();
  if (sparse_467_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_467_str_ = new ::std::string;
  }
  sparse_467_str_->assign(value);
}
inline void Database_NoBench::set_sparse_467_str(const char* value, size_t size) {
  set_has_sparse_467_str();
  if (sparse_467_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_467_str_ = new ::std::string;
  }
  sparse_467_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_467_str() {
  set_has_sparse_467_str();
  if (sparse_467_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_467_str_ = new ::std::string;
  }
  return sparse_467_str_;
}
inline ::std::string* Database_NoBench::release_sparse_467_str() {
  clear_has_sparse_467_str();
  if (sparse_467_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_467_str_;
    sparse_467_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_467_str(::std::string* sparse_467_str) {
  if (sparse_467_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_467_str_;
  }
  if (sparse_467_str) {
    set_has_sparse_467_str();
    sparse_467_str_ = sparse_467_str;
  } else {
    clear_has_sparse_467_str();
    sparse_467_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_468_str = 480;
inline bool Database_NoBench::has_sparse_468_str() const {
  return (_has_bits_[15] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_468_str() {
  _has_bits_[15] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_468_str() {
  _has_bits_[15] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_468_str() {
  if (sparse_468_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_468_str_->clear();
  }
  clear_has_sparse_468_str();
}
inline const ::std::string& Database_NoBench::sparse_468_str() const {
  return *sparse_468_str_;
}
inline void Database_NoBench::set_sparse_468_str(const ::std::string& value) {
  set_has_sparse_468_str();
  if (sparse_468_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_468_str_ = new ::std::string;
  }
  sparse_468_str_->assign(value);
}
inline void Database_NoBench::set_sparse_468_str(const char* value) {
  set_has_sparse_468_str();
  if (sparse_468_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_468_str_ = new ::std::string;
  }
  sparse_468_str_->assign(value);
}
inline void Database_NoBench::set_sparse_468_str(const char* value, size_t size) {
  set_has_sparse_468_str();
  if (sparse_468_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_468_str_ = new ::std::string;
  }
  sparse_468_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_468_str() {
  set_has_sparse_468_str();
  if (sparse_468_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_468_str_ = new ::std::string;
  }
  return sparse_468_str_;
}
inline ::std::string* Database_NoBench::release_sparse_468_str() {
  clear_has_sparse_468_str();
  if (sparse_468_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_468_str_;
    sparse_468_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_468_str(::std::string* sparse_468_str) {
  if (sparse_468_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_468_str_;
  }
  if (sparse_468_str) {
    set_has_sparse_468_str();
    sparse_468_str_ = sparse_468_str;
  } else {
    clear_has_sparse_468_str();
    sparse_468_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_469_str = 481;
inline bool Database_NoBench::has_sparse_469_str() const {
  return (_has_bits_[15] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_469_str() {
  _has_bits_[15] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_469_str() {
  _has_bits_[15] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_469_str() {
  if (sparse_469_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_469_str_->clear();
  }
  clear_has_sparse_469_str();
}
inline const ::std::string& Database_NoBench::sparse_469_str() const {
  return *sparse_469_str_;
}
inline void Database_NoBench::set_sparse_469_str(const ::std::string& value) {
  set_has_sparse_469_str();
  if (sparse_469_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_469_str_ = new ::std::string;
  }
  sparse_469_str_->assign(value);
}
inline void Database_NoBench::set_sparse_469_str(const char* value) {
  set_has_sparse_469_str();
  if (sparse_469_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_469_str_ = new ::std::string;
  }
  sparse_469_str_->assign(value);
}
inline void Database_NoBench::set_sparse_469_str(const char* value, size_t size) {
  set_has_sparse_469_str();
  if (sparse_469_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_469_str_ = new ::std::string;
  }
  sparse_469_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_469_str() {
  set_has_sparse_469_str();
  if (sparse_469_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_469_str_ = new ::std::string;
  }
  return sparse_469_str_;
}
inline ::std::string* Database_NoBench::release_sparse_469_str() {
  clear_has_sparse_469_str();
  if (sparse_469_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_469_str_;
    sparse_469_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_469_str(::std::string* sparse_469_str) {
  if (sparse_469_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_469_str_;
  }
  if (sparse_469_str) {
    set_has_sparse_469_str();
    sparse_469_str_ = sparse_469_str;
  } else {
    clear_has_sparse_469_str();
    sparse_469_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_470_str = 482;
inline bool Database_NoBench::has_sparse_470_str() const {
  return (_has_bits_[15] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_470_str() {
  _has_bits_[15] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_470_str() {
  _has_bits_[15] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_470_str() {
  if (sparse_470_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_470_str_->clear();
  }
  clear_has_sparse_470_str();
}
inline const ::std::string& Database_NoBench::sparse_470_str() const {
  return *sparse_470_str_;
}
inline void Database_NoBench::set_sparse_470_str(const ::std::string& value) {
  set_has_sparse_470_str();
  if (sparse_470_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_470_str_ = new ::std::string;
  }
  sparse_470_str_->assign(value);
}
inline void Database_NoBench::set_sparse_470_str(const char* value) {
  set_has_sparse_470_str();
  if (sparse_470_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_470_str_ = new ::std::string;
  }
  sparse_470_str_->assign(value);
}
inline void Database_NoBench::set_sparse_470_str(const char* value, size_t size) {
  set_has_sparse_470_str();
  if (sparse_470_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_470_str_ = new ::std::string;
  }
  sparse_470_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_470_str() {
  set_has_sparse_470_str();
  if (sparse_470_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_470_str_ = new ::std::string;
  }
  return sparse_470_str_;
}
inline ::std::string* Database_NoBench::release_sparse_470_str() {
  clear_has_sparse_470_str();
  if (sparse_470_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_470_str_;
    sparse_470_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_470_str(::std::string* sparse_470_str) {
  if (sparse_470_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_470_str_;
  }
  if (sparse_470_str) {
    set_has_sparse_470_str();
    sparse_470_str_ = sparse_470_str;
  } else {
    clear_has_sparse_470_str();
    sparse_470_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_471_str = 483;
inline bool Database_NoBench::has_sparse_471_str() const {
  return (_has_bits_[15] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_471_str() {
  _has_bits_[15] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_471_str() {
  _has_bits_[15] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_471_str() {
  if (sparse_471_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_471_str_->clear();
  }
  clear_has_sparse_471_str();
}
inline const ::std::string& Database_NoBench::sparse_471_str() const {
  return *sparse_471_str_;
}
inline void Database_NoBench::set_sparse_471_str(const ::std::string& value) {
  set_has_sparse_471_str();
  if (sparse_471_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_471_str_ = new ::std::string;
  }
  sparse_471_str_->assign(value);
}
inline void Database_NoBench::set_sparse_471_str(const char* value) {
  set_has_sparse_471_str();
  if (sparse_471_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_471_str_ = new ::std::string;
  }
  sparse_471_str_->assign(value);
}
inline void Database_NoBench::set_sparse_471_str(const char* value, size_t size) {
  set_has_sparse_471_str();
  if (sparse_471_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_471_str_ = new ::std::string;
  }
  sparse_471_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_471_str() {
  set_has_sparse_471_str();
  if (sparse_471_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_471_str_ = new ::std::string;
  }
  return sparse_471_str_;
}
inline ::std::string* Database_NoBench::release_sparse_471_str() {
  clear_has_sparse_471_str();
  if (sparse_471_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_471_str_;
    sparse_471_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_471_str(::std::string* sparse_471_str) {
  if (sparse_471_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_471_str_;
  }
  if (sparse_471_str) {
    set_has_sparse_471_str();
    sparse_471_str_ = sparse_471_str;
  } else {
    clear_has_sparse_471_str();
    sparse_471_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_472_str = 484;
inline bool Database_NoBench::has_sparse_472_str() const {
  return (_has_bits_[15] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_472_str() {
  _has_bits_[15] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_472_str() {
  _has_bits_[15] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_472_str() {
  if (sparse_472_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_472_str_->clear();
  }
  clear_has_sparse_472_str();
}
inline const ::std::string& Database_NoBench::sparse_472_str() const {
  return *sparse_472_str_;
}
inline void Database_NoBench::set_sparse_472_str(const ::std::string& value) {
  set_has_sparse_472_str();
  if (sparse_472_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_472_str_ = new ::std::string;
  }
  sparse_472_str_->assign(value);
}
inline void Database_NoBench::set_sparse_472_str(const char* value) {
  set_has_sparse_472_str();
  if (sparse_472_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_472_str_ = new ::std::string;
  }
  sparse_472_str_->assign(value);
}
inline void Database_NoBench::set_sparse_472_str(const char* value, size_t size) {
  set_has_sparse_472_str();
  if (sparse_472_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_472_str_ = new ::std::string;
  }
  sparse_472_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_472_str() {
  set_has_sparse_472_str();
  if (sparse_472_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_472_str_ = new ::std::string;
  }
  return sparse_472_str_;
}
inline ::std::string* Database_NoBench::release_sparse_472_str() {
  clear_has_sparse_472_str();
  if (sparse_472_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_472_str_;
    sparse_472_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_472_str(::std::string* sparse_472_str) {
  if (sparse_472_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_472_str_;
  }
  if (sparse_472_str) {
    set_has_sparse_472_str();
    sparse_472_str_ = sparse_472_str;
  } else {
    clear_has_sparse_472_str();
    sparse_472_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_473_str = 485;
inline bool Database_NoBench::has_sparse_473_str() const {
  return (_has_bits_[15] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_473_str() {
  _has_bits_[15] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_473_str() {
  _has_bits_[15] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_473_str() {
  if (sparse_473_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_473_str_->clear();
  }
  clear_has_sparse_473_str();
}
inline const ::std::string& Database_NoBench::sparse_473_str() const {
  return *sparse_473_str_;
}
inline void Database_NoBench::set_sparse_473_str(const ::std::string& value) {
  set_has_sparse_473_str();
  if (sparse_473_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_473_str_ = new ::std::string;
  }
  sparse_473_str_->assign(value);
}
inline void Database_NoBench::set_sparse_473_str(const char* value) {
  set_has_sparse_473_str();
  if (sparse_473_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_473_str_ = new ::std::string;
  }
  sparse_473_str_->assign(value);
}
inline void Database_NoBench::set_sparse_473_str(const char* value, size_t size) {
  set_has_sparse_473_str();
  if (sparse_473_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_473_str_ = new ::std::string;
  }
  sparse_473_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_473_str() {
  set_has_sparse_473_str();
  if (sparse_473_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_473_str_ = new ::std::string;
  }
  return sparse_473_str_;
}
inline ::std::string* Database_NoBench::release_sparse_473_str() {
  clear_has_sparse_473_str();
  if (sparse_473_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_473_str_;
    sparse_473_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_473_str(::std::string* sparse_473_str) {
  if (sparse_473_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_473_str_;
  }
  if (sparse_473_str) {
    set_has_sparse_473_str();
    sparse_473_str_ = sparse_473_str;
  } else {
    clear_has_sparse_473_str();
    sparse_473_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_474_str = 486;
inline bool Database_NoBench::has_sparse_474_str() const {
  return (_has_bits_[15] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_474_str() {
  _has_bits_[15] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_474_str() {
  _has_bits_[15] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_474_str() {
  if (sparse_474_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_474_str_->clear();
  }
  clear_has_sparse_474_str();
}
inline const ::std::string& Database_NoBench::sparse_474_str() const {
  return *sparse_474_str_;
}
inline void Database_NoBench::set_sparse_474_str(const ::std::string& value) {
  set_has_sparse_474_str();
  if (sparse_474_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_474_str_ = new ::std::string;
  }
  sparse_474_str_->assign(value);
}
inline void Database_NoBench::set_sparse_474_str(const char* value) {
  set_has_sparse_474_str();
  if (sparse_474_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_474_str_ = new ::std::string;
  }
  sparse_474_str_->assign(value);
}
inline void Database_NoBench::set_sparse_474_str(const char* value, size_t size) {
  set_has_sparse_474_str();
  if (sparse_474_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_474_str_ = new ::std::string;
  }
  sparse_474_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_474_str() {
  set_has_sparse_474_str();
  if (sparse_474_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_474_str_ = new ::std::string;
  }
  return sparse_474_str_;
}
inline ::std::string* Database_NoBench::release_sparse_474_str() {
  clear_has_sparse_474_str();
  if (sparse_474_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_474_str_;
    sparse_474_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_474_str(::std::string* sparse_474_str) {
  if (sparse_474_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_474_str_;
  }
  if (sparse_474_str) {
    set_has_sparse_474_str();
    sparse_474_str_ = sparse_474_str;
  } else {
    clear_has_sparse_474_str();
    sparse_474_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_475_str = 487;
inline bool Database_NoBench::has_sparse_475_str() const {
  return (_has_bits_[15] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_475_str() {
  _has_bits_[15] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_475_str() {
  _has_bits_[15] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_475_str() {
  if (sparse_475_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_475_str_->clear();
  }
  clear_has_sparse_475_str();
}
inline const ::std::string& Database_NoBench::sparse_475_str() const {
  return *sparse_475_str_;
}
inline void Database_NoBench::set_sparse_475_str(const ::std::string& value) {
  set_has_sparse_475_str();
  if (sparse_475_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_475_str_ = new ::std::string;
  }
  sparse_475_str_->assign(value);
}
inline void Database_NoBench::set_sparse_475_str(const char* value) {
  set_has_sparse_475_str();
  if (sparse_475_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_475_str_ = new ::std::string;
  }
  sparse_475_str_->assign(value);
}
inline void Database_NoBench::set_sparse_475_str(const char* value, size_t size) {
  set_has_sparse_475_str();
  if (sparse_475_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_475_str_ = new ::std::string;
  }
  sparse_475_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_475_str() {
  set_has_sparse_475_str();
  if (sparse_475_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_475_str_ = new ::std::string;
  }
  return sparse_475_str_;
}
inline ::std::string* Database_NoBench::release_sparse_475_str() {
  clear_has_sparse_475_str();
  if (sparse_475_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_475_str_;
    sparse_475_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_475_str(::std::string* sparse_475_str) {
  if (sparse_475_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_475_str_;
  }
  if (sparse_475_str) {
    set_has_sparse_475_str();
    sparse_475_str_ = sparse_475_str;
  } else {
    clear_has_sparse_475_str();
    sparse_475_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_476_str = 488;
inline bool Database_NoBench::has_sparse_476_str() const {
  return (_has_bits_[15] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_476_str() {
  _has_bits_[15] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_476_str() {
  _has_bits_[15] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_476_str() {
  if (sparse_476_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_476_str_->clear();
  }
  clear_has_sparse_476_str();
}
inline const ::std::string& Database_NoBench::sparse_476_str() const {
  return *sparse_476_str_;
}
inline void Database_NoBench::set_sparse_476_str(const ::std::string& value) {
  set_has_sparse_476_str();
  if (sparse_476_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_476_str_ = new ::std::string;
  }
  sparse_476_str_->assign(value);
}
inline void Database_NoBench::set_sparse_476_str(const char* value) {
  set_has_sparse_476_str();
  if (sparse_476_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_476_str_ = new ::std::string;
  }
  sparse_476_str_->assign(value);
}
inline void Database_NoBench::set_sparse_476_str(const char* value, size_t size) {
  set_has_sparse_476_str();
  if (sparse_476_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_476_str_ = new ::std::string;
  }
  sparse_476_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_476_str() {
  set_has_sparse_476_str();
  if (sparse_476_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_476_str_ = new ::std::string;
  }
  return sparse_476_str_;
}
inline ::std::string* Database_NoBench::release_sparse_476_str() {
  clear_has_sparse_476_str();
  if (sparse_476_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_476_str_;
    sparse_476_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_476_str(::std::string* sparse_476_str) {
  if (sparse_476_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_476_str_;
  }
  if (sparse_476_str) {
    set_has_sparse_476_str();
    sparse_476_str_ = sparse_476_str;
  } else {
    clear_has_sparse_476_str();
    sparse_476_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_477_str = 489;
inline bool Database_NoBench::has_sparse_477_str() const {
  return (_has_bits_[15] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_477_str() {
  _has_bits_[15] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_477_str() {
  _has_bits_[15] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_477_str() {
  if (sparse_477_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_477_str_->clear();
  }
  clear_has_sparse_477_str();
}
inline const ::std::string& Database_NoBench::sparse_477_str() const {
  return *sparse_477_str_;
}
inline void Database_NoBench::set_sparse_477_str(const ::std::string& value) {
  set_has_sparse_477_str();
  if (sparse_477_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_477_str_ = new ::std::string;
  }
  sparse_477_str_->assign(value);
}
inline void Database_NoBench::set_sparse_477_str(const char* value) {
  set_has_sparse_477_str();
  if (sparse_477_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_477_str_ = new ::std::string;
  }
  sparse_477_str_->assign(value);
}
inline void Database_NoBench::set_sparse_477_str(const char* value, size_t size) {
  set_has_sparse_477_str();
  if (sparse_477_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_477_str_ = new ::std::string;
  }
  sparse_477_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_477_str() {
  set_has_sparse_477_str();
  if (sparse_477_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_477_str_ = new ::std::string;
  }
  return sparse_477_str_;
}
inline ::std::string* Database_NoBench::release_sparse_477_str() {
  clear_has_sparse_477_str();
  if (sparse_477_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_477_str_;
    sparse_477_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_477_str(::std::string* sparse_477_str) {
  if (sparse_477_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_477_str_;
  }
  if (sparse_477_str) {
    set_has_sparse_477_str();
    sparse_477_str_ = sparse_477_str;
  } else {
    clear_has_sparse_477_str();
    sparse_477_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_478_str = 490;
inline bool Database_NoBench::has_sparse_478_str() const {
  return (_has_bits_[15] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_478_str() {
  _has_bits_[15] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_478_str() {
  _has_bits_[15] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_478_str() {
  if (sparse_478_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_478_str_->clear();
  }
  clear_has_sparse_478_str();
}
inline const ::std::string& Database_NoBench::sparse_478_str() const {
  return *sparse_478_str_;
}
inline void Database_NoBench::set_sparse_478_str(const ::std::string& value) {
  set_has_sparse_478_str();
  if (sparse_478_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_478_str_ = new ::std::string;
  }
  sparse_478_str_->assign(value);
}
inline void Database_NoBench::set_sparse_478_str(const char* value) {
  set_has_sparse_478_str();
  if (sparse_478_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_478_str_ = new ::std::string;
  }
  sparse_478_str_->assign(value);
}
inline void Database_NoBench::set_sparse_478_str(const char* value, size_t size) {
  set_has_sparse_478_str();
  if (sparse_478_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_478_str_ = new ::std::string;
  }
  sparse_478_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_478_str() {
  set_has_sparse_478_str();
  if (sparse_478_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_478_str_ = new ::std::string;
  }
  return sparse_478_str_;
}
inline ::std::string* Database_NoBench::release_sparse_478_str() {
  clear_has_sparse_478_str();
  if (sparse_478_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_478_str_;
    sparse_478_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_478_str(::std::string* sparse_478_str) {
  if (sparse_478_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_478_str_;
  }
  if (sparse_478_str) {
    set_has_sparse_478_str();
    sparse_478_str_ = sparse_478_str;
  } else {
    clear_has_sparse_478_str();
    sparse_478_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_479_str = 491;
inline bool Database_NoBench::has_sparse_479_str() const {
  return (_has_bits_[15] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_479_str() {
  _has_bits_[15] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_479_str() {
  _has_bits_[15] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_479_str() {
  if (sparse_479_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_479_str_->clear();
  }
  clear_has_sparse_479_str();
}
inline const ::std::string& Database_NoBench::sparse_479_str() const {
  return *sparse_479_str_;
}
inline void Database_NoBench::set_sparse_479_str(const ::std::string& value) {
  set_has_sparse_479_str();
  if (sparse_479_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_479_str_ = new ::std::string;
  }
  sparse_479_str_->assign(value);
}
inline void Database_NoBench::set_sparse_479_str(const char* value) {
  set_has_sparse_479_str();
  if (sparse_479_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_479_str_ = new ::std::string;
  }
  sparse_479_str_->assign(value);
}
inline void Database_NoBench::set_sparse_479_str(const char* value, size_t size) {
  set_has_sparse_479_str();
  if (sparse_479_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_479_str_ = new ::std::string;
  }
  sparse_479_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_479_str() {
  set_has_sparse_479_str();
  if (sparse_479_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_479_str_ = new ::std::string;
  }
  return sparse_479_str_;
}
inline ::std::string* Database_NoBench::release_sparse_479_str() {
  clear_has_sparse_479_str();
  if (sparse_479_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_479_str_;
    sparse_479_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_479_str(::std::string* sparse_479_str) {
  if (sparse_479_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_479_str_;
  }
  if (sparse_479_str) {
    set_has_sparse_479_str();
    sparse_479_str_ = sparse_479_str;
  } else {
    clear_has_sparse_479_str();
    sparse_479_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_480_str = 492;
inline bool Database_NoBench::has_sparse_480_str() const {
  return (_has_bits_[15] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_480_str() {
  _has_bits_[15] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_480_str() {
  _has_bits_[15] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_480_str() {
  if (sparse_480_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_480_str_->clear();
  }
  clear_has_sparse_480_str();
}
inline const ::std::string& Database_NoBench::sparse_480_str() const {
  return *sparse_480_str_;
}
inline void Database_NoBench::set_sparse_480_str(const ::std::string& value) {
  set_has_sparse_480_str();
  if (sparse_480_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_480_str_ = new ::std::string;
  }
  sparse_480_str_->assign(value);
}
inline void Database_NoBench::set_sparse_480_str(const char* value) {
  set_has_sparse_480_str();
  if (sparse_480_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_480_str_ = new ::std::string;
  }
  sparse_480_str_->assign(value);
}
inline void Database_NoBench::set_sparse_480_str(const char* value, size_t size) {
  set_has_sparse_480_str();
  if (sparse_480_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_480_str_ = new ::std::string;
  }
  sparse_480_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_480_str() {
  set_has_sparse_480_str();
  if (sparse_480_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_480_str_ = new ::std::string;
  }
  return sparse_480_str_;
}
inline ::std::string* Database_NoBench::release_sparse_480_str() {
  clear_has_sparse_480_str();
  if (sparse_480_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_480_str_;
    sparse_480_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_480_str(::std::string* sparse_480_str) {
  if (sparse_480_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_480_str_;
  }
  if (sparse_480_str) {
    set_has_sparse_480_str();
    sparse_480_str_ = sparse_480_str;
  } else {
    clear_has_sparse_480_str();
    sparse_480_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_481_str = 493;
inline bool Database_NoBench::has_sparse_481_str() const {
  return (_has_bits_[15] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_481_str() {
  _has_bits_[15] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_481_str() {
  _has_bits_[15] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_481_str() {
  if (sparse_481_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_481_str_->clear();
  }
  clear_has_sparse_481_str();
}
inline const ::std::string& Database_NoBench::sparse_481_str() const {
  return *sparse_481_str_;
}
inline void Database_NoBench::set_sparse_481_str(const ::std::string& value) {
  set_has_sparse_481_str();
  if (sparse_481_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_481_str_ = new ::std::string;
  }
  sparse_481_str_->assign(value);
}
inline void Database_NoBench::set_sparse_481_str(const char* value) {
  set_has_sparse_481_str();
  if (sparse_481_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_481_str_ = new ::std::string;
  }
  sparse_481_str_->assign(value);
}
inline void Database_NoBench::set_sparse_481_str(const char* value, size_t size) {
  set_has_sparse_481_str();
  if (sparse_481_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_481_str_ = new ::std::string;
  }
  sparse_481_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_481_str() {
  set_has_sparse_481_str();
  if (sparse_481_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_481_str_ = new ::std::string;
  }
  return sparse_481_str_;
}
inline ::std::string* Database_NoBench::release_sparse_481_str() {
  clear_has_sparse_481_str();
  if (sparse_481_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_481_str_;
    sparse_481_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_481_str(::std::string* sparse_481_str) {
  if (sparse_481_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_481_str_;
  }
  if (sparse_481_str) {
    set_has_sparse_481_str();
    sparse_481_str_ = sparse_481_str;
  } else {
    clear_has_sparse_481_str();
    sparse_481_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_482_str = 494;
inline bool Database_NoBench::has_sparse_482_str() const {
  return (_has_bits_[15] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_482_str() {
  _has_bits_[15] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_482_str() {
  _has_bits_[15] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_482_str() {
  if (sparse_482_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_482_str_->clear();
  }
  clear_has_sparse_482_str();
}
inline const ::std::string& Database_NoBench::sparse_482_str() const {
  return *sparse_482_str_;
}
inline void Database_NoBench::set_sparse_482_str(const ::std::string& value) {
  set_has_sparse_482_str();
  if (sparse_482_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_482_str_ = new ::std::string;
  }
  sparse_482_str_->assign(value);
}
inline void Database_NoBench::set_sparse_482_str(const char* value) {
  set_has_sparse_482_str();
  if (sparse_482_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_482_str_ = new ::std::string;
  }
  sparse_482_str_->assign(value);
}
inline void Database_NoBench::set_sparse_482_str(const char* value, size_t size) {
  set_has_sparse_482_str();
  if (sparse_482_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_482_str_ = new ::std::string;
  }
  sparse_482_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_482_str() {
  set_has_sparse_482_str();
  if (sparse_482_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_482_str_ = new ::std::string;
  }
  return sparse_482_str_;
}
inline ::std::string* Database_NoBench::release_sparse_482_str() {
  clear_has_sparse_482_str();
  if (sparse_482_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_482_str_;
    sparse_482_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_482_str(::std::string* sparse_482_str) {
  if (sparse_482_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_482_str_;
  }
  if (sparse_482_str) {
    set_has_sparse_482_str();
    sparse_482_str_ = sparse_482_str;
  } else {
    clear_has_sparse_482_str();
    sparse_482_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_483_str = 495;
inline bool Database_NoBench::has_sparse_483_str() const {
  return (_has_bits_[15] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_483_str() {
  _has_bits_[15] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_483_str() {
  _has_bits_[15] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_483_str() {
  if (sparse_483_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_483_str_->clear();
  }
  clear_has_sparse_483_str();
}
inline const ::std::string& Database_NoBench::sparse_483_str() const {
  return *sparse_483_str_;
}
inline void Database_NoBench::set_sparse_483_str(const ::std::string& value) {
  set_has_sparse_483_str();
  if (sparse_483_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_483_str_ = new ::std::string;
  }
  sparse_483_str_->assign(value);
}
inline void Database_NoBench::set_sparse_483_str(const char* value) {
  set_has_sparse_483_str();
  if (sparse_483_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_483_str_ = new ::std::string;
  }
  sparse_483_str_->assign(value);
}
inline void Database_NoBench::set_sparse_483_str(const char* value, size_t size) {
  set_has_sparse_483_str();
  if (sparse_483_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_483_str_ = new ::std::string;
  }
  sparse_483_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_483_str() {
  set_has_sparse_483_str();
  if (sparse_483_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_483_str_ = new ::std::string;
  }
  return sparse_483_str_;
}
inline ::std::string* Database_NoBench::release_sparse_483_str() {
  clear_has_sparse_483_str();
  if (sparse_483_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_483_str_;
    sparse_483_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_483_str(::std::string* sparse_483_str) {
  if (sparse_483_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_483_str_;
  }
  if (sparse_483_str) {
    set_has_sparse_483_str();
    sparse_483_str_ = sparse_483_str;
  } else {
    clear_has_sparse_483_str();
    sparse_483_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_484_str = 496;
inline bool Database_NoBench::has_sparse_484_str() const {
  return (_has_bits_[15] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_484_str() {
  _has_bits_[15] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_484_str() {
  _has_bits_[15] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_484_str() {
  if (sparse_484_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_484_str_->clear();
  }
  clear_has_sparse_484_str();
}
inline const ::std::string& Database_NoBench::sparse_484_str() const {
  return *sparse_484_str_;
}
inline void Database_NoBench::set_sparse_484_str(const ::std::string& value) {
  set_has_sparse_484_str();
  if (sparse_484_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_484_str_ = new ::std::string;
  }
  sparse_484_str_->assign(value);
}
inline void Database_NoBench::set_sparse_484_str(const char* value) {
  set_has_sparse_484_str();
  if (sparse_484_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_484_str_ = new ::std::string;
  }
  sparse_484_str_->assign(value);
}
inline void Database_NoBench::set_sparse_484_str(const char* value, size_t size) {
  set_has_sparse_484_str();
  if (sparse_484_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_484_str_ = new ::std::string;
  }
  sparse_484_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_484_str() {
  set_has_sparse_484_str();
  if (sparse_484_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_484_str_ = new ::std::string;
  }
  return sparse_484_str_;
}
inline ::std::string* Database_NoBench::release_sparse_484_str() {
  clear_has_sparse_484_str();
  if (sparse_484_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_484_str_;
    sparse_484_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_484_str(::std::string* sparse_484_str) {
  if (sparse_484_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_484_str_;
  }
  if (sparse_484_str) {
    set_has_sparse_484_str();
    sparse_484_str_ = sparse_484_str;
  } else {
    clear_has_sparse_484_str();
    sparse_484_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_485_str = 497;
inline bool Database_NoBench::has_sparse_485_str() const {
  return (_has_bits_[15] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_485_str() {
  _has_bits_[15] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_485_str() {
  _has_bits_[15] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_485_str() {
  if (sparse_485_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_485_str_->clear();
  }
  clear_has_sparse_485_str();
}
inline const ::std::string& Database_NoBench::sparse_485_str() const {
  return *sparse_485_str_;
}
inline void Database_NoBench::set_sparse_485_str(const ::std::string& value) {
  set_has_sparse_485_str();
  if (sparse_485_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_485_str_ = new ::std::string;
  }
  sparse_485_str_->assign(value);
}
inline void Database_NoBench::set_sparse_485_str(const char* value) {
  set_has_sparse_485_str();
  if (sparse_485_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_485_str_ = new ::std::string;
  }
  sparse_485_str_->assign(value);
}
inline void Database_NoBench::set_sparse_485_str(const char* value, size_t size) {
  set_has_sparse_485_str();
  if (sparse_485_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_485_str_ = new ::std::string;
  }
  sparse_485_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_485_str() {
  set_has_sparse_485_str();
  if (sparse_485_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_485_str_ = new ::std::string;
  }
  return sparse_485_str_;
}
inline ::std::string* Database_NoBench::release_sparse_485_str() {
  clear_has_sparse_485_str();
  if (sparse_485_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_485_str_;
    sparse_485_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_485_str(::std::string* sparse_485_str) {
  if (sparse_485_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_485_str_;
  }
  if (sparse_485_str) {
    set_has_sparse_485_str();
    sparse_485_str_ = sparse_485_str;
  } else {
    clear_has_sparse_485_str();
    sparse_485_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_486_str = 498;
inline bool Database_NoBench::has_sparse_486_str() const {
  return (_has_bits_[15] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_486_str() {
  _has_bits_[15] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_486_str() {
  _has_bits_[15] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_486_str() {
  if (sparse_486_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_486_str_->clear();
  }
  clear_has_sparse_486_str();
}
inline const ::std::string& Database_NoBench::sparse_486_str() const {
  return *sparse_486_str_;
}
inline void Database_NoBench::set_sparse_486_str(const ::std::string& value) {
  set_has_sparse_486_str();
  if (sparse_486_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_486_str_ = new ::std::string;
  }
  sparse_486_str_->assign(value);
}
inline void Database_NoBench::set_sparse_486_str(const char* value) {
  set_has_sparse_486_str();
  if (sparse_486_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_486_str_ = new ::std::string;
  }
  sparse_486_str_->assign(value);
}
inline void Database_NoBench::set_sparse_486_str(const char* value, size_t size) {
  set_has_sparse_486_str();
  if (sparse_486_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_486_str_ = new ::std::string;
  }
  sparse_486_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_486_str() {
  set_has_sparse_486_str();
  if (sparse_486_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_486_str_ = new ::std::string;
  }
  return sparse_486_str_;
}
inline ::std::string* Database_NoBench::release_sparse_486_str() {
  clear_has_sparse_486_str();
  if (sparse_486_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_486_str_;
    sparse_486_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_486_str(::std::string* sparse_486_str) {
  if (sparse_486_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_486_str_;
  }
  if (sparse_486_str) {
    set_has_sparse_486_str();
    sparse_486_str_ = sparse_486_str;
  } else {
    clear_has_sparse_486_str();
    sparse_486_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_487_str = 499;
inline bool Database_NoBench::has_sparse_487_str() const {
  return (_has_bits_[15] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_487_str() {
  _has_bits_[15] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_487_str() {
  _has_bits_[15] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_487_str() {
  if (sparse_487_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_487_str_->clear();
  }
  clear_has_sparse_487_str();
}
inline const ::std::string& Database_NoBench::sparse_487_str() const {
  return *sparse_487_str_;
}
inline void Database_NoBench::set_sparse_487_str(const ::std::string& value) {
  set_has_sparse_487_str();
  if (sparse_487_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_487_str_ = new ::std::string;
  }
  sparse_487_str_->assign(value);
}
inline void Database_NoBench::set_sparse_487_str(const char* value) {
  set_has_sparse_487_str();
  if (sparse_487_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_487_str_ = new ::std::string;
  }
  sparse_487_str_->assign(value);
}
inline void Database_NoBench::set_sparse_487_str(const char* value, size_t size) {
  set_has_sparse_487_str();
  if (sparse_487_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_487_str_ = new ::std::string;
  }
  sparse_487_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_487_str() {
  set_has_sparse_487_str();
  if (sparse_487_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_487_str_ = new ::std::string;
  }
  return sparse_487_str_;
}
inline ::std::string* Database_NoBench::release_sparse_487_str() {
  clear_has_sparse_487_str();
  if (sparse_487_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_487_str_;
    sparse_487_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_487_str(::std::string* sparse_487_str) {
  if (sparse_487_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_487_str_;
  }
  if (sparse_487_str) {
    set_has_sparse_487_str();
    sparse_487_str_ = sparse_487_str;
  } else {
    clear_has_sparse_487_str();
    sparse_487_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_488_str = 500;
inline bool Database_NoBench::has_sparse_488_str() const {
  return (_has_bits_[15] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_488_str() {
  _has_bits_[15] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_488_str() {
  _has_bits_[15] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_488_str() {
  if (sparse_488_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_488_str_->clear();
  }
  clear_has_sparse_488_str();
}
inline const ::std::string& Database_NoBench::sparse_488_str() const {
  return *sparse_488_str_;
}
inline void Database_NoBench::set_sparse_488_str(const ::std::string& value) {
  set_has_sparse_488_str();
  if (sparse_488_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_488_str_ = new ::std::string;
  }
  sparse_488_str_->assign(value);
}
inline void Database_NoBench::set_sparse_488_str(const char* value) {
  set_has_sparse_488_str();
  if (sparse_488_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_488_str_ = new ::std::string;
  }
  sparse_488_str_->assign(value);
}
inline void Database_NoBench::set_sparse_488_str(const char* value, size_t size) {
  set_has_sparse_488_str();
  if (sparse_488_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_488_str_ = new ::std::string;
  }
  sparse_488_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_488_str() {
  set_has_sparse_488_str();
  if (sparse_488_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_488_str_ = new ::std::string;
  }
  return sparse_488_str_;
}
inline ::std::string* Database_NoBench::release_sparse_488_str() {
  clear_has_sparse_488_str();
  if (sparse_488_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_488_str_;
    sparse_488_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_488_str(::std::string* sparse_488_str) {
  if (sparse_488_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_488_str_;
  }
  if (sparse_488_str) {
    set_has_sparse_488_str();
    sparse_488_str_ = sparse_488_str;
  } else {
    clear_has_sparse_488_str();
    sparse_488_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_489_str = 501;
inline bool Database_NoBench::has_sparse_489_str() const {
  return (_has_bits_[15] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_489_str() {
  _has_bits_[15] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_489_str() {
  _has_bits_[15] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_489_str() {
  if (sparse_489_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_489_str_->clear();
  }
  clear_has_sparse_489_str();
}
inline const ::std::string& Database_NoBench::sparse_489_str() const {
  return *sparse_489_str_;
}
inline void Database_NoBench::set_sparse_489_str(const ::std::string& value) {
  set_has_sparse_489_str();
  if (sparse_489_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_489_str_ = new ::std::string;
  }
  sparse_489_str_->assign(value);
}
inline void Database_NoBench::set_sparse_489_str(const char* value) {
  set_has_sparse_489_str();
  if (sparse_489_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_489_str_ = new ::std::string;
  }
  sparse_489_str_->assign(value);
}
inline void Database_NoBench::set_sparse_489_str(const char* value, size_t size) {
  set_has_sparse_489_str();
  if (sparse_489_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_489_str_ = new ::std::string;
  }
  sparse_489_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_489_str() {
  set_has_sparse_489_str();
  if (sparse_489_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_489_str_ = new ::std::string;
  }
  return sparse_489_str_;
}
inline ::std::string* Database_NoBench::release_sparse_489_str() {
  clear_has_sparse_489_str();
  if (sparse_489_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_489_str_;
    sparse_489_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_489_str(::std::string* sparse_489_str) {
  if (sparse_489_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_489_str_;
  }
  if (sparse_489_str) {
    set_has_sparse_489_str();
    sparse_489_str_ = sparse_489_str;
  } else {
    clear_has_sparse_489_str();
    sparse_489_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_490_str = 502;
inline bool Database_NoBench::has_sparse_490_str() const {
  return (_has_bits_[15] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_490_str() {
  _has_bits_[15] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_490_str() {
  _has_bits_[15] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_490_str() {
  if (sparse_490_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_490_str_->clear();
  }
  clear_has_sparse_490_str();
}
inline const ::std::string& Database_NoBench::sparse_490_str() const {
  return *sparse_490_str_;
}
inline void Database_NoBench::set_sparse_490_str(const ::std::string& value) {
  set_has_sparse_490_str();
  if (sparse_490_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_490_str_ = new ::std::string;
  }
  sparse_490_str_->assign(value);
}
inline void Database_NoBench::set_sparse_490_str(const char* value) {
  set_has_sparse_490_str();
  if (sparse_490_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_490_str_ = new ::std::string;
  }
  sparse_490_str_->assign(value);
}
inline void Database_NoBench::set_sparse_490_str(const char* value, size_t size) {
  set_has_sparse_490_str();
  if (sparse_490_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_490_str_ = new ::std::string;
  }
  sparse_490_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_490_str() {
  set_has_sparse_490_str();
  if (sparse_490_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_490_str_ = new ::std::string;
  }
  return sparse_490_str_;
}
inline ::std::string* Database_NoBench::release_sparse_490_str() {
  clear_has_sparse_490_str();
  if (sparse_490_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_490_str_;
    sparse_490_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_490_str(::std::string* sparse_490_str) {
  if (sparse_490_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_490_str_;
  }
  if (sparse_490_str) {
    set_has_sparse_490_str();
    sparse_490_str_ = sparse_490_str;
  } else {
    clear_has_sparse_490_str();
    sparse_490_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_491_str = 503;
inline bool Database_NoBench::has_sparse_491_str() const {
  return (_has_bits_[15] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_491_str() {
  _has_bits_[15] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_491_str() {
  _has_bits_[15] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_491_str() {
  if (sparse_491_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_491_str_->clear();
  }
  clear_has_sparse_491_str();
}
inline const ::std::string& Database_NoBench::sparse_491_str() const {
  return *sparse_491_str_;
}
inline void Database_NoBench::set_sparse_491_str(const ::std::string& value) {
  set_has_sparse_491_str();
  if (sparse_491_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_491_str_ = new ::std::string;
  }
  sparse_491_str_->assign(value);
}
inline void Database_NoBench::set_sparse_491_str(const char* value) {
  set_has_sparse_491_str();
  if (sparse_491_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_491_str_ = new ::std::string;
  }
  sparse_491_str_->assign(value);
}
inline void Database_NoBench::set_sparse_491_str(const char* value, size_t size) {
  set_has_sparse_491_str();
  if (sparse_491_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_491_str_ = new ::std::string;
  }
  sparse_491_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_491_str() {
  set_has_sparse_491_str();
  if (sparse_491_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_491_str_ = new ::std::string;
  }
  return sparse_491_str_;
}
inline ::std::string* Database_NoBench::release_sparse_491_str() {
  clear_has_sparse_491_str();
  if (sparse_491_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_491_str_;
    sparse_491_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_491_str(::std::string* sparse_491_str) {
  if (sparse_491_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_491_str_;
  }
  if (sparse_491_str) {
    set_has_sparse_491_str();
    sparse_491_str_ = sparse_491_str;
  } else {
    clear_has_sparse_491_str();
    sparse_491_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_492_str = 504;
inline bool Database_NoBench::has_sparse_492_str() const {
  return (_has_bits_[15] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_492_str() {
  _has_bits_[15] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_492_str() {
  _has_bits_[15] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_492_str() {
  if (sparse_492_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_492_str_->clear();
  }
  clear_has_sparse_492_str();
}
inline const ::std::string& Database_NoBench::sparse_492_str() const {
  return *sparse_492_str_;
}
inline void Database_NoBench::set_sparse_492_str(const ::std::string& value) {
  set_has_sparse_492_str();
  if (sparse_492_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_492_str_ = new ::std::string;
  }
  sparse_492_str_->assign(value);
}
inline void Database_NoBench::set_sparse_492_str(const char* value) {
  set_has_sparse_492_str();
  if (sparse_492_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_492_str_ = new ::std::string;
  }
  sparse_492_str_->assign(value);
}
inline void Database_NoBench::set_sparse_492_str(const char* value, size_t size) {
  set_has_sparse_492_str();
  if (sparse_492_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_492_str_ = new ::std::string;
  }
  sparse_492_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_492_str() {
  set_has_sparse_492_str();
  if (sparse_492_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_492_str_ = new ::std::string;
  }
  return sparse_492_str_;
}
inline ::std::string* Database_NoBench::release_sparse_492_str() {
  clear_has_sparse_492_str();
  if (sparse_492_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_492_str_;
    sparse_492_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_492_str(::std::string* sparse_492_str) {
  if (sparse_492_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_492_str_;
  }
  if (sparse_492_str) {
    set_has_sparse_492_str();
    sparse_492_str_ = sparse_492_str;
  } else {
    clear_has_sparse_492_str();
    sparse_492_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_493_str = 505;
inline bool Database_NoBench::has_sparse_493_str() const {
  return (_has_bits_[15] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_493_str() {
  _has_bits_[15] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_493_str() {
  _has_bits_[15] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_493_str() {
  if (sparse_493_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_493_str_->clear();
  }
  clear_has_sparse_493_str();
}
inline const ::std::string& Database_NoBench::sparse_493_str() const {
  return *sparse_493_str_;
}
inline void Database_NoBench::set_sparse_493_str(const ::std::string& value) {
  set_has_sparse_493_str();
  if (sparse_493_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_493_str_ = new ::std::string;
  }
  sparse_493_str_->assign(value);
}
inline void Database_NoBench::set_sparse_493_str(const char* value) {
  set_has_sparse_493_str();
  if (sparse_493_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_493_str_ = new ::std::string;
  }
  sparse_493_str_->assign(value);
}
inline void Database_NoBench::set_sparse_493_str(const char* value, size_t size) {
  set_has_sparse_493_str();
  if (sparse_493_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_493_str_ = new ::std::string;
  }
  sparse_493_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_493_str() {
  set_has_sparse_493_str();
  if (sparse_493_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_493_str_ = new ::std::string;
  }
  return sparse_493_str_;
}
inline ::std::string* Database_NoBench::release_sparse_493_str() {
  clear_has_sparse_493_str();
  if (sparse_493_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_493_str_;
    sparse_493_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_493_str(::std::string* sparse_493_str) {
  if (sparse_493_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_493_str_;
  }
  if (sparse_493_str) {
    set_has_sparse_493_str();
    sparse_493_str_ = sparse_493_str;
  } else {
    clear_has_sparse_493_str();
    sparse_493_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_494_str = 506;
inline bool Database_NoBench::has_sparse_494_str() const {
  return (_has_bits_[15] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_494_str() {
  _has_bits_[15] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_494_str() {
  _has_bits_[15] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_494_str() {
  if (sparse_494_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_494_str_->clear();
  }
  clear_has_sparse_494_str();
}
inline const ::std::string& Database_NoBench::sparse_494_str() const {
  return *sparse_494_str_;
}
inline void Database_NoBench::set_sparse_494_str(const ::std::string& value) {
  set_has_sparse_494_str();
  if (sparse_494_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_494_str_ = new ::std::string;
  }
  sparse_494_str_->assign(value);
}
inline void Database_NoBench::set_sparse_494_str(const char* value) {
  set_has_sparse_494_str();
  if (sparse_494_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_494_str_ = new ::std::string;
  }
  sparse_494_str_->assign(value);
}
inline void Database_NoBench::set_sparse_494_str(const char* value, size_t size) {
  set_has_sparse_494_str();
  if (sparse_494_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_494_str_ = new ::std::string;
  }
  sparse_494_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_494_str() {
  set_has_sparse_494_str();
  if (sparse_494_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_494_str_ = new ::std::string;
  }
  return sparse_494_str_;
}
inline ::std::string* Database_NoBench::release_sparse_494_str() {
  clear_has_sparse_494_str();
  if (sparse_494_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_494_str_;
    sparse_494_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_494_str(::std::string* sparse_494_str) {
  if (sparse_494_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_494_str_;
  }
  if (sparse_494_str) {
    set_has_sparse_494_str();
    sparse_494_str_ = sparse_494_str;
  } else {
    clear_has_sparse_494_str();
    sparse_494_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_495_str = 507;
inline bool Database_NoBench::has_sparse_495_str() const {
  return (_has_bits_[15] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_495_str() {
  _has_bits_[15] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_495_str() {
  _has_bits_[15] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_495_str() {
  if (sparse_495_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_495_str_->clear();
  }
  clear_has_sparse_495_str();
}
inline const ::std::string& Database_NoBench::sparse_495_str() const {
  return *sparse_495_str_;
}
inline void Database_NoBench::set_sparse_495_str(const ::std::string& value) {
  set_has_sparse_495_str();
  if (sparse_495_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_495_str_ = new ::std::string;
  }
  sparse_495_str_->assign(value);
}
inline void Database_NoBench::set_sparse_495_str(const char* value) {
  set_has_sparse_495_str();
  if (sparse_495_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_495_str_ = new ::std::string;
  }
  sparse_495_str_->assign(value);
}
inline void Database_NoBench::set_sparse_495_str(const char* value, size_t size) {
  set_has_sparse_495_str();
  if (sparse_495_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_495_str_ = new ::std::string;
  }
  sparse_495_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_495_str() {
  set_has_sparse_495_str();
  if (sparse_495_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_495_str_ = new ::std::string;
  }
  return sparse_495_str_;
}
inline ::std::string* Database_NoBench::release_sparse_495_str() {
  clear_has_sparse_495_str();
  if (sparse_495_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_495_str_;
    sparse_495_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_495_str(::std::string* sparse_495_str) {
  if (sparse_495_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_495_str_;
  }
  if (sparse_495_str) {
    set_has_sparse_495_str();
    sparse_495_str_ = sparse_495_str;
  } else {
    clear_has_sparse_495_str();
    sparse_495_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_496_str = 508;
inline bool Database_NoBench::has_sparse_496_str() const {
  return (_has_bits_[15] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_496_str() {
  _has_bits_[15] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_496_str() {
  _has_bits_[15] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_496_str() {
  if (sparse_496_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_496_str_->clear();
  }
  clear_has_sparse_496_str();
}
inline const ::std::string& Database_NoBench::sparse_496_str() const {
  return *sparse_496_str_;
}
inline void Database_NoBench::set_sparse_496_str(const ::std::string& value) {
  set_has_sparse_496_str();
  if (sparse_496_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_496_str_ = new ::std::string;
  }
  sparse_496_str_->assign(value);
}
inline void Database_NoBench::set_sparse_496_str(const char* value) {
  set_has_sparse_496_str();
  if (sparse_496_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_496_str_ = new ::std::string;
  }
  sparse_496_str_->assign(value);
}
inline void Database_NoBench::set_sparse_496_str(const char* value, size_t size) {
  set_has_sparse_496_str();
  if (sparse_496_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_496_str_ = new ::std::string;
  }
  sparse_496_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_496_str() {
  set_has_sparse_496_str();
  if (sparse_496_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_496_str_ = new ::std::string;
  }
  return sparse_496_str_;
}
inline ::std::string* Database_NoBench::release_sparse_496_str() {
  clear_has_sparse_496_str();
  if (sparse_496_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_496_str_;
    sparse_496_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_496_str(::std::string* sparse_496_str) {
  if (sparse_496_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_496_str_;
  }
  if (sparse_496_str) {
    set_has_sparse_496_str();
    sparse_496_str_ = sparse_496_str;
  } else {
    clear_has_sparse_496_str();
    sparse_496_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_497_str = 509;
inline bool Database_NoBench::has_sparse_497_str() const {
  return (_has_bits_[15] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_497_str() {
  _has_bits_[15] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_497_str() {
  _has_bits_[15] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_497_str() {
  if (sparse_497_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_497_str_->clear();
  }
  clear_has_sparse_497_str();
}
inline const ::std::string& Database_NoBench::sparse_497_str() const {
  return *sparse_497_str_;
}
inline void Database_NoBench::set_sparse_497_str(const ::std::string& value) {
  set_has_sparse_497_str();
  if (sparse_497_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_497_str_ = new ::std::string;
  }
  sparse_497_str_->assign(value);
}
inline void Database_NoBench::set_sparse_497_str(const char* value) {
  set_has_sparse_497_str();
  if (sparse_497_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_497_str_ = new ::std::string;
  }
  sparse_497_str_->assign(value);
}
inline void Database_NoBench::set_sparse_497_str(const char* value, size_t size) {
  set_has_sparse_497_str();
  if (sparse_497_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_497_str_ = new ::std::string;
  }
  sparse_497_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_497_str() {
  set_has_sparse_497_str();
  if (sparse_497_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_497_str_ = new ::std::string;
  }
  return sparse_497_str_;
}
inline ::std::string* Database_NoBench::release_sparse_497_str() {
  clear_has_sparse_497_str();
  if (sparse_497_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_497_str_;
    sparse_497_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_497_str(::std::string* sparse_497_str) {
  if (sparse_497_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_497_str_;
  }
  if (sparse_497_str) {
    set_has_sparse_497_str();
    sparse_497_str_ = sparse_497_str;
  } else {
    clear_has_sparse_497_str();
    sparse_497_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_498_str = 510;
inline bool Database_NoBench::has_sparse_498_str() const {
  return (_has_bits_[15] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_498_str() {
  _has_bits_[15] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_498_str() {
  _has_bits_[15] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_498_str() {
  if (sparse_498_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_498_str_->clear();
  }
  clear_has_sparse_498_str();
}
inline const ::std::string& Database_NoBench::sparse_498_str() const {
  return *sparse_498_str_;
}
inline void Database_NoBench::set_sparse_498_str(const ::std::string& value) {
  set_has_sparse_498_str();
  if (sparse_498_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_498_str_ = new ::std::string;
  }
  sparse_498_str_->assign(value);
}
inline void Database_NoBench::set_sparse_498_str(const char* value) {
  set_has_sparse_498_str();
  if (sparse_498_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_498_str_ = new ::std::string;
  }
  sparse_498_str_->assign(value);
}
inline void Database_NoBench::set_sparse_498_str(const char* value, size_t size) {
  set_has_sparse_498_str();
  if (sparse_498_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_498_str_ = new ::std::string;
  }
  sparse_498_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_498_str() {
  set_has_sparse_498_str();
  if (sparse_498_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_498_str_ = new ::std::string;
  }
  return sparse_498_str_;
}
inline ::std::string* Database_NoBench::release_sparse_498_str() {
  clear_has_sparse_498_str();
  if (sparse_498_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_498_str_;
    sparse_498_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_498_str(::std::string* sparse_498_str) {
  if (sparse_498_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_498_str_;
  }
  if (sparse_498_str) {
    set_has_sparse_498_str();
    sparse_498_str_ = sparse_498_str;
  } else {
    clear_has_sparse_498_str();
    sparse_498_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_499_str = 511;
inline bool Database_NoBench::has_sparse_499_str() const {
  return (_has_bits_[16] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_499_str() {
  _has_bits_[16] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_499_str() {
  _has_bits_[16] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_499_str() {
  if (sparse_499_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_499_str_->clear();
  }
  clear_has_sparse_499_str();
}
inline const ::std::string& Database_NoBench::sparse_499_str() const {
  return *sparse_499_str_;
}
inline void Database_NoBench::set_sparse_499_str(const ::std::string& value) {
  set_has_sparse_499_str();
  if (sparse_499_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_499_str_ = new ::std::string;
  }
  sparse_499_str_->assign(value);
}
inline void Database_NoBench::set_sparse_499_str(const char* value) {
  set_has_sparse_499_str();
  if (sparse_499_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_499_str_ = new ::std::string;
  }
  sparse_499_str_->assign(value);
}
inline void Database_NoBench::set_sparse_499_str(const char* value, size_t size) {
  set_has_sparse_499_str();
  if (sparse_499_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_499_str_ = new ::std::string;
  }
  sparse_499_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_499_str() {
  set_has_sparse_499_str();
  if (sparse_499_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_499_str_ = new ::std::string;
  }
  return sparse_499_str_;
}
inline ::std::string* Database_NoBench::release_sparse_499_str() {
  clear_has_sparse_499_str();
  if (sparse_499_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_499_str_;
    sparse_499_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_499_str(::std::string* sparse_499_str) {
  if (sparse_499_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_499_str_;
  }
  if (sparse_499_str) {
    set_has_sparse_499_str();
    sparse_499_str_ = sparse_499_str;
  } else {
    clear_has_sparse_499_str();
    sparse_499_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_500_str = 512;
inline bool Database_NoBench::has_sparse_500_str() const {
  return (_has_bits_[16] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_500_str() {
  _has_bits_[16] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_500_str() {
  _has_bits_[16] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_500_str() {
  if (sparse_500_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_500_str_->clear();
  }
  clear_has_sparse_500_str();
}
inline const ::std::string& Database_NoBench::sparse_500_str() const {
  return *sparse_500_str_;
}
inline void Database_NoBench::set_sparse_500_str(const ::std::string& value) {
  set_has_sparse_500_str();
  if (sparse_500_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_500_str_ = new ::std::string;
  }
  sparse_500_str_->assign(value);
}
inline void Database_NoBench::set_sparse_500_str(const char* value) {
  set_has_sparse_500_str();
  if (sparse_500_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_500_str_ = new ::std::string;
  }
  sparse_500_str_->assign(value);
}
inline void Database_NoBench::set_sparse_500_str(const char* value, size_t size) {
  set_has_sparse_500_str();
  if (sparse_500_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_500_str_ = new ::std::string;
  }
  sparse_500_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_500_str() {
  set_has_sparse_500_str();
  if (sparse_500_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_500_str_ = new ::std::string;
  }
  return sparse_500_str_;
}
inline ::std::string* Database_NoBench::release_sparse_500_str() {
  clear_has_sparse_500_str();
  if (sparse_500_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_500_str_;
    sparse_500_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_500_str(::std::string* sparse_500_str) {
  if (sparse_500_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_500_str_;
  }
  if (sparse_500_str) {
    set_has_sparse_500_str();
    sparse_500_str_ = sparse_500_str;
  } else {
    clear_has_sparse_500_str();
    sparse_500_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_501_str = 513;
inline bool Database_NoBench::has_sparse_501_str() const {
  return (_has_bits_[16] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_501_str() {
  _has_bits_[16] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_501_str() {
  _has_bits_[16] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_501_str() {
  if (sparse_501_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_501_str_->clear();
  }
  clear_has_sparse_501_str();
}
inline const ::std::string& Database_NoBench::sparse_501_str() const {
  return *sparse_501_str_;
}
inline void Database_NoBench::set_sparse_501_str(const ::std::string& value) {
  set_has_sparse_501_str();
  if (sparse_501_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_501_str_ = new ::std::string;
  }
  sparse_501_str_->assign(value);
}
inline void Database_NoBench::set_sparse_501_str(const char* value) {
  set_has_sparse_501_str();
  if (sparse_501_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_501_str_ = new ::std::string;
  }
  sparse_501_str_->assign(value);
}
inline void Database_NoBench::set_sparse_501_str(const char* value, size_t size) {
  set_has_sparse_501_str();
  if (sparse_501_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_501_str_ = new ::std::string;
  }
  sparse_501_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_501_str() {
  set_has_sparse_501_str();
  if (sparse_501_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_501_str_ = new ::std::string;
  }
  return sparse_501_str_;
}
inline ::std::string* Database_NoBench::release_sparse_501_str() {
  clear_has_sparse_501_str();
  if (sparse_501_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_501_str_;
    sparse_501_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_501_str(::std::string* sparse_501_str) {
  if (sparse_501_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_501_str_;
  }
  if (sparse_501_str) {
    set_has_sparse_501_str();
    sparse_501_str_ = sparse_501_str;
  } else {
    clear_has_sparse_501_str();
    sparse_501_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_502_str = 514;
inline bool Database_NoBench::has_sparse_502_str() const {
  return (_has_bits_[16] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_502_str() {
  _has_bits_[16] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_502_str() {
  _has_bits_[16] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_502_str() {
  if (sparse_502_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_502_str_->clear();
  }
  clear_has_sparse_502_str();
}
inline const ::std::string& Database_NoBench::sparse_502_str() const {
  return *sparse_502_str_;
}
inline void Database_NoBench::set_sparse_502_str(const ::std::string& value) {
  set_has_sparse_502_str();
  if (sparse_502_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_502_str_ = new ::std::string;
  }
  sparse_502_str_->assign(value);
}
inline void Database_NoBench::set_sparse_502_str(const char* value) {
  set_has_sparse_502_str();
  if (sparse_502_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_502_str_ = new ::std::string;
  }
  sparse_502_str_->assign(value);
}
inline void Database_NoBench::set_sparse_502_str(const char* value, size_t size) {
  set_has_sparse_502_str();
  if (sparse_502_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_502_str_ = new ::std::string;
  }
  sparse_502_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_502_str() {
  set_has_sparse_502_str();
  if (sparse_502_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_502_str_ = new ::std::string;
  }
  return sparse_502_str_;
}
inline ::std::string* Database_NoBench::release_sparse_502_str() {
  clear_has_sparse_502_str();
  if (sparse_502_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_502_str_;
    sparse_502_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_502_str(::std::string* sparse_502_str) {
  if (sparse_502_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_502_str_;
  }
  if (sparse_502_str) {
    set_has_sparse_502_str();
    sparse_502_str_ = sparse_502_str;
  } else {
    clear_has_sparse_502_str();
    sparse_502_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_503_str = 515;
inline bool Database_NoBench::has_sparse_503_str() const {
  return (_has_bits_[16] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_503_str() {
  _has_bits_[16] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_503_str() {
  _has_bits_[16] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_503_str() {
  if (sparse_503_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_503_str_->clear();
  }
  clear_has_sparse_503_str();
}
inline const ::std::string& Database_NoBench::sparse_503_str() const {
  return *sparse_503_str_;
}
inline void Database_NoBench::set_sparse_503_str(const ::std::string& value) {
  set_has_sparse_503_str();
  if (sparse_503_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_503_str_ = new ::std::string;
  }
  sparse_503_str_->assign(value);
}
inline void Database_NoBench::set_sparse_503_str(const char* value) {
  set_has_sparse_503_str();
  if (sparse_503_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_503_str_ = new ::std::string;
  }
  sparse_503_str_->assign(value);
}
inline void Database_NoBench::set_sparse_503_str(const char* value, size_t size) {
  set_has_sparse_503_str();
  if (sparse_503_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_503_str_ = new ::std::string;
  }
  sparse_503_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_503_str() {
  set_has_sparse_503_str();
  if (sparse_503_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_503_str_ = new ::std::string;
  }
  return sparse_503_str_;
}
inline ::std::string* Database_NoBench::release_sparse_503_str() {
  clear_has_sparse_503_str();
  if (sparse_503_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_503_str_;
    sparse_503_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_503_str(::std::string* sparse_503_str) {
  if (sparse_503_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_503_str_;
  }
  if (sparse_503_str) {
    set_has_sparse_503_str();
    sparse_503_str_ = sparse_503_str;
  } else {
    clear_has_sparse_503_str();
    sparse_503_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_504_str = 516;
inline bool Database_NoBench::has_sparse_504_str() const {
  return (_has_bits_[16] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_504_str() {
  _has_bits_[16] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_504_str() {
  _has_bits_[16] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_504_str() {
  if (sparse_504_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_504_str_->clear();
  }
  clear_has_sparse_504_str();
}
inline const ::std::string& Database_NoBench::sparse_504_str() const {
  return *sparse_504_str_;
}
inline void Database_NoBench::set_sparse_504_str(const ::std::string& value) {
  set_has_sparse_504_str();
  if (sparse_504_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_504_str_ = new ::std::string;
  }
  sparse_504_str_->assign(value);
}
inline void Database_NoBench::set_sparse_504_str(const char* value) {
  set_has_sparse_504_str();
  if (sparse_504_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_504_str_ = new ::std::string;
  }
  sparse_504_str_->assign(value);
}
inline void Database_NoBench::set_sparse_504_str(const char* value, size_t size) {
  set_has_sparse_504_str();
  if (sparse_504_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_504_str_ = new ::std::string;
  }
  sparse_504_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_504_str() {
  set_has_sparse_504_str();
  if (sparse_504_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_504_str_ = new ::std::string;
  }
  return sparse_504_str_;
}
inline ::std::string* Database_NoBench::release_sparse_504_str() {
  clear_has_sparse_504_str();
  if (sparse_504_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_504_str_;
    sparse_504_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_504_str(::std::string* sparse_504_str) {
  if (sparse_504_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_504_str_;
  }
  if (sparse_504_str) {
    set_has_sparse_504_str();
    sparse_504_str_ = sparse_504_str;
  } else {
    clear_has_sparse_504_str();
    sparse_504_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_505_str = 517;
inline bool Database_NoBench::has_sparse_505_str() const {
  return (_has_bits_[16] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_505_str() {
  _has_bits_[16] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_505_str() {
  _has_bits_[16] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_505_str() {
  if (sparse_505_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_505_str_->clear();
  }
  clear_has_sparse_505_str();
}
inline const ::std::string& Database_NoBench::sparse_505_str() const {
  return *sparse_505_str_;
}
inline void Database_NoBench::set_sparse_505_str(const ::std::string& value) {
  set_has_sparse_505_str();
  if (sparse_505_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_505_str_ = new ::std::string;
  }
  sparse_505_str_->assign(value);
}
inline void Database_NoBench::set_sparse_505_str(const char* value) {
  set_has_sparse_505_str();
  if (sparse_505_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_505_str_ = new ::std::string;
  }
  sparse_505_str_->assign(value);
}
inline void Database_NoBench::set_sparse_505_str(const char* value, size_t size) {
  set_has_sparse_505_str();
  if (sparse_505_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_505_str_ = new ::std::string;
  }
  sparse_505_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_505_str() {
  set_has_sparse_505_str();
  if (sparse_505_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_505_str_ = new ::std::string;
  }
  return sparse_505_str_;
}
inline ::std::string* Database_NoBench::release_sparse_505_str() {
  clear_has_sparse_505_str();
  if (sparse_505_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_505_str_;
    sparse_505_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_505_str(::std::string* sparse_505_str) {
  if (sparse_505_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_505_str_;
  }
  if (sparse_505_str) {
    set_has_sparse_505_str();
    sparse_505_str_ = sparse_505_str;
  } else {
    clear_has_sparse_505_str();
    sparse_505_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_506_str = 518;
inline bool Database_NoBench::has_sparse_506_str() const {
  return (_has_bits_[16] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_506_str() {
  _has_bits_[16] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_506_str() {
  _has_bits_[16] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_506_str() {
  if (sparse_506_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_506_str_->clear();
  }
  clear_has_sparse_506_str();
}
inline const ::std::string& Database_NoBench::sparse_506_str() const {
  return *sparse_506_str_;
}
inline void Database_NoBench::set_sparse_506_str(const ::std::string& value) {
  set_has_sparse_506_str();
  if (sparse_506_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_506_str_ = new ::std::string;
  }
  sparse_506_str_->assign(value);
}
inline void Database_NoBench::set_sparse_506_str(const char* value) {
  set_has_sparse_506_str();
  if (sparse_506_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_506_str_ = new ::std::string;
  }
  sparse_506_str_->assign(value);
}
inline void Database_NoBench::set_sparse_506_str(const char* value, size_t size) {
  set_has_sparse_506_str();
  if (sparse_506_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_506_str_ = new ::std::string;
  }
  sparse_506_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_506_str() {
  set_has_sparse_506_str();
  if (sparse_506_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_506_str_ = new ::std::string;
  }
  return sparse_506_str_;
}
inline ::std::string* Database_NoBench::release_sparse_506_str() {
  clear_has_sparse_506_str();
  if (sparse_506_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_506_str_;
    sparse_506_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_506_str(::std::string* sparse_506_str) {
  if (sparse_506_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_506_str_;
  }
  if (sparse_506_str) {
    set_has_sparse_506_str();
    sparse_506_str_ = sparse_506_str;
  } else {
    clear_has_sparse_506_str();
    sparse_506_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_507_str = 519;
inline bool Database_NoBench::has_sparse_507_str() const {
  return (_has_bits_[16] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_507_str() {
  _has_bits_[16] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_507_str() {
  _has_bits_[16] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_507_str() {
  if (sparse_507_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_507_str_->clear();
  }
  clear_has_sparse_507_str();
}
inline const ::std::string& Database_NoBench::sparse_507_str() const {
  return *sparse_507_str_;
}
inline void Database_NoBench::set_sparse_507_str(const ::std::string& value) {
  set_has_sparse_507_str();
  if (sparse_507_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_507_str_ = new ::std::string;
  }
  sparse_507_str_->assign(value);
}
inline void Database_NoBench::set_sparse_507_str(const char* value) {
  set_has_sparse_507_str();
  if (sparse_507_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_507_str_ = new ::std::string;
  }
  sparse_507_str_->assign(value);
}
inline void Database_NoBench::set_sparse_507_str(const char* value, size_t size) {
  set_has_sparse_507_str();
  if (sparse_507_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_507_str_ = new ::std::string;
  }
  sparse_507_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_507_str() {
  set_has_sparse_507_str();
  if (sparse_507_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_507_str_ = new ::std::string;
  }
  return sparse_507_str_;
}
inline ::std::string* Database_NoBench::release_sparse_507_str() {
  clear_has_sparse_507_str();
  if (sparse_507_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_507_str_;
    sparse_507_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_507_str(::std::string* sparse_507_str) {
  if (sparse_507_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_507_str_;
  }
  if (sparse_507_str) {
    set_has_sparse_507_str();
    sparse_507_str_ = sparse_507_str;
  } else {
    clear_has_sparse_507_str();
    sparse_507_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_508_str = 520;
inline bool Database_NoBench::has_sparse_508_str() const {
  return (_has_bits_[16] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_508_str() {
  _has_bits_[16] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_508_str() {
  _has_bits_[16] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_508_str() {
  if (sparse_508_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_508_str_->clear();
  }
  clear_has_sparse_508_str();
}
inline const ::std::string& Database_NoBench::sparse_508_str() const {
  return *sparse_508_str_;
}
inline void Database_NoBench::set_sparse_508_str(const ::std::string& value) {
  set_has_sparse_508_str();
  if (sparse_508_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_508_str_ = new ::std::string;
  }
  sparse_508_str_->assign(value);
}
inline void Database_NoBench::set_sparse_508_str(const char* value) {
  set_has_sparse_508_str();
  if (sparse_508_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_508_str_ = new ::std::string;
  }
  sparse_508_str_->assign(value);
}
inline void Database_NoBench::set_sparse_508_str(const char* value, size_t size) {
  set_has_sparse_508_str();
  if (sparse_508_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_508_str_ = new ::std::string;
  }
  sparse_508_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_508_str() {
  set_has_sparse_508_str();
  if (sparse_508_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_508_str_ = new ::std::string;
  }
  return sparse_508_str_;
}
inline ::std::string* Database_NoBench::release_sparse_508_str() {
  clear_has_sparse_508_str();
  if (sparse_508_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_508_str_;
    sparse_508_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_508_str(::std::string* sparse_508_str) {
  if (sparse_508_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_508_str_;
  }
  if (sparse_508_str) {
    set_has_sparse_508_str();
    sparse_508_str_ = sparse_508_str;
  } else {
    clear_has_sparse_508_str();
    sparse_508_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_509_str = 521;
inline bool Database_NoBench::has_sparse_509_str() const {
  return (_has_bits_[16] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_509_str() {
  _has_bits_[16] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_509_str() {
  _has_bits_[16] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_509_str() {
  if (sparse_509_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_509_str_->clear();
  }
  clear_has_sparse_509_str();
}
inline const ::std::string& Database_NoBench::sparse_509_str() const {
  return *sparse_509_str_;
}
inline void Database_NoBench::set_sparse_509_str(const ::std::string& value) {
  set_has_sparse_509_str();
  if (sparse_509_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_509_str_ = new ::std::string;
  }
  sparse_509_str_->assign(value);
}
inline void Database_NoBench::set_sparse_509_str(const char* value) {
  set_has_sparse_509_str();
  if (sparse_509_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_509_str_ = new ::std::string;
  }
  sparse_509_str_->assign(value);
}
inline void Database_NoBench::set_sparse_509_str(const char* value, size_t size) {
  set_has_sparse_509_str();
  if (sparse_509_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_509_str_ = new ::std::string;
  }
  sparse_509_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_509_str() {
  set_has_sparse_509_str();
  if (sparse_509_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_509_str_ = new ::std::string;
  }
  return sparse_509_str_;
}
inline ::std::string* Database_NoBench::release_sparse_509_str() {
  clear_has_sparse_509_str();
  if (sparse_509_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_509_str_;
    sparse_509_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_509_str(::std::string* sparse_509_str) {
  if (sparse_509_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_509_str_;
  }
  if (sparse_509_str) {
    set_has_sparse_509_str();
    sparse_509_str_ = sparse_509_str;
  } else {
    clear_has_sparse_509_str();
    sparse_509_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_510_str = 522;
inline bool Database_NoBench::has_sparse_510_str() const {
  return (_has_bits_[16] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_510_str() {
  _has_bits_[16] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_510_str() {
  _has_bits_[16] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_510_str() {
  if (sparse_510_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_510_str_->clear();
  }
  clear_has_sparse_510_str();
}
inline const ::std::string& Database_NoBench::sparse_510_str() const {
  return *sparse_510_str_;
}
inline void Database_NoBench::set_sparse_510_str(const ::std::string& value) {
  set_has_sparse_510_str();
  if (sparse_510_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_510_str_ = new ::std::string;
  }
  sparse_510_str_->assign(value);
}
inline void Database_NoBench::set_sparse_510_str(const char* value) {
  set_has_sparse_510_str();
  if (sparse_510_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_510_str_ = new ::std::string;
  }
  sparse_510_str_->assign(value);
}
inline void Database_NoBench::set_sparse_510_str(const char* value, size_t size) {
  set_has_sparse_510_str();
  if (sparse_510_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_510_str_ = new ::std::string;
  }
  sparse_510_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_510_str() {
  set_has_sparse_510_str();
  if (sparse_510_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_510_str_ = new ::std::string;
  }
  return sparse_510_str_;
}
inline ::std::string* Database_NoBench::release_sparse_510_str() {
  clear_has_sparse_510_str();
  if (sparse_510_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_510_str_;
    sparse_510_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_510_str(::std::string* sparse_510_str) {
  if (sparse_510_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_510_str_;
  }
  if (sparse_510_str) {
    set_has_sparse_510_str();
    sparse_510_str_ = sparse_510_str;
  } else {
    clear_has_sparse_510_str();
    sparse_510_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_511_str = 523;
inline bool Database_NoBench::has_sparse_511_str() const {
  return (_has_bits_[16] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_511_str() {
  _has_bits_[16] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_511_str() {
  _has_bits_[16] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_511_str() {
  if (sparse_511_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_511_str_->clear();
  }
  clear_has_sparse_511_str();
}
inline const ::std::string& Database_NoBench::sparse_511_str() const {
  return *sparse_511_str_;
}
inline void Database_NoBench::set_sparse_511_str(const ::std::string& value) {
  set_has_sparse_511_str();
  if (sparse_511_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_511_str_ = new ::std::string;
  }
  sparse_511_str_->assign(value);
}
inline void Database_NoBench::set_sparse_511_str(const char* value) {
  set_has_sparse_511_str();
  if (sparse_511_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_511_str_ = new ::std::string;
  }
  sparse_511_str_->assign(value);
}
inline void Database_NoBench::set_sparse_511_str(const char* value, size_t size) {
  set_has_sparse_511_str();
  if (sparse_511_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_511_str_ = new ::std::string;
  }
  sparse_511_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_511_str() {
  set_has_sparse_511_str();
  if (sparse_511_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_511_str_ = new ::std::string;
  }
  return sparse_511_str_;
}
inline ::std::string* Database_NoBench::release_sparse_511_str() {
  clear_has_sparse_511_str();
  if (sparse_511_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_511_str_;
    sparse_511_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_511_str(::std::string* sparse_511_str) {
  if (sparse_511_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_511_str_;
  }
  if (sparse_511_str) {
    set_has_sparse_511_str();
    sparse_511_str_ = sparse_511_str;
  } else {
    clear_has_sparse_511_str();
    sparse_511_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_512_str = 524;
inline bool Database_NoBench::has_sparse_512_str() const {
  return (_has_bits_[16] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_512_str() {
  _has_bits_[16] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_512_str() {
  _has_bits_[16] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_512_str() {
  if (sparse_512_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_512_str_->clear();
  }
  clear_has_sparse_512_str();
}
inline const ::std::string& Database_NoBench::sparse_512_str() const {
  return *sparse_512_str_;
}
inline void Database_NoBench::set_sparse_512_str(const ::std::string& value) {
  set_has_sparse_512_str();
  if (sparse_512_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_512_str_ = new ::std::string;
  }
  sparse_512_str_->assign(value);
}
inline void Database_NoBench::set_sparse_512_str(const char* value) {
  set_has_sparse_512_str();
  if (sparse_512_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_512_str_ = new ::std::string;
  }
  sparse_512_str_->assign(value);
}
inline void Database_NoBench::set_sparse_512_str(const char* value, size_t size) {
  set_has_sparse_512_str();
  if (sparse_512_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_512_str_ = new ::std::string;
  }
  sparse_512_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_512_str() {
  set_has_sparse_512_str();
  if (sparse_512_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_512_str_ = new ::std::string;
  }
  return sparse_512_str_;
}
inline ::std::string* Database_NoBench::release_sparse_512_str() {
  clear_has_sparse_512_str();
  if (sparse_512_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_512_str_;
    sparse_512_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_512_str(::std::string* sparse_512_str) {
  if (sparse_512_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_512_str_;
  }
  if (sparse_512_str) {
    set_has_sparse_512_str();
    sparse_512_str_ = sparse_512_str;
  } else {
    clear_has_sparse_512_str();
    sparse_512_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_513_str = 525;
inline bool Database_NoBench::has_sparse_513_str() const {
  return (_has_bits_[16] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_513_str() {
  _has_bits_[16] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_513_str() {
  _has_bits_[16] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_513_str() {
  if (sparse_513_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_513_str_->clear();
  }
  clear_has_sparse_513_str();
}
inline const ::std::string& Database_NoBench::sparse_513_str() const {
  return *sparse_513_str_;
}
inline void Database_NoBench::set_sparse_513_str(const ::std::string& value) {
  set_has_sparse_513_str();
  if (sparse_513_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_513_str_ = new ::std::string;
  }
  sparse_513_str_->assign(value);
}
inline void Database_NoBench::set_sparse_513_str(const char* value) {
  set_has_sparse_513_str();
  if (sparse_513_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_513_str_ = new ::std::string;
  }
  sparse_513_str_->assign(value);
}
inline void Database_NoBench::set_sparse_513_str(const char* value, size_t size) {
  set_has_sparse_513_str();
  if (sparse_513_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_513_str_ = new ::std::string;
  }
  sparse_513_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_513_str() {
  set_has_sparse_513_str();
  if (sparse_513_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_513_str_ = new ::std::string;
  }
  return sparse_513_str_;
}
inline ::std::string* Database_NoBench::release_sparse_513_str() {
  clear_has_sparse_513_str();
  if (sparse_513_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_513_str_;
    sparse_513_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_513_str(::std::string* sparse_513_str) {
  if (sparse_513_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_513_str_;
  }
  if (sparse_513_str) {
    set_has_sparse_513_str();
    sparse_513_str_ = sparse_513_str;
  } else {
    clear_has_sparse_513_str();
    sparse_513_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_514_str = 526;
inline bool Database_NoBench::has_sparse_514_str() const {
  return (_has_bits_[16] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_514_str() {
  _has_bits_[16] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_514_str() {
  _has_bits_[16] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_514_str() {
  if (sparse_514_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_514_str_->clear();
  }
  clear_has_sparse_514_str();
}
inline const ::std::string& Database_NoBench::sparse_514_str() const {
  return *sparse_514_str_;
}
inline void Database_NoBench::set_sparse_514_str(const ::std::string& value) {
  set_has_sparse_514_str();
  if (sparse_514_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_514_str_ = new ::std::string;
  }
  sparse_514_str_->assign(value);
}
inline void Database_NoBench::set_sparse_514_str(const char* value) {
  set_has_sparse_514_str();
  if (sparse_514_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_514_str_ = new ::std::string;
  }
  sparse_514_str_->assign(value);
}
inline void Database_NoBench::set_sparse_514_str(const char* value, size_t size) {
  set_has_sparse_514_str();
  if (sparse_514_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_514_str_ = new ::std::string;
  }
  sparse_514_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_514_str() {
  set_has_sparse_514_str();
  if (sparse_514_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_514_str_ = new ::std::string;
  }
  return sparse_514_str_;
}
inline ::std::string* Database_NoBench::release_sparse_514_str() {
  clear_has_sparse_514_str();
  if (sparse_514_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_514_str_;
    sparse_514_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_514_str(::std::string* sparse_514_str) {
  if (sparse_514_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_514_str_;
  }
  if (sparse_514_str) {
    set_has_sparse_514_str();
    sparse_514_str_ = sparse_514_str;
  } else {
    clear_has_sparse_514_str();
    sparse_514_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_515_str = 527;
inline bool Database_NoBench::has_sparse_515_str() const {
  return (_has_bits_[16] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_515_str() {
  _has_bits_[16] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_515_str() {
  _has_bits_[16] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_515_str() {
  if (sparse_515_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_515_str_->clear();
  }
  clear_has_sparse_515_str();
}
inline const ::std::string& Database_NoBench::sparse_515_str() const {
  return *sparse_515_str_;
}
inline void Database_NoBench::set_sparse_515_str(const ::std::string& value) {
  set_has_sparse_515_str();
  if (sparse_515_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_515_str_ = new ::std::string;
  }
  sparse_515_str_->assign(value);
}
inline void Database_NoBench::set_sparse_515_str(const char* value) {
  set_has_sparse_515_str();
  if (sparse_515_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_515_str_ = new ::std::string;
  }
  sparse_515_str_->assign(value);
}
inline void Database_NoBench::set_sparse_515_str(const char* value, size_t size) {
  set_has_sparse_515_str();
  if (sparse_515_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_515_str_ = new ::std::string;
  }
  sparse_515_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_515_str() {
  set_has_sparse_515_str();
  if (sparse_515_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_515_str_ = new ::std::string;
  }
  return sparse_515_str_;
}
inline ::std::string* Database_NoBench::release_sparse_515_str() {
  clear_has_sparse_515_str();
  if (sparse_515_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_515_str_;
    sparse_515_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_515_str(::std::string* sparse_515_str) {
  if (sparse_515_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_515_str_;
  }
  if (sparse_515_str) {
    set_has_sparse_515_str();
    sparse_515_str_ = sparse_515_str;
  } else {
    clear_has_sparse_515_str();
    sparse_515_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_516_str = 528;
inline bool Database_NoBench::has_sparse_516_str() const {
  return (_has_bits_[16] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_516_str() {
  _has_bits_[16] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_516_str() {
  _has_bits_[16] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_516_str() {
  if (sparse_516_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_516_str_->clear();
  }
  clear_has_sparse_516_str();
}
inline const ::std::string& Database_NoBench::sparse_516_str() const {
  return *sparse_516_str_;
}
inline void Database_NoBench::set_sparse_516_str(const ::std::string& value) {
  set_has_sparse_516_str();
  if (sparse_516_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_516_str_ = new ::std::string;
  }
  sparse_516_str_->assign(value);
}
inline void Database_NoBench::set_sparse_516_str(const char* value) {
  set_has_sparse_516_str();
  if (sparse_516_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_516_str_ = new ::std::string;
  }
  sparse_516_str_->assign(value);
}
inline void Database_NoBench::set_sparse_516_str(const char* value, size_t size) {
  set_has_sparse_516_str();
  if (sparse_516_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_516_str_ = new ::std::string;
  }
  sparse_516_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_516_str() {
  set_has_sparse_516_str();
  if (sparse_516_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_516_str_ = new ::std::string;
  }
  return sparse_516_str_;
}
inline ::std::string* Database_NoBench::release_sparse_516_str() {
  clear_has_sparse_516_str();
  if (sparse_516_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_516_str_;
    sparse_516_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_516_str(::std::string* sparse_516_str) {
  if (sparse_516_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_516_str_;
  }
  if (sparse_516_str) {
    set_has_sparse_516_str();
    sparse_516_str_ = sparse_516_str;
  } else {
    clear_has_sparse_516_str();
    sparse_516_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_517_str = 529;
inline bool Database_NoBench::has_sparse_517_str() const {
  return (_has_bits_[16] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_517_str() {
  _has_bits_[16] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_517_str() {
  _has_bits_[16] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_517_str() {
  if (sparse_517_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_517_str_->clear();
  }
  clear_has_sparse_517_str();
}
inline const ::std::string& Database_NoBench::sparse_517_str() const {
  return *sparse_517_str_;
}
inline void Database_NoBench::set_sparse_517_str(const ::std::string& value) {
  set_has_sparse_517_str();
  if (sparse_517_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_517_str_ = new ::std::string;
  }
  sparse_517_str_->assign(value);
}
inline void Database_NoBench::set_sparse_517_str(const char* value) {
  set_has_sparse_517_str();
  if (sparse_517_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_517_str_ = new ::std::string;
  }
  sparse_517_str_->assign(value);
}
inline void Database_NoBench::set_sparse_517_str(const char* value, size_t size) {
  set_has_sparse_517_str();
  if (sparse_517_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_517_str_ = new ::std::string;
  }
  sparse_517_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_517_str() {
  set_has_sparse_517_str();
  if (sparse_517_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_517_str_ = new ::std::string;
  }
  return sparse_517_str_;
}
inline ::std::string* Database_NoBench::release_sparse_517_str() {
  clear_has_sparse_517_str();
  if (sparse_517_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_517_str_;
    sparse_517_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_517_str(::std::string* sparse_517_str) {
  if (sparse_517_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_517_str_;
  }
  if (sparse_517_str) {
    set_has_sparse_517_str();
    sparse_517_str_ = sparse_517_str;
  } else {
    clear_has_sparse_517_str();
    sparse_517_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_518_str = 530;
inline bool Database_NoBench::has_sparse_518_str() const {
  return (_has_bits_[16] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_518_str() {
  _has_bits_[16] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_518_str() {
  _has_bits_[16] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_518_str() {
  if (sparse_518_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_518_str_->clear();
  }
  clear_has_sparse_518_str();
}
inline const ::std::string& Database_NoBench::sparse_518_str() const {
  return *sparse_518_str_;
}
inline void Database_NoBench::set_sparse_518_str(const ::std::string& value) {
  set_has_sparse_518_str();
  if (sparse_518_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_518_str_ = new ::std::string;
  }
  sparse_518_str_->assign(value);
}
inline void Database_NoBench::set_sparse_518_str(const char* value) {
  set_has_sparse_518_str();
  if (sparse_518_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_518_str_ = new ::std::string;
  }
  sparse_518_str_->assign(value);
}
inline void Database_NoBench::set_sparse_518_str(const char* value, size_t size) {
  set_has_sparse_518_str();
  if (sparse_518_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_518_str_ = new ::std::string;
  }
  sparse_518_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_518_str() {
  set_has_sparse_518_str();
  if (sparse_518_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_518_str_ = new ::std::string;
  }
  return sparse_518_str_;
}
inline ::std::string* Database_NoBench::release_sparse_518_str() {
  clear_has_sparse_518_str();
  if (sparse_518_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_518_str_;
    sparse_518_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_518_str(::std::string* sparse_518_str) {
  if (sparse_518_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_518_str_;
  }
  if (sparse_518_str) {
    set_has_sparse_518_str();
    sparse_518_str_ = sparse_518_str;
  } else {
    clear_has_sparse_518_str();
    sparse_518_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_519_str = 531;
inline bool Database_NoBench::has_sparse_519_str() const {
  return (_has_bits_[16] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_519_str() {
  _has_bits_[16] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_519_str() {
  _has_bits_[16] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_519_str() {
  if (sparse_519_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_519_str_->clear();
  }
  clear_has_sparse_519_str();
}
inline const ::std::string& Database_NoBench::sparse_519_str() const {
  return *sparse_519_str_;
}
inline void Database_NoBench::set_sparse_519_str(const ::std::string& value) {
  set_has_sparse_519_str();
  if (sparse_519_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_519_str_ = new ::std::string;
  }
  sparse_519_str_->assign(value);
}
inline void Database_NoBench::set_sparse_519_str(const char* value) {
  set_has_sparse_519_str();
  if (sparse_519_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_519_str_ = new ::std::string;
  }
  sparse_519_str_->assign(value);
}
inline void Database_NoBench::set_sparse_519_str(const char* value, size_t size) {
  set_has_sparse_519_str();
  if (sparse_519_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_519_str_ = new ::std::string;
  }
  sparse_519_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_519_str() {
  set_has_sparse_519_str();
  if (sparse_519_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_519_str_ = new ::std::string;
  }
  return sparse_519_str_;
}
inline ::std::string* Database_NoBench::release_sparse_519_str() {
  clear_has_sparse_519_str();
  if (sparse_519_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_519_str_;
    sparse_519_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_519_str(::std::string* sparse_519_str) {
  if (sparse_519_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_519_str_;
  }
  if (sparse_519_str) {
    set_has_sparse_519_str();
    sparse_519_str_ = sparse_519_str;
  } else {
    clear_has_sparse_519_str();
    sparse_519_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_520_str = 532;
inline bool Database_NoBench::has_sparse_520_str() const {
  return (_has_bits_[16] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_520_str() {
  _has_bits_[16] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_520_str() {
  _has_bits_[16] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_520_str() {
  if (sparse_520_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_520_str_->clear();
  }
  clear_has_sparse_520_str();
}
inline const ::std::string& Database_NoBench::sparse_520_str() const {
  return *sparse_520_str_;
}
inline void Database_NoBench::set_sparse_520_str(const ::std::string& value) {
  set_has_sparse_520_str();
  if (sparse_520_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_520_str_ = new ::std::string;
  }
  sparse_520_str_->assign(value);
}
inline void Database_NoBench::set_sparse_520_str(const char* value) {
  set_has_sparse_520_str();
  if (sparse_520_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_520_str_ = new ::std::string;
  }
  sparse_520_str_->assign(value);
}
inline void Database_NoBench::set_sparse_520_str(const char* value, size_t size) {
  set_has_sparse_520_str();
  if (sparse_520_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_520_str_ = new ::std::string;
  }
  sparse_520_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_520_str() {
  set_has_sparse_520_str();
  if (sparse_520_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_520_str_ = new ::std::string;
  }
  return sparse_520_str_;
}
inline ::std::string* Database_NoBench::release_sparse_520_str() {
  clear_has_sparse_520_str();
  if (sparse_520_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_520_str_;
    sparse_520_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_520_str(::std::string* sparse_520_str) {
  if (sparse_520_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_520_str_;
  }
  if (sparse_520_str) {
    set_has_sparse_520_str();
    sparse_520_str_ = sparse_520_str;
  } else {
    clear_has_sparse_520_str();
    sparse_520_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_521_str = 533;
inline bool Database_NoBench::has_sparse_521_str() const {
  return (_has_bits_[16] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_521_str() {
  _has_bits_[16] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_521_str() {
  _has_bits_[16] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_521_str() {
  if (sparse_521_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_521_str_->clear();
  }
  clear_has_sparse_521_str();
}
inline const ::std::string& Database_NoBench::sparse_521_str() const {
  return *sparse_521_str_;
}
inline void Database_NoBench::set_sparse_521_str(const ::std::string& value) {
  set_has_sparse_521_str();
  if (sparse_521_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_521_str_ = new ::std::string;
  }
  sparse_521_str_->assign(value);
}
inline void Database_NoBench::set_sparse_521_str(const char* value) {
  set_has_sparse_521_str();
  if (sparse_521_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_521_str_ = new ::std::string;
  }
  sparse_521_str_->assign(value);
}
inline void Database_NoBench::set_sparse_521_str(const char* value, size_t size) {
  set_has_sparse_521_str();
  if (sparse_521_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_521_str_ = new ::std::string;
  }
  sparse_521_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_521_str() {
  set_has_sparse_521_str();
  if (sparse_521_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_521_str_ = new ::std::string;
  }
  return sparse_521_str_;
}
inline ::std::string* Database_NoBench::release_sparse_521_str() {
  clear_has_sparse_521_str();
  if (sparse_521_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_521_str_;
    sparse_521_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_521_str(::std::string* sparse_521_str) {
  if (sparse_521_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_521_str_;
  }
  if (sparse_521_str) {
    set_has_sparse_521_str();
    sparse_521_str_ = sparse_521_str;
  } else {
    clear_has_sparse_521_str();
    sparse_521_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_522_str = 534;
inline bool Database_NoBench::has_sparse_522_str() const {
  return (_has_bits_[16] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_522_str() {
  _has_bits_[16] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_522_str() {
  _has_bits_[16] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_522_str() {
  if (sparse_522_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_522_str_->clear();
  }
  clear_has_sparse_522_str();
}
inline const ::std::string& Database_NoBench::sparse_522_str() const {
  return *sparse_522_str_;
}
inline void Database_NoBench::set_sparse_522_str(const ::std::string& value) {
  set_has_sparse_522_str();
  if (sparse_522_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_522_str_ = new ::std::string;
  }
  sparse_522_str_->assign(value);
}
inline void Database_NoBench::set_sparse_522_str(const char* value) {
  set_has_sparse_522_str();
  if (sparse_522_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_522_str_ = new ::std::string;
  }
  sparse_522_str_->assign(value);
}
inline void Database_NoBench::set_sparse_522_str(const char* value, size_t size) {
  set_has_sparse_522_str();
  if (sparse_522_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_522_str_ = new ::std::string;
  }
  sparse_522_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_522_str() {
  set_has_sparse_522_str();
  if (sparse_522_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_522_str_ = new ::std::string;
  }
  return sparse_522_str_;
}
inline ::std::string* Database_NoBench::release_sparse_522_str() {
  clear_has_sparse_522_str();
  if (sparse_522_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_522_str_;
    sparse_522_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_522_str(::std::string* sparse_522_str) {
  if (sparse_522_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_522_str_;
  }
  if (sparse_522_str) {
    set_has_sparse_522_str();
    sparse_522_str_ = sparse_522_str;
  } else {
    clear_has_sparse_522_str();
    sparse_522_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_523_str = 535;
inline bool Database_NoBench::has_sparse_523_str() const {
  return (_has_bits_[16] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_523_str() {
  _has_bits_[16] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_523_str() {
  _has_bits_[16] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_523_str() {
  if (sparse_523_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_523_str_->clear();
  }
  clear_has_sparse_523_str();
}
inline const ::std::string& Database_NoBench::sparse_523_str() const {
  return *sparse_523_str_;
}
inline void Database_NoBench::set_sparse_523_str(const ::std::string& value) {
  set_has_sparse_523_str();
  if (sparse_523_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_523_str_ = new ::std::string;
  }
  sparse_523_str_->assign(value);
}
inline void Database_NoBench::set_sparse_523_str(const char* value) {
  set_has_sparse_523_str();
  if (sparse_523_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_523_str_ = new ::std::string;
  }
  sparse_523_str_->assign(value);
}
inline void Database_NoBench::set_sparse_523_str(const char* value, size_t size) {
  set_has_sparse_523_str();
  if (sparse_523_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_523_str_ = new ::std::string;
  }
  sparse_523_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_523_str() {
  set_has_sparse_523_str();
  if (sparse_523_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_523_str_ = new ::std::string;
  }
  return sparse_523_str_;
}
inline ::std::string* Database_NoBench::release_sparse_523_str() {
  clear_has_sparse_523_str();
  if (sparse_523_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_523_str_;
    sparse_523_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_523_str(::std::string* sparse_523_str) {
  if (sparse_523_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_523_str_;
  }
  if (sparse_523_str) {
    set_has_sparse_523_str();
    sparse_523_str_ = sparse_523_str;
  } else {
    clear_has_sparse_523_str();
    sparse_523_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_524_str = 536;
inline bool Database_NoBench::has_sparse_524_str() const {
  return (_has_bits_[16] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_524_str() {
  _has_bits_[16] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_524_str() {
  _has_bits_[16] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_524_str() {
  if (sparse_524_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_524_str_->clear();
  }
  clear_has_sparse_524_str();
}
inline const ::std::string& Database_NoBench::sparse_524_str() const {
  return *sparse_524_str_;
}
inline void Database_NoBench::set_sparse_524_str(const ::std::string& value) {
  set_has_sparse_524_str();
  if (sparse_524_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_524_str_ = new ::std::string;
  }
  sparse_524_str_->assign(value);
}
inline void Database_NoBench::set_sparse_524_str(const char* value) {
  set_has_sparse_524_str();
  if (sparse_524_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_524_str_ = new ::std::string;
  }
  sparse_524_str_->assign(value);
}
inline void Database_NoBench::set_sparse_524_str(const char* value, size_t size) {
  set_has_sparse_524_str();
  if (sparse_524_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_524_str_ = new ::std::string;
  }
  sparse_524_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_524_str() {
  set_has_sparse_524_str();
  if (sparse_524_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_524_str_ = new ::std::string;
  }
  return sparse_524_str_;
}
inline ::std::string* Database_NoBench::release_sparse_524_str() {
  clear_has_sparse_524_str();
  if (sparse_524_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_524_str_;
    sparse_524_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_524_str(::std::string* sparse_524_str) {
  if (sparse_524_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_524_str_;
  }
  if (sparse_524_str) {
    set_has_sparse_524_str();
    sparse_524_str_ = sparse_524_str;
  } else {
    clear_has_sparse_524_str();
    sparse_524_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_525_str = 537;
inline bool Database_NoBench::has_sparse_525_str() const {
  return (_has_bits_[16] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_525_str() {
  _has_bits_[16] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_525_str() {
  _has_bits_[16] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_525_str() {
  if (sparse_525_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_525_str_->clear();
  }
  clear_has_sparse_525_str();
}
inline const ::std::string& Database_NoBench::sparse_525_str() const {
  return *sparse_525_str_;
}
inline void Database_NoBench::set_sparse_525_str(const ::std::string& value) {
  set_has_sparse_525_str();
  if (sparse_525_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_525_str_ = new ::std::string;
  }
  sparse_525_str_->assign(value);
}
inline void Database_NoBench::set_sparse_525_str(const char* value) {
  set_has_sparse_525_str();
  if (sparse_525_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_525_str_ = new ::std::string;
  }
  sparse_525_str_->assign(value);
}
inline void Database_NoBench::set_sparse_525_str(const char* value, size_t size) {
  set_has_sparse_525_str();
  if (sparse_525_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_525_str_ = new ::std::string;
  }
  sparse_525_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_525_str() {
  set_has_sparse_525_str();
  if (sparse_525_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_525_str_ = new ::std::string;
  }
  return sparse_525_str_;
}
inline ::std::string* Database_NoBench::release_sparse_525_str() {
  clear_has_sparse_525_str();
  if (sparse_525_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_525_str_;
    sparse_525_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_525_str(::std::string* sparse_525_str) {
  if (sparse_525_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_525_str_;
  }
  if (sparse_525_str) {
    set_has_sparse_525_str();
    sparse_525_str_ = sparse_525_str;
  } else {
    clear_has_sparse_525_str();
    sparse_525_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_526_str = 538;
inline bool Database_NoBench::has_sparse_526_str() const {
  return (_has_bits_[16] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_526_str() {
  _has_bits_[16] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_526_str() {
  _has_bits_[16] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_526_str() {
  if (sparse_526_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_526_str_->clear();
  }
  clear_has_sparse_526_str();
}
inline const ::std::string& Database_NoBench::sparse_526_str() const {
  return *sparse_526_str_;
}
inline void Database_NoBench::set_sparse_526_str(const ::std::string& value) {
  set_has_sparse_526_str();
  if (sparse_526_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_526_str_ = new ::std::string;
  }
  sparse_526_str_->assign(value);
}
inline void Database_NoBench::set_sparse_526_str(const char* value) {
  set_has_sparse_526_str();
  if (sparse_526_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_526_str_ = new ::std::string;
  }
  sparse_526_str_->assign(value);
}
inline void Database_NoBench::set_sparse_526_str(const char* value, size_t size) {
  set_has_sparse_526_str();
  if (sparse_526_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_526_str_ = new ::std::string;
  }
  sparse_526_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_526_str() {
  set_has_sparse_526_str();
  if (sparse_526_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_526_str_ = new ::std::string;
  }
  return sparse_526_str_;
}
inline ::std::string* Database_NoBench::release_sparse_526_str() {
  clear_has_sparse_526_str();
  if (sparse_526_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_526_str_;
    sparse_526_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_526_str(::std::string* sparse_526_str) {
  if (sparse_526_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_526_str_;
  }
  if (sparse_526_str) {
    set_has_sparse_526_str();
    sparse_526_str_ = sparse_526_str;
  } else {
    clear_has_sparse_526_str();
    sparse_526_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_527_str = 539;
inline bool Database_NoBench::has_sparse_527_str() const {
  return (_has_bits_[16] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_527_str() {
  _has_bits_[16] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_527_str() {
  _has_bits_[16] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_527_str() {
  if (sparse_527_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_527_str_->clear();
  }
  clear_has_sparse_527_str();
}
inline const ::std::string& Database_NoBench::sparse_527_str() const {
  return *sparse_527_str_;
}
inline void Database_NoBench::set_sparse_527_str(const ::std::string& value) {
  set_has_sparse_527_str();
  if (sparse_527_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_527_str_ = new ::std::string;
  }
  sparse_527_str_->assign(value);
}
inline void Database_NoBench::set_sparse_527_str(const char* value) {
  set_has_sparse_527_str();
  if (sparse_527_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_527_str_ = new ::std::string;
  }
  sparse_527_str_->assign(value);
}
inline void Database_NoBench::set_sparse_527_str(const char* value, size_t size) {
  set_has_sparse_527_str();
  if (sparse_527_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_527_str_ = new ::std::string;
  }
  sparse_527_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_527_str() {
  set_has_sparse_527_str();
  if (sparse_527_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_527_str_ = new ::std::string;
  }
  return sparse_527_str_;
}
inline ::std::string* Database_NoBench::release_sparse_527_str() {
  clear_has_sparse_527_str();
  if (sparse_527_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_527_str_;
    sparse_527_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_527_str(::std::string* sparse_527_str) {
  if (sparse_527_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_527_str_;
  }
  if (sparse_527_str) {
    set_has_sparse_527_str();
    sparse_527_str_ = sparse_527_str;
  } else {
    clear_has_sparse_527_str();
    sparse_527_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_528_str = 540;
inline bool Database_NoBench::has_sparse_528_str() const {
  return (_has_bits_[16] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_528_str() {
  _has_bits_[16] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_528_str() {
  _has_bits_[16] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_528_str() {
  if (sparse_528_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_528_str_->clear();
  }
  clear_has_sparse_528_str();
}
inline const ::std::string& Database_NoBench::sparse_528_str() const {
  return *sparse_528_str_;
}
inline void Database_NoBench::set_sparse_528_str(const ::std::string& value) {
  set_has_sparse_528_str();
  if (sparse_528_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_528_str_ = new ::std::string;
  }
  sparse_528_str_->assign(value);
}
inline void Database_NoBench::set_sparse_528_str(const char* value) {
  set_has_sparse_528_str();
  if (sparse_528_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_528_str_ = new ::std::string;
  }
  sparse_528_str_->assign(value);
}
inline void Database_NoBench::set_sparse_528_str(const char* value, size_t size) {
  set_has_sparse_528_str();
  if (sparse_528_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_528_str_ = new ::std::string;
  }
  sparse_528_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_528_str() {
  set_has_sparse_528_str();
  if (sparse_528_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_528_str_ = new ::std::string;
  }
  return sparse_528_str_;
}
inline ::std::string* Database_NoBench::release_sparse_528_str() {
  clear_has_sparse_528_str();
  if (sparse_528_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_528_str_;
    sparse_528_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_528_str(::std::string* sparse_528_str) {
  if (sparse_528_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_528_str_;
  }
  if (sparse_528_str) {
    set_has_sparse_528_str();
    sparse_528_str_ = sparse_528_str;
  } else {
    clear_has_sparse_528_str();
    sparse_528_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_529_str = 541;
inline bool Database_NoBench::has_sparse_529_str() const {
  return (_has_bits_[16] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_529_str() {
  _has_bits_[16] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_529_str() {
  _has_bits_[16] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_529_str() {
  if (sparse_529_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_529_str_->clear();
  }
  clear_has_sparse_529_str();
}
inline const ::std::string& Database_NoBench::sparse_529_str() const {
  return *sparse_529_str_;
}
inline void Database_NoBench::set_sparse_529_str(const ::std::string& value) {
  set_has_sparse_529_str();
  if (sparse_529_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_529_str_ = new ::std::string;
  }
  sparse_529_str_->assign(value);
}
inline void Database_NoBench::set_sparse_529_str(const char* value) {
  set_has_sparse_529_str();
  if (sparse_529_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_529_str_ = new ::std::string;
  }
  sparse_529_str_->assign(value);
}
inline void Database_NoBench::set_sparse_529_str(const char* value, size_t size) {
  set_has_sparse_529_str();
  if (sparse_529_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_529_str_ = new ::std::string;
  }
  sparse_529_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_529_str() {
  set_has_sparse_529_str();
  if (sparse_529_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_529_str_ = new ::std::string;
  }
  return sparse_529_str_;
}
inline ::std::string* Database_NoBench::release_sparse_529_str() {
  clear_has_sparse_529_str();
  if (sparse_529_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_529_str_;
    sparse_529_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_529_str(::std::string* sparse_529_str) {
  if (sparse_529_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_529_str_;
  }
  if (sparse_529_str) {
    set_has_sparse_529_str();
    sparse_529_str_ = sparse_529_str;
  } else {
    clear_has_sparse_529_str();
    sparse_529_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_530_str = 542;
inline bool Database_NoBench::has_sparse_530_str() const {
  return (_has_bits_[16] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_530_str() {
  _has_bits_[16] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_530_str() {
  _has_bits_[16] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_530_str() {
  if (sparse_530_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_530_str_->clear();
  }
  clear_has_sparse_530_str();
}
inline const ::std::string& Database_NoBench::sparse_530_str() const {
  return *sparse_530_str_;
}
inline void Database_NoBench::set_sparse_530_str(const ::std::string& value) {
  set_has_sparse_530_str();
  if (sparse_530_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_530_str_ = new ::std::string;
  }
  sparse_530_str_->assign(value);
}
inline void Database_NoBench::set_sparse_530_str(const char* value) {
  set_has_sparse_530_str();
  if (sparse_530_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_530_str_ = new ::std::string;
  }
  sparse_530_str_->assign(value);
}
inline void Database_NoBench::set_sparse_530_str(const char* value, size_t size) {
  set_has_sparse_530_str();
  if (sparse_530_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_530_str_ = new ::std::string;
  }
  sparse_530_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_530_str() {
  set_has_sparse_530_str();
  if (sparse_530_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_530_str_ = new ::std::string;
  }
  return sparse_530_str_;
}
inline ::std::string* Database_NoBench::release_sparse_530_str() {
  clear_has_sparse_530_str();
  if (sparse_530_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_530_str_;
    sparse_530_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_530_str(::std::string* sparse_530_str) {
  if (sparse_530_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_530_str_;
  }
  if (sparse_530_str) {
    set_has_sparse_530_str();
    sparse_530_str_ = sparse_530_str;
  } else {
    clear_has_sparse_530_str();
    sparse_530_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_531_str = 543;
inline bool Database_NoBench::has_sparse_531_str() const {
  return (_has_bits_[17] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_531_str() {
  _has_bits_[17] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_531_str() {
  _has_bits_[17] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_531_str() {
  if (sparse_531_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_531_str_->clear();
  }
  clear_has_sparse_531_str();
}
inline const ::std::string& Database_NoBench::sparse_531_str() const {
  return *sparse_531_str_;
}
inline void Database_NoBench::set_sparse_531_str(const ::std::string& value) {
  set_has_sparse_531_str();
  if (sparse_531_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_531_str_ = new ::std::string;
  }
  sparse_531_str_->assign(value);
}
inline void Database_NoBench::set_sparse_531_str(const char* value) {
  set_has_sparse_531_str();
  if (sparse_531_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_531_str_ = new ::std::string;
  }
  sparse_531_str_->assign(value);
}
inline void Database_NoBench::set_sparse_531_str(const char* value, size_t size) {
  set_has_sparse_531_str();
  if (sparse_531_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_531_str_ = new ::std::string;
  }
  sparse_531_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_531_str() {
  set_has_sparse_531_str();
  if (sparse_531_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_531_str_ = new ::std::string;
  }
  return sparse_531_str_;
}
inline ::std::string* Database_NoBench::release_sparse_531_str() {
  clear_has_sparse_531_str();
  if (sparse_531_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_531_str_;
    sparse_531_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_531_str(::std::string* sparse_531_str) {
  if (sparse_531_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_531_str_;
  }
  if (sparse_531_str) {
    set_has_sparse_531_str();
    sparse_531_str_ = sparse_531_str;
  } else {
    clear_has_sparse_531_str();
    sparse_531_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_532_str = 544;
inline bool Database_NoBench::has_sparse_532_str() const {
  return (_has_bits_[17] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_532_str() {
  _has_bits_[17] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_532_str() {
  _has_bits_[17] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_532_str() {
  if (sparse_532_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_532_str_->clear();
  }
  clear_has_sparse_532_str();
}
inline const ::std::string& Database_NoBench::sparse_532_str() const {
  return *sparse_532_str_;
}
inline void Database_NoBench::set_sparse_532_str(const ::std::string& value) {
  set_has_sparse_532_str();
  if (sparse_532_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_532_str_ = new ::std::string;
  }
  sparse_532_str_->assign(value);
}
inline void Database_NoBench::set_sparse_532_str(const char* value) {
  set_has_sparse_532_str();
  if (sparse_532_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_532_str_ = new ::std::string;
  }
  sparse_532_str_->assign(value);
}
inline void Database_NoBench::set_sparse_532_str(const char* value, size_t size) {
  set_has_sparse_532_str();
  if (sparse_532_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_532_str_ = new ::std::string;
  }
  sparse_532_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_532_str() {
  set_has_sparse_532_str();
  if (sparse_532_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_532_str_ = new ::std::string;
  }
  return sparse_532_str_;
}
inline ::std::string* Database_NoBench::release_sparse_532_str() {
  clear_has_sparse_532_str();
  if (sparse_532_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_532_str_;
    sparse_532_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_532_str(::std::string* sparse_532_str) {
  if (sparse_532_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_532_str_;
  }
  if (sparse_532_str) {
    set_has_sparse_532_str();
    sparse_532_str_ = sparse_532_str;
  } else {
    clear_has_sparse_532_str();
    sparse_532_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_533_str = 545;
inline bool Database_NoBench::has_sparse_533_str() const {
  return (_has_bits_[17] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_533_str() {
  _has_bits_[17] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_533_str() {
  _has_bits_[17] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_533_str() {
  if (sparse_533_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_533_str_->clear();
  }
  clear_has_sparse_533_str();
}
inline const ::std::string& Database_NoBench::sparse_533_str() const {
  return *sparse_533_str_;
}
inline void Database_NoBench::set_sparse_533_str(const ::std::string& value) {
  set_has_sparse_533_str();
  if (sparse_533_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_533_str_ = new ::std::string;
  }
  sparse_533_str_->assign(value);
}
inline void Database_NoBench::set_sparse_533_str(const char* value) {
  set_has_sparse_533_str();
  if (sparse_533_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_533_str_ = new ::std::string;
  }
  sparse_533_str_->assign(value);
}
inline void Database_NoBench::set_sparse_533_str(const char* value, size_t size) {
  set_has_sparse_533_str();
  if (sparse_533_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_533_str_ = new ::std::string;
  }
  sparse_533_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_533_str() {
  set_has_sparse_533_str();
  if (sparse_533_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_533_str_ = new ::std::string;
  }
  return sparse_533_str_;
}
inline ::std::string* Database_NoBench::release_sparse_533_str() {
  clear_has_sparse_533_str();
  if (sparse_533_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_533_str_;
    sparse_533_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_533_str(::std::string* sparse_533_str) {
  if (sparse_533_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_533_str_;
  }
  if (sparse_533_str) {
    set_has_sparse_533_str();
    sparse_533_str_ = sparse_533_str;
  } else {
    clear_has_sparse_533_str();
    sparse_533_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_534_str = 546;
inline bool Database_NoBench::has_sparse_534_str() const {
  return (_has_bits_[17] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_534_str() {
  _has_bits_[17] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_534_str() {
  _has_bits_[17] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_534_str() {
  if (sparse_534_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_534_str_->clear();
  }
  clear_has_sparse_534_str();
}
inline const ::std::string& Database_NoBench::sparse_534_str() const {
  return *sparse_534_str_;
}
inline void Database_NoBench::set_sparse_534_str(const ::std::string& value) {
  set_has_sparse_534_str();
  if (sparse_534_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_534_str_ = new ::std::string;
  }
  sparse_534_str_->assign(value);
}
inline void Database_NoBench::set_sparse_534_str(const char* value) {
  set_has_sparse_534_str();
  if (sparse_534_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_534_str_ = new ::std::string;
  }
  sparse_534_str_->assign(value);
}
inline void Database_NoBench::set_sparse_534_str(const char* value, size_t size) {
  set_has_sparse_534_str();
  if (sparse_534_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_534_str_ = new ::std::string;
  }
  sparse_534_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_534_str() {
  set_has_sparse_534_str();
  if (sparse_534_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_534_str_ = new ::std::string;
  }
  return sparse_534_str_;
}
inline ::std::string* Database_NoBench::release_sparse_534_str() {
  clear_has_sparse_534_str();
  if (sparse_534_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_534_str_;
    sparse_534_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_534_str(::std::string* sparse_534_str) {
  if (sparse_534_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_534_str_;
  }
  if (sparse_534_str) {
    set_has_sparse_534_str();
    sparse_534_str_ = sparse_534_str;
  } else {
    clear_has_sparse_534_str();
    sparse_534_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_535_str = 547;
inline bool Database_NoBench::has_sparse_535_str() const {
  return (_has_bits_[17] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_535_str() {
  _has_bits_[17] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_535_str() {
  _has_bits_[17] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_535_str() {
  if (sparse_535_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_535_str_->clear();
  }
  clear_has_sparse_535_str();
}
inline const ::std::string& Database_NoBench::sparse_535_str() const {
  return *sparse_535_str_;
}
inline void Database_NoBench::set_sparse_535_str(const ::std::string& value) {
  set_has_sparse_535_str();
  if (sparse_535_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_535_str_ = new ::std::string;
  }
  sparse_535_str_->assign(value);
}
inline void Database_NoBench::set_sparse_535_str(const char* value) {
  set_has_sparse_535_str();
  if (sparse_535_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_535_str_ = new ::std::string;
  }
  sparse_535_str_->assign(value);
}
inline void Database_NoBench::set_sparse_535_str(const char* value, size_t size) {
  set_has_sparse_535_str();
  if (sparse_535_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_535_str_ = new ::std::string;
  }
  sparse_535_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_535_str() {
  set_has_sparse_535_str();
  if (sparse_535_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_535_str_ = new ::std::string;
  }
  return sparse_535_str_;
}
inline ::std::string* Database_NoBench::release_sparse_535_str() {
  clear_has_sparse_535_str();
  if (sparse_535_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_535_str_;
    sparse_535_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_535_str(::std::string* sparse_535_str) {
  if (sparse_535_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_535_str_;
  }
  if (sparse_535_str) {
    set_has_sparse_535_str();
    sparse_535_str_ = sparse_535_str;
  } else {
    clear_has_sparse_535_str();
    sparse_535_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_536_str = 548;
inline bool Database_NoBench::has_sparse_536_str() const {
  return (_has_bits_[17] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_536_str() {
  _has_bits_[17] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_536_str() {
  _has_bits_[17] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_536_str() {
  if (sparse_536_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_536_str_->clear();
  }
  clear_has_sparse_536_str();
}
inline const ::std::string& Database_NoBench::sparse_536_str() const {
  return *sparse_536_str_;
}
inline void Database_NoBench::set_sparse_536_str(const ::std::string& value) {
  set_has_sparse_536_str();
  if (sparse_536_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_536_str_ = new ::std::string;
  }
  sparse_536_str_->assign(value);
}
inline void Database_NoBench::set_sparse_536_str(const char* value) {
  set_has_sparse_536_str();
  if (sparse_536_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_536_str_ = new ::std::string;
  }
  sparse_536_str_->assign(value);
}
inline void Database_NoBench::set_sparse_536_str(const char* value, size_t size) {
  set_has_sparse_536_str();
  if (sparse_536_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_536_str_ = new ::std::string;
  }
  sparse_536_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_536_str() {
  set_has_sparse_536_str();
  if (sparse_536_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_536_str_ = new ::std::string;
  }
  return sparse_536_str_;
}
inline ::std::string* Database_NoBench::release_sparse_536_str() {
  clear_has_sparse_536_str();
  if (sparse_536_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_536_str_;
    sparse_536_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_536_str(::std::string* sparse_536_str) {
  if (sparse_536_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_536_str_;
  }
  if (sparse_536_str) {
    set_has_sparse_536_str();
    sparse_536_str_ = sparse_536_str;
  } else {
    clear_has_sparse_536_str();
    sparse_536_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_537_str = 549;
inline bool Database_NoBench::has_sparse_537_str() const {
  return (_has_bits_[17] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_537_str() {
  _has_bits_[17] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_537_str() {
  _has_bits_[17] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_537_str() {
  if (sparse_537_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_537_str_->clear();
  }
  clear_has_sparse_537_str();
}
inline const ::std::string& Database_NoBench::sparse_537_str() const {
  return *sparse_537_str_;
}
inline void Database_NoBench::set_sparse_537_str(const ::std::string& value) {
  set_has_sparse_537_str();
  if (sparse_537_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_537_str_ = new ::std::string;
  }
  sparse_537_str_->assign(value);
}
inline void Database_NoBench::set_sparse_537_str(const char* value) {
  set_has_sparse_537_str();
  if (sparse_537_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_537_str_ = new ::std::string;
  }
  sparse_537_str_->assign(value);
}
inline void Database_NoBench::set_sparse_537_str(const char* value, size_t size) {
  set_has_sparse_537_str();
  if (sparse_537_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_537_str_ = new ::std::string;
  }
  sparse_537_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_537_str() {
  set_has_sparse_537_str();
  if (sparse_537_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_537_str_ = new ::std::string;
  }
  return sparse_537_str_;
}
inline ::std::string* Database_NoBench::release_sparse_537_str() {
  clear_has_sparse_537_str();
  if (sparse_537_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_537_str_;
    sparse_537_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_537_str(::std::string* sparse_537_str) {
  if (sparse_537_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_537_str_;
  }
  if (sparse_537_str) {
    set_has_sparse_537_str();
    sparse_537_str_ = sparse_537_str;
  } else {
    clear_has_sparse_537_str();
    sparse_537_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_538_str = 550;
inline bool Database_NoBench::has_sparse_538_str() const {
  return (_has_bits_[17] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_538_str() {
  _has_bits_[17] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_538_str() {
  _has_bits_[17] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_538_str() {
  if (sparse_538_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_538_str_->clear();
  }
  clear_has_sparse_538_str();
}
inline const ::std::string& Database_NoBench::sparse_538_str() const {
  return *sparse_538_str_;
}
inline void Database_NoBench::set_sparse_538_str(const ::std::string& value) {
  set_has_sparse_538_str();
  if (sparse_538_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_538_str_ = new ::std::string;
  }
  sparse_538_str_->assign(value);
}
inline void Database_NoBench::set_sparse_538_str(const char* value) {
  set_has_sparse_538_str();
  if (sparse_538_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_538_str_ = new ::std::string;
  }
  sparse_538_str_->assign(value);
}
inline void Database_NoBench::set_sparse_538_str(const char* value, size_t size) {
  set_has_sparse_538_str();
  if (sparse_538_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_538_str_ = new ::std::string;
  }
  sparse_538_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_538_str() {
  set_has_sparse_538_str();
  if (sparse_538_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_538_str_ = new ::std::string;
  }
  return sparse_538_str_;
}
inline ::std::string* Database_NoBench::release_sparse_538_str() {
  clear_has_sparse_538_str();
  if (sparse_538_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_538_str_;
    sparse_538_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_538_str(::std::string* sparse_538_str) {
  if (sparse_538_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_538_str_;
  }
  if (sparse_538_str) {
    set_has_sparse_538_str();
    sparse_538_str_ = sparse_538_str;
  } else {
    clear_has_sparse_538_str();
    sparse_538_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_539_str = 551;
inline bool Database_NoBench::has_sparse_539_str() const {
  return (_has_bits_[17] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_539_str() {
  _has_bits_[17] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_539_str() {
  _has_bits_[17] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_539_str() {
  if (sparse_539_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_539_str_->clear();
  }
  clear_has_sparse_539_str();
}
inline const ::std::string& Database_NoBench::sparse_539_str() const {
  return *sparse_539_str_;
}
inline void Database_NoBench::set_sparse_539_str(const ::std::string& value) {
  set_has_sparse_539_str();
  if (sparse_539_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_539_str_ = new ::std::string;
  }
  sparse_539_str_->assign(value);
}
inline void Database_NoBench::set_sparse_539_str(const char* value) {
  set_has_sparse_539_str();
  if (sparse_539_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_539_str_ = new ::std::string;
  }
  sparse_539_str_->assign(value);
}
inline void Database_NoBench::set_sparse_539_str(const char* value, size_t size) {
  set_has_sparse_539_str();
  if (sparse_539_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_539_str_ = new ::std::string;
  }
  sparse_539_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_539_str() {
  set_has_sparse_539_str();
  if (sparse_539_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_539_str_ = new ::std::string;
  }
  return sparse_539_str_;
}
inline ::std::string* Database_NoBench::release_sparse_539_str() {
  clear_has_sparse_539_str();
  if (sparse_539_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_539_str_;
    sparse_539_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_539_str(::std::string* sparse_539_str) {
  if (sparse_539_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_539_str_;
  }
  if (sparse_539_str) {
    set_has_sparse_539_str();
    sparse_539_str_ = sparse_539_str;
  } else {
    clear_has_sparse_539_str();
    sparse_539_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_540_str = 552;
inline bool Database_NoBench::has_sparse_540_str() const {
  return (_has_bits_[17] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_540_str() {
  _has_bits_[17] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_540_str() {
  _has_bits_[17] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_540_str() {
  if (sparse_540_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_540_str_->clear();
  }
  clear_has_sparse_540_str();
}
inline const ::std::string& Database_NoBench::sparse_540_str() const {
  return *sparse_540_str_;
}
inline void Database_NoBench::set_sparse_540_str(const ::std::string& value) {
  set_has_sparse_540_str();
  if (sparse_540_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_540_str_ = new ::std::string;
  }
  sparse_540_str_->assign(value);
}
inline void Database_NoBench::set_sparse_540_str(const char* value) {
  set_has_sparse_540_str();
  if (sparse_540_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_540_str_ = new ::std::string;
  }
  sparse_540_str_->assign(value);
}
inline void Database_NoBench::set_sparse_540_str(const char* value, size_t size) {
  set_has_sparse_540_str();
  if (sparse_540_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_540_str_ = new ::std::string;
  }
  sparse_540_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_540_str() {
  set_has_sparse_540_str();
  if (sparse_540_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_540_str_ = new ::std::string;
  }
  return sparse_540_str_;
}
inline ::std::string* Database_NoBench::release_sparse_540_str() {
  clear_has_sparse_540_str();
  if (sparse_540_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_540_str_;
    sparse_540_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_540_str(::std::string* sparse_540_str) {
  if (sparse_540_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_540_str_;
  }
  if (sparse_540_str) {
    set_has_sparse_540_str();
    sparse_540_str_ = sparse_540_str;
  } else {
    clear_has_sparse_540_str();
    sparse_540_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_541_str = 553;
inline bool Database_NoBench::has_sparse_541_str() const {
  return (_has_bits_[17] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_541_str() {
  _has_bits_[17] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_541_str() {
  _has_bits_[17] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_541_str() {
  if (sparse_541_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_541_str_->clear();
  }
  clear_has_sparse_541_str();
}
inline const ::std::string& Database_NoBench::sparse_541_str() const {
  return *sparse_541_str_;
}
inline void Database_NoBench::set_sparse_541_str(const ::std::string& value) {
  set_has_sparse_541_str();
  if (sparse_541_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_541_str_ = new ::std::string;
  }
  sparse_541_str_->assign(value);
}
inline void Database_NoBench::set_sparse_541_str(const char* value) {
  set_has_sparse_541_str();
  if (sparse_541_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_541_str_ = new ::std::string;
  }
  sparse_541_str_->assign(value);
}
inline void Database_NoBench::set_sparse_541_str(const char* value, size_t size) {
  set_has_sparse_541_str();
  if (sparse_541_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_541_str_ = new ::std::string;
  }
  sparse_541_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_541_str() {
  set_has_sparse_541_str();
  if (sparse_541_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_541_str_ = new ::std::string;
  }
  return sparse_541_str_;
}
inline ::std::string* Database_NoBench::release_sparse_541_str() {
  clear_has_sparse_541_str();
  if (sparse_541_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_541_str_;
    sparse_541_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_541_str(::std::string* sparse_541_str) {
  if (sparse_541_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_541_str_;
  }
  if (sparse_541_str) {
    set_has_sparse_541_str();
    sparse_541_str_ = sparse_541_str;
  } else {
    clear_has_sparse_541_str();
    sparse_541_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_542_str = 554;
inline bool Database_NoBench::has_sparse_542_str() const {
  return (_has_bits_[17] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_542_str() {
  _has_bits_[17] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_542_str() {
  _has_bits_[17] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_542_str() {
  if (sparse_542_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_542_str_->clear();
  }
  clear_has_sparse_542_str();
}
inline const ::std::string& Database_NoBench::sparse_542_str() const {
  return *sparse_542_str_;
}
inline void Database_NoBench::set_sparse_542_str(const ::std::string& value) {
  set_has_sparse_542_str();
  if (sparse_542_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_542_str_ = new ::std::string;
  }
  sparse_542_str_->assign(value);
}
inline void Database_NoBench::set_sparse_542_str(const char* value) {
  set_has_sparse_542_str();
  if (sparse_542_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_542_str_ = new ::std::string;
  }
  sparse_542_str_->assign(value);
}
inline void Database_NoBench::set_sparse_542_str(const char* value, size_t size) {
  set_has_sparse_542_str();
  if (sparse_542_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_542_str_ = new ::std::string;
  }
  sparse_542_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_542_str() {
  set_has_sparse_542_str();
  if (sparse_542_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_542_str_ = new ::std::string;
  }
  return sparse_542_str_;
}
inline ::std::string* Database_NoBench::release_sparse_542_str() {
  clear_has_sparse_542_str();
  if (sparse_542_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_542_str_;
    sparse_542_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_542_str(::std::string* sparse_542_str) {
  if (sparse_542_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_542_str_;
  }
  if (sparse_542_str) {
    set_has_sparse_542_str();
    sparse_542_str_ = sparse_542_str;
  } else {
    clear_has_sparse_542_str();
    sparse_542_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_543_str = 555;
inline bool Database_NoBench::has_sparse_543_str() const {
  return (_has_bits_[17] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_543_str() {
  _has_bits_[17] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_543_str() {
  _has_bits_[17] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_543_str() {
  if (sparse_543_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_543_str_->clear();
  }
  clear_has_sparse_543_str();
}
inline const ::std::string& Database_NoBench::sparse_543_str() const {
  return *sparse_543_str_;
}
inline void Database_NoBench::set_sparse_543_str(const ::std::string& value) {
  set_has_sparse_543_str();
  if (sparse_543_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_543_str_ = new ::std::string;
  }
  sparse_543_str_->assign(value);
}
inline void Database_NoBench::set_sparse_543_str(const char* value) {
  set_has_sparse_543_str();
  if (sparse_543_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_543_str_ = new ::std::string;
  }
  sparse_543_str_->assign(value);
}
inline void Database_NoBench::set_sparse_543_str(const char* value, size_t size) {
  set_has_sparse_543_str();
  if (sparse_543_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_543_str_ = new ::std::string;
  }
  sparse_543_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_543_str() {
  set_has_sparse_543_str();
  if (sparse_543_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_543_str_ = new ::std::string;
  }
  return sparse_543_str_;
}
inline ::std::string* Database_NoBench::release_sparse_543_str() {
  clear_has_sparse_543_str();
  if (sparse_543_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_543_str_;
    sparse_543_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_543_str(::std::string* sparse_543_str) {
  if (sparse_543_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_543_str_;
  }
  if (sparse_543_str) {
    set_has_sparse_543_str();
    sparse_543_str_ = sparse_543_str;
  } else {
    clear_has_sparse_543_str();
    sparse_543_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_544_str = 556;
inline bool Database_NoBench::has_sparse_544_str() const {
  return (_has_bits_[17] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_544_str() {
  _has_bits_[17] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_544_str() {
  _has_bits_[17] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_544_str() {
  if (sparse_544_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_544_str_->clear();
  }
  clear_has_sparse_544_str();
}
inline const ::std::string& Database_NoBench::sparse_544_str() const {
  return *sparse_544_str_;
}
inline void Database_NoBench::set_sparse_544_str(const ::std::string& value) {
  set_has_sparse_544_str();
  if (sparse_544_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_544_str_ = new ::std::string;
  }
  sparse_544_str_->assign(value);
}
inline void Database_NoBench::set_sparse_544_str(const char* value) {
  set_has_sparse_544_str();
  if (sparse_544_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_544_str_ = new ::std::string;
  }
  sparse_544_str_->assign(value);
}
inline void Database_NoBench::set_sparse_544_str(const char* value, size_t size) {
  set_has_sparse_544_str();
  if (sparse_544_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_544_str_ = new ::std::string;
  }
  sparse_544_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_544_str() {
  set_has_sparse_544_str();
  if (sparse_544_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_544_str_ = new ::std::string;
  }
  return sparse_544_str_;
}
inline ::std::string* Database_NoBench::release_sparse_544_str() {
  clear_has_sparse_544_str();
  if (sparse_544_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_544_str_;
    sparse_544_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_544_str(::std::string* sparse_544_str) {
  if (sparse_544_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_544_str_;
  }
  if (sparse_544_str) {
    set_has_sparse_544_str();
    sparse_544_str_ = sparse_544_str;
  } else {
    clear_has_sparse_544_str();
    sparse_544_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_545_str = 557;
inline bool Database_NoBench::has_sparse_545_str() const {
  return (_has_bits_[17] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_545_str() {
  _has_bits_[17] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_545_str() {
  _has_bits_[17] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_545_str() {
  if (sparse_545_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_545_str_->clear();
  }
  clear_has_sparse_545_str();
}
inline const ::std::string& Database_NoBench::sparse_545_str() const {
  return *sparse_545_str_;
}
inline void Database_NoBench::set_sparse_545_str(const ::std::string& value) {
  set_has_sparse_545_str();
  if (sparse_545_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_545_str_ = new ::std::string;
  }
  sparse_545_str_->assign(value);
}
inline void Database_NoBench::set_sparse_545_str(const char* value) {
  set_has_sparse_545_str();
  if (sparse_545_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_545_str_ = new ::std::string;
  }
  sparse_545_str_->assign(value);
}
inline void Database_NoBench::set_sparse_545_str(const char* value, size_t size) {
  set_has_sparse_545_str();
  if (sparse_545_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_545_str_ = new ::std::string;
  }
  sparse_545_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_545_str() {
  set_has_sparse_545_str();
  if (sparse_545_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_545_str_ = new ::std::string;
  }
  return sparse_545_str_;
}
inline ::std::string* Database_NoBench::release_sparse_545_str() {
  clear_has_sparse_545_str();
  if (sparse_545_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_545_str_;
    sparse_545_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_545_str(::std::string* sparse_545_str) {
  if (sparse_545_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_545_str_;
  }
  if (sparse_545_str) {
    set_has_sparse_545_str();
    sparse_545_str_ = sparse_545_str;
  } else {
    clear_has_sparse_545_str();
    sparse_545_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_546_str = 558;
inline bool Database_NoBench::has_sparse_546_str() const {
  return (_has_bits_[17] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_546_str() {
  _has_bits_[17] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_546_str() {
  _has_bits_[17] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_546_str() {
  if (sparse_546_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_546_str_->clear();
  }
  clear_has_sparse_546_str();
}
inline const ::std::string& Database_NoBench::sparse_546_str() const {
  return *sparse_546_str_;
}
inline void Database_NoBench::set_sparse_546_str(const ::std::string& value) {
  set_has_sparse_546_str();
  if (sparse_546_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_546_str_ = new ::std::string;
  }
  sparse_546_str_->assign(value);
}
inline void Database_NoBench::set_sparse_546_str(const char* value) {
  set_has_sparse_546_str();
  if (sparse_546_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_546_str_ = new ::std::string;
  }
  sparse_546_str_->assign(value);
}
inline void Database_NoBench::set_sparse_546_str(const char* value, size_t size) {
  set_has_sparse_546_str();
  if (sparse_546_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_546_str_ = new ::std::string;
  }
  sparse_546_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_546_str() {
  set_has_sparse_546_str();
  if (sparse_546_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_546_str_ = new ::std::string;
  }
  return sparse_546_str_;
}
inline ::std::string* Database_NoBench::release_sparse_546_str() {
  clear_has_sparse_546_str();
  if (sparse_546_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_546_str_;
    sparse_546_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_546_str(::std::string* sparse_546_str) {
  if (sparse_546_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_546_str_;
  }
  if (sparse_546_str) {
    set_has_sparse_546_str();
    sparse_546_str_ = sparse_546_str;
  } else {
    clear_has_sparse_546_str();
    sparse_546_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_547_str = 559;
inline bool Database_NoBench::has_sparse_547_str() const {
  return (_has_bits_[17] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_547_str() {
  _has_bits_[17] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_547_str() {
  _has_bits_[17] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_547_str() {
  if (sparse_547_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_547_str_->clear();
  }
  clear_has_sparse_547_str();
}
inline const ::std::string& Database_NoBench::sparse_547_str() const {
  return *sparse_547_str_;
}
inline void Database_NoBench::set_sparse_547_str(const ::std::string& value) {
  set_has_sparse_547_str();
  if (sparse_547_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_547_str_ = new ::std::string;
  }
  sparse_547_str_->assign(value);
}
inline void Database_NoBench::set_sparse_547_str(const char* value) {
  set_has_sparse_547_str();
  if (sparse_547_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_547_str_ = new ::std::string;
  }
  sparse_547_str_->assign(value);
}
inline void Database_NoBench::set_sparse_547_str(const char* value, size_t size) {
  set_has_sparse_547_str();
  if (sparse_547_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_547_str_ = new ::std::string;
  }
  sparse_547_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_547_str() {
  set_has_sparse_547_str();
  if (sparse_547_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_547_str_ = new ::std::string;
  }
  return sparse_547_str_;
}
inline ::std::string* Database_NoBench::release_sparse_547_str() {
  clear_has_sparse_547_str();
  if (sparse_547_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_547_str_;
    sparse_547_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_547_str(::std::string* sparse_547_str) {
  if (sparse_547_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_547_str_;
  }
  if (sparse_547_str) {
    set_has_sparse_547_str();
    sparse_547_str_ = sparse_547_str;
  } else {
    clear_has_sparse_547_str();
    sparse_547_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_548_str = 560;
inline bool Database_NoBench::has_sparse_548_str() const {
  return (_has_bits_[17] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_548_str() {
  _has_bits_[17] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_548_str() {
  _has_bits_[17] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_548_str() {
  if (sparse_548_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_548_str_->clear();
  }
  clear_has_sparse_548_str();
}
inline const ::std::string& Database_NoBench::sparse_548_str() const {
  return *sparse_548_str_;
}
inline void Database_NoBench::set_sparse_548_str(const ::std::string& value) {
  set_has_sparse_548_str();
  if (sparse_548_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_548_str_ = new ::std::string;
  }
  sparse_548_str_->assign(value);
}
inline void Database_NoBench::set_sparse_548_str(const char* value) {
  set_has_sparse_548_str();
  if (sparse_548_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_548_str_ = new ::std::string;
  }
  sparse_548_str_->assign(value);
}
inline void Database_NoBench::set_sparse_548_str(const char* value, size_t size) {
  set_has_sparse_548_str();
  if (sparse_548_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_548_str_ = new ::std::string;
  }
  sparse_548_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_548_str() {
  set_has_sparse_548_str();
  if (sparse_548_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_548_str_ = new ::std::string;
  }
  return sparse_548_str_;
}
inline ::std::string* Database_NoBench::release_sparse_548_str() {
  clear_has_sparse_548_str();
  if (sparse_548_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_548_str_;
    sparse_548_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_548_str(::std::string* sparse_548_str) {
  if (sparse_548_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_548_str_;
  }
  if (sparse_548_str) {
    set_has_sparse_548_str();
    sparse_548_str_ = sparse_548_str;
  } else {
    clear_has_sparse_548_str();
    sparse_548_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_549_str = 561;
inline bool Database_NoBench::has_sparse_549_str() const {
  return (_has_bits_[17] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_549_str() {
  _has_bits_[17] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_549_str() {
  _has_bits_[17] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_549_str() {
  if (sparse_549_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_549_str_->clear();
  }
  clear_has_sparse_549_str();
}
inline const ::std::string& Database_NoBench::sparse_549_str() const {
  return *sparse_549_str_;
}
inline void Database_NoBench::set_sparse_549_str(const ::std::string& value) {
  set_has_sparse_549_str();
  if (sparse_549_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_549_str_ = new ::std::string;
  }
  sparse_549_str_->assign(value);
}
inline void Database_NoBench::set_sparse_549_str(const char* value) {
  set_has_sparse_549_str();
  if (sparse_549_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_549_str_ = new ::std::string;
  }
  sparse_549_str_->assign(value);
}
inline void Database_NoBench::set_sparse_549_str(const char* value, size_t size) {
  set_has_sparse_549_str();
  if (sparse_549_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_549_str_ = new ::std::string;
  }
  sparse_549_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_549_str() {
  set_has_sparse_549_str();
  if (sparse_549_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_549_str_ = new ::std::string;
  }
  return sparse_549_str_;
}
inline ::std::string* Database_NoBench::release_sparse_549_str() {
  clear_has_sparse_549_str();
  if (sparse_549_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_549_str_;
    sparse_549_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_549_str(::std::string* sparse_549_str) {
  if (sparse_549_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_549_str_;
  }
  if (sparse_549_str) {
    set_has_sparse_549_str();
    sparse_549_str_ = sparse_549_str;
  } else {
    clear_has_sparse_549_str();
    sparse_549_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_550_str = 562;
inline bool Database_NoBench::has_sparse_550_str() const {
  return (_has_bits_[17] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_550_str() {
  _has_bits_[17] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_550_str() {
  _has_bits_[17] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_550_str() {
  if (sparse_550_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_550_str_->clear();
  }
  clear_has_sparse_550_str();
}
inline const ::std::string& Database_NoBench::sparse_550_str() const {
  return *sparse_550_str_;
}
inline void Database_NoBench::set_sparse_550_str(const ::std::string& value) {
  set_has_sparse_550_str();
  if (sparse_550_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_550_str_ = new ::std::string;
  }
  sparse_550_str_->assign(value);
}
inline void Database_NoBench::set_sparse_550_str(const char* value) {
  set_has_sparse_550_str();
  if (sparse_550_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_550_str_ = new ::std::string;
  }
  sparse_550_str_->assign(value);
}
inline void Database_NoBench::set_sparse_550_str(const char* value, size_t size) {
  set_has_sparse_550_str();
  if (sparse_550_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_550_str_ = new ::std::string;
  }
  sparse_550_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_550_str() {
  set_has_sparse_550_str();
  if (sparse_550_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_550_str_ = new ::std::string;
  }
  return sparse_550_str_;
}
inline ::std::string* Database_NoBench::release_sparse_550_str() {
  clear_has_sparse_550_str();
  if (sparse_550_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_550_str_;
    sparse_550_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_550_str(::std::string* sparse_550_str) {
  if (sparse_550_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_550_str_;
  }
  if (sparse_550_str) {
    set_has_sparse_550_str();
    sparse_550_str_ = sparse_550_str;
  } else {
    clear_has_sparse_550_str();
    sparse_550_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_551_str = 563;
inline bool Database_NoBench::has_sparse_551_str() const {
  return (_has_bits_[17] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_551_str() {
  _has_bits_[17] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_551_str() {
  _has_bits_[17] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_551_str() {
  if (sparse_551_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_551_str_->clear();
  }
  clear_has_sparse_551_str();
}
inline const ::std::string& Database_NoBench::sparse_551_str() const {
  return *sparse_551_str_;
}
inline void Database_NoBench::set_sparse_551_str(const ::std::string& value) {
  set_has_sparse_551_str();
  if (sparse_551_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_551_str_ = new ::std::string;
  }
  sparse_551_str_->assign(value);
}
inline void Database_NoBench::set_sparse_551_str(const char* value) {
  set_has_sparse_551_str();
  if (sparse_551_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_551_str_ = new ::std::string;
  }
  sparse_551_str_->assign(value);
}
inline void Database_NoBench::set_sparse_551_str(const char* value, size_t size) {
  set_has_sparse_551_str();
  if (sparse_551_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_551_str_ = new ::std::string;
  }
  sparse_551_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_551_str() {
  set_has_sparse_551_str();
  if (sparse_551_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_551_str_ = new ::std::string;
  }
  return sparse_551_str_;
}
inline ::std::string* Database_NoBench::release_sparse_551_str() {
  clear_has_sparse_551_str();
  if (sparse_551_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_551_str_;
    sparse_551_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_551_str(::std::string* sparse_551_str) {
  if (sparse_551_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_551_str_;
  }
  if (sparse_551_str) {
    set_has_sparse_551_str();
    sparse_551_str_ = sparse_551_str;
  } else {
    clear_has_sparse_551_str();
    sparse_551_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_552_str = 564;
inline bool Database_NoBench::has_sparse_552_str() const {
  return (_has_bits_[17] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_552_str() {
  _has_bits_[17] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_552_str() {
  _has_bits_[17] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_552_str() {
  if (sparse_552_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_552_str_->clear();
  }
  clear_has_sparse_552_str();
}
inline const ::std::string& Database_NoBench::sparse_552_str() const {
  return *sparse_552_str_;
}
inline void Database_NoBench::set_sparse_552_str(const ::std::string& value) {
  set_has_sparse_552_str();
  if (sparse_552_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_552_str_ = new ::std::string;
  }
  sparse_552_str_->assign(value);
}
inline void Database_NoBench::set_sparse_552_str(const char* value) {
  set_has_sparse_552_str();
  if (sparse_552_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_552_str_ = new ::std::string;
  }
  sparse_552_str_->assign(value);
}
inline void Database_NoBench::set_sparse_552_str(const char* value, size_t size) {
  set_has_sparse_552_str();
  if (sparse_552_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_552_str_ = new ::std::string;
  }
  sparse_552_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_552_str() {
  set_has_sparse_552_str();
  if (sparse_552_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_552_str_ = new ::std::string;
  }
  return sparse_552_str_;
}
inline ::std::string* Database_NoBench::release_sparse_552_str() {
  clear_has_sparse_552_str();
  if (sparse_552_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_552_str_;
    sparse_552_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_552_str(::std::string* sparse_552_str) {
  if (sparse_552_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_552_str_;
  }
  if (sparse_552_str) {
    set_has_sparse_552_str();
    sparse_552_str_ = sparse_552_str;
  } else {
    clear_has_sparse_552_str();
    sparse_552_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_553_str = 565;
inline bool Database_NoBench::has_sparse_553_str() const {
  return (_has_bits_[17] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_553_str() {
  _has_bits_[17] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_553_str() {
  _has_bits_[17] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_553_str() {
  if (sparse_553_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_553_str_->clear();
  }
  clear_has_sparse_553_str();
}
inline const ::std::string& Database_NoBench::sparse_553_str() const {
  return *sparse_553_str_;
}
inline void Database_NoBench::set_sparse_553_str(const ::std::string& value) {
  set_has_sparse_553_str();
  if (sparse_553_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_553_str_ = new ::std::string;
  }
  sparse_553_str_->assign(value);
}
inline void Database_NoBench::set_sparse_553_str(const char* value) {
  set_has_sparse_553_str();
  if (sparse_553_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_553_str_ = new ::std::string;
  }
  sparse_553_str_->assign(value);
}
inline void Database_NoBench::set_sparse_553_str(const char* value, size_t size) {
  set_has_sparse_553_str();
  if (sparse_553_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_553_str_ = new ::std::string;
  }
  sparse_553_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_553_str() {
  set_has_sparse_553_str();
  if (sparse_553_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_553_str_ = new ::std::string;
  }
  return sparse_553_str_;
}
inline ::std::string* Database_NoBench::release_sparse_553_str() {
  clear_has_sparse_553_str();
  if (sparse_553_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_553_str_;
    sparse_553_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_553_str(::std::string* sparse_553_str) {
  if (sparse_553_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_553_str_;
  }
  if (sparse_553_str) {
    set_has_sparse_553_str();
    sparse_553_str_ = sparse_553_str;
  } else {
    clear_has_sparse_553_str();
    sparse_553_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_554_str = 566;
inline bool Database_NoBench::has_sparse_554_str() const {
  return (_has_bits_[17] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_554_str() {
  _has_bits_[17] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_554_str() {
  _has_bits_[17] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_554_str() {
  if (sparse_554_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_554_str_->clear();
  }
  clear_has_sparse_554_str();
}
inline const ::std::string& Database_NoBench::sparse_554_str() const {
  return *sparse_554_str_;
}
inline void Database_NoBench::set_sparse_554_str(const ::std::string& value) {
  set_has_sparse_554_str();
  if (sparse_554_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_554_str_ = new ::std::string;
  }
  sparse_554_str_->assign(value);
}
inline void Database_NoBench::set_sparse_554_str(const char* value) {
  set_has_sparse_554_str();
  if (sparse_554_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_554_str_ = new ::std::string;
  }
  sparse_554_str_->assign(value);
}
inline void Database_NoBench::set_sparse_554_str(const char* value, size_t size) {
  set_has_sparse_554_str();
  if (sparse_554_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_554_str_ = new ::std::string;
  }
  sparse_554_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_554_str() {
  set_has_sparse_554_str();
  if (sparse_554_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_554_str_ = new ::std::string;
  }
  return sparse_554_str_;
}
inline ::std::string* Database_NoBench::release_sparse_554_str() {
  clear_has_sparse_554_str();
  if (sparse_554_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_554_str_;
    sparse_554_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_554_str(::std::string* sparse_554_str) {
  if (sparse_554_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_554_str_;
  }
  if (sparse_554_str) {
    set_has_sparse_554_str();
    sparse_554_str_ = sparse_554_str;
  } else {
    clear_has_sparse_554_str();
    sparse_554_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_555_str = 567;
inline bool Database_NoBench::has_sparse_555_str() const {
  return (_has_bits_[17] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_555_str() {
  _has_bits_[17] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_555_str() {
  _has_bits_[17] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_555_str() {
  if (sparse_555_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_555_str_->clear();
  }
  clear_has_sparse_555_str();
}
inline const ::std::string& Database_NoBench::sparse_555_str() const {
  return *sparse_555_str_;
}
inline void Database_NoBench::set_sparse_555_str(const ::std::string& value) {
  set_has_sparse_555_str();
  if (sparse_555_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_555_str_ = new ::std::string;
  }
  sparse_555_str_->assign(value);
}
inline void Database_NoBench::set_sparse_555_str(const char* value) {
  set_has_sparse_555_str();
  if (sparse_555_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_555_str_ = new ::std::string;
  }
  sparse_555_str_->assign(value);
}
inline void Database_NoBench::set_sparse_555_str(const char* value, size_t size) {
  set_has_sparse_555_str();
  if (sparse_555_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_555_str_ = new ::std::string;
  }
  sparse_555_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_555_str() {
  set_has_sparse_555_str();
  if (sparse_555_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_555_str_ = new ::std::string;
  }
  return sparse_555_str_;
}
inline ::std::string* Database_NoBench::release_sparse_555_str() {
  clear_has_sparse_555_str();
  if (sparse_555_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_555_str_;
    sparse_555_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_555_str(::std::string* sparse_555_str) {
  if (sparse_555_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_555_str_;
  }
  if (sparse_555_str) {
    set_has_sparse_555_str();
    sparse_555_str_ = sparse_555_str;
  } else {
    clear_has_sparse_555_str();
    sparse_555_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_556_str = 568;
inline bool Database_NoBench::has_sparse_556_str() const {
  return (_has_bits_[17] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_556_str() {
  _has_bits_[17] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_556_str() {
  _has_bits_[17] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_556_str() {
  if (sparse_556_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_556_str_->clear();
  }
  clear_has_sparse_556_str();
}
inline const ::std::string& Database_NoBench::sparse_556_str() const {
  return *sparse_556_str_;
}
inline void Database_NoBench::set_sparse_556_str(const ::std::string& value) {
  set_has_sparse_556_str();
  if (sparse_556_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_556_str_ = new ::std::string;
  }
  sparse_556_str_->assign(value);
}
inline void Database_NoBench::set_sparse_556_str(const char* value) {
  set_has_sparse_556_str();
  if (sparse_556_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_556_str_ = new ::std::string;
  }
  sparse_556_str_->assign(value);
}
inline void Database_NoBench::set_sparse_556_str(const char* value, size_t size) {
  set_has_sparse_556_str();
  if (sparse_556_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_556_str_ = new ::std::string;
  }
  sparse_556_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_556_str() {
  set_has_sparse_556_str();
  if (sparse_556_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_556_str_ = new ::std::string;
  }
  return sparse_556_str_;
}
inline ::std::string* Database_NoBench::release_sparse_556_str() {
  clear_has_sparse_556_str();
  if (sparse_556_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_556_str_;
    sparse_556_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_556_str(::std::string* sparse_556_str) {
  if (sparse_556_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_556_str_;
  }
  if (sparse_556_str) {
    set_has_sparse_556_str();
    sparse_556_str_ = sparse_556_str;
  } else {
    clear_has_sparse_556_str();
    sparse_556_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_557_str = 569;
inline bool Database_NoBench::has_sparse_557_str() const {
  return (_has_bits_[17] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_557_str() {
  _has_bits_[17] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_557_str() {
  _has_bits_[17] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_557_str() {
  if (sparse_557_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_557_str_->clear();
  }
  clear_has_sparse_557_str();
}
inline const ::std::string& Database_NoBench::sparse_557_str() const {
  return *sparse_557_str_;
}
inline void Database_NoBench::set_sparse_557_str(const ::std::string& value) {
  set_has_sparse_557_str();
  if (sparse_557_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_557_str_ = new ::std::string;
  }
  sparse_557_str_->assign(value);
}
inline void Database_NoBench::set_sparse_557_str(const char* value) {
  set_has_sparse_557_str();
  if (sparse_557_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_557_str_ = new ::std::string;
  }
  sparse_557_str_->assign(value);
}
inline void Database_NoBench::set_sparse_557_str(const char* value, size_t size) {
  set_has_sparse_557_str();
  if (sparse_557_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_557_str_ = new ::std::string;
  }
  sparse_557_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_557_str() {
  set_has_sparse_557_str();
  if (sparse_557_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_557_str_ = new ::std::string;
  }
  return sparse_557_str_;
}
inline ::std::string* Database_NoBench::release_sparse_557_str() {
  clear_has_sparse_557_str();
  if (sparse_557_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_557_str_;
    sparse_557_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_557_str(::std::string* sparse_557_str) {
  if (sparse_557_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_557_str_;
  }
  if (sparse_557_str) {
    set_has_sparse_557_str();
    sparse_557_str_ = sparse_557_str;
  } else {
    clear_has_sparse_557_str();
    sparse_557_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_558_str = 570;
inline bool Database_NoBench::has_sparse_558_str() const {
  return (_has_bits_[17] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_558_str() {
  _has_bits_[17] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_558_str() {
  _has_bits_[17] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_558_str() {
  if (sparse_558_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_558_str_->clear();
  }
  clear_has_sparse_558_str();
}
inline const ::std::string& Database_NoBench::sparse_558_str() const {
  return *sparse_558_str_;
}
inline void Database_NoBench::set_sparse_558_str(const ::std::string& value) {
  set_has_sparse_558_str();
  if (sparse_558_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_558_str_ = new ::std::string;
  }
  sparse_558_str_->assign(value);
}
inline void Database_NoBench::set_sparse_558_str(const char* value) {
  set_has_sparse_558_str();
  if (sparse_558_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_558_str_ = new ::std::string;
  }
  sparse_558_str_->assign(value);
}
inline void Database_NoBench::set_sparse_558_str(const char* value, size_t size) {
  set_has_sparse_558_str();
  if (sparse_558_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_558_str_ = new ::std::string;
  }
  sparse_558_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_558_str() {
  set_has_sparse_558_str();
  if (sparse_558_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_558_str_ = new ::std::string;
  }
  return sparse_558_str_;
}
inline ::std::string* Database_NoBench::release_sparse_558_str() {
  clear_has_sparse_558_str();
  if (sparse_558_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_558_str_;
    sparse_558_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_558_str(::std::string* sparse_558_str) {
  if (sparse_558_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_558_str_;
  }
  if (sparse_558_str) {
    set_has_sparse_558_str();
    sparse_558_str_ = sparse_558_str;
  } else {
    clear_has_sparse_558_str();
    sparse_558_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_559_str = 571;
inline bool Database_NoBench::has_sparse_559_str() const {
  return (_has_bits_[17] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_559_str() {
  _has_bits_[17] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_559_str() {
  _has_bits_[17] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_559_str() {
  if (sparse_559_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_559_str_->clear();
  }
  clear_has_sparse_559_str();
}
inline const ::std::string& Database_NoBench::sparse_559_str() const {
  return *sparse_559_str_;
}
inline void Database_NoBench::set_sparse_559_str(const ::std::string& value) {
  set_has_sparse_559_str();
  if (sparse_559_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_559_str_ = new ::std::string;
  }
  sparse_559_str_->assign(value);
}
inline void Database_NoBench::set_sparse_559_str(const char* value) {
  set_has_sparse_559_str();
  if (sparse_559_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_559_str_ = new ::std::string;
  }
  sparse_559_str_->assign(value);
}
inline void Database_NoBench::set_sparse_559_str(const char* value, size_t size) {
  set_has_sparse_559_str();
  if (sparse_559_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_559_str_ = new ::std::string;
  }
  sparse_559_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_559_str() {
  set_has_sparse_559_str();
  if (sparse_559_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_559_str_ = new ::std::string;
  }
  return sparse_559_str_;
}
inline ::std::string* Database_NoBench::release_sparse_559_str() {
  clear_has_sparse_559_str();
  if (sparse_559_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_559_str_;
    sparse_559_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_559_str(::std::string* sparse_559_str) {
  if (sparse_559_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_559_str_;
  }
  if (sparse_559_str) {
    set_has_sparse_559_str();
    sparse_559_str_ = sparse_559_str;
  } else {
    clear_has_sparse_559_str();
    sparse_559_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_560_str = 572;
inline bool Database_NoBench::has_sparse_560_str() const {
  return (_has_bits_[17] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_560_str() {
  _has_bits_[17] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_560_str() {
  _has_bits_[17] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_560_str() {
  if (sparse_560_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_560_str_->clear();
  }
  clear_has_sparse_560_str();
}
inline const ::std::string& Database_NoBench::sparse_560_str() const {
  return *sparse_560_str_;
}
inline void Database_NoBench::set_sparse_560_str(const ::std::string& value) {
  set_has_sparse_560_str();
  if (sparse_560_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_560_str_ = new ::std::string;
  }
  sparse_560_str_->assign(value);
}
inline void Database_NoBench::set_sparse_560_str(const char* value) {
  set_has_sparse_560_str();
  if (sparse_560_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_560_str_ = new ::std::string;
  }
  sparse_560_str_->assign(value);
}
inline void Database_NoBench::set_sparse_560_str(const char* value, size_t size) {
  set_has_sparse_560_str();
  if (sparse_560_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_560_str_ = new ::std::string;
  }
  sparse_560_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_560_str() {
  set_has_sparse_560_str();
  if (sparse_560_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_560_str_ = new ::std::string;
  }
  return sparse_560_str_;
}
inline ::std::string* Database_NoBench::release_sparse_560_str() {
  clear_has_sparse_560_str();
  if (sparse_560_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_560_str_;
    sparse_560_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_560_str(::std::string* sparse_560_str) {
  if (sparse_560_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_560_str_;
  }
  if (sparse_560_str) {
    set_has_sparse_560_str();
    sparse_560_str_ = sparse_560_str;
  } else {
    clear_has_sparse_560_str();
    sparse_560_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_561_str = 573;
inline bool Database_NoBench::has_sparse_561_str() const {
  return (_has_bits_[17] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_561_str() {
  _has_bits_[17] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_561_str() {
  _has_bits_[17] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_561_str() {
  if (sparse_561_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_561_str_->clear();
  }
  clear_has_sparse_561_str();
}
inline const ::std::string& Database_NoBench::sparse_561_str() const {
  return *sparse_561_str_;
}
inline void Database_NoBench::set_sparse_561_str(const ::std::string& value) {
  set_has_sparse_561_str();
  if (sparse_561_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_561_str_ = new ::std::string;
  }
  sparse_561_str_->assign(value);
}
inline void Database_NoBench::set_sparse_561_str(const char* value) {
  set_has_sparse_561_str();
  if (sparse_561_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_561_str_ = new ::std::string;
  }
  sparse_561_str_->assign(value);
}
inline void Database_NoBench::set_sparse_561_str(const char* value, size_t size) {
  set_has_sparse_561_str();
  if (sparse_561_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_561_str_ = new ::std::string;
  }
  sparse_561_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_561_str() {
  set_has_sparse_561_str();
  if (sparse_561_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_561_str_ = new ::std::string;
  }
  return sparse_561_str_;
}
inline ::std::string* Database_NoBench::release_sparse_561_str() {
  clear_has_sparse_561_str();
  if (sparse_561_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_561_str_;
    sparse_561_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_561_str(::std::string* sparse_561_str) {
  if (sparse_561_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_561_str_;
  }
  if (sparse_561_str) {
    set_has_sparse_561_str();
    sparse_561_str_ = sparse_561_str;
  } else {
    clear_has_sparse_561_str();
    sparse_561_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_562_str = 574;
inline bool Database_NoBench::has_sparse_562_str() const {
  return (_has_bits_[17] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_562_str() {
  _has_bits_[17] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_562_str() {
  _has_bits_[17] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_562_str() {
  if (sparse_562_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_562_str_->clear();
  }
  clear_has_sparse_562_str();
}
inline const ::std::string& Database_NoBench::sparse_562_str() const {
  return *sparse_562_str_;
}
inline void Database_NoBench::set_sparse_562_str(const ::std::string& value) {
  set_has_sparse_562_str();
  if (sparse_562_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_562_str_ = new ::std::string;
  }
  sparse_562_str_->assign(value);
}
inline void Database_NoBench::set_sparse_562_str(const char* value) {
  set_has_sparse_562_str();
  if (sparse_562_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_562_str_ = new ::std::string;
  }
  sparse_562_str_->assign(value);
}
inline void Database_NoBench::set_sparse_562_str(const char* value, size_t size) {
  set_has_sparse_562_str();
  if (sparse_562_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_562_str_ = new ::std::string;
  }
  sparse_562_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_562_str() {
  set_has_sparse_562_str();
  if (sparse_562_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_562_str_ = new ::std::string;
  }
  return sparse_562_str_;
}
inline ::std::string* Database_NoBench::release_sparse_562_str() {
  clear_has_sparse_562_str();
  if (sparse_562_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_562_str_;
    sparse_562_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_562_str(::std::string* sparse_562_str) {
  if (sparse_562_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_562_str_;
  }
  if (sparse_562_str) {
    set_has_sparse_562_str();
    sparse_562_str_ = sparse_562_str;
  } else {
    clear_has_sparse_562_str();
    sparse_562_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_563_str = 575;
inline bool Database_NoBench::has_sparse_563_str() const {
  return (_has_bits_[18] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_563_str() {
  _has_bits_[18] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_563_str() {
  _has_bits_[18] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_563_str() {
  if (sparse_563_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_563_str_->clear();
  }
  clear_has_sparse_563_str();
}
inline const ::std::string& Database_NoBench::sparse_563_str() const {
  return *sparse_563_str_;
}
inline void Database_NoBench::set_sparse_563_str(const ::std::string& value) {
  set_has_sparse_563_str();
  if (sparse_563_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_563_str_ = new ::std::string;
  }
  sparse_563_str_->assign(value);
}
inline void Database_NoBench::set_sparse_563_str(const char* value) {
  set_has_sparse_563_str();
  if (sparse_563_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_563_str_ = new ::std::string;
  }
  sparse_563_str_->assign(value);
}
inline void Database_NoBench::set_sparse_563_str(const char* value, size_t size) {
  set_has_sparse_563_str();
  if (sparse_563_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_563_str_ = new ::std::string;
  }
  sparse_563_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_563_str() {
  set_has_sparse_563_str();
  if (sparse_563_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_563_str_ = new ::std::string;
  }
  return sparse_563_str_;
}
inline ::std::string* Database_NoBench::release_sparse_563_str() {
  clear_has_sparse_563_str();
  if (sparse_563_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_563_str_;
    sparse_563_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_563_str(::std::string* sparse_563_str) {
  if (sparse_563_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_563_str_;
  }
  if (sparse_563_str) {
    set_has_sparse_563_str();
    sparse_563_str_ = sparse_563_str;
  } else {
    clear_has_sparse_563_str();
    sparse_563_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_564_str = 576;
inline bool Database_NoBench::has_sparse_564_str() const {
  return (_has_bits_[18] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_564_str() {
  _has_bits_[18] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_564_str() {
  _has_bits_[18] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_564_str() {
  if (sparse_564_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_564_str_->clear();
  }
  clear_has_sparse_564_str();
}
inline const ::std::string& Database_NoBench::sparse_564_str() const {
  return *sparse_564_str_;
}
inline void Database_NoBench::set_sparse_564_str(const ::std::string& value) {
  set_has_sparse_564_str();
  if (sparse_564_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_564_str_ = new ::std::string;
  }
  sparse_564_str_->assign(value);
}
inline void Database_NoBench::set_sparse_564_str(const char* value) {
  set_has_sparse_564_str();
  if (sparse_564_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_564_str_ = new ::std::string;
  }
  sparse_564_str_->assign(value);
}
inline void Database_NoBench::set_sparse_564_str(const char* value, size_t size) {
  set_has_sparse_564_str();
  if (sparse_564_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_564_str_ = new ::std::string;
  }
  sparse_564_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_564_str() {
  set_has_sparse_564_str();
  if (sparse_564_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_564_str_ = new ::std::string;
  }
  return sparse_564_str_;
}
inline ::std::string* Database_NoBench::release_sparse_564_str() {
  clear_has_sparse_564_str();
  if (sparse_564_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_564_str_;
    sparse_564_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_564_str(::std::string* sparse_564_str) {
  if (sparse_564_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_564_str_;
  }
  if (sparse_564_str) {
    set_has_sparse_564_str();
    sparse_564_str_ = sparse_564_str;
  } else {
    clear_has_sparse_564_str();
    sparse_564_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_565_str = 577;
inline bool Database_NoBench::has_sparse_565_str() const {
  return (_has_bits_[18] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_565_str() {
  _has_bits_[18] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_565_str() {
  _has_bits_[18] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_565_str() {
  if (sparse_565_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_565_str_->clear();
  }
  clear_has_sparse_565_str();
}
inline const ::std::string& Database_NoBench::sparse_565_str() const {
  return *sparse_565_str_;
}
inline void Database_NoBench::set_sparse_565_str(const ::std::string& value) {
  set_has_sparse_565_str();
  if (sparse_565_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_565_str_ = new ::std::string;
  }
  sparse_565_str_->assign(value);
}
inline void Database_NoBench::set_sparse_565_str(const char* value) {
  set_has_sparse_565_str();
  if (sparse_565_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_565_str_ = new ::std::string;
  }
  sparse_565_str_->assign(value);
}
inline void Database_NoBench::set_sparse_565_str(const char* value, size_t size) {
  set_has_sparse_565_str();
  if (sparse_565_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_565_str_ = new ::std::string;
  }
  sparse_565_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_565_str() {
  set_has_sparse_565_str();
  if (sparse_565_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_565_str_ = new ::std::string;
  }
  return sparse_565_str_;
}
inline ::std::string* Database_NoBench::release_sparse_565_str() {
  clear_has_sparse_565_str();
  if (sparse_565_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_565_str_;
    sparse_565_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_565_str(::std::string* sparse_565_str) {
  if (sparse_565_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_565_str_;
  }
  if (sparse_565_str) {
    set_has_sparse_565_str();
    sparse_565_str_ = sparse_565_str;
  } else {
    clear_has_sparse_565_str();
    sparse_565_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_566_str = 578;
inline bool Database_NoBench::has_sparse_566_str() const {
  return (_has_bits_[18] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_566_str() {
  _has_bits_[18] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_566_str() {
  _has_bits_[18] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_566_str() {
  if (sparse_566_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_566_str_->clear();
  }
  clear_has_sparse_566_str();
}
inline const ::std::string& Database_NoBench::sparse_566_str() const {
  return *sparse_566_str_;
}
inline void Database_NoBench::set_sparse_566_str(const ::std::string& value) {
  set_has_sparse_566_str();
  if (sparse_566_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_566_str_ = new ::std::string;
  }
  sparse_566_str_->assign(value);
}
inline void Database_NoBench::set_sparse_566_str(const char* value) {
  set_has_sparse_566_str();
  if (sparse_566_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_566_str_ = new ::std::string;
  }
  sparse_566_str_->assign(value);
}
inline void Database_NoBench::set_sparse_566_str(const char* value, size_t size) {
  set_has_sparse_566_str();
  if (sparse_566_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_566_str_ = new ::std::string;
  }
  sparse_566_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_566_str() {
  set_has_sparse_566_str();
  if (sparse_566_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_566_str_ = new ::std::string;
  }
  return sparse_566_str_;
}
inline ::std::string* Database_NoBench::release_sparse_566_str() {
  clear_has_sparse_566_str();
  if (sparse_566_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_566_str_;
    sparse_566_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_566_str(::std::string* sparse_566_str) {
  if (sparse_566_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_566_str_;
  }
  if (sparse_566_str) {
    set_has_sparse_566_str();
    sparse_566_str_ = sparse_566_str;
  } else {
    clear_has_sparse_566_str();
    sparse_566_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_567_str = 579;
inline bool Database_NoBench::has_sparse_567_str() const {
  return (_has_bits_[18] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_567_str() {
  _has_bits_[18] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_567_str() {
  _has_bits_[18] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_567_str() {
  if (sparse_567_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_567_str_->clear();
  }
  clear_has_sparse_567_str();
}
inline const ::std::string& Database_NoBench::sparse_567_str() const {
  return *sparse_567_str_;
}
inline void Database_NoBench::set_sparse_567_str(const ::std::string& value) {
  set_has_sparse_567_str();
  if (sparse_567_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_567_str_ = new ::std::string;
  }
  sparse_567_str_->assign(value);
}
inline void Database_NoBench::set_sparse_567_str(const char* value) {
  set_has_sparse_567_str();
  if (sparse_567_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_567_str_ = new ::std::string;
  }
  sparse_567_str_->assign(value);
}
inline void Database_NoBench::set_sparse_567_str(const char* value, size_t size) {
  set_has_sparse_567_str();
  if (sparse_567_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_567_str_ = new ::std::string;
  }
  sparse_567_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_567_str() {
  set_has_sparse_567_str();
  if (sparse_567_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_567_str_ = new ::std::string;
  }
  return sparse_567_str_;
}
inline ::std::string* Database_NoBench::release_sparse_567_str() {
  clear_has_sparse_567_str();
  if (sparse_567_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_567_str_;
    sparse_567_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_567_str(::std::string* sparse_567_str) {
  if (sparse_567_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_567_str_;
  }
  if (sparse_567_str) {
    set_has_sparse_567_str();
    sparse_567_str_ = sparse_567_str;
  } else {
    clear_has_sparse_567_str();
    sparse_567_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_568_str = 580;
inline bool Database_NoBench::has_sparse_568_str() const {
  return (_has_bits_[18] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_568_str() {
  _has_bits_[18] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_568_str() {
  _has_bits_[18] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_568_str() {
  if (sparse_568_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_568_str_->clear();
  }
  clear_has_sparse_568_str();
}
inline const ::std::string& Database_NoBench::sparse_568_str() const {
  return *sparse_568_str_;
}
inline void Database_NoBench::set_sparse_568_str(const ::std::string& value) {
  set_has_sparse_568_str();
  if (sparse_568_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_568_str_ = new ::std::string;
  }
  sparse_568_str_->assign(value);
}
inline void Database_NoBench::set_sparse_568_str(const char* value) {
  set_has_sparse_568_str();
  if (sparse_568_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_568_str_ = new ::std::string;
  }
  sparse_568_str_->assign(value);
}
inline void Database_NoBench::set_sparse_568_str(const char* value, size_t size) {
  set_has_sparse_568_str();
  if (sparse_568_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_568_str_ = new ::std::string;
  }
  sparse_568_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_568_str() {
  set_has_sparse_568_str();
  if (sparse_568_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_568_str_ = new ::std::string;
  }
  return sparse_568_str_;
}
inline ::std::string* Database_NoBench::release_sparse_568_str() {
  clear_has_sparse_568_str();
  if (sparse_568_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_568_str_;
    sparse_568_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_568_str(::std::string* sparse_568_str) {
  if (sparse_568_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_568_str_;
  }
  if (sparse_568_str) {
    set_has_sparse_568_str();
    sparse_568_str_ = sparse_568_str;
  } else {
    clear_has_sparse_568_str();
    sparse_568_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_569_str = 581;
inline bool Database_NoBench::has_sparse_569_str() const {
  return (_has_bits_[18] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_569_str() {
  _has_bits_[18] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_569_str() {
  _has_bits_[18] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_569_str() {
  if (sparse_569_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_569_str_->clear();
  }
  clear_has_sparse_569_str();
}
inline const ::std::string& Database_NoBench::sparse_569_str() const {
  return *sparse_569_str_;
}
inline void Database_NoBench::set_sparse_569_str(const ::std::string& value) {
  set_has_sparse_569_str();
  if (sparse_569_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_569_str_ = new ::std::string;
  }
  sparse_569_str_->assign(value);
}
inline void Database_NoBench::set_sparse_569_str(const char* value) {
  set_has_sparse_569_str();
  if (sparse_569_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_569_str_ = new ::std::string;
  }
  sparse_569_str_->assign(value);
}
inline void Database_NoBench::set_sparse_569_str(const char* value, size_t size) {
  set_has_sparse_569_str();
  if (sparse_569_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_569_str_ = new ::std::string;
  }
  sparse_569_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_569_str() {
  set_has_sparse_569_str();
  if (sparse_569_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_569_str_ = new ::std::string;
  }
  return sparse_569_str_;
}
inline ::std::string* Database_NoBench::release_sparse_569_str() {
  clear_has_sparse_569_str();
  if (sparse_569_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_569_str_;
    sparse_569_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_569_str(::std::string* sparse_569_str) {
  if (sparse_569_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_569_str_;
  }
  if (sparse_569_str) {
    set_has_sparse_569_str();
    sparse_569_str_ = sparse_569_str;
  } else {
    clear_has_sparse_569_str();
    sparse_569_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_570_str = 582;
inline bool Database_NoBench::has_sparse_570_str() const {
  return (_has_bits_[18] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_570_str() {
  _has_bits_[18] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_570_str() {
  _has_bits_[18] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_570_str() {
  if (sparse_570_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_570_str_->clear();
  }
  clear_has_sparse_570_str();
}
inline const ::std::string& Database_NoBench::sparse_570_str() const {
  return *sparse_570_str_;
}
inline void Database_NoBench::set_sparse_570_str(const ::std::string& value) {
  set_has_sparse_570_str();
  if (sparse_570_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_570_str_ = new ::std::string;
  }
  sparse_570_str_->assign(value);
}
inline void Database_NoBench::set_sparse_570_str(const char* value) {
  set_has_sparse_570_str();
  if (sparse_570_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_570_str_ = new ::std::string;
  }
  sparse_570_str_->assign(value);
}
inline void Database_NoBench::set_sparse_570_str(const char* value, size_t size) {
  set_has_sparse_570_str();
  if (sparse_570_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_570_str_ = new ::std::string;
  }
  sparse_570_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_570_str() {
  set_has_sparse_570_str();
  if (sparse_570_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_570_str_ = new ::std::string;
  }
  return sparse_570_str_;
}
inline ::std::string* Database_NoBench::release_sparse_570_str() {
  clear_has_sparse_570_str();
  if (sparse_570_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_570_str_;
    sparse_570_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_570_str(::std::string* sparse_570_str) {
  if (sparse_570_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_570_str_;
  }
  if (sparse_570_str) {
    set_has_sparse_570_str();
    sparse_570_str_ = sparse_570_str;
  } else {
    clear_has_sparse_570_str();
    sparse_570_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_571_str = 583;
inline bool Database_NoBench::has_sparse_571_str() const {
  return (_has_bits_[18] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_571_str() {
  _has_bits_[18] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_571_str() {
  _has_bits_[18] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_571_str() {
  if (sparse_571_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_571_str_->clear();
  }
  clear_has_sparse_571_str();
}
inline const ::std::string& Database_NoBench::sparse_571_str() const {
  return *sparse_571_str_;
}
inline void Database_NoBench::set_sparse_571_str(const ::std::string& value) {
  set_has_sparse_571_str();
  if (sparse_571_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_571_str_ = new ::std::string;
  }
  sparse_571_str_->assign(value);
}
inline void Database_NoBench::set_sparse_571_str(const char* value) {
  set_has_sparse_571_str();
  if (sparse_571_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_571_str_ = new ::std::string;
  }
  sparse_571_str_->assign(value);
}
inline void Database_NoBench::set_sparse_571_str(const char* value, size_t size) {
  set_has_sparse_571_str();
  if (sparse_571_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_571_str_ = new ::std::string;
  }
  sparse_571_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_571_str() {
  set_has_sparse_571_str();
  if (sparse_571_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_571_str_ = new ::std::string;
  }
  return sparse_571_str_;
}
inline ::std::string* Database_NoBench::release_sparse_571_str() {
  clear_has_sparse_571_str();
  if (sparse_571_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_571_str_;
    sparse_571_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_571_str(::std::string* sparse_571_str) {
  if (sparse_571_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_571_str_;
  }
  if (sparse_571_str) {
    set_has_sparse_571_str();
    sparse_571_str_ = sparse_571_str;
  } else {
    clear_has_sparse_571_str();
    sparse_571_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_572_str = 584;
inline bool Database_NoBench::has_sparse_572_str() const {
  return (_has_bits_[18] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_572_str() {
  _has_bits_[18] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_572_str() {
  _has_bits_[18] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_572_str() {
  if (sparse_572_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_572_str_->clear();
  }
  clear_has_sparse_572_str();
}
inline const ::std::string& Database_NoBench::sparse_572_str() const {
  return *sparse_572_str_;
}
inline void Database_NoBench::set_sparse_572_str(const ::std::string& value) {
  set_has_sparse_572_str();
  if (sparse_572_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_572_str_ = new ::std::string;
  }
  sparse_572_str_->assign(value);
}
inline void Database_NoBench::set_sparse_572_str(const char* value) {
  set_has_sparse_572_str();
  if (sparse_572_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_572_str_ = new ::std::string;
  }
  sparse_572_str_->assign(value);
}
inline void Database_NoBench::set_sparse_572_str(const char* value, size_t size) {
  set_has_sparse_572_str();
  if (sparse_572_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_572_str_ = new ::std::string;
  }
  sparse_572_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_572_str() {
  set_has_sparse_572_str();
  if (sparse_572_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_572_str_ = new ::std::string;
  }
  return sparse_572_str_;
}
inline ::std::string* Database_NoBench::release_sparse_572_str() {
  clear_has_sparse_572_str();
  if (sparse_572_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_572_str_;
    sparse_572_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_572_str(::std::string* sparse_572_str) {
  if (sparse_572_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_572_str_;
  }
  if (sparse_572_str) {
    set_has_sparse_572_str();
    sparse_572_str_ = sparse_572_str;
  } else {
    clear_has_sparse_572_str();
    sparse_572_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_573_str = 585;
inline bool Database_NoBench::has_sparse_573_str() const {
  return (_has_bits_[18] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_573_str() {
  _has_bits_[18] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_573_str() {
  _has_bits_[18] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_573_str() {
  if (sparse_573_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_573_str_->clear();
  }
  clear_has_sparse_573_str();
}
inline const ::std::string& Database_NoBench::sparse_573_str() const {
  return *sparse_573_str_;
}
inline void Database_NoBench::set_sparse_573_str(const ::std::string& value) {
  set_has_sparse_573_str();
  if (sparse_573_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_573_str_ = new ::std::string;
  }
  sparse_573_str_->assign(value);
}
inline void Database_NoBench::set_sparse_573_str(const char* value) {
  set_has_sparse_573_str();
  if (sparse_573_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_573_str_ = new ::std::string;
  }
  sparse_573_str_->assign(value);
}
inline void Database_NoBench::set_sparse_573_str(const char* value, size_t size) {
  set_has_sparse_573_str();
  if (sparse_573_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_573_str_ = new ::std::string;
  }
  sparse_573_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_573_str() {
  set_has_sparse_573_str();
  if (sparse_573_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_573_str_ = new ::std::string;
  }
  return sparse_573_str_;
}
inline ::std::string* Database_NoBench::release_sparse_573_str() {
  clear_has_sparse_573_str();
  if (sparse_573_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_573_str_;
    sparse_573_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_573_str(::std::string* sparse_573_str) {
  if (sparse_573_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_573_str_;
  }
  if (sparse_573_str) {
    set_has_sparse_573_str();
    sparse_573_str_ = sparse_573_str;
  } else {
    clear_has_sparse_573_str();
    sparse_573_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_574_str = 586;
inline bool Database_NoBench::has_sparse_574_str() const {
  return (_has_bits_[18] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_574_str() {
  _has_bits_[18] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_574_str() {
  _has_bits_[18] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_574_str() {
  if (sparse_574_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_574_str_->clear();
  }
  clear_has_sparse_574_str();
}
inline const ::std::string& Database_NoBench::sparse_574_str() const {
  return *sparse_574_str_;
}
inline void Database_NoBench::set_sparse_574_str(const ::std::string& value) {
  set_has_sparse_574_str();
  if (sparse_574_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_574_str_ = new ::std::string;
  }
  sparse_574_str_->assign(value);
}
inline void Database_NoBench::set_sparse_574_str(const char* value) {
  set_has_sparse_574_str();
  if (sparse_574_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_574_str_ = new ::std::string;
  }
  sparse_574_str_->assign(value);
}
inline void Database_NoBench::set_sparse_574_str(const char* value, size_t size) {
  set_has_sparse_574_str();
  if (sparse_574_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_574_str_ = new ::std::string;
  }
  sparse_574_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_574_str() {
  set_has_sparse_574_str();
  if (sparse_574_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_574_str_ = new ::std::string;
  }
  return sparse_574_str_;
}
inline ::std::string* Database_NoBench::release_sparse_574_str() {
  clear_has_sparse_574_str();
  if (sparse_574_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_574_str_;
    sparse_574_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_574_str(::std::string* sparse_574_str) {
  if (sparse_574_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_574_str_;
  }
  if (sparse_574_str) {
    set_has_sparse_574_str();
    sparse_574_str_ = sparse_574_str;
  } else {
    clear_has_sparse_574_str();
    sparse_574_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_575_str = 587;
inline bool Database_NoBench::has_sparse_575_str() const {
  return (_has_bits_[18] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_575_str() {
  _has_bits_[18] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_575_str() {
  _has_bits_[18] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_575_str() {
  if (sparse_575_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_575_str_->clear();
  }
  clear_has_sparse_575_str();
}
inline const ::std::string& Database_NoBench::sparse_575_str() const {
  return *sparse_575_str_;
}
inline void Database_NoBench::set_sparse_575_str(const ::std::string& value) {
  set_has_sparse_575_str();
  if (sparse_575_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_575_str_ = new ::std::string;
  }
  sparse_575_str_->assign(value);
}
inline void Database_NoBench::set_sparse_575_str(const char* value) {
  set_has_sparse_575_str();
  if (sparse_575_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_575_str_ = new ::std::string;
  }
  sparse_575_str_->assign(value);
}
inline void Database_NoBench::set_sparse_575_str(const char* value, size_t size) {
  set_has_sparse_575_str();
  if (sparse_575_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_575_str_ = new ::std::string;
  }
  sparse_575_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_575_str() {
  set_has_sparse_575_str();
  if (sparse_575_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_575_str_ = new ::std::string;
  }
  return sparse_575_str_;
}
inline ::std::string* Database_NoBench::release_sparse_575_str() {
  clear_has_sparse_575_str();
  if (sparse_575_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_575_str_;
    sparse_575_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_575_str(::std::string* sparse_575_str) {
  if (sparse_575_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_575_str_;
  }
  if (sparse_575_str) {
    set_has_sparse_575_str();
    sparse_575_str_ = sparse_575_str;
  } else {
    clear_has_sparse_575_str();
    sparse_575_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_576_str = 588;
inline bool Database_NoBench::has_sparse_576_str() const {
  return (_has_bits_[18] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_576_str() {
  _has_bits_[18] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_576_str() {
  _has_bits_[18] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_576_str() {
  if (sparse_576_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_576_str_->clear();
  }
  clear_has_sparse_576_str();
}
inline const ::std::string& Database_NoBench::sparse_576_str() const {
  return *sparse_576_str_;
}
inline void Database_NoBench::set_sparse_576_str(const ::std::string& value) {
  set_has_sparse_576_str();
  if (sparse_576_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_576_str_ = new ::std::string;
  }
  sparse_576_str_->assign(value);
}
inline void Database_NoBench::set_sparse_576_str(const char* value) {
  set_has_sparse_576_str();
  if (sparse_576_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_576_str_ = new ::std::string;
  }
  sparse_576_str_->assign(value);
}
inline void Database_NoBench::set_sparse_576_str(const char* value, size_t size) {
  set_has_sparse_576_str();
  if (sparse_576_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_576_str_ = new ::std::string;
  }
  sparse_576_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_576_str() {
  set_has_sparse_576_str();
  if (sparse_576_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_576_str_ = new ::std::string;
  }
  return sparse_576_str_;
}
inline ::std::string* Database_NoBench::release_sparse_576_str() {
  clear_has_sparse_576_str();
  if (sparse_576_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_576_str_;
    sparse_576_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_576_str(::std::string* sparse_576_str) {
  if (sparse_576_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_576_str_;
  }
  if (sparse_576_str) {
    set_has_sparse_576_str();
    sparse_576_str_ = sparse_576_str;
  } else {
    clear_has_sparse_576_str();
    sparse_576_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_577_str = 589;
inline bool Database_NoBench::has_sparse_577_str() const {
  return (_has_bits_[18] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_577_str() {
  _has_bits_[18] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_577_str() {
  _has_bits_[18] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_577_str() {
  if (sparse_577_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_577_str_->clear();
  }
  clear_has_sparse_577_str();
}
inline const ::std::string& Database_NoBench::sparse_577_str() const {
  return *sparse_577_str_;
}
inline void Database_NoBench::set_sparse_577_str(const ::std::string& value) {
  set_has_sparse_577_str();
  if (sparse_577_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_577_str_ = new ::std::string;
  }
  sparse_577_str_->assign(value);
}
inline void Database_NoBench::set_sparse_577_str(const char* value) {
  set_has_sparse_577_str();
  if (sparse_577_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_577_str_ = new ::std::string;
  }
  sparse_577_str_->assign(value);
}
inline void Database_NoBench::set_sparse_577_str(const char* value, size_t size) {
  set_has_sparse_577_str();
  if (sparse_577_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_577_str_ = new ::std::string;
  }
  sparse_577_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_577_str() {
  set_has_sparse_577_str();
  if (sparse_577_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_577_str_ = new ::std::string;
  }
  return sparse_577_str_;
}
inline ::std::string* Database_NoBench::release_sparse_577_str() {
  clear_has_sparse_577_str();
  if (sparse_577_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_577_str_;
    sparse_577_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_577_str(::std::string* sparse_577_str) {
  if (sparse_577_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_577_str_;
  }
  if (sparse_577_str) {
    set_has_sparse_577_str();
    sparse_577_str_ = sparse_577_str;
  } else {
    clear_has_sparse_577_str();
    sparse_577_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_578_str = 590;
inline bool Database_NoBench::has_sparse_578_str() const {
  return (_has_bits_[18] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_578_str() {
  _has_bits_[18] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_578_str() {
  _has_bits_[18] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_578_str() {
  if (sparse_578_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_578_str_->clear();
  }
  clear_has_sparse_578_str();
}
inline const ::std::string& Database_NoBench::sparse_578_str() const {
  return *sparse_578_str_;
}
inline void Database_NoBench::set_sparse_578_str(const ::std::string& value) {
  set_has_sparse_578_str();
  if (sparse_578_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_578_str_ = new ::std::string;
  }
  sparse_578_str_->assign(value);
}
inline void Database_NoBench::set_sparse_578_str(const char* value) {
  set_has_sparse_578_str();
  if (sparse_578_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_578_str_ = new ::std::string;
  }
  sparse_578_str_->assign(value);
}
inline void Database_NoBench::set_sparse_578_str(const char* value, size_t size) {
  set_has_sparse_578_str();
  if (sparse_578_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_578_str_ = new ::std::string;
  }
  sparse_578_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_578_str() {
  set_has_sparse_578_str();
  if (sparse_578_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_578_str_ = new ::std::string;
  }
  return sparse_578_str_;
}
inline ::std::string* Database_NoBench::release_sparse_578_str() {
  clear_has_sparse_578_str();
  if (sparse_578_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_578_str_;
    sparse_578_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_578_str(::std::string* sparse_578_str) {
  if (sparse_578_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_578_str_;
  }
  if (sparse_578_str) {
    set_has_sparse_578_str();
    sparse_578_str_ = sparse_578_str;
  } else {
    clear_has_sparse_578_str();
    sparse_578_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_579_str = 591;
inline bool Database_NoBench::has_sparse_579_str() const {
  return (_has_bits_[18] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_579_str() {
  _has_bits_[18] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_579_str() {
  _has_bits_[18] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_579_str() {
  if (sparse_579_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_579_str_->clear();
  }
  clear_has_sparse_579_str();
}
inline const ::std::string& Database_NoBench::sparse_579_str() const {
  return *sparse_579_str_;
}
inline void Database_NoBench::set_sparse_579_str(const ::std::string& value) {
  set_has_sparse_579_str();
  if (sparse_579_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_579_str_ = new ::std::string;
  }
  sparse_579_str_->assign(value);
}
inline void Database_NoBench::set_sparse_579_str(const char* value) {
  set_has_sparse_579_str();
  if (sparse_579_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_579_str_ = new ::std::string;
  }
  sparse_579_str_->assign(value);
}
inline void Database_NoBench::set_sparse_579_str(const char* value, size_t size) {
  set_has_sparse_579_str();
  if (sparse_579_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_579_str_ = new ::std::string;
  }
  sparse_579_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_579_str() {
  set_has_sparse_579_str();
  if (sparse_579_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_579_str_ = new ::std::string;
  }
  return sparse_579_str_;
}
inline ::std::string* Database_NoBench::release_sparse_579_str() {
  clear_has_sparse_579_str();
  if (sparse_579_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_579_str_;
    sparse_579_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_579_str(::std::string* sparse_579_str) {
  if (sparse_579_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_579_str_;
  }
  if (sparse_579_str) {
    set_has_sparse_579_str();
    sparse_579_str_ = sparse_579_str;
  } else {
    clear_has_sparse_579_str();
    sparse_579_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_580_str = 592;
inline bool Database_NoBench::has_sparse_580_str() const {
  return (_has_bits_[18] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_580_str() {
  _has_bits_[18] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_580_str() {
  _has_bits_[18] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_580_str() {
  if (sparse_580_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_580_str_->clear();
  }
  clear_has_sparse_580_str();
}
inline const ::std::string& Database_NoBench::sparse_580_str() const {
  return *sparse_580_str_;
}
inline void Database_NoBench::set_sparse_580_str(const ::std::string& value) {
  set_has_sparse_580_str();
  if (sparse_580_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_580_str_ = new ::std::string;
  }
  sparse_580_str_->assign(value);
}
inline void Database_NoBench::set_sparse_580_str(const char* value) {
  set_has_sparse_580_str();
  if (sparse_580_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_580_str_ = new ::std::string;
  }
  sparse_580_str_->assign(value);
}
inline void Database_NoBench::set_sparse_580_str(const char* value, size_t size) {
  set_has_sparse_580_str();
  if (sparse_580_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_580_str_ = new ::std::string;
  }
  sparse_580_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_580_str() {
  set_has_sparse_580_str();
  if (sparse_580_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_580_str_ = new ::std::string;
  }
  return sparse_580_str_;
}
inline ::std::string* Database_NoBench::release_sparse_580_str() {
  clear_has_sparse_580_str();
  if (sparse_580_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_580_str_;
    sparse_580_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_580_str(::std::string* sparse_580_str) {
  if (sparse_580_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_580_str_;
  }
  if (sparse_580_str) {
    set_has_sparse_580_str();
    sparse_580_str_ = sparse_580_str;
  } else {
    clear_has_sparse_580_str();
    sparse_580_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_581_str = 593;
inline bool Database_NoBench::has_sparse_581_str() const {
  return (_has_bits_[18] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_581_str() {
  _has_bits_[18] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_581_str() {
  _has_bits_[18] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_581_str() {
  if (sparse_581_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_581_str_->clear();
  }
  clear_has_sparse_581_str();
}
inline const ::std::string& Database_NoBench::sparse_581_str() const {
  return *sparse_581_str_;
}
inline void Database_NoBench::set_sparse_581_str(const ::std::string& value) {
  set_has_sparse_581_str();
  if (sparse_581_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_581_str_ = new ::std::string;
  }
  sparse_581_str_->assign(value);
}
inline void Database_NoBench::set_sparse_581_str(const char* value) {
  set_has_sparse_581_str();
  if (sparse_581_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_581_str_ = new ::std::string;
  }
  sparse_581_str_->assign(value);
}
inline void Database_NoBench::set_sparse_581_str(const char* value, size_t size) {
  set_has_sparse_581_str();
  if (sparse_581_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_581_str_ = new ::std::string;
  }
  sparse_581_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_581_str() {
  set_has_sparse_581_str();
  if (sparse_581_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_581_str_ = new ::std::string;
  }
  return sparse_581_str_;
}
inline ::std::string* Database_NoBench::release_sparse_581_str() {
  clear_has_sparse_581_str();
  if (sparse_581_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_581_str_;
    sparse_581_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_581_str(::std::string* sparse_581_str) {
  if (sparse_581_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_581_str_;
  }
  if (sparse_581_str) {
    set_has_sparse_581_str();
    sparse_581_str_ = sparse_581_str;
  } else {
    clear_has_sparse_581_str();
    sparse_581_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_582_str = 594;
inline bool Database_NoBench::has_sparse_582_str() const {
  return (_has_bits_[18] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_582_str() {
  _has_bits_[18] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_582_str() {
  _has_bits_[18] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_582_str() {
  if (sparse_582_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_582_str_->clear();
  }
  clear_has_sparse_582_str();
}
inline const ::std::string& Database_NoBench::sparse_582_str() const {
  return *sparse_582_str_;
}
inline void Database_NoBench::set_sparse_582_str(const ::std::string& value) {
  set_has_sparse_582_str();
  if (sparse_582_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_582_str_ = new ::std::string;
  }
  sparse_582_str_->assign(value);
}
inline void Database_NoBench::set_sparse_582_str(const char* value) {
  set_has_sparse_582_str();
  if (sparse_582_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_582_str_ = new ::std::string;
  }
  sparse_582_str_->assign(value);
}
inline void Database_NoBench::set_sparse_582_str(const char* value, size_t size) {
  set_has_sparse_582_str();
  if (sparse_582_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_582_str_ = new ::std::string;
  }
  sparse_582_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_582_str() {
  set_has_sparse_582_str();
  if (sparse_582_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_582_str_ = new ::std::string;
  }
  return sparse_582_str_;
}
inline ::std::string* Database_NoBench::release_sparse_582_str() {
  clear_has_sparse_582_str();
  if (sparse_582_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_582_str_;
    sparse_582_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_582_str(::std::string* sparse_582_str) {
  if (sparse_582_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_582_str_;
  }
  if (sparse_582_str) {
    set_has_sparse_582_str();
    sparse_582_str_ = sparse_582_str;
  } else {
    clear_has_sparse_582_str();
    sparse_582_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_583_str = 595;
inline bool Database_NoBench::has_sparse_583_str() const {
  return (_has_bits_[18] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_583_str() {
  _has_bits_[18] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_583_str() {
  _has_bits_[18] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_583_str() {
  if (sparse_583_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_583_str_->clear();
  }
  clear_has_sparse_583_str();
}
inline const ::std::string& Database_NoBench::sparse_583_str() const {
  return *sparse_583_str_;
}
inline void Database_NoBench::set_sparse_583_str(const ::std::string& value) {
  set_has_sparse_583_str();
  if (sparse_583_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_583_str_ = new ::std::string;
  }
  sparse_583_str_->assign(value);
}
inline void Database_NoBench::set_sparse_583_str(const char* value) {
  set_has_sparse_583_str();
  if (sparse_583_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_583_str_ = new ::std::string;
  }
  sparse_583_str_->assign(value);
}
inline void Database_NoBench::set_sparse_583_str(const char* value, size_t size) {
  set_has_sparse_583_str();
  if (sparse_583_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_583_str_ = new ::std::string;
  }
  sparse_583_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_583_str() {
  set_has_sparse_583_str();
  if (sparse_583_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_583_str_ = new ::std::string;
  }
  return sparse_583_str_;
}
inline ::std::string* Database_NoBench::release_sparse_583_str() {
  clear_has_sparse_583_str();
  if (sparse_583_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_583_str_;
    sparse_583_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_583_str(::std::string* sparse_583_str) {
  if (sparse_583_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_583_str_;
  }
  if (sparse_583_str) {
    set_has_sparse_583_str();
    sparse_583_str_ = sparse_583_str;
  } else {
    clear_has_sparse_583_str();
    sparse_583_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_584_str = 596;
inline bool Database_NoBench::has_sparse_584_str() const {
  return (_has_bits_[18] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_584_str() {
  _has_bits_[18] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_584_str() {
  _has_bits_[18] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_584_str() {
  if (sparse_584_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_584_str_->clear();
  }
  clear_has_sparse_584_str();
}
inline const ::std::string& Database_NoBench::sparse_584_str() const {
  return *sparse_584_str_;
}
inline void Database_NoBench::set_sparse_584_str(const ::std::string& value) {
  set_has_sparse_584_str();
  if (sparse_584_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_584_str_ = new ::std::string;
  }
  sparse_584_str_->assign(value);
}
inline void Database_NoBench::set_sparse_584_str(const char* value) {
  set_has_sparse_584_str();
  if (sparse_584_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_584_str_ = new ::std::string;
  }
  sparse_584_str_->assign(value);
}
inline void Database_NoBench::set_sparse_584_str(const char* value, size_t size) {
  set_has_sparse_584_str();
  if (sparse_584_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_584_str_ = new ::std::string;
  }
  sparse_584_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_584_str() {
  set_has_sparse_584_str();
  if (sparse_584_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_584_str_ = new ::std::string;
  }
  return sparse_584_str_;
}
inline ::std::string* Database_NoBench::release_sparse_584_str() {
  clear_has_sparse_584_str();
  if (sparse_584_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_584_str_;
    sparse_584_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_584_str(::std::string* sparse_584_str) {
  if (sparse_584_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_584_str_;
  }
  if (sparse_584_str) {
    set_has_sparse_584_str();
    sparse_584_str_ = sparse_584_str;
  } else {
    clear_has_sparse_584_str();
    sparse_584_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_585_str = 597;
inline bool Database_NoBench::has_sparse_585_str() const {
  return (_has_bits_[18] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_585_str() {
  _has_bits_[18] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_585_str() {
  _has_bits_[18] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_585_str() {
  if (sparse_585_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_585_str_->clear();
  }
  clear_has_sparse_585_str();
}
inline const ::std::string& Database_NoBench::sparse_585_str() const {
  return *sparse_585_str_;
}
inline void Database_NoBench::set_sparse_585_str(const ::std::string& value) {
  set_has_sparse_585_str();
  if (sparse_585_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_585_str_ = new ::std::string;
  }
  sparse_585_str_->assign(value);
}
inline void Database_NoBench::set_sparse_585_str(const char* value) {
  set_has_sparse_585_str();
  if (sparse_585_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_585_str_ = new ::std::string;
  }
  sparse_585_str_->assign(value);
}
inline void Database_NoBench::set_sparse_585_str(const char* value, size_t size) {
  set_has_sparse_585_str();
  if (sparse_585_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_585_str_ = new ::std::string;
  }
  sparse_585_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_585_str() {
  set_has_sparse_585_str();
  if (sparse_585_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_585_str_ = new ::std::string;
  }
  return sparse_585_str_;
}
inline ::std::string* Database_NoBench::release_sparse_585_str() {
  clear_has_sparse_585_str();
  if (sparse_585_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_585_str_;
    sparse_585_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_585_str(::std::string* sparse_585_str) {
  if (sparse_585_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_585_str_;
  }
  if (sparse_585_str) {
    set_has_sparse_585_str();
    sparse_585_str_ = sparse_585_str;
  } else {
    clear_has_sparse_585_str();
    sparse_585_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_586_str = 598;
inline bool Database_NoBench::has_sparse_586_str() const {
  return (_has_bits_[18] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_586_str() {
  _has_bits_[18] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_586_str() {
  _has_bits_[18] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_586_str() {
  if (sparse_586_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_586_str_->clear();
  }
  clear_has_sparse_586_str();
}
inline const ::std::string& Database_NoBench::sparse_586_str() const {
  return *sparse_586_str_;
}
inline void Database_NoBench::set_sparse_586_str(const ::std::string& value) {
  set_has_sparse_586_str();
  if (sparse_586_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_586_str_ = new ::std::string;
  }
  sparse_586_str_->assign(value);
}
inline void Database_NoBench::set_sparse_586_str(const char* value) {
  set_has_sparse_586_str();
  if (sparse_586_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_586_str_ = new ::std::string;
  }
  sparse_586_str_->assign(value);
}
inline void Database_NoBench::set_sparse_586_str(const char* value, size_t size) {
  set_has_sparse_586_str();
  if (sparse_586_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_586_str_ = new ::std::string;
  }
  sparse_586_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_586_str() {
  set_has_sparse_586_str();
  if (sparse_586_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_586_str_ = new ::std::string;
  }
  return sparse_586_str_;
}
inline ::std::string* Database_NoBench::release_sparse_586_str() {
  clear_has_sparse_586_str();
  if (sparse_586_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_586_str_;
    sparse_586_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_586_str(::std::string* sparse_586_str) {
  if (sparse_586_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_586_str_;
  }
  if (sparse_586_str) {
    set_has_sparse_586_str();
    sparse_586_str_ = sparse_586_str;
  } else {
    clear_has_sparse_586_str();
    sparse_586_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_587_str = 599;
inline bool Database_NoBench::has_sparse_587_str() const {
  return (_has_bits_[18] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_587_str() {
  _has_bits_[18] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_587_str() {
  _has_bits_[18] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_587_str() {
  if (sparse_587_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_587_str_->clear();
  }
  clear_has_sparse_587_str();
}
inline const ::std::string& Database_NoBench::sparse_587_str() const {
  return *sparse_587_str_;
}
inline void Database_NoBench::set_sparse_587_str(const ::std::string& value) {
  set_has_sparse_587_str();
  if (sparse_587_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_587_str_ = new ::std::string;
  }
  sparse_587_str_->assign(value);
}
inline void Database_NoBench::set_sparse_587_str(const char* value) {
  set_has_sparse_587_str();
  if (sparse_587_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_587_str_ = new ::std::string;
  }
  sparse_587_str_->assign(value);
}
inline void Database_NoBench::set_sparse_587_str(const char* value, size_t size) {
  set_has_sparse_587_str();
  if (sparse_587_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_587_str_ = new ::std::string;
  }
  sparse_587_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_587_str() {
  set_has_sparse_587_str();
  if (sparse_587_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_587_str_ = new ::std::string;
  }
  return sparse_587_str_;
}
inline ::std::string* Database_NoBench::release_sparse_587_str() {
  clear_has_sparse_587_str();
  if (sparse_587_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_587_str_;
    sparse_587_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_587_str(::std::string* sparse_587_str) {
  if (sparse_587_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_587_str_;
  }
  if (sparse_587_str) {
    set_has_sparse_587_str();
    sparse_587_str_ = sparse_587_str;
  } else {
    clear_has_sparse_587_str();
    sparse_587_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_588_str = 600;
inline bool Database_NoBench::has_sparse_588_str() const {
  return (_has_bits_[18] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_588_str() {
  _has_bits_[18] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_588_str() {
  _has_bits_[18] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_588_str() {
  if (sparse_588_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_588_str_->clear();
  }
  clear_has_sparse_588_str();
}
inline const ::std::string& Database_NoBench::sparse_588_str() const {
  return *sparse_588_str_;
}
inline void Database_NoBench::set_sparse_588_str(const ::std::string& value) {
  set_has_sparse_588_str();
  if (sparse_588_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_588_str_ = new ::std::string;
  }
  sparse_588_str_->assign(value);
}
inline void Database_NoBench::set_sparse_588_str(const char* value) {
  set_has_sparse_588_str();
  if (sparse_588_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_588_str_ = new ::std::string;
  }
  sparse_588_str_->assign(value);
}
inline void Database_NoBench::set_sparse_588_str(const char* value, size_t size) {
  set_has_sparse_588_str();
  if (sparse_588_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_588_str_ = new ::std::string;
  }
  sparse_588_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_588_str() {
  set_has_sparse_588_str();
  if (sparse_588_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_588_str_ = new ::std::string;
  }
  return sparse_588_str_;
}
inline ::std::string* Database_NoBench::release_sparse_588_str() {
  clear_has_sparse_588_str();
  if (sparse_588_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_588_str_;
    sparse_588_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_588_str(::std::string* sparse_588_str) {
  if (sparse_588_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_588_str_;
  }
  if (sparse_588_str) {
    set_has_sparse_588_str();
    sparse_588_str_ = sparse_588_str;
  } else {
    clear_has_sparse_588_str();
    sparse_588_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_589_str = 601;
inline bool Database_NoBench::has_sparse_589_str() const {
  return (_has_bits_[18] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_589_str() {
  _has_bits_[18] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_589_str() {
  _has_bits_[18] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_589_str() {
  if (sparse_589_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_589_str_->clear();
  }
  clear_has_sparse_589_str();
}
inline const ::std::string& Database_NoBench::sparse_589_str() const {
  return *sparse_589_str_;
}
inline void Database_NoBench::set_sparse_589_str(const ::std::string& value) {
  set_has_sparse_589_str();
  if (sparse_589_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_589_str_ = new ::std::string;
  }
  sparse_589_str_->assign(value);
}
inline void Database_NoBench::set_sparse_589_str(const char* value) {
  set_has_sparse_589_str();
  if (sparse_589_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_589_str_ = new ::std::string;
  }
  sparse_589_str_->assign(value);
}
inline void Database_NoBench::set_sparse_589_str(const char* value, size_t size) {
  set_has_sparse_589_str();
  if (sparse_589_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_589_str_ = new ::std::string;
  }
  sparse_589_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_589_str() {
  set_has_sparse_589_str();
  if (sparse_589_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_589_str_ = new ::std::string;
  }
  return sparse_589_str_;
}
inline ::std::string* Database_NoBench::release_sparse_589_str() {
  clear_has_sparse_589_str();
  if (sparse_589_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_589_str_;
    sparse_589_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_589_str(::std::string* sparse_589_str) {
  if (sparse_589_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_589_str_;
  }
  if (sparse_589_str) {
    set_has_sparse_589_str();
    sparse_589_str_ = sparse_589_str;
  } else {
    clear_has_sparse_589_str();
    sparse_589_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_590_str = 602;
inline bool Database_NoBench::has_sparse_590_str() const {
  return (_has_bits_[18] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_590_str() {
  _has_bits_[18] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_590_str() {
  _has_bits_[18] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_590_str() {
  if (sparse_590_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_590_str_->clear();
  }
  clear_has_sparse_590_str();
}
inline const ::std::string& Database_NoBench::sparse_590_str() const {
  return *sparse_590_str_;
}
inline void Database_NoBench::set_sparse_590_str(const ::std::string& value) {
  set_has_sparse_590_str();
  if (sparse_590_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_590_str_ = new ::std::string;
  }
  sparse_590_str_->assign(value);
}
inline void Database_NoBench::set_sparse_590_str(const char* value) {
  set_has_sparse_590_str();
  if (sparse_590_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_590_str_ = new ::std::string;
  }
  sparse_590_str_->assign(value);
}
inline void Database_NoBench::set_sparse_590_str(const char* value, size_t size) {
  set_has_sparse_590_str();
  if (sparse_590_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_590_str_ = new ::std::string;
  }
  sparse_590_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_590_str() {
  set_has_sparse_590_str();
  if (sparse_590_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_590_str_ = new ::std::string;
  }
  return sparse_590_str_;
}
inline ::std::string* Database_NoBench::release_sparse_590_str() {
  clear_has_sparse_590_str();
  if (sparse_590_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_590_str_;
    sparse_590_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_590_str(::std::string* sparse_590_str) {
  if (sparse_590_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_590_str_;
  }
  if (sparse_590_str) {
    set_has_sparse_590_str();
    sparse_590_str_ = sparse_590_str;
  } else {
    clear_has_sparse_590_str();
    sparse_590_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_591_str = 603;
inline bool Database_NoBench::has_sparse_591_str() const {
  return (_has_bits_[18] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_591_str() {
  _has_bits_[18] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_591_str() {
  _has_bits_[18] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_591_str() {
  if (sparse_591_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_591_str_->clear();
  }
  clear_has_sparse_591_str();
}
inline const ::std::string& Database_NoBench::sparse_591_str() const {
  return *sparse_591_str_;
}
inline void Database_NoBench::set_sparse_591_str(const ::std::string& value) {
  set_has_sparse_591_str();
  if (sparse_591_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_591_str_ = new ::std::string;
  }
  sparse_591_str_->assign(value);
}
inline void Database_NoBench::set_sparse_591_str(const char* value) {
  set_has_sparse_591_str();
  if (sparse_591_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_591_str_ = new ::std::string;
  }
  sparse_591_str_->assign(value);
}
inline void Database_NoBench::set_sparse_591_str(const char* value, size_t size) {
  set_has_sparse_591_str();
  if (sparse_591_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_591_str_ = new ::std::string;
  }
  sparse_591_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_591_str() {
  set_has_sparse_591_str();
  if (sparse_591_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_591_str_ = new ::std::string;
  }
  return sparse_591_str_;
}
inline ::std::string* Database_NoBench::release_sparse_591_str() {
  clear_has_sparse_591_str();
  if (sparse_591_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_591_str_;
    sparse_591_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_591_str(::std::string* sparse_591_str) {
  if (sparse_591_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_591_str_;
  }
  if (sparse_591_str) {
    set_has_sparse_591_str();
    sparse_591_str_ = sparse_591_str;
  } else {
    clear_has_sparse_591_str();
    sparse_591_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_592_str = 604;
inline bool Database_NoBench::has_sparse_592_str() const {
  return (_has_bits_[18] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_592_str() {
  _has_bits_[18] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_592_str() {
  _has_bits_[18] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_592_str() {
  if (sparse_592_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_592_str_->clear();
  }
  clear_has_sparse_592_str();
}
inline const ::std::string& Database_NoBench::sparse_592_str() const {
  return *sparse_592_str_;
}
inline void Database_NoBench::set_sparse_592_str(const ::std::string& value) {
  set_has_sparse_592_str();
  if (sparse_592_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_592_str_ = new ::std::string;
  }
  sparse_592_str_->assign(value);
}
inline void Database_NoBench::set_sparse_592_str(const char* value) {
  set_has_sparse_592_str();
  if (sparse_592_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_592_str_ = new ::std::string;
  }
  sparse_592_str_->assign(value);
}
inline void Database_NoBench::set_sparse_592_str(const char* value, size_t size) {
  set_has_sparse_592_str();
  if (sparse_592_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_592_str_ = new ::std::string;
  }
  sparse_592_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_592_str() {
  set_has_sparse_592_str();
  if (sparse_592_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_592_str_ = new ::std::string;
  }
  return sparse_592_str_;
}
inline ::std::string* Database_NoBench::release_sparse_592_str() {
  clear_has_sparse_592_str();
  if (sparse_592_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_592_str_;
    sparse_592_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_592_str(::std::string* sparse_592_str) {
  if (sparse_592_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_592_str_;
  }
  if (sparse_592_str) {
    set_has_sparse_592_str();
    sparse_592_str_ = sparse_592_str;
  } else {
    clear_has_sparse_592_str();
    sparse_592_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_593_str = 605;
inline bool Database_NoBench::has_sparse_593_str() const {
  return (_has_bits_[18] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_593_str() {
  _has_bits_[18] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_593_str() {
  _has_bits_[18] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_593_str() {
  if (sparse_593_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_593_str_->clear();
  }
  clear_has_sparse_593_str();
}
inline const ::std::string& Database_NoBench::sparse_593_str() const {
  return *sparse_593_str_;
}
inline void Database_NoBench::set_sparse_593_str(const ::std::string& value) {
  set_has_sparse_593_str();
  if (sparse_593_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_593_str_ = new ::std::string;
  }
  sparse_593_str_->assign(value);
}
inline void Database_NoBench::set_sparse_593_str(const char* value) {
  set_has_sparse_593_str();
  if (sparse_593_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_593_str_ = new ::std::string;
  }
  sparse_593_str_->assign(value);
}
inline void Database_NoBench::set_sparse_593_str(const char* value, size_t size) {
  set_has_sparse_593_str();
  if (sparse_593_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_593_str_ = new ::std::string;
  }
  sparse_593_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_593_str() {
  set_has_sparse_593_str();
  if (sparse_593_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_593_str_ = new ::std::string;
  }
  return sparse_593_str_;
}
inline ::std::string* Database_NoBench::release_sparse_593_str() {
  clear_has_sparse_593_str();
  if (sparse_593_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_593_str_;
    sparse_593_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_593_str(::std::string* sparse_593_str) {
  if (sparse_593_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_593_str_;
  }
  if (sparse_593_str) {
    set_has_sparse_593_str();
    sparse_593_str_ = sparse_593_str;
  } else {
    clear_has_sparse_593_str();
    sparse_593_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_594_str = 606;
inline bool Database_NoBench::has_sparse_594_str() const {
  return (_has_bits_[18] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_594_str() {
  _has_bits_[18] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_594_str() {
  _has_bits_[18] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_594_str() {
  if (sparse_594_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_594_str_->clear();
  }
  clear_has_sparse_594_str();
}
inline const ::std::string& Database_NoBench::sparse_594_str() const {
  return *sparse_594_str_;
}
inline void Database_NoBench::set_sparse_594_str(const ::std::string& value) {
  set_has_sparse_594_str();
  if (sparse_594_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_594_str_ = new ::std::string;
  }
  sparse_594_str_->assign(value);
}
inline void Database_NoBench::set_sparse_594_str(const char* value) {
  set_has_sparse_594_str();
  if (sparse_594_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_594_str_ = new ::std::string;
  }
  sparse_594_str_->assign(value);
}
inline void Database_NoBench::set_sparse_594_str(const char* value, size_t size) {
  set_has_sparse_594_str();
  if (sparse_594_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_594_str_ = new ::std::string;
  }
  sparse_594_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_594_str() {
  set_has_sparse_594_str();
  if (sparse_594_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_594_str_ = new ::std::string;
  }
  return sparse_594_str_;
}
inline ::std::string* Database_NoBench::release_sparse_594_str() {
  clear_has_sparse_594_str();
  if (sparse_594_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_594_str_;
    sparse_594_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_594_str(::std::string* sparse_594_str) {
  if (sparse_594_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_594_str_;
  }
  if (sparse_594_str) {
    set_has_sparse_594_str();
    sparse_594_str_ = sparse_594_str;
  } else {
    clear_has_sparse_594_str();
    sparse_594_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_595_str = 607;
inline bool Database_NoBench::has_sparse_595_str() const {
  return (_has_bits_[19] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_595_str() {
  _has_bits_[19] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_595_str() {
  _has_bits_[19] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_595_str() {
  if (sparse_595_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_595_str_->clear();
  }
  clear_has_sparse_595_str();
}
inline const ::std::string& Database_NoBench::sparse_595_str() const {
  return *sparse_595_str_;
}
inline void Database_NoBench::set_sparse_595_str(const ::std::string& value) {
  set_has_sparse_595_str();
  if (sparse_595_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_595_str_ = new ::std::string;
  }
  sparse_595_str_->assign(value);
}
inline void Database_NoBench::set_sparse_595_str(const char* value) {
  set_has_sparse_595_str();
  if (sparse_595_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_595_str_ = new ::std::string;
  }
  sparse_595_str_->assign(value);
}
inline void Database_NoBench::set_sparse_595_str(const char* value, size_t size) {
  set_has_sparse_595_str();
  if (sparse_595_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_595_str_ = new ::std::string;
  }
  sparse_595_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_595_str() {
  set_has_sparse_595_str();
  if (sparse_595_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_595_str_ = new ::std::string;
  }
  return sparse_595_str_;
}
inline ::std::string* Database_NoBench::release_sparse_595_str() {
  clear_has_sparse_595_str();
  if (sparse_595_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_595_str_;
    sparse_595_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_595_str(::std::string* sparse_595_str) {
  if (sparse_595_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_595_str_;
  }
  if (sparse_595_str) {
    set_has_sparse_595_str();
    sparse_595_str_ = sparse_595_str;
  } else {
    clear_has_sparse_595_str();
    sparse_595_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_596_str = 608;
inline bool Database_NoBench::has_sparse_596_str() const {
  return (_has_bits_[19] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_596_str() {
  _has_bits_[19] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_596_str() {
  _has_bits_[19] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_596_str() {
  if (sparse_596_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_596_str_->clear();
  }
  clear_has_sparse_596_str();
}
inline const ::std::string& Database_NoBench::sparse_596_str() const {
  return *sparse_596_str_;
}
inline void Database_NoBench::set_sparse_596_str(const ::std::string& value) {
  set_has_sparse_596_str();
  if (sparse_596_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_596_str_ = new ::std::string;
  }
  sparse_596_str_->assign(value);
}
inline void Database_NoBench::set_sparse_596_str(const char* value) {
  set_has_sparse_596_str();
  if (sparse_596_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_596_str_ = new ::std::string;
  }
  sparse_596_str_->assign(value);
}
inline void Database_NoBench::set_sparse_596_str(const char* value, size_t size) {
  set_has_sparse_596_str();
  if (sparse_596_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_596_str_ = new ::std::string;
  }
  sparse_596_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_596_str() {
  set_has_sparse_596_str();
  if (sparse_596_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_596_str_ = new ::std::string;
  }
  return sparse_596_str_;
}
inline ::std::string* Database_NoBench::release_sparse_596_str() {
  clear_has_sparse_596_str();
  if (sparse_596_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_596_str_;
    sparse_596_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_596_str(::std::string* sparse_596_str) {
  if (sparse_596_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_596_str_;
  }
  if (sparse_596_str) {
    set_has_sparse_596_str();
    sparse_596_str_ = sparse_596_str;
  } else {
    clear_has_sparse_596_str();
    sparse_596_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_597_str = 609;
inline bool Database_NoBench::has_sparse_597_str() const {
  return (_has_bits_[19] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_597_str() {
  _has_bits_[19] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_597_str() {
  _has_bits_[19] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_597_str() {
  if (sparse_597_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_597_str_->clear();
  }
  clear_has_sparse_597_str();
}
inline const ::std::string& Database_NoBench::sparse_597_str() const {
  return *sparse_597_str_;
}
inline void Database_NoBench::set_sparse_597_str(const ::std::string& value) {
  set_has_sparse_597_str();
  if (sparse_597_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_597_str_ = new ::std::string;
  }
  sparse_597_str_->assign(value);
}
inline void Database_NoBench::set_sparse_597_str(const char* value) {
  set_has_sparse_597_str();
  if (sparse_597_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_597_str_ = new ::std::string;
  }
  sparse_597_str_->assign(value);
}
inline void Database_NoBench::set_sparse_597_str(const char* value, size_t size) {
  set_has_sparse_597_str();
  if (sparse_597_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_597_str_ = new ::std::string;
  }
  sparse_597_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_597_str() {
  set_has_sparse_597_str();
  if (sparse_597_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_597_str_ = new ::std::string;
  }
  return sparse_597_str_;
}
inline ::std::string* Database_NoBench::release_sparse_597_str() {
  clear_has_sparse_597_str();
  if (sparse_597_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_597_str_;
    sparse_597_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_597_str(::std::string* sparse_597_str) {
  if (sparse_597_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_597_str_;
  }
  if (sparse_597_str) {
    set_has_sparse_597_str();
    sparse_597_str_ = sparse_597_str;
  } else {
    clear_has_sparse_597_str();
    sparse_597_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_598_str = 610;
inline bool Database_NoBench::has_sparse_598_str() const {
  return (_has_bits_[19] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_598_str() {
  _has_bits_[19] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_598_str() {
  _has_bits_[19] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_598_str() {
  if (sparse_598_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_598_str_->clear();
  }
  clear_has_sparse_598_str();
}
inline const ::std::string& Database_NoBench::sparse_598_str() const {
  return *sparse_598_str_;
}
inline void Database_NoBench::set_sparse_598_str(const ::std::string& value) {
  set_has_sparse_598_str();
  if (sparse_598_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_598_str_ = new ::std::string;
  }
  sparse_598_str_->assign(value);
}
inline void Database_NoBench::set_sparse_598_str(const char* value) {
  set_has_sparse_598_str();
  if (sparse_598_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_598_str_ = new ::std::string;
  }
  sparse_598_str_->assign(value);
}
inline void Database_NoBench::set_sparse_598_str(const char* value, size_t size) {
  set_has_sparse_598_str();
  if (sparse_598_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_598_str_ = new ::std::string;
  }
  sparse_598_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_598_str() {
  set_has_sparse_598_str();
  if (sparse_598_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_598_str_ = new ::std::string;
  }
  return sparse_598_str_;
}
inline ::std::string* Database_NoBench::release_sparse_598_str() {
  clear_has_sparse_598_str();
  if (sparse_598_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_598_str_;
    sparse_598_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_598_str(::std::string* sparse_598_str) {
  if (sparse_598_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_598_str_;
  }
  if (sparse_598_str) {
    set_has_sparse_598_str();
    sparse_598_str_ = sparse_598_str;
  } else {
    clear_has_sparse_598_str();
    sparse_598_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_599_str = 611;
inline bool Database_NoBench::has_sparse_599_str() const {
  return (_has_bits_[19] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_599_str() {
  _has_bits_[19] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_599_str() {
  _has_bits_[19] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_599_str() {
  if (sparse_599_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_599_str_->clear();
  }
  clear_has_sparse_599_str();
}
inline const ::std::string& Database_NoBench::sparse_599_str() const {
  return *sparse_599_str_;
}
inline void Database_NoBench::set_sparse_599_str(const ::std::string& value) {
  set_has_sparse_599_str();
  if (sparse_599_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_599_str_ = new ::std::string;
  }
  sparse_599_str_->assign(value);
}
inline void Database_NoBench::set_sparse_599_str(const char* value) {
  set_has_sparse_599_str();
  if (sparse_599_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_599_str_ = new ::std::string;
  }
  sparse_599_str_->assign(value);
}
inline void Database_NoBench::set_sparse_599_str(const char* value, size_t size) {
  set_has_sparse_599_str();
  if (sparse_599_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_599_str_ = new ::std::string;
  }
  sparse_599_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_599_str() {
  set_has_sparse_599_str();
  if (sparse_599_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_599_str_ = new ::std::string;
  }
  return sparse_599_str_;
}
inline ::std::string* Database_NoBench::release_sparse_599_str() {
  clear_has_sparse_599_str();
  if (sparse_599_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_599_str_;
    sparse_599_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_599_str(::std::string* sparse_599_str) {
  if (sparse_599_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_599_str_;
  }
  if (sparse_599_str) {
    set_has_sparse_599_str();
    sparse_599_str_ = sparse_599_str;
  } else {
    clear_has_sparse_599_str();
    sparse_599_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_600_str = 612;
inline bool Database_NoBench::has_sparse_600_str() const {
  return (_has_bits_[19] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_600_str() {
  _has_bits_[19] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_600_str() {
  _has_bits_[19] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_600_str() {
  if (sparse_600_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_600_str_->clear();
  }
  clear_has_sparse_600_str();
}
inline const ::std::string& Database_NoBench::sparse_600_str() const {
  return *sparse_600_str_;
}
inline void Database_NoBench::set_sparse_600_str(const ::std::string& value) {
  set_has_sparse_600_str();
  if (sparse_600_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_600_str_ = new ::std::string;
  }
  sparse_600_str_->assign(value);
}
inline void Database_NoBench::set_sparse_600_str(const char* value) {
  set_has_sparse_600_str();
  if (sparse_600_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_600_str_ = new ::std::string;
  }
  sparse_600_str_->assign(value);
}
inline void Database_NoBench::set_sparse_600_str(const char* value, size_t size) {
  set_has_sparse_600_str();
  if (sparse_600_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_600_str_ = new ::std::string;
  }
  sparse_600_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_600_str() {
  set_has_sparse_600_str();
  if (sparse_600_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_600_str_ = new ::std::string;
  }
  return sparse_600_str_;
}
inline ::std::string* Database_NoBench::release_sparse_600_str() {
  clear_has_sparse_600_str();
  if (sparse_600_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_600_str_;
    sparse_600_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_600_str(::std::string* sparse_600_str) {
  if (sparse_600_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_600_str_;
  }
  if (sparse_600_str) {
    set_has_sparse_600_str();
    sparse_600_str_ = sparse_600_str;
  } else {
    clear_has_sparse_600_str();
    sparse_600_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_601_str = 613;
inline bool Database_NoBench::has_sparse_601_str() const {
  return (_has_bits_[19] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_601_str() {
  _has_bits_[19] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_601_str() {
  _has_bits_[19] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_601_str() {
  if (sparse_601_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_601_str_->clear();
  }
  clear_has_sparse_601_str();
}
inline const ::std::string& Database_NoBench::sparse_601_str() const {
  return *sparse_601_str_;
}
inline void Database_NoBench::set_sparse_601_str(const ::std::string& value) {
  set_has_sparse_601_str();
  if (sparse_601_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_601_str_ = new ::std::string;
  }
  sparse_601_str_->assign(value);
}
inline void Database_NoBench::set_sparse_601_str(const char* value) {
  set_has_sparse_601_str();
  if (sparse_601_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_601_str_ = new ::std::string;
  }
  sparse_601_str_->assign(value);
}
inline void Database_NoBench::set_sparse_601_str(const char* value, size_t size) {
  set_has_sparse_601_str();
  if (sparse_601_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_601_str_ = new ::std::string;
  }
  sparse_601_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_601_str() {
  set_has_sparse_601_str();
  if (sparse_601_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_601_str_ = new ::std::string;
  }
  return sparse_601_str_;
}
inline ::std::string* Database_NoBench::release_sparse_601_str() {
  clear_has_sparse_601_str();
  if (sparse_601_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_601_str_;
    sparse_601_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_601_str(::std::string* sparse_601_str) {
  if (sparse_601_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_601_str_;
  }
  if (sparse_601_str) {
    set_has_sparse_601_str();
    sparse_601_str_ = sparse_601_str;
  } else {
    clear_has_sparse_601_str();
    sparse_601_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_602_str = 614;
inline bool Database_NoBench::has_sparse_602_str() const {
  return (_has_bits_[19] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_602_str() {
  _has_bits_[19] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_602_str() {
  _has_bits_[19] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_602_str() {
  if (sparse_602_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_602_str_->clear();
  }
  clear_has_sparse_602_str();
}
inline const ::std::string& Database_NoBench::sparse_602_str() const {
  return *sparse_602_str_;
}
inline void Database_NoBench::set_sparse_602_str(const ::std::string& value) {
  set_has_sparse_602_str();
  if (sparse_602_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_602_str_ = new ::std::string;
  }
  sparse_602_str_->assign(value);
}
inline void Database_NoBench::set_sparse_602_str(const char* value) {
  set_has_sparse_602_str();
  if (sparse_602_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_602_str_ = new ::std::string;
  }
  sparse_602_str_->assign(value);
}
inline void Database_NoBench::set_sparse_602_str(const char* value, size_t size) {
  set_has_sparse_602_str();
  if (sparse_602_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_602_str_ = new ::std::string;
  }
  sparse_602_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_602_str() {
  set_has_sparse_602_str();
  if (sparse_602_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_602_str_ = new ::std::string;
  }
  return sparse_602_str_;
}
inline ::std::string* Database_NoBench::release_sparse_602_str() {
  clear_has_sparse_602_str();
  if (sparse_602_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_602_str_;
    sparse_602_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_602_str(::std::string* sparse_602_str) {
  if (sparse_602_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_602_str_;
  }
  if (sparse_602_str) {
    set_has_sparse_602_str();
    sparse_602_str_ = sparse_602_str;
  } else {
    clear_has_sparse_602_str();
    sparse_602_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_603_str = 615;
inline bool Database_NoBench::has_sparse_603_str() const {
  return (_has_bits_[19] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_603_str() {
  _has_bits_[19] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_603_str() {
  _has_bits_[19] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_603_str() {
  if (sparse_603_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_603_str_->clear();
  }
  clear_has_sparse_603_str();
}
inline const ::std::string& Database_NoBench::sparse_603_str() const {
  return *sparse_603_str_;
}
inline void Database_NoBench::set_sparse_603_str(const ::std::string& value) {
  set_has_sparse_603_str();
  if (sparse_603_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_603_str_ = new ::std::string;
  }
  sparse_603_str_->assign(value);
}
inline void Database_NoBench::set_sparse_603_str(const char* value) {
  set_has_sparse_603_str();
  if (sparse_603_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_603_str_ = new ::std::string;
  }
  sparse_603_str_->assign(value);
}
inline void Database_NoBench::set_sparse_603_str(const char* value, size_t size) {
  set_has_sparse_603_str();
  if (sparse_603_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_603_str_ = new ::std::string;
  }
  sparse_603_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_603_str() {
  set_has_sparse_603_str();
  if (sparse_603_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_603_str_ = new ::std::string;
  }
  return sparse_603_str_;
}
inline ::std::string* Database_NoBench::release_sparse_603_str() {
  clear_has_sparse_603_str();
  if (sparse_603_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_603_str_;
    sparse_603_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_603_str(::std::string* sparse_603_str) {
  if (sparse_603_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_603_str_;
  }
  if (sparse_603_str) {
    set_has_sparse_603_str();
    sparse_603_str_ = sparse_603_str;
  } else {
    clear_has_sparse_603_str();
    sparse_603_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_604_str = 616;
inline bool Database_NoBench::has_sparse_604_str() const {
  return (_has_bits_[19] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_604_str() {
  _has_bits_[19] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_604_str() {
  _has_bits_[19] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_604_str() {
  if (sparse_604_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_604_str_->clear();
  }
  clear_has_sparse_604_str();
}
inline const ::std::string& Database_NoBench::sparse_604_str() const {
  return *sparse_604_str_;
}
inline void Database_NoBench::set_sparse_604_str(const ::std::string& value) {
  set_has_sparse_604_str();
  if (sparse_604_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_604_str_ = new ::std::string;
  }
  sparse_604_str_->assign(value);
}
inline void Database_NoBench::set_sparse_604_str(const char* value) {
  set_has_sparse_604_str();
  if (sparse_604_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_604_str_ = new ::std::string;
  }
  sparse_604_str_->assign(value);
}
inline void Database_NoBench::set_sparse_604_str(const char* value, size_t size) {
  set_has_sparse_604_str();
  if (sparse_604_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_604_str_ = new ::std::string;
  }
  sparse_604_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_604_str() {
  set_has_sparse_604_str();
  if (sparse_604_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_604_str_ = new ::std::string;
  }
  return sparse_604_str_;
}
inline ::std::string* Database_NoBench::release_sparse_604_str() {
  clear_has_sparse_604_str();
  if (sparse_604_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_604_str_;
    sparse_604_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_604_str(::std::string* sparse_604_str) {
  if (sparse_604_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_604_str_;
  }
  if (sparse_604_str) {
    set_has_sparse_604_str();
    sparse_604_str_ = sparse_604_str;
  } else {
    clear_has_sparse_604_str();
    sparse_604_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_605_str = 617;
inline bool Database_NoBench::has_sparse_605_str() const {
  return (_has_bits_[19] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_605_str() {
  _has_bits_[19] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_605_str() {
  _has_bits_[19] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_605_str() {
  if (sparse_605_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_605_str_->clear();
  }
  clear_has_sparse_605_str();
}
inline const ::std::string& Database_NoBench::sparse_605_str() const {
  return *sparse_605_str_;
}
inline void Database_NoBench::set_sparse_605_str(const ::std::string& value) {
  set_has_sparse_605_str();
  if (sparse_605_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_605_str_ = new ::std::string;
  }
  sparse_605_str_->assign(value);
}
inline void Database_NoBench::set_sparse_605_str(const char* value) {
  set_has_sparse_605_str();
  if (sparse_605_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_605_str_ = new ::std::string;
  }
  sparse_605_str_->assign(value);
}
inline void Database_NoBench::set_sparse_605_str(const char* value, size_t size) {
  set_has_sparse_605_str();
  if (sparse_605_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_605_str_ = new ::std::string;
  }
  sparse_605_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_605_str() {
  set_has_sparse_605_str();
  if (sparse_605_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_605_str_ = new ::std::string;
  }
  return sparse_605_str_;
}
inline ::std::string* Database_NoBench::release_sparse_605_str() {
  clear_has_sparse_605_str();
  if (sparse_605_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_605_str_;
    sparse_605_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_605_str(::std::string* sparse_605_str) {
  if (sparse_605_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_605_str_;
  }
  if (sparse_605_str) {
    set_has_sparse_605_str();
    sparse_605_str_ = sparse_605_str;
  } else {
    clear_has_sparse_605_str();
    sparse_605_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_606_str = 618;
inline bool Database_NoBench::has_sparse_606_str() const {
  return (_has_bits_[19] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_606_str() {
  _has_bits_[19] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_606_str() {
  _has_bits_[19] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_606_str() {
  if (sparse_606_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_606_str_->clear();
  }
  clear_has_sparse_606_str();
}
inline const ::std::string& Database_NoBench::sparse_606_str() const {
  return *sparse_606_str_;
}
inline void Database_NoBench::set_sparse_606_str(const ::std::string& value) {
  set_has_sparse_606_str();
  if (sparse_606_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_606_str_ = new ::std::string;
  }
  sparse_606_str_->assign(value);
}
inline void Database_NoBench::set_sparse_606_str(const char* value) {
  set_has_sparse_606_str();
  if (sparse_606_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_606_str_ = new ::std::string;
  }
  sparse_606_str_->assign(value);
}
inline void Database_NoBench::set_sparse_606_str(const char* value, size_t size) {
  set_has_sparse_606_str();
  if (sparse_606_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_606_str_ = new ::std::string;
  }
  sparse_606_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_606_str() {
  set_has_sparse_606_str();
  if (sparse_606_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_606_str_ = new ::std::string;
  }
  return sparse_606_str_;
}
inline ::std::string* Database_NoBench::release_sparse_606_str() {
  clear_has_sparse_606_str();
  if (sparse_606_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_606_str_;
    sparse_606_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_606_str(::std::string* sparse_606_str) {
  if (sparse_606_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_606_str_;
  }
  if (sparse_606_str) {
    set_has_sparse_606_str();
    sparse_606_str_ = sparse_606_str;
  } else {
    clear_has_sparse_606_str();
    sparse_606_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_607_str = 619;
inline bool Database_NoBench::has_sparse_607_str() const {
  return (_has_bits_[19] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_607_str() {
  _has_bits_[19] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_607_str() {
  _has_bits_[19] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_607_str() {
  if (sparse_607_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_607_str_->clear();
  }
  clear_has_sparse_607_str();
}
inline const ::std::string& Database_NoBench::sparse_607_str() const {
  return *sparse_607_str_;
}
inline void Database_NoBench::set_sparse_607_str(const ::std::string& value) {
  set_has_sparse_607_str();
  if (sparse_607_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_607_str_ = new ::std::string;
  }
  sparse_607_str_->assign(value);
}
inline void Database_NoBench::set_sparse_607_str(const char* value) {
  set_has_sparse_607_str();
  if (sparse_607_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_607_str_ = new ::std::string;
  }
  sparse_607_str_->assign(value);
}
inline void Database_NoBench::set_sparse_607_str(const char* value, size_t size) {
  set_has_sparse_607_str();
  if (sparse_607_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_607_str_ = new ::std::string;
  }
  sparse_607_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_607_str() {
  set_has_sparse_607_str();
  if (sparse_607_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_607_str_ = new ::std::string;
  }
  return sparse_607_str_;
}
inline ::std::string* Database_NoBench::release_sparse_607_str() {
  clear_has_sparse_607_str();
  if (sparse_607_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_607_str_;
    sparse_607_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_607_str(::std::string* sparse_607_str) {
  if (sparse_607_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_607_str_;
  }
  if (sparse_607_str) {
    set_has_sparse_607_str();
    sparse_607_str_ = sparse_607_str;
  } else {
    clear_has_sparse_607_str();
    sparse_607_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_608_str = 620;
inline bool Database_NoBench::has_sparse_608_str() const {
  return (_has_bits_[19] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_608_str() {
  _has_bits_[19] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_608_str() {
  _has_bits_[19] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_608_str() {
  if (sparse_608_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_608_str_->clear();
  }
  clear_has_sparse_608_str();
}
inline const ::std::string& Database_NoBench::sparse_608_str() const {
  return *sparse_608_str_;
}
inline void Database_NoBench::set_sparse_608_str(const ::std::string& value) {
  set_has_sparse_608_str();
  if (sparse_608_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_608_str_ = new ::std::string;
  }
  sparse_608_str_->assign(value);
}
inline void Database_NoBench::set_sparse_608_str(const char* value) {
  set_has_sparse_608_str();
  if (sparse_608_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_608_str_ = new ::std::string;
  }
  sparse_608_str_->assign(value);
}
inline void Database_NoBench::set_sparse_608_str(const char* value, size_t size) {
  set_has_sparse_608_str();
  if (sparse_608_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_608_str_ = new ::std::string;
  }
  sparse_608_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_608_str() {
  set_has_sparse_608_str();
  if (sparse_608_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_608_str_ = new ::std::string;
  }
  return sparse_608_str_;
}
inline ::std::string* Database_NoBench::release_sparse_608_str() {
  clear_has_sparse_608_str();
  if (sparse_608_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_608_str_;
    sparse_608_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_608_str(::std::string* sparse_608_str) {
  if (sparse_608_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_608_str_;
  }
  if (sparse_608_str) {
    set_has_sparse_608_str();
    sparse_608_str_ = sparse_608_str;
  } else {
    clear_has_sparse_608_str();
    sparse_608_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_609_str = 621;
inline bool Database_NoBench::has_sparse_609_str() const {
  return (_has_bits_[19] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_609_str() {
  _has_bits_[19] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_609_str() {
  _has_bits_[19] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_609_str() {
  if (sparse_609_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_609_str_->clear();
  }
  clear_has_sparse_609_str();
}
inline const ::std::string& Database_NoBench::sparse_609_str() const {
  return *sparse_609_str_;
}
inline void Database_NoBench::set_sparse_609_str(const ::std::string& value) {
  set_has_sparse_609_str();
  if (sparse_609_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_609_str_ = new ::std::string;
  }
  sparse_609_str_->assign(value);
}
inline void Database_NoBench::set_sparse_609_str(const char* value) {
  set_has_sparse_609_str();
  if (sparse_609_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_609_str_ = new ::std::string;
  }
  sparse_609_str_->assign(value);
}
inline void Database_NoBench::set_sparse_609_str(const char* value, size_t size) {
  set_has_sparse_609_str();
  if (sparse_609_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_609_str_ = new ::std::string;
  }
  sparse_609_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_609_str() {
  set_has_sparse_609_str();
  if (sparse_609_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_609_str_ = new ::std::string;
  }
  return sparse_609_str_;
}
inline ::std::string* Database_NoBench::release_sparse_609_str() {
  clear_has_sparse_609_str();
  if (sparse_609_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_609_str_;
    sparse_609_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_609_str(::std::string* sparse_609_str) {
  if (sparse_609_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_609_str_;
  }
  if (sparse_609_str) {
    set_has_sparse_609_str();
    sparse_609_str_ = sparse_609_str;
  } else {
    clear_has_sparse_609_str();
    sparse_609_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_610_str = 622;
inline bool Database_NoBench::has_sparse_610_str() const {
  return (_has_bits_[19] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_610_str() {
  _has_bits_[19] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_610_str() {
  _has_bits_[19] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_610_str() {
  if (sparse_610_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_610_str_->clear();
  }
  clear_has_sparse_610_str();
}
inline const ::std::string& Database_NoBench::sparse_610_str() const {
  return *sparse_610_str_;
}
inline void Database_NoBench::set_sparse_610_str(const ::std::string& value) {
  set_has_sparse_610_str();
  if (sparse_610_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_610_str_ = new ::std::string;
  }
  sparse_610_str_->assign(value);
}
inline void Database_NoBench::set_sparse_610_str(const char* value) {
  set_has_sparse_610_str();
  if (sparse_610_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_610_str_ = new ::std::string;
  }
  sparse_610_str_->assign(value);
}
inline void Database_NoBench::set_sparse_610_str(const char* value, size_t size) {
  set_has_sparse_610_str();
  if (sparse_610_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_610_str_ = new ::std::string;
  }
  sparse_610_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_610_str() {
  set_has_sparse_610_str();
  if (sparse_610_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_610_str_ = new ::std::string;
  }
  return sparse_610_str_;
}
inline ::std::string* Database_NoBench::release_sparse_610_str() {
  clear_has_sparse_610_str();
  if (sparse_610_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_610_str_;
    sparse_610_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_610_str(::std::string* sparse_610_str) {
  if (sparse_610_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_610_str_;
  }
  if (sparse_610_str) {
    set_has_sparse_610_str();
    sparse_610_str_ = sparse_610_str;
  } else {
    clear_has_sparse_610_str();
    sparse_610_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_611_str = 623;
inline bool Database_NoBench::has_sparse_611_str() const {
  return (_has_bits_[19] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_611_str() {
  _has_bits_[19] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_611_str() {
  _has_bits_[19] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_611_str() {
  if (sparse_611_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_611_str_->clear();
  }
  clear_has_sparse_611_str();
}
inline const ::std::string& Database_NoBench::sparse_611_str() const {
  return *sparse_611_str_;
}
inline void Database_NoBench::set_sparse_611_str(const ::std::string& value) {
  set_has_sparse_611_str();
  if (sparse_611_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_611_str_ = new ::std::string;
  }
  sparse_611_str_->assign(value);
}
inline void Database_NoBench::set_sparse_611_str(const char* value) {
  set_has_sparse_611_str();
  if (sparse_611_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_611_str_ = new ::std::string;
  }
  sparse_611_str_->assign(value);
}
inline void Database_NoBench::set_sparse_611_str(const char* value, size_t size) {
  set_has_sparse_611_str();
  if (sparse_611_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_611_str_ = new ::std::string;
  }
  sparse_611_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_611_str() {
  set_has_sparse_611_str();
  if (sparse_611_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_611_str_ = new ::std::string;
  }
  return sparse_611_str_;
}
inline ::std::string* Database_NoBench::release_sparse_611_str() {
  clear_has_sparse_611_str();
  if (sparse_611_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_611_str_;
    sparse_611_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_611_str(::std::string* sparse_611_str) {
  if (sparse_611_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_611_str_;
  }
  if (sparse_611_str) {
    set_has_sparse_611_str();
    sparse_611_str_ = sparse_611_str;
  } else {
    clear_has_sparse_611_str();
    sparse_611_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_612_str = 624;
inline bool Database_NoBench::has_sparse_612_str() const {
  return (_has_bits_[19] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_612_str() {
  _has_bits_[19] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_612_str() {
  _has_bits_[19] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_612_str() {
  if (sparse_612_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_612_str_->clear();
  }
  clear_has_sparse_612_str();
}
inline const ::std::string& Database_NoBench::sparse_612_str() const {
  return *sparse_612_str_;
}
inline void Database_NoBench::set_sparse_612_str(const ::std::string& value) {
  set_has_sparse_612_str();
  if (sparse_612_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_612_str_ = new ::std::string;
  }
  sparse_612_str_->assign(value);
}
inline void Database_NoBench::set_sparse_612_str(const char* value) {
  set_has_sparse_612_str();
  if (sparse_612_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_612_str_ = new ::std::string;
  }
  sparse_612_str_->assign(value);
}
inline void Database_NoBench::set_sparse_612_str(const char* value, size_t size) {
  set_has_sparse_612_str();
  if (sparse_612_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_612_str_ = new ::std::string;
  }
  sparse_612_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_612_str() {
  set_has_sparse_612_str();
  if (sparse_612_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_612_str_ = new ::std::string;
  }
  return sparse_612_str_;
}
inline ::std::string* Database_NoBench::release_sparse_612_str() {
  clear_has_sparse_612_str();
  if (sparse_612_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_612_str_;
    sparse_612_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_612_str(::std::string* sparse_612_str) {
  if (sparse_612_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_612_str_;
  }
  if (sparse_612_str) {
    set_has_sparse_612_str();
    sparse_612_str_ = sparse_612_str;
  } else {
    clear_has_sparse_612_str();
    sparse_612_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_613_str = 625;
inline bool Database_NoBench::has_sparse_613_str() const {
  return (_has_bits_[19] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_613_str() {
  _has_bits_[19] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_613_str() {
  _has_bits_[19] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_613_str() {
  if (sparse_613_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_613_str_->clear();
  }
  clear_has_sparse_613_str();
}
inline const ::std::string& Database_NoBench::sparse_613_str() const {
  return *sparse_613_str_;
}
inline void Database_NoBench::set_sparse_613_str(const ::std::string& value) {
  set_has_sparse_613_str();
  if (sparse_613_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_613_str_ = new ::std::string;
  }
  sparse_613_str_->assign(value);
}
inline void Database_NoBench::set_sparse_613_str(const char* value) {
  set_has_sparse_613_str();
  if (sparse_613_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_613_str_ = new ::std::string;
  }
  sparse_613_str_->assign(value);
}
inline void Database_NoBench::set_sparse_613_str(const char* value, size_t size) {
  set_has_sparse_613_str();
  if (sparse_613_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_613_str_ = new ::std::string;
  }
  sparse_613_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_613_str() {
  set_has_sparse_613_str();
  if (sparse_613_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_613_str_ = new ::std::string;
  }
  return sparse_613_str_;
}
inline ::std::string* Database_NoBench::release_sparse_613_str() {
  clear_has_sparse_613_str();
  if (sparse_613_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_613_str_;
    sparse_613_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_613_str(::std::string* sparse_613_str) {
  if (sparse_613_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_613_str_;
  }
  if (sparse_613_str) {
    set_has_sparse_613_str();
    sparse_613_str_ = sparse_613_str;
  } else {
    clear_has_sparse_613_str();
    sparse_613_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_614_str = 626;
inline bool Database_NoBench::has_sparse_614_str() const {
  return (_has_bits_[19] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_614_str() {
  _has_bits_[19] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_614_str() {
  _has_bits_[19] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_614_str() {
  if (sparse_614_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_614_str_->clear();
  }
  clear_has_sparse_614_str();
}
inline const ::std::string& Database_NoBench::sparse_614_str() const {
  return *sparse_614_str_;
}
inline void Database_NoBench::set_sparse_614_str(const ::std::string& value) {
  set_has_sparse_614_str();
  if (sparse_614_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_614_str_ = new ::std::string;
  }
  sparse_614_str_->assign(value);
}
inline void Database_NoBench::set_sparse_614_str(const char* value) {
  set_has_sparse_614_str();
  if (sparse_614_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_614_str_ = new ::std::string;
  }
  sparse_614_str_->assign(value);
}
inline void Database_NoBench::set_sparse_614_str(const char* value, size_t size) {
  set_has_sparse_614_str();
  if (sparse_614_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_614_str_ = new ::std::string;
  }
  sparse_614_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_614_str() {
  set_has_sparse_614_str();
  if (sparse_614_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_614_str_ = new ::std::string;
  }
  return sparse_614_str_;
}
inline ::std::string* Database_NoBench::release_sparse_614_str() {
  clear_has_sparse_614_str();
  if (sparse_614_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_614_str_;
    sparse_614_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_614_str(::std::string* sparse_614_str) {
  if (sparse_614_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_614_str_;
  }
  if (sparse_614_str) {
    set_has_sparse_614_str();
    sparse_614_str_ = sparse_614_str;
  } else {
    clear_has_sparse_614_str();
    sparse_614_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_615_str = 627;
inline bool Database_NoBench::has_sparse_615_str() const {
  return (_has_bits_[19] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_615_str() {
  _has_bits_[19] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_615_str() {
  _has_bits_[19] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_615_str() {
  if (sparse_615_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_615_str_->clear();
  }
  clear_has_sparse_615_str();
}
inline const ::std::string& Database_NoBench::sparse_615_str() const {
  return *sparse_615_str_;
}
inline void Database_NoBench::set_sparse_615_str(const ::std::string& value) {
  set_has_sparse_615_str();
  if (sparse_615_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_615_str_ = new ::std::string;
  }
  sparse_615_str_->assign(value);
}
inline void Database_NoBench::set_sparse_615_str(const char* value) {
  set_has_sparse_615_str();
  if (sparse_615_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_615_str_ = new ::std::string;
  }
  sparse_615_str_->assign(value);
}
inline void Database_NoBench::set_sparse_615_str(const char* value, size_t size) {
  set_has_sparse_615_str();
  if (sparse_615_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_615_str_ = new ::std::string;
  }
  sparse_615_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_615_str() {
  set_has_sparse_615_str();
  if (sparse_615_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_615_str_ = new ::std::string;
  }
  return sparse_615_str_;
}
inline ::std::string* Database_NoBench::release_sparse_615_str() {
  clear_has_sparse_615_str();
  if (sparse_615_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_615_str_;
    sparse_615_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_615_str(::std::string* sparse_615_str) {
  if (sparse_615_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_615_str_;
  }
  if (sparse_615_str) {
    set_has_sparse_615_str();
    sparse_615_str_ = sparse_615_str;
  } else {
    clear_has_sparse_615_str();
    sparse_615_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_616_str = 628;
inline bool Database_NoBench::has_sparse_616_str() const {
  return (_has_bits_[19] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_616_str() {
  _has_bits_[19] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_616_str() {
  _has_bits_[19] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_616_str() {
  if (sparse_616_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_616_str_->clear();
  }
  clear_has_sparse_616_str();
}
inline const ::std::string& Database_NoBench::sparse_616_str() const {
  return *sparse_616_str_;
}
inline void Database_NoBench::set_sparse_616_str(const ::std::string& value) {
  set_has_sparse_616_str();
  if (sparse_616_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_616_str_ = new ::std::string;
  }
  sparse_616_str_->assign(value);
}
inline void Database_NoBench::set_sparse_616_str(const char* value) {
  set_has_sparse_616_str();
  if (sparse_616_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_616_str_ = new ::std::string;
  }
  sparse_616_str_->assign(value);
}
inline void Database_NoBench::set_sparse_616_str(const char* value, size_t size) {
  set_has_sparse_616_str();
  if (sparse_616_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_616_str_ = new ::std::string;
  }
  sparse_616_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_616_str() {
  set_has_sparse_616_str();
  if (sparse_616_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_616_str_ = new ::std::string;
  }
  return sparse_616_str_;
}
inline ::std::string* Database_NoBench::release_sparse_616_str() {
  clear_has_sparse_616_str();
  if (sparse_616_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_616_str_;
    sparse_616_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_616_str(::std::string* sparse_616_str) {
  if (sparse_616_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_616_str_;
  }
  if (sparse_616_str) {
    set_has_sparse_616_str();
    sparse_616_str_ = sparse_616_str;
  } else {
    clear_has_sparse_616_str();
    sparse_616_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_617_str = 629;
inline bool Database_NoBench::has_sparse_617_str() const {
  return (_has_bits_[19] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_617_str() {
  _has_bits_[19] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_617_str() {
  _has_bits_[19] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_617_str() {
  if (sparse_617_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_617_str_->clear();
  }
  clear_has_sparse_617_str();
}
inline const ::std::string& Database_NoBench::sparse_617_str() const {
  return *sparse_617_str_;
}
inline void Database_NoBench::set_sparse_617_str(const ::std::string& value) {
  set_has_sparse_617_str();
  if (sparse_617_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_617_str_ = new ::std::string;
  }
  sparse_617_str_->assign(value);
}
inline void Database_NoBench::set_sparse_617_str(const char* value) {
  set_has_sparse_617_str();
  if (sparse_617_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_617_str_ = new ::std::string;
  }
  sparse_617_str_->assign(value);
}
inline void Database_NoBench::set_sparse_617_str(const char* value, size_t size) {
  set_has_sparse_617_str();
  if (sparse_617_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_617_str_ = new ::std::string;
  }
  sparse_617_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_617_str() {
  set_has_sparse_617_str();
  if (sparse_617_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_617_str_ = new ::std::string;
  }
  return sparse_617_str_;
}
inline ::std::string* Database_NoBench::release_sparse_617_str() {
  clear_has_sparse_617_str();
  if (sparse_617_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_617_str_;
    sparse_617_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_617_str(::std::string* sparse_617_str) {
  if (sparse_617_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_617_str_;
  }
  if (sparse_617_str) {
    set_has_sparse_617_str();
    sparse_617_str_ = sparse_617_str;
  } else {
    clear_has_sparse_617_str();
    sparse_617_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_618_str = 630;
inline bool Database_NoBench::has_sparse_618_str() const {
  return (_has_bits_[19] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_618_str() {
  _has_bits_[19] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_618_str() {
  _has_bits_[19] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_618_str() {
  if (sparse_618_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_618_str_->clear();
  }
  clear_has_sparse_618_str();
}
inline const ::std::string& Database_NoBench::sparse_618_str() const {
  return *sparse_618_str_;
}
inline void Database_NoBench::set_sparse_618_str(const ::std::string& value) {
  set_has_sparse_618_str();
  if (sparse_618_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_618_str_ = new ::std::string;
  }
  sparse_618_str_->assign(value);
}
inline void Database_NoBench::set_sparse_618_str(const char* value) {
  set_has_sparse_618_str();
  if (sparse_618_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_618_str_ = new ::std::string;
  }
  sparse_618_str_->assign(value);
}
inline void Database_NoBench::set_sparse_618_str(const char* value, size_t size) {
  set_has_sparse_618_str();
  if (sparse_618_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_618_str_ = new ::std::string;
  }
  sparse_618_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_618_str() {
  set_has_sparse_618_str();
  if (sparse_618_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_618_str_ = new ::std::string;
  }
  return sparse_618_str_;
}
inline ::std::string* Database_NoBench::release_sparse_618_str() {
  clear_has_sparse_618_str();
  if (sparse_618_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_618_str_;
    sparse_618_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_618_str(::std::string* sparse_618_str) {
  if (sparse_618_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_618_str_;
  }
  if (sparse_618_str) {
    set_has_sparse_618_str();
    sparse_618_str_ = sparse_618_str;
  } else {
    clear_has_sparse_618_str();
    sparse_618_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_619_str = 631;
inline bool Database_NoBench::has_sparse_619_str() const {
  return (_has_bits_[19] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_619_str() {
  _has_bits_[19] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_619_str() {
  _has_bits_[19] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_619_str() {
  if (sparse_619_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_619_str_->clear();
  }
  clear_has_sparse_619_str();
}
inline const ::std::string& Database_NoBench::sparse_619_str() const {
  return *sparse_619_str_;
}
inline void Database_NoBench::set_sparse_619_str(const ::std::string& value) {
  set_has_sparse_619_str();
  if (sparse_619_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_619_str_ = new ::std::string;
  }
  sparse_619_str_->assign(value);
}
inline void Database_NoBench::set_sparse_619_str(const char* value) {
  set_has_sparse_619_str();
  if (sparse_619_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_619_str_ = new ::std::string;
  }
  sparse_619_str_->assign(value);
}
inline void Database_NoBench::set_sparse_619_str(const char* value, size_t size) {
  set_has_sparse_619_str();
  if (sparse_619_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_619_str_ = new ::std::string;
  }
  sparse_619_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_619_str() {
  set_has_sparse_619_str();
  if (sparse_619_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_619_str_ = new ::std::string;
  }
  return sparse_619_str_;
}
inline ::std::string* Database_NoBench::release_sparse_619_str() {
  clear_has_sparse_619_str();
  if (sparse_619_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_619_str_;
    sparse_619_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_619_str(::std::string* sparse_619_str) {
  if (sparse_619_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_619_str_;
  }
  if (sparse_619_str) {
    set_has_sparse_619_str();
    sparse_619_str_ = sparse_619_str;
  } else {
    clear_has_sparse_619_str();
    sparse_619_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_620_str = 632;
inline bool Database_NoBench::has_sparse_620_str() const {
  return (_has_bits_[19] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_620_str() {
  _has_bits_[19] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_620_str() {
  _has_bits_[19] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_620_str() {
  if (sparse_620_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_620_str_->clear();
  }
  clear_has_sparse_620_str();
}
inline const ::std::string& Database_NoBench::sparse_620_str() const {
  return *sparse_620_str_;
}
inline void Database_NoBench::set_sparse_620_str(const ::std::string& value) {
  set_has_sparse_620_str();
  if (sparse_620_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_620_str_ = new ::std::string;
  }
  sparse_620_str_->assign(value);
}
inline void Database_NoBench::set_sparse_620_str(const char* value) {
  set_has_sparse_620_str();
  if (sparse_620_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_620_str_ = new ::std::string;
  }
  sparse_620_str_->assign(value);
}
inline void Database_NoBench::set_sparse_620_str(const char* value, size_t size) {
  set_has_sparse_620_str();
  if (sparse_620_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_620_str_ = new ::std::string;
  }
  sparse_620_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_620_str() {
  set_has_sparse_620_str();
  if (sparse_620_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_620_str_ = new ::std::string;
  }
  return sparse_620_str_;
}
inline ::std::string* Database_NoBench::release_sparse_620_str() {
  clear_has_sparse_620_str();
  if (sparse_620_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_620_str_;
    sparse_620_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_620_str(::std::string* sparse_620_str) {
  if (sparse_620_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_620_str_;
  }
  if (sparse_620_str) {
    set_has_sparse_620_str();
    sparse_620_str_ = sparse_620_str;
  } else {
    clear_has_sparse_620_str();
    sparse_620_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_621_str = 633;
inline bool Database_NoBench::has_sparse_621_str() const {
  return (_has_bits_[19] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_621_str() {
  _has_bits_[19] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_621_str() {
  _has_bits_[19] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_621_str() {
  if (sparse_621_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_621_str_->clear();
  }
  clear_has_sparse_621_str();
}
inline const ::std::string& Database_NoBench::sparse_621_str() const {
  return *sparse_621_str_;
}
inline void Database_NoBench::set_sparse_621_str(const ::std::string& value) {
  set_has_sparse_621_str();
  if (sparse_621_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_621_str_ = new ::std::string;
  }
  sparse_621_str_->assign(value);
}
inline void Database_NoBench::set_sparse_621_str(const char* value) {
  set_has_sparse_621_str();
  if (sparse_621_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_621_str_ = new ::std::string;
  }
  sparse_621_str_->assign(value);
}
inline void Database_NoBench::set_sparse_621_str(const char* value, size_t size) {
  set_has_sparse_621_str();
  if (sparse_621_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_621_str_ = new ::std::string;
  }
  sparse_621_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_621_str() {
  set_has_sparse_621_str();
  if (sparse_621_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_621_str_ = new ::std::string;
  }
  return sparse_621_str_;
}
inline ::std::string* Database_NoBench::release_sparse_621_str() {
  clear_has_sparse_621_str();
  if (sparse_621_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_621_str_;
    sparse_621_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_621_str(::std::string* sparse_621_str) {
  if (sparse_621_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_621_str_;
  }
  if (sparse_621_str) {
    set_has_sparse_621_str();
    sparse_621_str_ = sparse_621_str;
  } else {
    clear_has_sparse_621_str();
    sparse_621_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_622_str = 634;
inline bool Database_NoBench::has_sparse_622_str() const {
  return (_has_bits_[19] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_622_str() {
  _has_bits_[19] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_622_str() {
  _has_bits_[19] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_622_str() {
  if (sparse_622_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_622_str_->clear();
  }
  clear_has_sparse_622_str();
}
inline const ::std::string& Database_NoBench::sparse_622_str() const {
  return *sparse_622_str_;
}
inline void Database_NoBench::set_sparse_622_str(const ::std::string& value) {
  set_has_sparse_622_str();
  if (sparse_622_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_622_str_ = new ::std::string;
  }
  sparse_622_str_->assign(value);
}
inline void Database_NoBench::set_sparse_622_str(const char* value) {
  set_has_sparse_622_str();
  if (sparse_622_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_622_str_ = new ::std::string;
  }
  sparse_622_str_->assign(value);
}
inline void Database_NoBench::set_sparse_622_str(const char* value, size_t size) {
  set_has_sparse_622_str();
  if (sparse_622_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_622_str_ = new ::std::string;
  }
  sparse_622_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_622_str() {
  set_has_sparse_622_str();
  if (sparse_622_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_622_str_ = new ::std::string;
  }
  return sparse_622_str_;
}
inline ::std::string* Database_NoBench::release_sparse_622_str() {
  clear_has_sparse_622_str();
  if (sparse_622_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_622_str_;
    sparse_622_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_622_str(::std::string* sparse_622_str) {
  if (sparse_622_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_622_str_;
  }
  if (sparse_622_str) {
    set_has_sparse_622_str();
    sparse_622_str_ = sparse_622_str;
  } else {
    clear_has_sparse_622_str();
    sparse_622_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_623_str = 635;
inline bool Database_NoBench::has_sparse_623_str() const {
  return (_has_bits_[19] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_623_str() {
  _has_bits_[19] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_623_str() {
  _has_bits_[19] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_623_str() {
  if (sparse_623_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_623_str_->clear();
  }
  clear_has_sparse_623_str();
}
inline const ::std::string& Database_NoBench::sparse_623_str() const {
  return *sparse_623_str_;
}
inline void Database_NoBench::set_sparse_623_str(const ::std::string& value) {
  set_has_sparse_623_str();
  if (sparse_623_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_623_str_ = new ::std::string;
  }
  sparse_623_str_->assign(value);
}
inline void Database_NoBench::set_sparse_623_str(const char* value) {
  set_has_sparse_623_str();
  if (sparse_623_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_623_str_ = new ::std::string;
  }
  sparse_623_str_->assign(value);
}
inline void Database_NoBench::set_sparse_623_str(const char* value, size_t size) {
  set_has_sparse_623_str();
  if (sparse_623_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_623_str_ = new ::std::string;
  }
  sparse_623_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_623_str() {
  set_has_sparse_623_str();
  if (sparse_623_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_623_str_ = new ::std::string;
  }
  return sparse_623_str_;
}
inline ::std::string* Database_NoBench::release_sparse_623_str() {
  clear_has_sparse_623_str();
  if (sparse_623_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_623_str_;
    sparse_623_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_623_str(::std::string* sparse_623_str) {
  if (sparse_623_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_623_str_;
  }
  if (sparse_623_str) {
    set_has_sparse_623_str();
    sparse_623_str_ = sparse_623_str;
  } else {
    clear_has_sparse_623_str();
    sparse_623_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_624_str = 636;
inline bool Database_NoBench::has_sparse_624_str() const {
  return (_has_bits_[19] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_624_str() {
  _has_bits_[19] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_624_str() {
  _has_bits_[19] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_624_str() {
  if (sparse_624_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_624_str_->clear();
  }
  clear_has_sparse_624_str();
}
inline const ::std::string& Database_NoBench::sparse_624_str() const {
  return *sparse_624_str_;
}
inline void Database_NoBench::set_sparse_624_str(const ::std::string& value) {
  set_has_sparse_624_str();
  if (sparse_624_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_624_str_ = new ::std::string;
  }
  sparse_624_str_->assign(value);
}
inline void Database_NoBench::set_sparse_624_str(const char* value) {
  set_has_sparse_624_str();
  if (sparse_624_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_624_str_ = new ::std::string;
  }
  sparse_624_str_->assign(value);
}
inline void Database_NoBench::set_sparse_624_str(const char* value, size_t size) {
  set_has_sparse_624_str();
  if (sparse_624_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_624_str_ = new ::std::string;
  }
  sparse_624_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_624_str() {
  set_has_sparse_624_str();
  if (sparse_624_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_624_str_ = new ::std::string;
  }
  return sparse_624_str_;
}
inline ::std::string* Database_NoBench::release_sparse_624_str() {
  clear_has_sparse_624_str();
  if (sparse_624_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_624_str_;
    sparse_624_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_624_str(::std::string* sparse_624_str) {
  if (sparse_624_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_624_str_;
  }
  if (sparse_624_str) {
    set_has_sparse_624_str();
    sparse_624_str_ = sparse_624_str;
  } else {
    clear_has_sparse_624_str();
    sparse_624_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_625_str = 637;
inline bool Database_NoBench::has_sparse_625_str() const {
  return (_has_bits_[19] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_625_str() {
  _has_bits_[19] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_625_str() {
  _has_bits_[19] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_625_str() {
  if (sparse_625_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_625_str_->clear();
  }
  clear_has_sparse_625_str();
}
inline const ::std::string& Database_NoBench::sparse_625_str() const {
  return *sparse_625_str_;
}
inline void Database_NoBench::set_sparse_625_str(const ::std::string& value) {
  set_has_sparse_625_str();
  if (sparse_625_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_625_str_ = new ::std::string;
  }
  sparse_625_str_->assign(value);
}
inline void Database_NoBench::set_sparse_625_str(const char* value) {
  set_has_sparse_625_str();
  if (sparse_625_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_625_str_ = new ::std::string;
  }
  sparse_625_str_->assign(value);
}
inline void Database_NoBench::set_sparse_625_str(const char* value, size_t size) {
  set_has_sparse_625_str();
  if (sparse_625_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_625_str_ = new ::std::string;
  }
  sparse_625_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_625_str() {
  set_has_sparse_625_str();
  if (sparse_625_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_625_str_ = new ::std::string;
  }
  return sparse_625_str_;
}
inline ::std::string* Database_NoBench::release_sparse_625_str() {
  clear_has_sparse_625_str();
  if (sparse_625_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_625_str_;
    sparse_625_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_625_str(::std::string* sparse_625_str) {
  if (sparse_625_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_625_str_;
  }
  if (sparse_625_str) {
    set_has_sparse_625_str();
    sparse_625_str_ = sparse_625_str;
  } else {
    clear_has_sparse_625_str();
    sparse_625_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_626_str = 638;
inline bool Database_NoBench::has_sparse_626_str() const {
  return (_has_bits_[19] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_626_str() {
  _has_bits_[19] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_626_str() {
  _has_bits_[19] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_626_str() {
  if (sparse_626_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_626_str_->clear();
  }
  clear_has_sparse_626_str();
}
inline const ::std::string& Database_NoBench::sparse_626_str() const {
  return *sparse_626_str_;
}
inline void Database_NoBench::set_sparse_626_str(const ::std::string& value) {
  set_has_sparse_626_str();
  if (sparse_626_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_626_str_ = new ::std::string;
  }
  sparse_626_str_->assign(value);
}
inline void Database_NoBench::set_sparse_626_str(const char* value) {
  set_has_sparse_626_str();
  if (sparse_626_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_626_str_ = new ::std::string;
  }
  sparse_626_str_->assign(value);
}
inline void Database_NoBench::set_sparse_626_str(const char* value, size_t size) {
  set_has_sparse_626_str();
  if (sparse_626_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_626_str_ = new ::std::string;
  }
  sparse_626_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_626_str() {
  set_has_sparse_626_str();
  if (sparse_626_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_626_str_ = new ::std::string;
  }
  return sparse_626_str_;
}
inline ::std::string* Database_NoBench::release_sparse_626_str() {
  clear_has_sparse_626_str();
  if (sparse_626_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_626_str_;
    sparse_626_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_626_str(::std::string* sparse_626_str) {
  if (sparse_626_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_626_str_;
  }
  if (sparse_626_str) {
    set_has_sparse_626_str();
    sparse_626_str_ = sparse_626_str;
  } else {
    clear_has_sparse_626_str();
    sparse_626_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_627_str = 639;
inline bool Database_NoBench::has_sparse_627_str() const {
  return (_has_bits_[20] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_627_str() {
  _has_bits_[20] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_627_str() {
  _has_bits_[20] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_627_str() {
  if (sparse_627_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_627_str_->clear();
  }
  clear_has_sparse_627_str();
}
inline const ::std::string& Database_NoBench::sparse_627_str() const {
  return *sparse_627_str_;
}
inline void Database_NoBench::set_sparse_627_str(const ::std::string& value) {
  set_has_sparse_627_str();
  if (sparse_627_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_627_str_ = new ::std::string;
  }
  sparse_627_str_->assign(value);
}
inline void Database_NoBench::set_sparse_627_str(const char* value) {
  set_has_sparse_627_str();
  if (sparse_627_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_627_str_ = new ::std::string;
  }
  sparse_627_str_->assign(value);
}
inline void Database_NoBench::set_sparse_627_str(const char* value, size_t size) {
  set_has_sparse_627_str();
  if (sparse_627_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_627_str_ = new ::std::string;
  }
  sparse_627_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_627_str() {
  set_has_sparse_627_str();
  if (sparse_627_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_627_str_ = new ::std::string;
  }
  return sparse_627_str_;
}
inline ::std::string* Database_NoBench::release_sparse_627_str() {
  clear_has_sparse_627_str();
  if (sparse_627_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_627_str_;
    sparse_627_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_627_str(::std::string* sparse_627_str) {
  if (sparse_627_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_627_str_;
  }
  if (sparse_627_str) {
    set_has_sparse_627_str();
    sparse_627_str_ = sparse_627_str;
  } else {
    clear_has_sparse_627_str();
    sparse_627_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_628_str = 640;
inline bool Database_NoBench::has_sparse_628_str() const {
  return (_has_bits_[20] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_628_str() {
  _has_bits_[20] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_628_str() {
  _has_bits_[20] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_628_str() {
  if (sparse_628_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_628_str_->clear();
  }
  clear_has_sparse_628_str();
}
inline const ::std::string& Database_NoBench::sparse_628_str() const {
  return *sparse_628_str_;
}
inline void Database_NoBench::set_sparse_628_str(const ::std::string& value) {
  set_has_sparse_628_str();
  if (sparse_628_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_628_str_ = new ::std::string;
  }
  sparse_628_str_->assign(value);
}
inline void Database_NoBench::set_sparse_628_str(const char* value) {
  set_has_sparse_628_str();
  if (sparse_628_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_628_str_ = new ::std::string;
  }
  sparse_628_str_->assign(value);
}
inline void Database_NoBench::set_sparse_628_str(const char* value, size_t size) {
  set_has_sparse_628_str();
  if (sparse_628_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_628_str_ = new ::std::string;
  }
  sparse_628_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_628_str() {
  set_has_sparse_628_str();
  if (sparse_628_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_628_str_ = new ::std::string;
  }
  return sparse_628_str_;
}
inline ::std::string* Database_NoBench::release_sparse_628_str() {
  clear_has_sparse_628_str();
  if (sparse_628_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_628_str_;
    sparse_628_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_628_str(::std::string* sparse_628_str) {
  if (sparse_628_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_628_str_;
  }
  if (sparse_628_str) {
    set_has_sparse_628_str();
    sparse_628_str_ = sparse_628_str;
  } else {
    clear_has_sparse_628_str();
    sparse_628_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_629_str = 641;
inline bool Database_NoBench::has_sparse_629_str() const {
  return (_has_bits_[20] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_629_str() {
  _has_bits_[20] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_629_str() {
  _has_bits_[20] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_629_str() {
  if (sparse_629_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_629_str_->clear();
  }
  clear_has_sparse_629_str();
}
inline const ::std::string& Database_NoBench::sparse_629_str() const {
  return *sparse_629_str_;
}
inline void Database_NoBench::set_sparse_629_str(const ::std::string& value) {
  set_has_sparse_629_str();
  if (sparse_629_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_629_str_ = new ::std::string;
  }
  sparse_629_str_->assign(value);
}
inline void Database_NoBench::set_sparse_629_str(const char* value) {
  set_has_sparse_629_str();
  if (sparse_629_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_629_str_ = new ::std::string;
  }
  sparse_629_str_->assign(value);
}
inline void Database_NoBench::set_sparse_629_str(const char* value, size_t size) {
  set_has_sparse_629_str();
  if (sparse_629_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_629_str_ = new ::std::string;
  }
  sparse_629_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_629_str() {
  set_has_sparse_629_str();
  if (sparse_629_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_629_str_ = new ::std::string;
  }
  return sparse_629_str_;
}
inline ::std::string* Database_NoBench::release_sparse_629_str() {
  clear_has_sparse_629_str();
  if (sparse_629_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_629_str_;
    sparse_629_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_629_str(::std::string* sparse_629_str) {
  if (sparse_629_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_629_str_;
  }
  if (sparse_629_str) {
    set_has_sparse_629_str();
    sparse_629_str_ = sparse_629_str;
  } else {
    clear_has_sparse_629_str();
    sparse_629_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_630_str = 642;
inline bool Database_NoBench::has_sparse_630_str() const {
  return (_has_bits_[20] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_630_str() {
  _has_bits_[20] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_630_str() {
  _has_bits_[20] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_630_str() {
  if (sparse_630_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_630_str_->clear();
  }
  clear_has_sparse_630_str();
}
inline const ::std::string& Database_NoBench::sparse_630_str() const {
  return *sparse_630_str_;
}
inline void Database_NoBench::set_sparse_630_str(const ::std::string& value) {
  set_has_sparse_630_str();
  if (sparse_630_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_630_str_ = new ::std::string;
  }
  sparse_630_str_->assign(value);
}
inline void Database_NoBench::set_sparse_630_str(const char* value) {
  set_has_sparse_630_str();
  if (sparse_630_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_630_str_ = new ::std::string;
  }
  sparse_630_str_->assign(value);
}
inline void Database_NoBench::set_sparse_630_str(const char* value, size_t size) {
  set_has_sparse_630_str();
  if (sparse_630_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_630_str_ = new ::std::string;
  }
  sparse_630_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_630_str() {
  set_has_sparse_630_str();
  if (sparse_630_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_630_str_ = new ::std::string;
  }
  return sparse_630_str_;
}
inline ::std::string* Database_NoBench::release_sparse_630_str() {
  clear_has_sparse_630_str();
  if (sparse_630_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_630_str_;
    sparse_630_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_630_str(::std::string* sparse_630_str) {
  if (sparse_630_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_630_str_;
  }
  if (sparse_630_str) {
    set_has_sparse_630_str();
    sparse_630_str_ = sparse_630_str;
  } else {
    clear_has_sparse_630_str();
    sparse_630_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_631_str = 643;
inline bool Database_NoBench::has_sparse_631_str() const {
  return (_has_bits_[20] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_631_str() {
  _has_bits_[20] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_631_str() {
  _has_bits_[20] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_631_str() {
  if (sparse_631_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_631_str_->clear();
  }
  clear_has_sparse_631_str();
}
inline const ::std::string& Database_NoBench::sparse_631_str() const {
  return *sparse_631_str_;
}
inline void Database_NoBench::set_sparse_631_str(const ::std::string& value) {
  set_has_sparse_631_str();
  if (sparse_631_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_631_str_ = new ::std::string;
  }
  sparse_631_str_->assign(value);
}
inline void Database_NoBench::set_sparse_631_str(const char* value) {
  set_has_sparse_631_str();
  if (sparse_631_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_631_str_ = new ::std::string;
  }
  sparse_631_str_->assign(value);
}
inline void Database_NoBench::set_sparse_631_str(const char* value, size_t size) {
  set_has_sparse_631_str();
  if (sparse_631_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_631_str_ = new ::std::string;
  }
  sparse_631_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_631_str() {
  set_has_sparse_631_str();
  if (sparse_631_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_631_str_ = new ::std::string;
  }
  return sparse_631_str_;
}
inline ::std::string* Database_NoBench::release_sparse_631_str() {
  clear_has_sparse_631_str();
  if (sparse_631_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_631_str_;
    sparse_631_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_631_str(::std::string* sparse_631_str) {
  if (sparse_631_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_631_str_;
  }
  if (sparse_631_str) {
    set_has_sparse_631_str();
    sparse_631_str_ = sparse_631_str;
  } else {
    clear_has_sparse_631_str();
    sparse_631_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_632_str = 644;
inline bool Database_NoBench::has_sparse_632_str() const {
  return (_has_bits_[20] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_632_str() {
  _has_bits_[20] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_632_str() {
  _has_bits_[20] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_632_str() {
  if (sparse_632_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_632_str_->clear();
  }
  clear_has_sparse_632_str();
}
inline const ::std::string& Database_NoBench::sparse_632_str() const {
  return *sparse_632_str_;
}
inline void Database_NoBench::set_sparse_632_str(const ::std::string& value) {
  set_has_sparse_632_str();
  if (sparse_632_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_632_str_ = new ::std::string;
  }
  sparse_632_str_->assign(value);
}
inline void Database_NoBench::set_sparse_632_str(const char* value) {
  set_has_sparse_632_str();
  if (sparse_632_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_632_str_ = new ::std::string;
  }
  sparse_632_str_->assign(value);
}
inline void Database_NoBench::set_sparse_632_str(const char* value, size_t size) {
  set_has_sparse_632_str();
  if (sparse_632_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_632_str_ = new ::std::string;
  }
  sparse_632_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_632_str() {
  set_has_sparse_632_str();
  if (sparse_632_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_632_str_ = new ::std::string;
  }
  return sparse_632_str_;
}
inline ::std::string* Database_NoBench::release_sparse_632_str() {
  clear_has_sparse_632_str();
  if (sparse_632_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_632_str_;
    sparse_632_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_632_str(::std::string* sparse_632_str) {
  if (sparse_632_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_632_str_;
  }
  if (sparse_632_str) {
    set_has_sparse_632_str();
    sparse_632_str_ = sparse_632_str;
  } else {
    clear_has_sparse_632_str();
    sparse_632_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_633_str = 645;
inline bool Database_NoBench::has_sparse_633_str() const {
  return (_has_bits_[20] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_633_str() {
  _has_bits_[20] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_633_str() {
  _has_bits_[20] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_633_str() {
  if (sparse_633_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_633_str_->clear();
  }
  clear_has_sparse_633_str();
}
inline const ::std::string& Database_NoBench::sparse_633_str() const {
  return *sparse_633_str_;
}
inline void Database_NoBench::set_sparse_633_str(const ::std::string& value) {
  set_has_sparse_633_str();
  if (sparse_633_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_633_str_ = new ::std::string;
  }
  sparse_633_str_->assign(value);
}
inline void Database_NoBench::set_sparse_633_str(const char* value) {
  set_has_sparse_633_str();
  if (sparse_633_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_633_str_ = new ::std::string;
  }
  sparse_633_str_->assign(value);
}
inline void Database_NoBench::set_sparse_633_str(const char* value, size_t size) {
  set_has_sparse_633_str();
  if (sparse_633_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_633_str_ = new ::std::string;
  }
  sparse_633_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_633_str() {
  set_has_sparse_633_str();
  if (sparse_633_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_633_str_ = new ::std::string;
  }
  return sparse_633_str_;
}
inline ::std::string* Database_NoBench::release_sparse_633_str() {
  clear_has_sparse_633_str();
  if (sparse_633_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_633_str_;
    sparse_633_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_633_str(::std::string* sparse_633_str) {
  if (sparse_633_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_633_str_;
  }
  if (sparse_633_str) {
    set_has_sparse_633_str();
    sparse_633_str_ = sparse_633_str;
  } else {
    clear_has_sparse_633_str();
    sparse_633_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_634_str = 646;
inline bool Database_NoBench::has_sparse_634_str() const {
  return (_has_bits_[20] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_634_str() {
  _has_bits_[20] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_634_str() {
  _has_bits_[20] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_634_str() {
  if (sparse_634_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_634_str_->clear();
  }
  clear_has_sparse_634_str();
}
inline const ::std::string& Database_NoBench::sparse_634_str() const {
  return *sparse_634_str_;
}
inline void Database_NoBench::set_sparse_634_str(const ::std::string& value) {
  set_has_sparse_634_str();
  if (sparse_634_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_634_str_ = new ::std::string;
  }
  sparse_634_str_->assign(value);
}
inline void Database_NoBench::set_sparse_634_str(const char* value) {
  set_has_sparse_634_str();
  if (sparse_634_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_634_str_ = new ::std::string;
  }
  sparse_634_str_->assign(value);
}
inline void Database_NoBench::set_sparse_634_str(const char* value, size_t size) {
  set_has_sparse_634_str();
  if (sparse_634_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_634_str_ = new ::std::string;
  }
  sparse_634_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_634_str() {
  set_has_sparse_634_str();
  if (sparse_634_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_634_str_ = new ::std::string;
  }
  return sparse_634_str_;
}
inline ::std::string* Database_NoBench::release_sparse_634_str() {
  clear_has_sparse_634_str();
  if (sparse_634_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_634_str_;
    sparse_634_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_634_str(::std::string* sparse_634_str) {
  if (sparse_634_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_634_str_;
  }
  if (sparse_634_str) {
    set_has_sparse_634_str();
    sparse_634_str_ = sparse_634_str;
  } else {
    clear_has_sparse_634_str();
    sparse_634_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_635_str = 647;
inline bool Database_NoBench::has_sparse_635_str() const {
  return (_has_bits_[20] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_635_str() {
  _has_bits_[20] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_635_str() {
  _has_bits_[20] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_635_str() {
  if (sparse_635_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_635_str_->clear();
  }
  clear_has_sparse_635_str();
}
inline const ::std::string& Database_NoBench::sparse_635_str() const {
  return *sparse_635_str_;
}
inline void Database_NoBench::set_sparse_635_str(const ::std::string& value) {
  set_has_sparse_635_str();
  if (sparse_635_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_635_str_ = new ::std::string;
  }
  sparse_635_str_->assign(value);
}
inline void Database_NoBench::set_sparse_635_str(const char* value) {
  set_has_sparse_635_str();
  if (sparse_635_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_635_str_ = new ::std::string;
  }
  sparse_635_str_->assign(value);
}
inline void Database_NoBench::set_sparse_635_str(const char* value, size_t size) {
  set_has_sparse_635_str();
  if (sparse_635_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_635_str_ = new ::std::string;
  }
  sparse_635_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_635_str() {
  set_has_sparse_635_str();
  if (sparse_635_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_635_str_ = new ::std::string;
  }
  return sparse_635_str_;
}
inline ::std::string* Database_NoBench::release_sparse_635_str() {
  clear_has_sparse_635_str();
  if (sparse_635_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_635_str_;
    sparse_635_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_635_str(::std::string* sparse_635_str) {
  if (sparse_635_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_635_str_;
  }
  if (sparse_635_str) {
    set_has_sparse_635_str();
    sparse_635_str_ = sparse_635_str;
  } else {
    clear_has_sparse_635_str();
    sparse_635_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_636_str = 648;
inline bool Database_NoBench::has_sparse_636_str() const {
  return (_has_bits_[20] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_636_str() {
  _has_bits_[20] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_636_str() {
  _has_bits_[20] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_636_str() {
  if (sparse_636_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_636_str_->clear();
  }
  clear_has_sparse_636_str();
}
inline const ::std::string& Database_NoBench::sparse_636_str() const {
  return *sparse_636_str_;
}
inline void Database_NoBench::set_sparse_636_str(const ::std::string& value) {
  set_has_sparse_636_str();
  if (sparse_636_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_636_str_ = new ::std::string;
  }
  sparse_636_str_->assign(value);
}
inline void Database_NoBench::set_sparse_636_str(const char* value) {
  set_has_sparse_636_str();
  if (sparse_636_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_636_str_ = new ::std::string;
  }
  sparse_636_str_->assign(value);
}
inline void Database_NoBench::set_sparse_636_str(const char* value, size_t size) {
  set_has_sparse_636_str();
  if (sparse_636_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_636_str_ = new ::std::string;
  }
  sparse_636_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_636_str() {
  set_has_sparse_636_str();
  if (sparse_636_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_636_str_ = new ::std::string;
  }
  return sparse_636_str_;
}
inline ::std::string* Database_NoBench::release_sparse_636_str() {
  clear_has_sparse_636_str();
  if (sparse_636_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_636_str_;
    sparse_636_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_636_str(::std::string* sparse_636_str) {
  if (sparse_636_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_636_str_;
  }
  if (sparse_636_str) {
    set_has_sparse_636_str();
    sparse_636_str_ = sparse_636_str;
  } else {
    clear_has_sparse_636_str();
    sparse_636_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_637_str = 649;
inline bool Database_NoBench::has_sparse_637_str() const {
  return (_has_bits_[20] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_637_str() {
  _has_bits_[20] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_637_str() {
  _has_bits_[20] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_637_str() {
  if (sparse_637_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_637_str_->clear();
  }
  clear_has_sparse_637_str();
}
inline const ::std::string& Database_NoBench::sparse_637_str() const {
  return *sparse_637_str_;
}
inline void Database_NoBench::set_sparse_637_str(const ::std::string& value) {
  set_has_sparse_637_str();
  if (sparse_637_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_637_str_ = new ::std::string;
  }
  sparse_637_str_->assign(value);
}
inline void Database_NoBench::set_sparse_637_str(const char* value) {
  set_has_sparse_637_str();
  if (sparse_637_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_637_str_ = new ::std::string;
  }
  sparse_637_str_->assign(value);
}
inline void Database_NoBench::set_sparse_637_str(const char* value, size_t size) {
  set_has_sparse_637_str();
  if (sparse_637_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_637_str_ = new ::std::string;
  }
  sparse_637_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_637_str() {
  set_has_sparse_637_str();
  if (sparse_637_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_637_str_ = new ::std::string;
  }
  return sparse_637_str_;
}
inline ::std::string* Database_NoBench::release_sparse_637_str() {
  clear_has_sparse_637_str();
  if (sparse_637_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_637_str_;
    sparse_637_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_637_str(::std::string* sparse_637_str) {
  if (sparse_637_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_637_str_;
  }
  if (sparse_637_str) {
    set_has_sparse_637_str();
    sparse_637_str_ = sparse_637_str;
  } else {
    clear_has_sparse_637_str();
    sparse_637_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_638_str = 650;
inline bool Database_NoBench::has_sparse_638_str() const {
  return (_has_bits_[20] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_638_str() {
  _has_bits_[20] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_638_str() {
  _has_bits_[20] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_638_str() {
  if (sparse_638_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_638_str_->clear();
  }
  clear_has_sparse_638_str();
}
inline const ::std::string& Database_NoBench::sparse_638_str() const {
  return *sparse_638_str_;
}
inline void Database_NoBench::set_sparse_638_str(const ::std::string& value) {
  set_has_sparse_638_str();
  if (sparse_638_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_638_str_ = new ::std::string;
  }
  sparse_638_str_->assign(value);
}
inline void Database_NoBench::set_sparse_638_str(const char* value) {
  set_has_sparse_638_str();
  if (sparse_638_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_638_str_ = new ::std::string;
  }
  sparse_638_str_->assign(value);
}
inline void Database_NoBench::set_sparse_638_str(const char* value, size_t size) {
  set_has_sparse_638_str();
  if (sparse_638_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_638_str_ = new ::std::string;
  }
  sparse_638_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_638_str() {
  set_has_sparse_638_str();
  if (sparse_638_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_638_str_ = new ::std::string;
  }
  return sparse_638_str_;
}
inline ::std::string* Database_NoBench::release_sparse_638_str() {
  clear_has_sparse_638_str();
  if (sparse_638_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_638_str_;
    sparse_638_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_638_str(::std::string* sparse_638_str) {
  if (sparse_638_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_638_str_;
  }
  if (sparse_638_str) {
    set_has_sparse_638_str();
    sparse_638_str_ = sparse_638_str;
  } else {
    clear_has_sparse_638_str();
    sparse_638_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_639_str = 651;
inline bool Database_NoBench::has_sparse_639_str() const {
  return (_has_bits_[20] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_639_str() {
  _has_bits_[20] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_639_str() {
  _has_bits_[20] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_639_str() {
  if (sparse_639_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_639_str_->clear();
  }
  clear_has_sparse_639_str();
}
inline const ::std::string& Database_NoBench::sparse_639_str() const {
  return *sparse_639_str_;
}
inline void Database_NoBench::set_sparse_639_str(const ::std::string& value) {
  set_has_sparse_639_str();
  if (sparse_639_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_639_str_ = new ::std::string;
  }
  sparse_639_str_->assign(value);
}
inline void Database_NoBench::set_sparse_639_str(const char* value) {
  set_has_sparse_639_str();
  if (sparse_639_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_639_str_ = new ::std::string;
  }
  sparse_639_str_->assign(value);
}
inline void Database_NoBench::set_sparse_639_str(const char* value, size_t size) {
  set_has_sparse_639_str();
  if (sparse_639_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_639_str_ = new ::std::string;
  }
  sparse_639_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_639_str() {
  set_has_sparse_639_str();
  if (sparse_639_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_639_str_ = new ::std::string;
  }
  return sparse_639_str_;
}
inline ::std::string* Database_NoBench::release_sparse_639_str() {
  clear_has_sparse_639_str();
  if (sparse_639_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_639_str_;
    sparse_639_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_639_str(::std::string* sparse_639_str) {
  if (sparse_639_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_639_str_;
  }
  if (sparse_639_str) {
    set_has_sparse_639_str();
    sparse_639_str_ = sparse_639_str;
  } else {
    clear_has_sparse_639_str();
    sparse_639_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_640_str = 652;
inline bool Database_NoBench::has_sparse_640_str() const {
  return (_has_bits_[20] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_640_str() {
  _has_bits_[20] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_640_str() {
  _has_bits_[20] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_640_str() {
  if (sparse_640_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_640_str_->clear();
  }
  clear_has_sparse_640_str();
}
inline const ::std::string& Database_NoBench::sparse_640_str() const {
  return *sparse_640_str_;
}
inline void Database_NoBench::set_sparse_640_str(const ::std::string& value) {
  set_has_sparse_640_str();
  if (sparse_640_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_640_str_ = new ::std::string;
  }
  sparse_640_str_->assign(value);
}
inline void Database_NoBench::set_sparse_640_str(const char* value) {
  set_has_sparse_640_str();
  if (sparse_640_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_640_str_ = new ::std::string;
  }
  sparse_640_str_->assign(value);
}
inline void Database_NoBench::set_sparse_640_str(const char* value, size_t size) {
  set_has_sparse_640_str();
  if (sparse_640_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_640_str_ = new ::std::string;
  }
  sparse_640_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_640_str() {
  set_has_sparse_640_str();
  if (sparse_640_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_640_str_ = new ::std::string;
  }
  return sparse_640_str_;
}
inline ::std::string* Database_NoBench::release_sparse_640_str() {
  clear_has_sparse_640_str();
  if (sparse_640_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_640_str_;
    sparse_640_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_640_str(::std::string* sparse_640_str) {
  if (sparse_640_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_640_str_;
  }
  if (sparse_640_str) {
    set_has_sparse_640_str();
    sparse_640_str_ = sparse_640_str;
  } else {
    clear_has_sparse_640_str();
    sparse_640_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_641_str = 653;
inline bool Database_NoBench::has_sparse_641_str() const {
  return (_has_bits_[20] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_641_str() {
  _has_bits_[20] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_641_str() {
  _has_bits_[20] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_641_str() {
  if (sparse_641_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_641_str_->clear();
  }
  clear_has_sparse_641_str();
}
inline const ::std::string& Database_NoBench::sparse_641_str() const {
  return *sparse_641_str_;
}
inline void Database_NoBench::set_sparse_641_str(const ::std::string& value) {
  set_has_sparse_641_str();
  if (sparse_641_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_641_str_ = new ::std::string;
  }
  sparse_641_str_->assign(value);
}
inline void Database_NoBench::set_sparse_641_str(const char* value) {
  set_has_sparse_641_str();
  if (sparse_641_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_641_str_ = new ::std::string;
  }
  sparse_641_str_->assign(value);
}
inline void Database_NoBench::set_sparse_641_str(const char* value, size_t size) {
  set_has_sparse_641_str();
  if (sparse_641_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_641_str_ = new ::std::string;
  }
  sparse_641_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_641_str() {
  set_has_sparse_641_str();
  if (sparse_641_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_641_str_ = new ::std::string;
  }
  return sparse_641_str_;
}
inline ::std::string* Database_NoBench::release_sparse_641_str() {
  clear_has_sparse_641_str();
  if (sparse_641_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_641_str_;
    sparse_641_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_641_str(::std::string* sparse_641_str) {
  if (sparse_641_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_641_str_;
  }
  if (sparse_641_str) {
    set_has_sparse_641_str();
    sparse_641_str_ = sparse_641_str;
  } else {
    clear_has_sparse_641_str();
    sparse_641_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_642_str = 654;
inline bool Database_NoBench::has_sparse_642_str() const {
  return (_has_bits_[20] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_642_str() {
  _has_bits_[20] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_642_str() {
  _has_bits_[20] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_642_str() {
  if (sparse_642_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_642_str_->clear();
  }
  clear_has_sparse_642_str();
}
inline const ::std::string& Database_NoBench::sparse_642_str() const {
  return *sparse_642_str_;
}
inline void Database_NoBench::set_sparse_642_str(const ::std::string& value) {
  set_has_sparse_642_str();
  if (sparse_642_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_642_str_ = new ::std::string;
  }
  sparse_642_str_->assign(value);
}
inline void Database_NoBench::set_sparse_642_str(const char* value) {
  set_has_sparse_642_str();
  if (sparse_642_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_642_str_ = new ::std::string;
  }
  sparse_642_str_->assign(value);
}
inline void Database_NoBench::set_sparse_642_str(const char* value, size_t size) {
  set_has_sparse_642_str();
  if (sparse_642_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_642_str_ = new ::std::string;
  }
  sparse_642_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_642_str() {
  set_has_sparse_642_str();
  if (sparse_642_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_642_str_ = new ::std::string;
  }
  return sparse_642_str_;
}
inline ::std::string* Database_NoBench::release_sparse_642_str() {
  clear_has_sparse_642_str();
  if (sparse_642_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_642_str_;
    sparse_642_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_642_str(::std::string* sparse_642_str) {
  if (sparse_642_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_642_str_;
  }
  if (sparse_642_str) {
    set_has_sparse_642_str();
    sparse_642_str_ = sparse_642_str;
  } else {
    clear_has_sparse_642_str();
    sparse_642_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_643_str = 655;
inline bool Database_NoBench::has_sparse_643_str() const {
  return (_has_bits_[20] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_643_str() {
  _has_bits_[20] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_643_str() {
  _has_bits_[20] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_643_str() {
  if (sparse_643_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_643_str_->clear();
  }
  clear_has_sparse_643_str();
}
inline const ::std::string& Database_NoBench::sparse_643_str() const {
  return *sparse_643_str_;
}
inline void Database_NoBench::set_sparse_643_str(const ::std::string& value) {
  set_has_sparse_643_str();
  if (sparse_643_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_643_str_ = new ::std::string;
  }
  sparse_643_str_->assign(value);
}
inline void Database_NoBench::set_sparse_643_str(const char* value) {
  set_has_sparse_643_str();
  if (sparse_643_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_643_str_ = new ::std::string;
  }
  sparse_643_str_->assign(value);
}
inline void Database_NoBench::set_sparse_643_str(const char* value, size_t size) {
  set_has_sparse_643_str();
  if (sparse_643_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_643_str_ = new ::std::string;
  }
  sparse_643_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_643_str() {
  set_has_sparse_643_str();
  if (sparse_643_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_643_str_ = new ::std::string;
  }
  return sparse_643_str_;
}
inline ::std::string* Database_NoBench::release_sparse_643_str() {
  clear_has_sparse_643_str();
  if (sparse_643_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_643_str_;
    sparse_643_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_643_str(::std::string* sparse_643_str) {
  if (sparse_643_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_643_str_;
  }
  if (sparse_643_str) {
    set_has_sparse_643_str();
    sparse_643_str_ = sparse_643_str;
  } else {
    clear_has_sparse_643_str();
    sparse_643_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_644_str = 656;
inline bool Database_NoBench::has_sparse_644_str() const {
  return (_has_bits_[20] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_644_str() {
  _has_bits_[20] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_644_str() {
  _has_bits_[20] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_644_str() {
  if (sparse_644_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_644_str_->clear();
  }
  clear_has_sparse_644_str();
}
inline const ::std::string& Database_NoBench::sparse_644_str() const {
  return *sparse_644_str_;
}
inline void Database_NoBench::set_sparse_644_str(const ::std::string& value) {
  set_has_sparse_644_str();
  if (sparse_644_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_644_str_ = new ::std::string;
  }
  sparse_644_str_->assign(value);
}
inline void Database_NoBench::set_sparse_644_str(const char* value) {
  set_has_sparse_644_str();
  if (sparse_644_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_644_str_ = new ::std::string;
  }
  sparse_644_str_->assign(value);
}
inline void Database_NoBench::set_sparse_644_str(const char* value, size_t size) {
  set_has_sparse_644_str();
  if (sparse_644_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_644_str_ = new ::std::string;
  }
  sparse_644_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_644_str() {
  set_has_sparse_644_str();
  if (sparse_644_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_644_str_ = new ::std::string;
  }
  return sparse_644_str_;
}
inline ::std::string* Database_NoBench::release_sparse_644_str() {
  clear_has_sparse_644_str();
  if (sparse_644_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_644_str_;
    sparse_644_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_644_str(::std::string* sparse_644_str) {
  if (sparse_644_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_644_str_;
  }
  if (sparse_644_str) {
    set_has_sparse_644_str();
    sparse_644_str_ = sparse_644_str;
  } else {
    clear_has_sparse_644_str();
    sparse_644_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_645_str = 657;
inline bool Database_NoBench::has_sparse_645_str() const {
  return (_has_bits_[20] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_645_str() {
  _has_bits_[20] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_645_str() {
  _has_bits_[20] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_645_str() {
  if (sparse_645_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_645_str_->clear();
  }
  clear_has_sparse_645_str();
}
inline const ::std::string& Database_NoBench::sparse_645_str() const {
  return *sparse_645_str_;
}
inline void Database_NoBench::set_sparse_645_str(const ::std::string& value) {
  set_has_sparse_645_str();
  if (sparse_645_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_645_str_ = new ::std::string;
  }
  sparse_645_str_->assign(value);
}
inline void Database_NoBench::set_sparse_645_str(const char* value) {
  set_has_sparse_645_str();
  if (sparse_645_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_645_str_ = new ::std::string;
  }
  sparse_645_str_->assign(value);
}
inline void Database_NoBench::set_sparse_645_str(const char* value, size_t size) {
  set_has_sparse_645_str();
  if (sparse_645_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_645_str_ = new ::std::string;
  }
  sparse_645_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_645_str() {
  set_has_sparse_645_str();
  if (sparse_645_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_645_str_ = new ::std::string;
  }
  return sparse_645_str_;
}
inline ::std::string* Database_NoBench::release_sparse_645_str() {
  clear_has_sparse_645_str();
  if (sparse_645_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_645_str_;
    sparse_645_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_645_str(::std::string* sparse_645_str) {
  if (sparse_645_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_645_str_;
  }
  if (sparse_645_str) {
    set_has_sparse_645_str();
    sparse_645_str_ = sparse_645_str;
  } else {
    clear_has_sparse_645_str();
    sparse_645_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_646_str = 658;
inline bool Database_NoBench::has_sparse_646_str() const {
  return (_has_bits_[20] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_646_str() {
  _has_bits_[20] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_646_str() {
  _has_bits_[20] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_646_str() {
  if (sparse_646_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_646_str_->clear();
  }
  clear_has_sparse_646_str();
}
inline const ::std::string& Database_NoBench::sparse_646_str() const {
  return *sparse_646_str_;
}
inline void Database_NoBench::set_sparse_646_str(const ::std::string& value) {
  set_has_sparse_646_str();
  if (sparse_646_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_646_str_ = new ::std::string;
  }
  sparse_646_str_->assign(value);
}
inline void Database_NoBench::set_sparse_646_str(const char* value) {
  set_has_sparse_646_str();
  if (sparse_646_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_646_str_ = new ::std::string;
  }
  sparse_646_str_->assign(value);
}
inline void Database_NoBench::set_sparse_646_str(const char* value, size_t size) {
  set_has_sparse_646_str();
  if (sparse_646_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_646_str_ = new ::std::string;
  }
  sparse_646_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_646_str() {
  set_has_sparse_646_str();
  if (sparse_646_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_646_str_ = new ::std::string;
  }
  return sparse_646_str_;
}
inline ::std::string* Database_NoBench::release_sparse_646_str() {
  clear_has_sparse_646_str();
  if (sparse_646_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_646_str_;
    sparse_646_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_646_str(::std::string* sparse_646_str) {
  if (sparse_646_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_646_str_;
  }
  if (sparse_646_str) {
    set_has_sparse_646_str();
    sparse_646_str_ = sparse_646_str;
  } else {
    clear_has_sparse_646_str();
    sparse_646_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_647_str = 659;
inline bool Database_NoBench::has_sparse_647_str() const {
  return (_has_bits_[20] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_647_str() {
  _has_bits_[20] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_647_str() {
  _has_bits_[20] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_647_str() {
  if (sparse_647_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_647_str_->clear();
  }
  clear_has_sparse_647_str();
}
inline const ::std::string& Database_NoBench::sparse_647_str() const {
  return *sparse_647_str_;
}
inline void Database_NoBench::set_sparse_647_str(const ::std::string& value) {
  set_has_sparse_647_str();
  if (sparse_647_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_647_str_ = new ::std::string;
  }
  sparse_647_str_->assign(value);
}
inline void Database_NoBench::set_sparse_647_str(const char* value) {
  set_has_sparse_647_str();
  if (sparse_647_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_647_str_ = new ::std::string;
  }
  sparse_647_str_->assign(value);
}
inline void Database_NoBench::set_sparse_647_str(const char* value, size_t size) {
  set_has_sparse_647_str();
  if (sparse_647_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_647_str_ = new ::std::string;
  }
  sparse_647_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_647_str() {
  set_has_sparse_647_str();
  if (sparse_647_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_647_str_ = new ::std::string;
  }
  return sparse_647_str_;
}
inline ::std::string* Database_NoBench::release_sparse_647_str() {
  clear_has_sparse_647_str();
  if (sparse_647_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_647_str_;
    sparse_647_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_647_str(::std::string* sparse_647_str) {
  if (sparse_647_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_647_str_;
  }
  if (sparse_647_str) {
    set_has_sparse_647_str();
    sparse_647_str_ = sparse_647_str;
  } else {
    clear_has_sparse_647_str();
    sparse_647_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_648_str = 660;
inline bool Database_NoBench::has_sparse_648_str() const {
  return (_has_bits_[20] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_648_str() {
  _has_bits_[20] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_648_str() {
  _has_bits_[20] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_648_str() {
  if (sparse_648_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_648_str_->clear();
  }
  clear_has_sparse_648_str();
}
inline const ::std::string& Database_NoBench::sparse_648_str() const {
  return *sparse_648_str_;
}
inline void Database_NoBench::set_sparse_648_str(const ::std::string& value) {
  set_has_sparse_648_str();
  if (sparse_648_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_648_str_ = new ::std::string;
  }
  sparse_648_str_->assign(value);
}
inline void Database_NoBench::set_sparse_648_str(const char* value) {
  set_has_sparse_648_str();
  if (sparse_648_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_648_str_ = new ::std::string;
  }
  sparse_648_str_->assign(value);
}
inline void Database_NoBench::set_sparse_648_str(const char* value, size_t size) {
  set_has_sparse_648_str();
  if (sparse_648_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_648_str_ = new ::std::string;
  }
  sparse_648_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_648_str() {
  set_has_sparse_648_str();
  if (sparse_648_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_648_str_ = new ::std::string;
  }
  return sparse_648_str_;
}
inline ::std::string* Database_NoBench::release_sparse_648_str() {
  clear_has_sparse_648_str();
  if (sparse_648_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_648_str_;
    sparse_648_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_648_str(::std::string* sparse_648_str) {
  if (sparse_648_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_648_str_;
  }
  if (sparse_648_str) {
    set_has_sparse_648_str();
    sparse_648_str_ = sparse_648_str;
  } else {
    clear_has_sparse_648_str();
    sparse_648_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_649_str = 661;
inline bool Database_NoBench::has_sparse_649_str() const {
  return (_has_bits_[20] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_649_str() {
  _has_bits_[20] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_649_str() {
  _has_bits_[20] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_649_str() {
  if (sparse_649_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_649_str_->clear();
  }
  clear_has_sparse_649_str();
}
inline const ::std::string& Database_NoBench::sparse_649_str() const {
  return *sparse_649_str_;
}
inline void Database_NoBench::set_sparse_649_str(const ::std::string& value) {
  set_has_sparse_649_str();
  if (sparse_649_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_649_str_ = new ::std::string;
  }
  sparse_649_str_->assign(value);
}
inline void Database_NoBench::set_sparse_649_str(const char* value) {
  set_has_sparse_649_str();
  if (sparse_649_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_649_str_ = new ::std::string;
  }
  sparse_649_str_->assign(value);
}
inline void Database_NoBench::set_sparse_649_str(const char* value, size_t size) {
  set_has_sparse_649_str();
  if (sparse_649_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_649_str_ = new ::std::string;
  }
  sparse_649_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_649_str() {
  set_has_sparse_649_str();
  if (sparse_649_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_649_str_ = new ::std::string;
  }
  return sparse_649_str_;
}
inline ::std::string* Database_NoBench::release_sparse_649_str() {
  clear_has_sparse_649_str();
  if (sparse_649_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_649_str_;
    sparse_649_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_649_str(::std::string* sparse_649_str) {
  if (sparse_649_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_649_str_;
  }
  if (sparse_649_str) {
    set_has_sparse_649_str();
    sparse_649_str_ = sparse_649_str;
  } else {
    clear_has_sparse_649_str();
    sparse_649_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_650_str = 662;
inline bool Database_NoBench::has_sparse_650_str() const {
  return (_has_bits_[20] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_650_str() {
  _has_bits_[20] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_650_str() {
  _has_bits_[20] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_650_str() {
  if (sparse_650_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_650_str_->clear();
  }
  clear_has_sparse_650_str();
}
inline const ::std::string& Database_NoBench::sparse_650_str() const {
  return *sparse_650_str_;
}
inline void Database_NoBench::set_sparse_650_str(const ::std::string& value) {
  set_has_sparse_650_str();
  if (sparse_650_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_650_str_ = new ::std::string;
  }
  sparse_650_str_->assign(value);
}
inline void Database_NoBench::set_sparse_650_str(const char* value) {
  set_has_sparse_650_str();
  if (sparse_650_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_650_str_ = new ::std::string;
  }
  sparse_650_str_->assign(value);
}
inline void Database_NoBench::set_sparse_650_str(const char* value, size_t size) {
  set_has_sparse_650_str();
  if (sparse_650_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_650_str_ = new ::std::string;
  }
  sparse_650_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_650_str() {
  set_has_sparse_650_str();
  if (sparse_650_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_650_str_ = new ::std::string;
  }
  return sparse_650_str_;
}
inline ::std::string* Database_NoBench::release_sparse_650_str() {
  clear_has_sparse_650_str();
  if (sparse_650_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_650_str_;
    sparse_650_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_650_str(::std::string* sparse_650_str) {
  if (sparse_650_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_650_str_;
  }
  if (sparse_650_str) {
    set_has_sparse_650_str();
    sparse_650_str_ = sparse_650_str;
  } else {
    clear_has_sparse_650_str();
    sparse_650_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_651_str = 663;
inline bool Database_NoBench::has_sparse_651_str() const {
  return (_has_bits_[20] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_651_str() {
  _has_bits_[20] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_651_str() {
  _has_bits_[20] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_651_str() {
  if (sparse_651_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_651_str_->clear();
  }
  clear_has_sparse_651_str();
}
inline const ::std::string& Database_NoBench::sparse_651_str() const {
  return *sparse_651_str_;
}
inline void Database_NoBench::set_sparse_651_str(const ::std::string& value) {
  set_has_sparse_651_str();
  if (sparse_651_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_651_str_ = new ::std::string;
  }
  sparse_651_str_->assign(value);
}
inline void Database_NoBench::set_sparse_651_str(const char* value) {
  set_has_sparse_651_str();
  if (sparse_651_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_651_str_ = new ::std::string;
  }
  sparse_651_str_->assign(value);
}
inline void Database_NoBench::set_sparse_651_str(const char* value, size_t size) {
  set_has_sparse_651_str();
  if (sparse_651_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_651_str_ = new ::std::string;
  }
  sparse_651_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_651_str() {
  set_has_sparse_651_str();
  if (sparse_651_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_651_str_ = new ::std::string;
  }
  return sparse_651_str_;
}
inline ::std::string* Database_NoBench::release_sparse_651_str() {
  clear_has_sparse_651_str();
  if (sparse_651_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_651_str_;
    sparse_651_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_651_str(::std::string* sparse_651_str) {
  if (sparse_651_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_651_str_;
  }
  if (sparse_651_str) {
    set_has_sparse_651_str();
    sparse_651_str_ = sparse_651_str;
  } else {
    clear_has_sparse_651_str();
    sparse_651_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_652_str = 664;
inline bool Database_NoBench::has_sparse_652_str() const {
  return (_has_bits_[20] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_652_str() {
  _has_bits_[20] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_652_str() {
  _has_bits_[20] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_652_str() {
  if (sparse_652_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_652_str_->clear();
  }
  clear_has_sparse_652_str();
}
inline const ::std::string& Database_NoBench::sparse_652_str() const {
  return *sparse_652_str_;
}
inline void Database_NoBench::set_sparse_652_str(const ::std::string& value) {
  set_has_sparse_652_str();
  if (sparse_652_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_652_str_ = new ::std::string;
  }
  sparse_652_str_->assign(value);
}
inline void Database_NoBench::set_sparse_652_str(const char* value) {
  set_has_sparse_652_str();
  if (sparse_652_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_652_str_ = new ::std::string;
  }
  sparse_652_str_->assign(value);
}
inline void Database_NoBench::set_sparse_652_str(const char* value, size_t size) {
  set_has_sparse_652_str();
  if (sparse_652_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_652_str_ = new ::std::string;
  }
  sparse_652_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_652_str() {
  set_has_sparse_652_str();
  if (sparse_652_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_652_str_ = new ::std::string;
  }
  return sparse_652_str_;
}
inline ::std::string* Database_NoBench::release_sparse_652_str() {
  clear_has_sparse_652_str();
  if (sparse_652_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_652_str_;
    sparse_652_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_652_str(::std::string* sparse_652_str) {
  if (sparse_652_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_652_str_;
  }
  if (sparse_652_str) {
    set_has_sparse_652_str();
    sparse_652_str_ = sparse_652_str;
  } else {
    clear_has_sparse_652_str();
    sparse_652_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_653_str = 665;
inline bool Database_NoBench::has_sparse_653_str() const {
  return (_has_bits_[20] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_653_str() {
  _has_bits_[20] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_653_str() {
  _has_bits_[20] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_653_str() {
  if (sparse_653_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_653_str_->clear();
  }
  clear_has_sparse_653_str();
}
inline const ::std::string& Database_NoBench::sparse_653_str() const {
  return *sparse_653_str_;
}
inline void Database_NoBench::set_sparse_653_str(const ::std::string& value) {
  set_has_sparse_653_str();
  if (sparse_653_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_653_str_ = new ::std::string;
  }
  sparse_653_str_->assign(value);
}
inline void Database_NoBench::set_sparse_653_str(const char* value) {
  set_has_sparse_653_str();
  if (sparse_653_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_653_str_ = new ::std::string;
  }
  sparse_653_str_->assign(value);
}
inline void Database_NoBench::set_sparse_653_str(const char* value, size_t size) {
  set_has_sparse_653_str();
  if (sparse_653_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_653_str_ = new ::std::string;
  }
  sparse_653_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_653_str() {
  set_has_sparse_653_str();
  if (sparse_653_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_653_str_ = new ::std::string;
  }
  return sparse_653_str_;
}
inline ::std::string* Database_NoBench::release_sparse_653_str() {
  clear_has_sparse_653_str();
  if (sparse_653_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_653_str_;
    sparse_653_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_653_str(::std::string* sparse_653_str) {
  if (sparse_653_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_653_str_;
  }
  if (sparse_653_str) {
    set_has_sparse_653_str();
    sparse_653_str_ = sparse_653_str;
  } else {
    clear_has_sparse_653_str();
    sparse_653_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_654_str = 666;
inline bool Database_NoBench::has_sparse_654_str() const {
  return (_has_bits_[20] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_654_str() {
  _has_bits_[20] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_654_str() {
  _has_bits_[20] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_654_str() {
  if (sparse_654_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_654_str_->clear();
  }
  clear_has_sparse_654_str();
}
inline const ::std::string& Database_NoBench::sparse_654_str() const {
  return *sparse_654_str_;
}
inline void Database_NoBench::set_sparse_654_str(const ::std::string& value) {
  set_has_sparse_654_str();
  if (sparse_654_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_654_str_ = new ::std::string;
  }
  sparse_654_str_->assign(value);
}
inline void Database_NoBench::set_sparse_654_str(const char* value) {
  set_has_sparse_654_str();
  if (sparse_654_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_654_str_ = new ::std::string;
  }
  sparse_654_str_->assign(value);
}
inline void Database_NoBench::set_sparse_654_str(const char* value, size_t size) {
  set_has_sparse_654_str();
  if (sparse_654_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_654_str_ = new ::std::string;
  }
  sparse_654_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_654_str() {
  set_has_sparse_654_str();
  if (sparse_654_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_654_str_ = new ::std::string;
  }
  return sparse_654_str_;
}
inline ::std::string* Database_NoBench::release_sparse_654_str() {
  clear_has_sparse_654_str();
  if (sparse_654_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_654_str_;
    sparse_654_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_654_str(::std::string* sparse_654_str) {
  if (sparse_654_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_654_str_;
  }
  if (sparse_654_str) {
    set_has_sparse_654_str();
    sparse_654_str_ = sparse_654_str;
  } else {
    clear_has_sparse_654_str();
    sparse_654_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_655_str = 667;
inline bool Database_NoBench::has_sparse_655_str() const {
  return (_has_bits_[20] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_655_str() {
  _has_bits_[20] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_655_str() {
  _has_bits_[20] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_655_str() {
  if (sparse_655_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_655_str_->clear();
  }
  clear_has_sparse_655_str();
}
inline const ::std::string& Database_NoBench::sparse_655_str() const {
  return *sparse_655_str_;
}
inline void Database_NoBench::set_sparse_655_str(const ::std::string& value) {
  set_has_sparse_655_str();
  if (sparse_655_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_655_str_ = new ::std::string;
  }
  sparse_655_str_->assign(value);
}
inline void Database_NoBench::set_sparse_655_str(const char* value) {
  set_has_sparse_655_str();
  if (sparse_655_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_655_str_ = new ::std::string;
  }
  sparse_655_str_->assign(value);
}
inline void Database_NoBench::set_sparse_655_str(const char* value, size_t size) {
  set_has_sparse_655_str();
  if (sparse_655_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_655_str_ = new ::std::string;
  }
  sparse_655_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_655_str() {
  set_has_sparse_655_str();
  if (sparse_655_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_655_str_ = new ::std::string;
  }
  return sparse_655_str_;
}
inline ::std::string* Database_NoBench::release_sparse_655_str() {
  clear_has_sparse_655_str();
  if (sparse_655_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_655_str_;
    sparse_655_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_655_str(::std::string* sparse_655_str) {
  if (sparse_655_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_655_str_;
  }
  if (sparse_655_str) {
    set_has_sparse_655_str();
    sparse_655_str_ = sparse_655_str;
  } else {
    clear_has_sparse_655_str();
    sparse_655_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_656_str = 668;
inline bool Database_NoBench::has_sparse_656_str() const {
  return (_has_bits_[20] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_656_str() {
  _has_bits_[20] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_656_str() {
  _has_bits_[20] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_656_str() {
  if (sparse_656_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_656_str_->clear();
  }
  clear_has_sparse_656_str();
}
inline const ::std::string& Database_NoBench::sparse_656_str() const {
  return *sparse_656_str_;
}
inline void Database_NoBench::set_sparse_656_str(const ::std::string& value) {
  set_has_sparse_656_str();
  if (sparse_656_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_656_str_ = new ::std::string;
  }
  sparse_656_str_->assign(value);
}
inline void Database_NoBench::set_sparse_656_str(const char* value) {
  set_has_sparse_656_str();
  if (sparse_656_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_656_str_ = new ::std::string;
  }
  sparse_656_str_->assign(value);
}
inline void Database_NoBench::set_sparse_656_str(const char* value, size_t size) {
  set_has_sparse_656_str();
  if (sparse_656_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_656_str_ = new ::std::string;
  }
  sparse_656_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_656_str() {
  set_has_sparse_656_str();
  if (sparse_656_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_656_str_ = new ::std::string;
  }
  return sparse_656_str_;
}
inline ::std::string* Database_NoBench::release_sparse_656_str() {
  clear_has_sparse_656_str();
  if (sparse_656_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_656_str_;
    sparse_656_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_656_str(::std::string* sparse_656_str) {
  if (sparse_656_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_656_str_;
  }
  if (sparse_656_str) {
    set_has_sparse_656_str();
    sparse_656_str_ = sparse_656_str;
  } else {
    clear_has_sparse_656_str();
    sparse_656_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_657_str = 669;
inline bool Database_NoBench::has_sparse_657_str() const {
  return (_has_bits_[20] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_657_str() {
  _has_bits_[20] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_657_str() {
  _has_bits_[20] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_657_str() {
  if (sparse_657_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_657_str_->clear();
  }
  clear_has_sparse_657_str();
}
inline const ::std::string& Database_NoBench::sparse_657_str() const {
  return *sparse_657_str_;
}
inline void Database_NoBench::set_sparse_657_str(const ::std::string& value) {
  set_has_sparse_657_str();
  if (sparse_657_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_657_str_ = new ::std::string;
  }
  sparse_657_str_->assign(value);
}
inline void Database_NoBench::set_sparse_657_str(const char* value) {
  set_has_sparse_657_str();
  if (sparse_657_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_657_str_ = new ::std::string;
  }
  sparse_657_str_->assign(value);
}
inline void Database_NoBench::set_sparse_657_str(const char* value, size_t size) {
  set_has_sparse_657_str();
  if (sparse_657_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_657_str_ = new ::std::string;
  }
  sparse_657_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_657_str() {
  set_has_sparse_657_str();
  if (sparse_657_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_657_str_ = new ::std::string;
  }
  return sparse_657_str_;
}
inline ::std::string* Database_NoBench::release_sparse_657_str() {
  clear_has_sparse_657_str();
  if (sparse_657_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_657_str_;
    sparse_657_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_657_str(::std::string* sparse_657_str) {
  if (sparse_657_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_657_str_;
  }
  if (sparse_657_str) {
    set_has_sparse_657_str();
    sparse_657_str_ = sparse_657_str;
  } else {
    clear_has_sparse_657_str();
    sparse_657_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_658_str = 670;
inline bool Database_NoBench::has_sparse_658_str() const {
  return (_has_bits_[20] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_658_str() {
  _has_bits_[20] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_658_str() {
  _has_bits_[20] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_658_str() {
  if (sparse_658_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_658_str_->clear();
  }
  clear_has_sparse_658_str();
}
inline const ::std::string& Database_NoBench::sparse_658_str() const {
  return *sparse_658_str_;
}
inline void Database_NoBench::set_sparse_658_str(const ::std::string& value) {
  set_has_sparse_658_str();
  if (sparse_658_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_658_str_ = new ::std::string;
  }
  sparse_658_str_->assign(value);
}
inline void Database_NoBench::set_sparse_658_str(const char* value) {
  set_has_sparse_658_str();
  if (sparse_658_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_658_str_ = new ::std::string;
  }
  sparse_658_str_->assign(value);
}
inline void Database_NoBench::set_sparse_658_str(const char* value, size_t size) {
  set_has_sparse_658_str();
  if (sparse_658_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_658_str_ = new ::std::string;
  }
  sparse_658_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_658_str() {
  set_has_sparse_658_str();
  if (sparse_658_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_658_str_ = new ::std::string;
  }
  return sparse_658_str_;
}
inline ::std::string* Database_NoBench::release_sparse_658_str() {
  clear_has_sparse_658_str();
  if (sparse_658_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_658_str_;
    sparse_658_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_658_str(::std::string* sparse_658_str) {
  if (sparse_658_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_658_str_;
  }
  if (sparse_658_str) {
    set_has_sparse_658_str();
    sparse_658_str_ = sparse_658_str;
  } else {
    clear_has_sparse_658_str();
    sparse_658_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_659_str = 671;
inline bool Database_NoBench::has_sparse_659_str() const {
  return (_has_bits_[21] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_659_str() {
  _has_bits_[21] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_659_str() {
  _has_bits_[21] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_659_str() {
  if (sparse_659_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_659_str_->clear();
  }
  clear_has_sparse_659_str();
}
inline const ::std::string& Database_NoBench::sparse_659_str() const {
  return *sparse_659_str_;
}
inline void Database_NoBench::set_sparse_659_str(const ::std::string& value) {
  set_has_sparse_659_str();
  if (sparse_659_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_659_str_ = new ::std::string;
  }
  sparse_659_str_->assign(value);
}
inline void Database_NoBench::set_sparse_659_str(const char* value) {
  set_has_sparse_659_str();
  if (sparse_659_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_659_str_ = new ::std::string;
  }
  sparse_659_str_->assign(value);
}
inline void Database_NoBench::set_sparse_659_str(const char* value, size_t size) {
  set_has_sparse_659_str();
  if (sparse_659_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_659_str_ = new ::std::string;
  }
  sparse_659_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_659_str() {
  set_has_sparse_659_str();
  if (sparse_659_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_659_str_ = new ::std::string;
  }
  return sparse_659_str_;
}
inline ::std::string* Database_NoBench::release_sparse_659_str() {
  clear_has_sparse_659_str();
  if (sparse_659_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_659_str_;
    sparse_659_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_659_str(::std::string* sparse_659_str) {
  if (sparse_659_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_659_str_;
  }
  if (sparse_659_str) {
    set_has_sparse_659_str();
    sparse_659_str_ = sparse_659_str;
  } else {
    clear_has_sparse_659_str();
    sparse_659_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_660_str = 672;
inline bool Database_NoBench::has_sparse_660_str() const {
  return (_has_bits_[21] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_660_str() {
  _has_bits_[21] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_660_str() {
  _has_bits_[21] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_660_str() {
  if (sparse_660_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_660_str_->clear();
  }
  clear_has_sparse_660_str();
}
inline const ::std::string& Database_NoBench::sparse_660_str() const {
  return *sparse_660_str_;
}
inline void Database_NoBench::set_sparse_660_str(const ::std::string& value) {
  set_has_sparse_660_str();
  if (sparse_660_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_660_str_ = new ::std::string;
  }
  sparse_660_str_->assign(value);
}
inline void Database_NoBench::set_sparse_660_str(const char* value) {
  set_has_sparse_660_str();
  if (sparse_660_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_660_str_ = new ::std::string;
  }
  sparse_660_str_->assign(value);
}
inline void Database_NoBench::set_sparse_660_str(const char* value, size_t size) {
  set_has_sparse_660_str();
  if (sparse_660_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_660_str_ = new ::std::string;
  }
  sparse_660_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_660_str() {
  set_has_sparse_660_str();
  if (sparse_660_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_660_str_ = new ::std::string;
  }
  return sparse_660_str_;
}
inline ::std::string* Database_NoBench::release_sparse_660_str() {
  clear_has_sparse_660_str();
  if (sparse_660_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_660_str_;
    sparse_660_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_660_str(::std::string* sparse_660_str) {
  if (sparse_660_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_660_str_;
  }
  if (sparse_660_str) {
    set_has_sparse_660_str();
    sparse_660_str_ = sparse_660_str;
  } else {
    clear_has_sparse_660_str();
    sparse_660_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_661_str = 673;
inline bool Database_NoBench::has_sparse_661_str() const {
  return (_has_bits_[21] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_661_str() {
  _has_bits_[21] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_661_str() {
  _has_bits_[21] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_661_str() {
  if (sparse_661_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_661_str_->clear();
  }
  clear_has_sparse_661_str();
}
inline const ::std::string& Database_NoBench::sparse_661_str() const {
  return *sparse_661_str_;
}
inline void Database_NoBench::set_sparse_661_str(const ::std::string& value) {
  set_has_sparse_661_str();
  if (sparse_661_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_661_str_ = new ::std::string;
  }
  sparse_661_str_->assign(value);
}
inline void Database_NoBench::set_sparse_661_str(const char* value) {
  set_has_sparse_661_str();
  if (sparse_661_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_661_str_ = new ::std::string;
  }
  sparse_661_str_->assign(value);
}
inline void Database_NoBench::set_sparse_661_str(const char* value, size_t size) {
  set_has_sparse_661_str();
  if (sparse_661_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_661_str_ = new ::std::string;
  }
  sparse_661_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_661_str() {
  set_has_sparse_661_str();
  if (sparse_661_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_661_str_ = new ::std::string;
  }
  return sparse_661_str_;
}
inline ::std::string* Database_NoBench::release_sparse_661_str() {
  clear_has_sparse_661_str();
  if (sparse_661_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_661_str_;
    sparse_661_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_661_str(::std::string* sparse_661_str) {
  if (sparse_661_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_661_str_;
  }
  if (sparse_661_str) {
    set_has_sparse_661_str();
    sparse_661_str_ = sparse_661_str;
  } else {
    clear_has_sparse_661_str();
    sparse_661_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_662_str = 674;
inline bool Database_NoBench::has_sparse_662_str() const {
  return (_has_bits_[21] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_662_str() {
  _has_bits_[21] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_662_str() {
  _has_bits_[21] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_662_str() {
  if (sparse_662_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_662_str_->clear();
  }
  clear_has_sparse_662_str();
}
inline const ::std::string& Database_NoBench::sparse_662_str() const {
  return *sparse_662_str_;
}
inline void Database_NoBench::set_sparse_662_str(const ::std::string& value) {
  set_has_sparse_662_str();
  if (sparse_662_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_662_str_ = new ::std::string;
  }
  sparse_662_str_->assign(value);
}
inline void Database_NoBench::set_sparse_662_str(const char* value) {
  set_has_sparse_662_str();
  if (sparse_662_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_662_str_ = new ::std::string;
  }
  sparse_662_str_->assign(value);
}
inline void Database_NoBench::set_sparse_662_str(const char* value, size_t size) {
  set_has_sparse_662_str();
  if (sparse_662_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_662_str_ = new ::std::string;
  }
  sparse_662_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_662_str() {
  set_has_sparse_662_str();
  if (sparse_662_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_662_str_ = new ::std::string;
  }
  return sparse_662_str_;
}
inline ::std::string* Database_NoBench::release_sparse_662_str() {
  clear_has_sparse_662_str();
  if (sparse_662_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_662_str_;
    sparse_662_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_662_str(::std::string* sparse_662_str) {
  if (sparse_662_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_662_str_;
  }
  if (sparse_662_str) {
    set_has_sparse_662_str();
    sparse_662_str_ = sparse_662_str;
  } else {
    clear_has_sparse_662_str();
    sparse_662_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_663_str = 675;
inline bool Database_NoBench::has_sparse_663_str() const {
  return (_has_bits_[21] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_663_str() {
  _has_bits_[21] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_663_str() {
  _has_bits_[21] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_663_str() {
  if (sparse_663_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_663_str_->clear();
  }
  clear_has_sparse_663_str();
}
inline const ::std::string& Database_NoBench::sparse_663_str() const {
  return *sparse_663_str_;
}
inline void Database_NoBench::set_sparse_663_str(const ::std::string& value) {
  set_has_sparse_663_str();
  if (sparse_663_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_663_str_ = new ::std::string;
  }
  sparse_663_str_->assign(value);
}
inline void Database_NoBench::set_sparse_663_str(const char* value) {
  set_has_sparse_663_str();
  if (sparse_663_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_663_str_ = new ::std::string;
  }
  sparse_663_str_->assign(value);
}
inline void Database_NoBench::set_sparse_663_str(const char* value, size_t size) {
  set_has_sparse_663_str();
  if (sparse_663_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_663_str_ = new ::std::string;
  }
  sparse_663_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_663_str() {
  set_has_sparse_663_str();
  if (sparse_663_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_663_str_ = new ::std::string;
  }
  return sparse_663_str_;
}
inline ::std::string* Database_NoBench::release_sparse_663_str() {
  clear_has_sparse_663_str();
  if (sparse_663_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_663_str_;
    sparse_663_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_663_str(::std::string* sparse_663_str) {
  if (sparse_663_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_663_str_;
  }
  if (sparse_663_str) {
    set_has_sparse_663_str();
    sparse_663_str_ = sparse_663_str;
  } else {
    clear_has_sparse_663_str();
    sparse_663_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_664_str = 676;
inline bool Database_NoBench::has_sparse_664_str() const {
  return (_has_bits_[21] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_664_str() {
  _has_bits_[21] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_664_str() {
  _has_bits_[21] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_664_str() {
  if (sparse_664_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_664_str_->clear();
  }
  clear_has_sparse_664_str();
}
inline const ::std::string& Database_NoBench::sparse_664_str() const {
  return *sparse_664_str_;
}
inline void Database_NoBench::set_sparse_664_str(const ::std::string& value) {
  set_has_sparse_664_str();
  if (sparse_664_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_664_str_ = new ::std::string;
  }
  sparse_664_str_->assign(value);
}
inline void Database_NoBench::set_sparse_664_str(const char* value) {
  set_has_sparse_664_str();
  if (sparse_664_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_664_str_ = new ::std::string;
  }
  sparse_664_str_->assign(value);
}
inline void Database_NoBench::set_sparse_664_str(const char* value, size_t size) {
  set_has_sparse_664_str();
  if (sparse_664_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_664_str_ = new ::std::string;
  }
  sparse_664_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_664_str() {
  set_has_sparse_664_str();
  if (sparse_664_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_664_str_ = new ::std::string;
  }
  return sparse_664_str_;
}
inline ::std::string* Database_NoBench::release_sparse_664_str() {
  clear_has_sparse_664_str();
  if (sparse_664_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_664_str_;
    sparse_664_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_664_str(::std::string* sparse_664_str) {
  if (sparse_664_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_664_str_;
  }
  if (sparse_664_str) {
    set_has_sparse_664_str();
    sparse_664_str_ = sparse_664_str;
  } else {
    clear_has_sparse_664_str();
    sparse_664_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_665_str = 677;
inline bool Database_NoBench::has_sparse_665_str() const {
  return (_has_bits_[21] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_665_str() {
  _has_bits_[21] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_665_str() {
  _has_bits_[21] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_665_str() {
  if (sparse_665_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_665_str_->clear();
  }
  clear_has_sparse_665_str();
}
inline const ::std::string& Database_NoBench::sparse_665_str() const {
  return *sparse_665_str_;
}
inline void Database_NoBench::set_sparse_665_str(const ::std::string& value) {
  set_has_sparse_665_str();
  if (sparse_665_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_665_str_ = new ::std::string;
  }
  sparse_665_str_->assign(value);
}
inline void Database_NoBench::set_sparse_665_str(const char* value) {
  set_has_sparse_665_str();
  if (sparse_665_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_665_str_ = new ::std::string;
  }
  sparse_665_str_->assign(value);
}
inline void Database_NoBench::set_sparse_665_str(const char* value, size_t size) {
  set_has_sparse_665_str();
  if (sparse_665_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_665_str_ = new ::std::string;
  }
  sparse_665_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_665_str() {
  set_has_sparse_665_str();
  if (sparse_665_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_665_str_ = new ::std::string;
  }
  return sparse_665_str_;
}
inline ::std::string* Database_NoBench::release_sparse_665_str() {
  clear_has_sparse_665_str();
  if (sparse_665_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_665_str_;
    sparse_665_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_665_str(::std::string* sparse_665_str) {
  if (sparse_665_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_665_str_;
  }
  if (sparse_665_str) {
    set_has_sparse_665_str();
    sparse_665_str_ = sparse_665_str;
  } else {
    clear_has_sparse_665_str();
    sparse_665_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_666_str = 678;
inline bool Database_NoBench::has_sparse_666_str() const {
  return (_has_bits_[21] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_666_str() {
  _has_bits_[21] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_666_str() {
  _has_bits_[21] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_666_str() {
  if (sparse_666_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_666_str_->clear();
  }
  clear_has_sparse_666_str();
}
inline const ::std::string& Database_NoBench::sparse_666_str() const {
  return *sparse_666_str_;
}
inline void Database_NoBench::set_sparse_666_str(const ::std::string& value) {
  set_has_sparse_666_str();
  if (sparse_666_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_666_str_ = new ::std::string;
  }
  sparse_666_str_->assign(value);
}
inline void Database_NoBench::set_sparse_666_str(const char* value) {
  set_has_sparse_666_str();
  if (sparse_666_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_666_str_ = new ::std::string;
  }
  sparse_666_str_->assign(value);
}
inline void Database_NoBench::set_sparse_666_str(const char* value, size_t size) {
  set_has_sparse_666_str();
  if (sparse_666_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_666_str_ = new ::std::string;
  }
  sparse_666_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_666_str() {
  set_has_sparse_666_str();
  if (sparse_666_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_666_str_ = new ::std::string;
  }
  return sparse_666_str_;
}
inline ::std::string* Database_NoBench::release_sparse_666_str() {
  clear_has_sparse_666_str();
  if (sparse_666_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_666_str_;
    sparse_666_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_666_str(::std::string* sparse_666_str) {
  if (sparse_666_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_666_str_;
  }
  if (sparse_666_str) {
    set_has_sparse_666_str();
    sparse_666_str_ = sparse_666_str;
  } else {
    clear_has_sparse_666_str();
    sparse_666_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_667_str = 679;
inline bool Database_NoBench::has_sparse_667_str() const {
  return (_has_bits_[21] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_667_str() {
  _has_bits_[21] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_667_str() {
  _has_bits_[21] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_667_str() {
  if (sparse_667_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_667_str_->clear();
  }
  clear_has_sparse_667_str();
}
inline const ::std::string& Database_NoBench::sparse_667_str() const {
  return *sparse_667_str_;
}
inline void Database_NoBench::set_sparse_667_str(const ::std::string& value) {
  set_has_sparse_667_str();
  if (sparse_667_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_667_str_ = new ::std::string;
  }
  sparse_667_str_->assign(value);
}
inline void Database_NoBench::set_sparse_667_str(const char* value) {
  set_has_sparse_667_str();
  if (sparse_667_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_667_str_ = new ::std::string;
  }
  sparse_667_str_->assign(value);
}
inline void Database_NoBench::set_sparse_667_str(const char* value, size_t size) {
  set_has_sparse_667_str();
  if (sparse_667_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_667_str_ = new ::std::string;
  }
  sparse_667_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_667_str() {
  set_has_sparse_667_str();
  if (sparse_667_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_667_str_ = new ::std::string;
  }
  return sparse_667_str_;
}
inline ::std::string* Database_NoBench::release_sparse_667_str() {
  clear_has_sparse_667_str();
  if (sparse_667_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_667_str_;
    sparse_667_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_667_str(::std::string* sparse_667_str) {
  if (sparse_667_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_667_str_;
  }
  if (sparse_667_str) {
    set_has_sparse_667_str();
    sparse_667_str_ = sparse_667_str;
  } else {
    clear_has_sparse_667_str();
    sparse_667_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_668_str = 680;
inline bool Database_NoBench::has_sparse_668_str() const {
  return (_has_bits_[21] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_668_str() {
  _has_bits_[21] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_668_str() {
  _has_bits_[21] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_668_str() {
  if (sparse_668_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_668_str_->clear();
  }
  clear_has_sparse_668_str();
}
inline const ::std::string& Database_NoBench::sparse_668_str() const {
  return *sparse_668_str_;
}
inline void Database_NoBench::set_sparse_668_str(const ::std::string& value) {
  set_has_sparse_668_str();
  if (sparse_668_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_668_str_ = new ::std::string;
  }
  sparse_668_str_->assign(value);
}
inline void Database_NoBench::set_sparse_668_str(const char* value) {
  set_has_sparse_668_str();
  if (sparse_668_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_668_str_ = new ::std::string;
  }
  sparse_668_str_->assign(value);
}
inline void Database_NoBench::set_sparse_668_str(const char* value, size_t size) {
  set_has_sparse_668_str();
  if (sparse_668_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_668_str_ = new ::std::string;
  }
  sparse_668_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_668_str() {
  set_has_sparse_668_str();
  if (sparse_668_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_668_str_ = new ::std::string;
  }
  return sparse_668_str_;
}
inline ::std::string* Database_NoBench::release_sparse_668_str() {
  clear_has_sparse_668_str();
  if (sparse_668_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_668_str_;
    sparse_668_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_668_str(::std::string* sparse_668_str) {
  if (sparse_668_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_668_str_;
  }
  if (sparse_668_str) {
    set_has_sparse_668_str();
    sparse_668_str_ = sparse_668_str;
  } else {
    clear_has_sparse_668_str();
    sparse_668_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_669_str = 681;
inline bool Database_NoBench::has_sparse_669_str() const {
  return (_has_bits_[21] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_669_str() {
  _has_bits_[21] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_669_str() {
  _has_bits_[21] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_669_str() {
  if (sparse_669_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_669_str_->clear();
  }
  clear_has_sparse_669_str();
}
inline const ::std::string& Database_NoBench::sparse_669_str() const {
  return *sparse_669_str_;
}
inline void Database_NoBench::set_sparse_669_str(const ::std::string& value) {
  set_has_sparse_669_str();
  if (sparse_669_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_669_str_ = new ::std::string;
  }
  sparse_669_str_->assign(value);
}
inline void Database_NoBench::set_sparse_669_str(const char* value) {
  set_has_sparse_669_str();
  if (sparse_669_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_669_str_ = new ::std::string;
  }
  sparse_669_str_->assign(value);
}
inline void Database_NoBench::set_sparse_669_str(const char* value, size_t size) {
  set_has_sparse_669_str();
  if (sparse_669_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_669_str_ = new ::std::string;
  }
  sparse_669_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_669_str() {
  set_has_sparse_669_str();
  if (sparse_669_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_669_str_ = new ::std::string;
  }
  return sparse_669_str_;
}
inline ::std::string* Database_NoBench::release_sparse_669_str() {
  clear_has_sparse_669_str();
  if (sparse_669_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_669_str_;
    sparse_669_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_669_str(::std::string* sparse_669_str) {
  if (sparse_669_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_669_str_;
  }
  if (sparse_669_str) {
    set_has_sparse_669_str();
    sparse_669_str_ = sparse_669_str;
  } else {
    clear_has_sparse_669_str();
    sparse_669_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_670_str = 682;
inline bool Database_NoBench::has_sparse_670_str() const {
  return (_has_bits_[21] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_670_str() {
  _has_bits_[21] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_670_str() {
  _has_bits_[21] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_670_str() {
  if (sparse_670_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_670_str_->clear();
  }
  clear_has_sparse_670_str();
}
inline const ::std::string& Database_NoBench::sparse_670_str() const {
  return *sparse_670_str_;
}
inline void Database_NoBench::set_sparse_670_str(const ::std::string& value) {
  set_has_sparse_670_str();
  if (sparse_670_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_670_str_ = new ::std::string;
  }
  sparse_670_str_->assign(value);
}
inline void Database_NoBench::set_sparse_670_str(const char* value) {
  set_has_sparse_670_str();
  if (sparse_670_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_670_str_ = new ::std::string;
  }
  sparse_670_str_->assign(value);
}
inline void Database_NoBench::set_sparse_670_str(const char* value, size_t size) {
  set_has_sparse_670_str();
  if (sparse_670_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_670_str_ = new ::std::string;
  }
  sparse_670_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_670_str() {
  set_has_sparse_670_str();
  if (sparse_670_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_670_str_ = new ::std::string;
  }
  return sparse_670_str_;
}
inline ::std::string* Database_NoBench::release_sparse_670_str() {
  clear_has_sparse_670_str();
  if (sparse_670_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_670_str_;
    sparse_670_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_670_str(::std::string* sparse_670_str) {
  if (sparse_670_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_670_str_;
  }
  if (sparse_670_str) {
    set_has_sparse_670_str();
    sparse_670_str_ = sparse_670_str;
  } else {
    clear_has_sparse_670_str();
    sparse_670_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_671_str = 683;
inline bool Database_NoBench::has_sparse_671_str() const {
  return (_has_bits_[21] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_671_str() {
  _has_bits_[21] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_671_str() {
  _has_bits_[21] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_671_str() {
  if (sparse_671_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_671_str_->clear();
  }
  clear_has_sparse_671_str();
}
inline const ::std::string& Database_NoBench::sparse_671_str() const {
  return *sparse_671_str_;
}
inline void Database_NoBench::set_sparse_671_str(const ::std::string& value) {
  set_has_sparse_671_str();
  if (sparse_671_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_671_str_ = new ::std::string;
  }
  sparse_671_str_->assign(value);
}
inline void Database_NoBench::set_sparse_671_str(const char* value) {
  set_has_sparse_671_str();
  if (sparse_671_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_671_str_ = new ::std::string;
  }
  sparse_671_str_->assign(value);
}
inline void Database_NoBench::set_sparse_671_str(const char* value, size_t size) {
  set_has_sparse_671_str();
  if (sparse_671_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_671_str_ = new ::std::string;
  }
  sparse_671_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_671_str() {
  set_has_sparse_671_str();
  if (sparse_671_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_671_str_ = new ::std::string;
  }
  return sparse_671_str_;
}
inline ::std::string* Database_NoBench::release_sparse_671_str() {
  clear_has_sparse_671_str();
  if (sparse_671_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_671_str_;
    sparse_671_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_671_str(::std::string* sparse_671_str) {
  if (sparse_671_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_671_str_;
  }
  if (sparse_671_str) {
    set_has_sparse_671_str();
    sparse_671_str_ = sparse_671_str;
  } else {
    clear_has_sparse_671_str();
    sparse_671_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_672_str = 684;
inline bool Database_NoBench::has_sparse_672_str() const {
  return (_has_bits_[21] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_672_str() {
  _has_bits_[21] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_672_str() {
  _has_bits_[21] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_672_str() {
  if (sparse_672_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_672_str_->clear();
  }
  clear_has_sparse_672_str();
}
inline const ::std::string& Database_NoBench::sparse_672_str() const {
  return *sparse_672_str_;
}
inline void Database_NoBench::set_sparse_672_str(const ::std::string& value) {
  set_has_sparse_672_str();
  if (sparse_672_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_672_str_ = new ::std::string;
  }
  sparse_672_str_->assign(value);
}
inline void Database_NoBench::set_sparse_672_str(const char* value) {
  set_has_sparse_672_str();
  if (sparse_672_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_672_str_ = new ::std::string;
  }
  sparse_672_str_->assign(value);
}
inline void Database_NoBench::set_sparse_672_str(const char* value, size_t size) {
  set_has_sparse_672_str();
  if (sparse_672_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_672_str_ = new ::std::string;
  }
  sparse_672_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_672_str() {
  set_has_sparse_672_str();
  if (sparse_672_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_672_str_ = new ::std::string;
  }
  return sparse_672_str_;
}
inline ::std::string* Database_NoBench::release_sparse_672_str() {
  clear_has_sparse_672_str();
  if (sparse_672_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_672_str_;
    sparse_672_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_672_str(::std::string* sparse_672_str) {
  if (sparse_672_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_672_str_;
  }
  if (sparse_672_str) {
    set_has_sparse_672_str();
    sparse_672_str_ = sparse_672_str;
  } else {
    clear_has_sparse_672_str();
    sparse_672_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_673_str = 685;
inline bool Database_NoBench::has_sparse_673_str() const {
  return (_has_bits_[21] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_673_str() {
  _has_bits_[21] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_673_str() {
  _has_bits_[21] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_673_str() {
  if (sparse_673_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_673_str_->clear();
  }
  clear_has_sparse_673_str();
}
inline const ::std::string& Database_NoBench::sparse_673_str() const {
  return *sparse_673_str_;
}
inline void Database_NoBench::set_sparse_673_str(const ::std::string& value) {
  set_has_sparse_673_str();
  if (sparse_673_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_673_str_ = new ::std::string;
  }
  sparse_673_str_->assign(value);
}
inline void Database_NoBench::set_sparse_673_str(const char* value) {
  set_has_sparse_673_str();
  if (sparse_673_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_673_str_ = new ::std::string;
  }
  sparse_673_str_->assign(value);
}
inline void Database_NoBench::set_sparse_673_str(const char* value, size_t size) {
  set_has_sparse_673_str();
  if (sparse_673_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_673_str_ = new ::std::string;
  }
  sparse_673_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_673_str() {
  set_has_sparse_673_str();
  if (sparse_673_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_673_str_ = new ::std::string;
  }
  return sparse_673_str_;
}
inline ::std::string* Database_NoBench::release_sparse_673_str() {
  clear_has_sparse_673_str();
  if (sparse_673_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_673_str_;
    sparse_673_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_673_str(::std::string* sparse_673_str) {
  if (sparse_673_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_673_str_;
  }
  if (sparse_673_str) {
    set_has_sparse_673_str();
    sparse_673_str_ = sparse_673_str;
  } else {
    clear_has_sparse_673_str();
    sparse_673_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_674_str = 686;
inline bool Database_NoBench::has_sparse_674_str() const {
  return (_has_bits_[21] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_674_str() {
  _has_bits_[21] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_674_str() {
  _has_bits_[21] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_674_str() {
  if (sparse_674_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_674_str_->clear();
  }
  clear_has_sparse_674_str();
}
inline const ::std::string& Database_NoBench::sparse_674_str() const {
  return *sparse_674_str_;
}
inline void Database_NoBench::set_sparse_674_str(const ::std::string& value) {
  set_has_sparse_674_str();
  if (sparse_674_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_674_str_ = new ::std::string;
  }
  sparse_674_str_->assign(value);
}
inline void Database_NoBench::set_sparse_674_str(const char* value) {
  set_has_sparse_674_str();
  if (sparse_674_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_674_str_ = new ::std::string;
  }
  sparse_674_str_->assign(value);
}
inline void Database_NoBench::set_sparse_674_str(const char* value, size_t size) {
  set_has_sparse_674_str();
  if (sparse_674_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_674_str_ = new ::std::string;
  }
  sparse_674_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_674_str() {
  set_has_sparse_674_str();
  if (sparse_674_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_674_str_ = new ::std::string;
  }
  return sparse_674_str_;
}
inline ::std::string* Database_NoBench::release_sparse_674_str() {
  clear_has_sparse_674_str();
  if (sparse_674_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_674_str_;
    sparse_674_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_674_str(::std::string* sparse_674_str) {
  if (sparse_674_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_674_str_;
  }
  if (sparse_674_str) {
    set_has_sparse_674_str();
    sparse_674_str_ = sparse_674_str;
  } else {
    clear_has_sparse_674_str();
    sparse_674_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_675_str = 687;
inline bool Database_NoBench::has_sparse_675_str() const {
  return (_has_bits_[21] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_675_str() {
  _has_bits_[21] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_675_str() {
  _has_bits_[21] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_675_str() {
  if (sparse_675_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_675_str_->clear();
  }
  clear_has_sparse_675_str();
}
inline const ::std::string& Database_NoBench::sparse_675_str() const {
  return *sparse_675_str_;
}
inline void Database_NoBench::set_sparse_675_str(const ::std::string& value) {
  set_has_sparse_675_str();
  if (sparse_675_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_675_str_ = new ::std::string;
  }
  sparse_675_str_->assign(value);
}
inline void Database_NoBench::set_sparse_675_str(const char* value) {
  set_has_sparse_675_str();
  if (sparse_675_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_675_str_ = new ::std::string;
  }
  sparse_675_str_->assign(value);
}
inline void Database_NoBench::set_sparse_675_str(const char* value, size_t size) {
  set_has_sparse_675_str();
  if (sparse_675_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_675_str_ = new ::std::string;
  }
  sparse_675_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_675_str() {
  set_has_sparse_675_str();
  if (sparse_675_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_675_str_ = new ::std::string;
  }
  return sparse_675_str_;
}
inline ::std::string* Database_NoBench::release_sparse_675_str() {
  clear_has_sparse_675_str();
  if (sparse_675_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_675_str_;
    sparse_675_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_675_str(::std::string* sparse_675_str) {
  if (sparse_675_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_675_str_;
  }
  if (sparse_675_str) {
    set_has_sparse_675_str();
    sparse_675_str_ = sparse_675_str;
  } else {
    clear_has_sparse_675_str();
    sparse_675_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_676_str = 688;
inline bool Database_NoBench::has_sparse_676_str() const {
  return (_has_bits_[21] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_676_str() {
  _has_bits_[21] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_676_str() {
  _has_bits_[21] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_676_str() {
  if (sparse_676_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_676_str_->clear();
  }
  clear_has_sparse_676_str();
}
inline const ::std::string& Database_NoBench::sparse_676_str() const {
  return *sparse_676_str_;
}
inline void Database_NoBench::set_sparse_676_str(const ::std::string& value) {
  set_has_sparse_676_str();
  if (sparse_676_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_676_str_ = new ::std::string;
  }
  sparse_676_str_->assign(value);
}
inline void Database_NoBench::set_sparse_676_str(const char* value) {
  set_has_sparse_676_str();
  if (sparse_676_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_676_str_ = new ::std::string;
  }
  sparse_676_str_->assign(value);
}
inline void Database_NoBench::set_sparse_676_str(const char* value, size_t size) {
  set_has_sparse_676_str();
  if (sparse_676_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_676_str_ = new ::std::string;
  }
  sparse_676_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_676_str() {
  set_has_sparse_676_str();
  if (sparse_676_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_676_str_ = new ::std::string;
  }
  return sparse_676_str_;
}
inline ::std::string* Database_NoBench::release_sparse_676_str() {
  clear_has_sparse_676_str();
  if (sparse_676_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_676_str_;
    sparse_676_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_676_str(::std::string* sparse_676_str) {
  if (sparse_676_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_676_str_;
  }
  if (sparse_676_str) {
    set_has_sparse_676_str();
    sparse_676_str_ = sparse_676_str;
  } else {
    clear_has_sparse_676_str();
    sparse_676_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_677_str = 689;
inline bool Database_NoBench::has_sparse_677_str() const {
  return (_has_bits_[21] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_677_str() {
  _has_bits_[21] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_677_str() {
  _has_bits_[21] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_677_str() {
  if (sparse_677_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_677_str_->clear();
  }
  clear_has_sparse_677_str();
}
inline const ::std::string& Database_NoBench::sparse_677_str() const {
  return *sparse_677_str_;
}
inline void Database_NoBench::set_sparse_677_str(const ::std::string& value) {
  set_has_sparse_677_str();
  if (sparse_677_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_677_str_ = new ::std::string;
  }
  sparse_677_str_->assign(value);
}
inline void Database_NoBench::set_sparse_677_str(const char* value) {
  set_has_sparse_677_str();
  if (sparse_677_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_677_str_ = new ::std::string;
  }
  sparse_677_str_->assign(value);
}
inline void Database_NoBench::set_sparse_677_str(const char* value, size_t size) {
  set_has_sparse_677_str();
  if (sparse_677_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_677_str_ = new ::std::string;
  }
  sparse_677_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_677_str() {
  set_has_sparse_677_str();
  if (sparse_677_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_677_str_ = new ::std::string;
  }
  return sparse_677_str_;
}
inline ::std::string* Database_NoBench::release_sparse_677_str() {
  clear_has_sparse_677_str();
  if (sparse_677_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_677_str_;
    sparse_677_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_677_str(::std::string* sparse_677_str) {
  if (sparse_677_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_677_str_;
  }
  if (sparse_677_str) {
    set_has_sparse_677_str();
    sparse_677_str_ = sparse_677_str;
  } else {
    clear_has_sparse_677_str();
    sparse_677_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_678_str = 690;
inline bool Database_NoBench::has_sparse_678_str() const {
  return (_has_bits_[21] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_678_str() {
  _has_bits_[21] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_678_str() {
  _has_bits_[21] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_678_str() {
  if (sparse_678_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_678_str_->clear();
  }
  clear_has_sparse_678_str();
}
inline const ::std::string& Database_NoBench::sparse_678_str() const {
  return *sparse_678_str_;
}
inline void Database_NoBench::set_sparse_678_str(const ::std::string& value) {
  set_has_sparse_678_str();
  if (sparse_678_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_678_str_ = new ::std::string;
  }
  sparse_678_str_->assign(value);
}
inline void Database_NoBench::set_sparse_678_str(const char* value) {
  set_has_sparse_678_str();
  if (sparse_678_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_678_str_ = new ::std::string;
  }
  sparse_678_str_->assign(value);
}
inline void Database_NoBench::set_sparse_678_str(const char* value, size_t size) {
  set_has_sparse_678_str();
  if (sparse_678_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_678_str_ = new ::std::string;
  }
  sparse_678_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_678_str() {
  set_has_sparse_678_str();
  if (sparse_678_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_678_str_ = new ::std::string;
  }
  return sparse_678_str_;
}
inline ::std::string* Database_NoBench::release_sparse_678_str() {
  clear_has_sparse_678_str();
  if (sparse_678_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_678_str_;
    sparse_678_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_678_str(::std::string* sparse_678_str) {
  if (sparse_678_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_678_str_;
  }
  if (sparse_678_str) {
    set_has_sparse_678_str();
    sparse_678_str_ = sparse_678_str;
  } else {
    clear_has_sparse_678_str();
    sparse_678_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_679_str = 691;
inline bool Database_NoBench::has_sparse_679_str() const {
  return (_has_bits_[21] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_679_str() {
  _has_bits_[21] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_679_str() {
  _has_bits_[21] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_679_str() {
  if (sparse_679_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_679_str_->clear();
  }
  clear_has_sparse_679_str();
}
inline const ::std::string& Database_NoBench::sparse_679_str() const {
  return *sparse_679_str_;
}
inline void Database_NoBench::set_sparse_679_str(const ::std::string& value) {
  set_has_sparse_679_str();
  if (sparse_679_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_679_str_ = new ::std::string;
  }
  sparse_679_str_->assign(value);
}
inline void Database_NoBench::set_sparse_679_str(const char* value) {
  set_has_sparse_679_str();
  if (sparse_679_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_679_str_ = new ::std::string;
  }
  sparse_679_str_->assign(value);
}
inline void Database_NoBench::set_sparse_679_str(const char* value, size_t size) {
  set_has_sparse_679_str();
  if (sparse_679_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_679_str_ = new ::std::string;
  }
  sparse_679_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_679_str() {
  set_has_sparse_679_str();
  if (sparse_679_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_679_str_ = new ::std::string;
  }
  return sparse_679_str_;
}
inline ::std::string* Database_NoBench::release_sparse_679_str() {
  clear_has_sparse_679_str();
  if (sparse_679_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_679_str_;
    sparse_679_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_679_str(::std::string* sparse_679_str) {
  if (sparse_679_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_679_str_;
  }
  if (sparse_679_str) {
    set_has_sparse_679_str();
    sparse_679_str_ = sparse_679_str;
  } else {
    clear_has_sparse_679_str();
    sparse_679_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_680_str = 692;
inline bool Database_NoBench::has_sparse_680_str() const {
  return (_has_bits_[21] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_680_str() {
  _has_bits_[21] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_680_str() {
  _has_bits_[21] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_680_str() {
  if (sparse_680_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_680_str_->clear();
  }
  clear_has_sparse_680_str();
}
inline const ::std::string& Database_NoBench::sparse_680_str() const {
  return *sparse_680_str_;
}
inline void Database_NoBench::set_sparse_680_str(const ::std::string& value) {
  set_has_sparse_680_str();
  if (sparse_680_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_680_str_ = new ::std::string;
  }
  sparse_680_str_->assign(value);
}
inline void Database_NoBench::set_sparse_680_str(const char* value) {
  set_has_sparse_680_str();
  if (sparse_680_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_680_str_ = new ::std::string;
  }
  sparse_680_str_->assign(value);
}
inline void Database_NoBench::set_sparse_680_str(const char* value, size_t size) {
  set_has_sparse_680_str();
  if (sparse_680_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_680_str_ = new ::std::string;
  }
  sparse_680_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_680_str() {
  set_has_sparse_680_str();
  if (sparse_680_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_680_str_ = new ::std::string;
  }
  return sparse_680_str_;
}
inline ::std::string* Database_NoBench::release_sparse_680_str() {
  clear_has_sparse_680_str();
  if (sparse_680_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_680_str_;
    sparse_680_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_680_str(::std::string* sparse_680_str) {
  if (sparse_680_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_680_str_;
  }
  if (sparse_680_str) {
    set_has_sparse_680_str();
    sparse_680_str_ = sparse_680_str;
  } else {
    clear_has_sparse_680_str();
    sparse_680_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_681_str = 693;
inline bool Database_NoBench::has_sparse_681_str() const {
  return (_has_bits_[21] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_681_str() {
  _has_bits_[21] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_681_str() {
  _has_bits_[21] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_681_str() {
  if (sparse_681_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_681_str_->clear();
  }
  clear_has_sparse_681_str();
}
inline const ::std::string& Database_NoBench::sparse_681_str() const {
  return *sparse_681_str_;
}
inline void Database_NoBench::set_sparse_681_str(const ::std::string& value) {
  set_has_sparse_681_str();
  if (sparse_681_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_681_str_ = new ::std::string;
  }
  sparse_681_str_->assign(value);
}
inline void Database_NoBench::set_sparse_681_str(const char* value) {
  set_has_sparse_681_str();
  if (sparse_681_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_681_str_ = new ::std::string;
  }
  sparse_681_str_->assign(value);
}
inline void Database_NoBench::set_sparse_681_str(const char* value, size_t size) {
  set_has_sparse_681_str();
  if (sparse_681_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_681_str_ = new ::std::string;
  }
  sparse_681_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_681_str() {
  set_has_sparse_681_str();
  if (sparse_681_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_681_str_ = new ::std::string;
  }
  return sparse_681_str_;
}
inline ::std::string* Database_NoBench::release_sparse_681_str() {
  clear_has_sparse_681_str();
  if (sparse_681_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_681_str_;
    sparse_681_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_681_str(::std::string* sparse_681_str) {
  if (sparse_681_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_681_str_;
  }
  if (sparse_681_str) {
    set_has_sparse_681_str();
    sparse_681_str_ = sparse_681_str;
  } else {
    clear_has_sparse_681_str();
    sparse_681_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_682_str = 694;
inline bool Database_NoBench::has_sparse_682_str() const {
  return (_has_bits_[21] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_682_str() {
  _has_bits_[21] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_682_str() {
  _has_bits_[21] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_682_str() {
  if (sparse_682_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_682_str_->clear();
  }
  clear_has_sparse_682_str();
}
inline const ::std::string& Database_NoBench::sparse_682_str() const {
  return *sparse_682_str_;
}
inline void Database_NoBench::set_sparse_682_str(const ::std::string& value) {
  set_has_sparse_682_str();
  if (sparse_682_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_682_str_ = new ::std::string;
  }
  sparse_682_str_->assign(value);
}
inline void Database_NoBench::set_sparse_682_str(const char* value) {
  set_has_sparse_682_str();
  if (sparse_682_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_682_str_ = new ::std::string;
  }
  sparse_682_str_->assign(value);
}
inline void Database_NoBench::set_sparse_682_str(const char* value, size_t size) {
  set_has_sparse_682_str();
  if (sparse_682_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_682_str_ = new ::std::string;
  }
  sparse_682_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_682_str() {
  set_has_sparse_682_str();
  if (sparse_682_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_682_str_ = new ::std::string;
  }
  return sparse_682_str_;
}
inline ::std::string* Database_NoBench::release_sparse_682_str() {
  clear_has_sparse_682_str();
  if (sparse_682_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_682_str_;
    sparse_682_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_682_str(::std::string* sparse_682_str) {
  if (sparse_682_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_682_str_;
  }
  if (sparse_682_str) {
    set_has_sparse_682_str();
    sparse_682_str_ = sparse_682_str;
  } else {
    clear_has_sparse_682_str();
    sparse_682_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_683_str = 695;
inline bool Database_NoBench::has_sparse_683_str() const {
  return (_has_bits_[21] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_683_str() {
  _has_bits_[21] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_683_str() {
  _has_bits_[21] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_683_str() {
  if (sparse_683_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_683_str_->clear();
  }
  clear_has_sparse_683_str();
}
inline const ::std::string& Database_NoBench::sparse_683_str() const {
  return *sparse_683_str_;
}
inline void Database_NoBench::set_sparse_683_str(const ::std::string& value) {
  set_has_sparse_683_str();
  if (sparse_683_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_683_str_ = new ::std::string;
  }
  sparse_683_str_->assign(value);
}
inline void Database_NoBench::set_sparse_683_str(const char* value) {
  set_has_sparse_683_str();
  if (sparse_683_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_683_str_ = new ::std::string;
  }
  sparse_683_str_->assign(value);
}
inline void Database_NoBench::set_sparse_683_str(const char* value, size_t size) {
  set_has_sparse_683_str();
  if (sparse_683_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_683_str_ = new ::std::string;
  }
  sparse_683_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_683_str() {
  set_has_sparse_683_str();
  if (sparse_683_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_683_str_ = new ::std::string;
  }
  return sparse_683_str_;
}
inline ::std::string* Database_NoBench::release_sparse_683_str() {
  clear_has_sparse_683_str();
  if (sparse_683_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_683_str_;
    sparse_683_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_683_str(::std::string* sparse_683_str) {
  if (sparse_683_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_683_str_;
  }
  if (sparse_683_str) {
    set_has_sparse_683_str();
    sparse_683_str_ = sparse_683_str;
  } else {
    clear_has_sparse_683_str();
    sparse_683_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_684_str = 696;
inline bool Database_NoBench::has_sparse_684_str() const {
  return (_has_bits_[21] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_684_str() {
  _has_bits_[21] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_684_str() {
  _has_bits_[21] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_684_str() {
  if (sparse_684_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_684_str_->clear();
  }
  clear_has_sparse_684_str();
}
inline const ::std::string& Database_NoBench::sparse_684_str() const {
  return *sparse_684_str_;
}
inline void Database_NoBench::set_sparse_684_str(const ::std::string& value) {
  set_has_sparse_684_str();
  if (sparse_684_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_684_str_ = new ::std::string;
  }
  sparse_684_str_->assign(value);
}
inline void Database_NoBench::set_sparse_684_str(const char* value) {
  set_has_sparse_684_str();
  if (sparse_684_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_684_str_ = new ::std::string;
  }
  sparse_684_str_->assign(value);
}
inline void Database_NoBench::set_sparse_684_str(const char* value, size_t size) {
  set_has_sparse_684_str();
  if (sparse_684_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_684_str_ = new ::std::string;
  }
  sparse_684_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_684_str() {
  set_has_sparse_684_str();
  if (sparse_684_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_684_str_ = new ::std::string;
  }
  return sparse_684_str_;
}
inline ::std::string* Database_NoBench::release_sparse_684_str() {
  clear_has_sparse_684_str();
  if (sparse_684_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_684_str_;
    sparse_684_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_684_str(::std::string* sparse_684_str) {
  if (sparse_684_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_684_str_;
  }
  if (sparse_684_str) {
    set_has_sparse_684_str();
    sparse_684_str_ = sparse_684_str;
  } else {
    clear_has_sparse_684_str();
    sparse_684_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_685_str = 697;
inline bool Database_NoBench::has_sparse_685_str() const {
  return (_has_bits_[21] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_685_str() {
  _has_bits_[21] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_685_str() {
  _has_bits_[21] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_685_str() {
  if (sparse_685_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_685_str_->clear();
  }
  clear_has_sparse_685_str();
}
inline const ::std::string& Database_NoBench::sparse_685_str() const {
  return *sparse_685_str_;
}
inline void Database_NoBench::set_sparse_685_str(const ::std::string& value) {
  set_has_sparse_685_str();
  if (sparse_685_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_685_str_ = new ::std::string;
  }
  sparse_685_str_->assign(value);
}
inline void Database_NoBench::set_sparse_685_str(const char* value) {
  set_has_sparse_685_str();
  if (sparse_685_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_685_str_ = new ::std::string;
  }
  sparse_685_str_->assign(value);
}
inline void Database_NoBench::set_sparse_685_str(const char* value, size_t size) {
  set_has_sparse_685_str();
  if (sparse_685_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_685_str_ = new ::std::string;
  }
  sparse_685_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_685_str() {
  set_has_sparse_685_str();
  if (sparse_685_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_685_str_ = new ::std::string;
  }
  return sparse_685_str_;
}
inline ::std::string* Database_NoBench::release_sparse_685_str() {
  clear_has_sparse_685_str();
  if (sparse_685_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_685_str_;
    sparse_685_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_685_str(::std::string* sparse_685_str) {
  if (sparse_685_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_685_str_;
  }
  if (sparse_685_str) {
    set_has_sparse_685_str();
    sparse_685_str_ = sparse_685_str;
  } else {
    clear_has_sparse_685_str();
    sparse_685_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_686_str = 698;
inline bool Database_NoBench::has_sparse_686_str() const {
  return (_has_bits_[21] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_686_str() {
  _has_bits_[21] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_686_str() {
  _has_bits_[21] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_686_str() {
  if (sparse_686_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_686_str_->clear();
  }
  clear_has_sparse_686_str();
}
inline const ::std::string& Database_NoBench::sparse_686_str() const {
  return *sparse_686_str_;
}
inline void Database_NoBench::set_sparse_686_str(const ::std::string& value) {
  set_has_sparse_686_str();
  if (sparse_686_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_686_str_ = new ::std::string;
  }
  sparse_686_str_->assign(value);
}
inline void Database_NoBench::set_sparse_686_str(const char* value) {
  set_has_sparse_686_str();
  if (sparse_686_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_686_str_ = new ::std::string;
  }
  sparse_686_str_->assign(value);
}
inline void Database_NoBench::set_sparse_686_str(const char* value, size_t size) {
  set_has_sparse_686_str();
  if (sparse_686_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_686_str_ = new ::std::string;
  }
  sparse_686_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_686_str() {
  set_has_sparse_686_str();
  if (sparse_686_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_686_str_ = new ::std::string;
  }
  return sparse_686_str_;
}
inline ::std::string* Database_NoBench::release_sparse_686_str() {
  clear_has_sparse_686_str();
  if (sparse_686_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_686_str_;
    sparse_686_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_686_str(::std::string* sparse_686_str) {
  if (sparse_686_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_686_str_;
  }
  if (sparse_686_str) {
    set_has_sparse_686_str();
    sparse_686_str_ = sparse_686_str;
  } else {
    clear_has_sparse_686_str();
    sparse_686_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_687_str = 699;
inline bool Database_NoBench::has_sparse_687_str() const {
  return (_has_bits_[21] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_687_str() {
  _has_bits_[21] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_687_str() {
  _has_bits_[21] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_687_str() {
  if (sparse_687_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_687_str_->clear();
  }
  clear_has_sparse_687_str();
}
inline const ::std::string& Database_NoBench::sparse_687_str() const {
  return *sparse_687_str_;
}
inline void Database_NoBench::set_sparse_687_str(const ::std::string& value) {
  set_has_sparse_687_str();
  if (sparse_687_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_687_str_ = new ::std::string;
  }
  sparse_687_str_->assign(value);
}
inline void Database_NoBench::set_sparse_687_str(const char* value) {
  set_has_sparse_687_str();
  if (sparse_687_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_687_str_ = new ::std::string;
  }
  sparse_687_str_->assign(value);
}
inline void Database_NoBench::set_sparse_687_str(const char* value, size_t size) {
  set_has_sparse_687_str();
  if (sparse_687_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_687_str_ = new ::std::string;
  }
  sparse_687_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_687_str() {
  set_has_sparse_687_str();
  if (sparse_687_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_687_str_ = new ::std::string;
  }
  return sparse_687_str_;
}
inline ::std::string* Database_NoBench::release_sparse_687_str() {
  clear_has_sparse_687_str();
  if (sparse_687_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_687_str_;
    sparse_687_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_687_str(::std::string* sparse_687_str) {
  if (sparse_687_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_687_str_;
  }
  if (sparse_687_str) {
    set_has_sparse_687_str();
    sparse_687_str_ = sparse_687_str;
  } else {
    clear_has_sparse_687_str();
    sparse_687_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_688_str = 700;
inline bool Database_NoBench::has_sparse_688_str() const {
  return (_has_bits_[21] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_688_str() {
  _has_bits_[21] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_688_str() {
  _has_bits_[21] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_688_str() {
  if (sparse_688_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_688_str_->clear();
  }
  clear_has_sparse_688_str();
}
inline const ::std::string& Database_NoBench::sparse_688_str() const {
  return *sparse_688_str_;
}
inline void Database_NoBench::set_sparse_688_str(const ::std::string& value) {
  set_has_sparse_688_str();
  if (sparse_688_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_688_str_ = new ::std::string;
  }
  sparse_688_str_->assign(value);
}
inline void Database_NoBench::set_sparse_688_str(const char* value) {
  set_has_sparse_688_str();
  if (sparse_688_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_688_str_ = new ::std::string;
  }
  sparse_688_str_->assign(value);
}
inline void Database_NoBench::set_sparse_688_str(const char* value, size_t size) {
  set_has_sparse_688_str();
  if (sparse_688_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_688_str_ = new ::std::string;
  }
  sparse_688_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_688_str() {
  set_has_sparse_688_str();
  if (sparse_688_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_688_str_ = new ::std::string;
  }
  return sparse_688_str_;
}
inline ::std::string* Database_NoBench::release_sparse_688_str() {
  clear_has_sparse_688_str();
  if (sparse_688_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_688_str_;
    sparse_688_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_688_str(::std::string* sparse_688_str) {
  if (sparse_688_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_688_str_;
  }
  if (sparse_688_str) {
    set_has_sparse_688_str();
    sparse_688_str_ = sparse_688_str;
  } else {
    clear_has_sparse_688_str();
    sparse_688_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_689_str = 701;
inline bool Database_NoBench::has_sparse_689_str() const {
  return (_has_bits_[21] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_689_str() {
  _has_bits_[21] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_689_str() {
  _has_bits_[21] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_689_str() {
  if (sparse_689_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_689_str_->clear();
  }
  clear_has_sparse_689_str();
}
inline const ::std::string& Database_NoBench::sparse_689_str() const {
  return *sparse_689_str_;
}
inline void Database_NoBench::set_sparse_689_str(const ::std::string& value) {
  set_has_sparse_689_str();
  if (sparse_689_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_689_str_ = new ::std::string;
  }
  sparse_689_str_->assign(value);
}
inline void Database_NoBench::set_sparse_689_str(const char* value) {
  set_has_sparse_689_str();
  if (sparse_689_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_689_str_ = new ::std::string;
  }
  sparse_689_str_->assign(value);
}
inline void Database_NoBench::set_sparse_689_str(const char* value, size_t size) {
  set_has_sparse_689_str();
  if (sparse_689_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_689_str_ = new ::std::string;
  }
  sparse_689_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_689_str() {
  set_has_sparse_689_str();
  if (sparse_689_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_689_str_ = new ::std::string;
  }
  return sparse_689_str_;
}
inline ::std::string* Database_NoBench::release_sparse_689_str() {
  clear_has_sparse_689_str();
  if (sparse_689_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_689_str_;
    sparse_689_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_689_str(::std::string* sparse_689_str) {
  if (sparse_689_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_689_str_;
  }
  if (sparse_689_str) {
    set_has_sparse_689_str();
    sparse_689_str_ = sparse_689_str;
  } else {
    clear_has_sparse_689_str();
    sparse_689_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_690_str = 702;
inline bool Database_NoBench::has_sparse_690_str() const {
  return (_has_bits_[21] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_690_str() {
  _has_bits_[21] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_690_str() {
  _has_bits_[21] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_690_str() {
  if (sparse_690_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_690_str_->clear();
  }
  clear_has_sparse_690_str();
}
inline const ::std::string& Database_NoBench::sparse_690_str() const {
  return *sparse_690_str_;
}
inline void Database_NoBench::set_sparse_690_str(const ::std::string& value) {
  set_has_sparse_690_str();
  if (sparse_690_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_690_str_ = new ::std::string;
  }
  sparse_690_str_->assign(value);
}
inline void Database_NoBench::set_sparse_690_str(const char* value) {
  set_has_sparse_690_str();
  if (sparse_690_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_690_str_ = new ::std::string;
  }
  sparse_690_str_->assign(value);
}
inline void Database_NoBench::set_sparse_690_str(const char* value, size_t size) {
  set_has_sparse_690_str();
  if (sparse_690_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_690_str_ = new ::std::string;
  }
  sparse_690_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_690_str() {
  set_has_sparse_690_str();
  if (sparse_690_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_690_str_ = new ::std::string;
  }
  return sparse_690_str_;
}
inline ::std::string* Database_NoBench::release_sparse_690_str() {
  clear_has_sparse_690_str();
  if (sparse_690_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_690_str_;
    sparse_690_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_690_str(::std::string* sparse_690_str) {
  if (sparse_690_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_690_str_;
  }
  if (sparse_690_str) {
    set_has_sparse_690_str();
    sparse_690_str_ = sparse_690_str;
  } else {
    clear_has_sparse_690_str();
    sparse_690_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_691_str = 703;
inline bool Database_NoBench::has_sparse_691_str() const {
  return (_has_bits_[22] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_691_str() {
  _has_bits_[22] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_691_str() {
  _has_bits_[22] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_691_str() {
  if (sparse_691_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_691_str_->clear();
  }
  clear_has_sparse_691_str();
}
inline const ::std::string& Database_NoBench::sparse_691_str() const {
  return *sparse_691_str_;
}
inline void Database_NoBench::set_sparse_691_str(const ::std::string& value) {
  set_has_sparse_691_str();
  if (sparse_691_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_691_str_ = new ::std::string;
  }
  sparse_691_str_->assign(value);
}
inline void Database_NoBench::set_sparse_691_str(const char* value) {
  set_has_sparse_691_str();
  if (sparse_691_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_691_str_ = new ::std::string;
  }
  sparse_691_str_->assign(value);
}
inline void Database_NoBench::set_sparse_691_str(const char* value, size_t size) {
  set_has_sparse_691_str();
  if (sparse_691_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_691_str_ = new ::std::string;
  }
  sparse_691_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_691_str() {
  set_has_sparse_691_str();
  if (sparse_691_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_691_str_ = new ::std::string;
  }
  return sparse_691_str_;
}
inline ::std::string* Database_NoBench::release_sparse_691_str() {
  clear_has_sparse_691_str();
  if (sparse_691_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_691_str_;
    sparse_691_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_691_str(::std::string* sparse_691_str) {
  if (sparse_691_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_691_str_;
  }
  if (sparse_691_str) {
    set_has_sparse_691_str();
    sparse_691_str_ = sparse_691_str;
  } else {
    clear_has_sparse_691_str();
    sparse_691_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_692_str = 704;
inline bool Database_NoBench::has_sparse_692_str() const {
  return (_has_bits_[22] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_692_str() {
  _has_bits_[22] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_692_str() {
  _has_bits_[22] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_692_str() {
  if (sparse_692_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_692_str_->clear();
  }
  clear_has_sparse_692_str();
}
inline const ::std::string& Database_NoBench::sparse_692_str() const {
  return *sparse_692_str_;
}
inline void Database_NoBench::set_sparse_692_str(const ::std::string& value) {
  set_has_sparse_692_str();
  if (sparse_692_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_692_str_ = new ::std::string;
  }
  sparse_692_str_->assign(value);
}
inline void Database_NoBench::set_sparse_692_str(const char* value) {
  set_has_sparse_692_str();
  if (sparse_692_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_692_str_ = new ::std::string;
  }
  sparse_692_str_->assign(value);
}
inline void Database_NoBench::set_sparse_692_str(const char* value, size_t size) {
  set_has_sparse_692_str();
  if (sparse_692_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_692_str_ = new ::std::string;
  }
  sparse_692_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_692_str() {
  set_has_sparse_692_str();
  if (sparse_692_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_692_str_ = new ::std::string;
  }
  return sparse_692_str_;
}
inline ::std::string* Database_NoBench::release_sparse_692_str() {
  clear_has_sparse_692_str();
  if (sparse_692_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_692_str_;
    sparse_692_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_692_str(::std::string* sparse_692_str) {
  if (sparse_692_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_692_str_;
  }
  if (sparse_692_str) {
    set_has_sparse_692_str();
    sparse_692_str_ = sparse_692_str;
  } else {
    clear_has_sparse_692_str();
    sparse_692_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_693_str = 705;
inline bool Database_NoBench::has_sparse_693_str() const {
  return (_has_bits_[22] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_693_str() {
  _has_bits_[22] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_693_str() {
  _has_bits_[22] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_693_str() {
  if (sparse_693_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_693_str_->clear();
  }
  clear_has_sparse_693_str();
}
inline const ::std::string& Database_NoBench::sparse_693_str() const {
  return *sparse_693_str_;
}
inline void Database_NoBench::set_sparse_693_str(const ::std::string& value) {
  set_has_sparse_693_str();
  if (sparse_693_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_693_str_ = new ::std::string;
  }
  sparse_693_str_->assign(value);
}
inline void Database_NoBench::set_sparse_693_str(const char* value) {
  set_has_sparse_693_str();
  if (sparse_693_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_693_str_ = new ::std::string;
  }
  sparse_693_str_->assign(value);
}
inline void Database_NoBench::set_sparse_693_str(const char* value, size_t size) {
  set_has_sparse_693_str();
  if (sparse_693_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_693_str_ = new ::std::string;
  }
  sparse_693_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_693_str() {
  set_has_sparse_693_str();
  if (sparse_693_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_693_str_ = new ::std::string;
  }
  return sparse_693_str_;
}
inline ::std::string* Database_NoBench::release_sparse_693_str() {
  clear_has_sparse_693_str();
  if (sparse_693_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_693_str_;
    sparse_693_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_693_str(::std::string* sparse_693_str) {
  if (sparse_693_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_693_str_;
  }
  if (sparse_693_str) {
    set_has_sparse_693_str();
    sparse_693_str_ = sparse_693_str;
  } else {
    clear_has_sparse_693_str();
    sparse_693_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_694_str = 706;
inline bool Database_NoBench::has_sparse_694_str() const {
  return (_has_bits_[22] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_694_str() {
  _has_bits_[22] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_694_str() {
  _has_bits_[22] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_694_str() {
  if (sparse_694_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_694_str_->clear();
  }
  clear_has_sparse_694_str();
}
inline const ::std::string& Database_NoBench::sparse_694_str() const {
  return *sparse_694_str_;
}
inline void Database_NoBench::set_sparse_694_str(const ::std::string& value) {
  set_has_sparse_694_str();
  if (sparse_694_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_694_str_ = new ::std::string;
  }
  sparse_694_str_->assign(value);
}
inline void Database_NoBench::set_sparse_694_str(const char* value) {
  set_has_sparse_694_str();
  if (sparse_694_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_694_str_ = new ::std::string;
  }
  sparse_694_str_->assign(value);
}
inline void Database_NoBench::set_sparse_694_str(const char* value, size_t size) {
  set_has_sparse_694_str();
  if (sparse_694_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_694_str_ = new ::std::string;
  }
  sparse_694_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_694_str() {
  set_has_sparse_694_str();
  if (sparse_694_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_694_str_ = new ::std::string;
  }
  return sparse_694_str_;
}
inline ::std::string* Database_NoBench::release_sparse_694_str() {
  clear_has_sparse_694_str();
  if (sparse_694_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_694_str_;
    sparse_694_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_694_str(::std::string* sparse_694_str) {
  if (sparse_694_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_694_str_;
  }
  if (sparse_694_str) {
    set_has_sparse_694_str();
    sparse_694_str_ = sparse_694_str;
  } else {
    clear_has_sparse_694_str();
    sparse_694_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_695_str = 707;
inline bool Database_NoBench::has_sparse_695_str() const {
  return (_has_bits_[22] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_695_str() {
  _has_bits_[22] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_695_str() {
  _has_bits_[22] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_695_str() {
  if (sparse_695_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_695_str_->clear();
  }
  clear_has_sparse_695_str();
}
inline const ::std::string& Database_NoBench::sparse_695_str() const {
  return *sparse_695_str_;
}
inline void Database_NoBench::set_sparse_695_str(const ::std::string& value) {
  set_has_sparse_695_str();
  if (sparse_695_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_695_str_ = new ::std::string;
  }
  sparse_695_str_->assign(value);
}
inline void Database_NoBench::set_sparse_695_str(const char* value) {
  set_has_sparse_695_str();
  if (sparse_695_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_695_str_ = new ::std::string;
  }
  sparse_695_str_->assign(value);
}
inline void Database_NoBench::set_sparse_695_str(const char* value, size_t size) {
  set_has_sparse_695_str();
  if (sparse_695_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_695_str_ = new ::std::string;
  }
  sparse_695_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_695_str() {
  set_has_sparse_695_str();
  if (sparse_695_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_695_str_ = new ::std::string;
  }
  return sparse_695_str_;
}
inline ::std::string* Database_NoBench::release_sparse_695_str() {
  clear_has_sparse_695_str();
  if (sparse_695_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_695_str_;
    sparse_695_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_695_str(::std::string* sparse_695_str) {
  if (sparse_695_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_695_str_;
  }
  if (sparse_695_str) {
    set_has_sparse_695_str();
    sparse_695_str_ = sparse_695_str;
  } else {
    clear_has_sparse_695_str();
    sparse_695_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_696_str = 708;
inline bool Database_NoBench::has_sparse_696_str() const {
  return (_has_bits_[22] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_696_str() {
  _has_bits_[22] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_696_str() {
  _has_bits_[22] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_696_str() {
  if (sparse_696_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_696_str_->clear();
  }
  clear_has_sparse_696_str();
}
inline const ::std::string& Database_NoBench::sparse_696_str() const {
  return *sparse_696_str_;
}
inline void Database_NoBench::set_sparse_696_str(const ::std::string& value) {
  set_has_sparse_696_str();
  if (sparse_696_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_696_str_ = new ::std::string;
  }
  sparse_696_str_->assign(value);
}
inline void Database_NoBench::set_sparse_696_str(const char* value) {
  set_has_sparse_696_str();
  if (sparse_696_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_696_str_ = new ::std::string;
  }
  sparse_696_str_->assign(value);
}
inline void Database_NoBench::set_sparse_696_str(const char* value, size_t size) {
  set_has_sparse_696_str();
  if (sparse_696_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_696_str_ = new ::std::string;
  }
  sparse_696_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_696_str() {
  set_has_sparse_696_str();
  if (sparse_696_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_696_str_ = new ::std::string;
  }
  return sparse_696_str_;
}
inline ::std::string* Database_NoBench::release_sparse_696_str() {
  clear_has_sparse_696_str();
  if (sparse_696_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_696_str_;
    sparse_696_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_696_str(::std::string* sparse_696_str) {
  if (sparse_696_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_696_str_;
  }
  if (sparse_696_str) {
    set_has_sparse_696_str();
    sparse_696_str_ = sparse_696_str;
  } else {
    clear_has_sparse_696_str();
    sparse_696_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_697_str = 709;
inline bool Database_NoBench::has_sparse_697_str() const {
  return (_has_bits_[22] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_697_str() {
  _has_bits_[22] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_697_str() {
  _has_bits_[22] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_697_str() {
  if (sparse_697_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_697_str_->clear();
  }
  clear_has_sparse_697_str();
}
inline const ::std::string& Database_NoBench::sparse_697_str() const {
  return *sparse_697_str_;
}
inline void Database_NoBench::set_sparse_697_str(const ::std::string& value) {
  set_has_sparse_697_str();
  if (sparse_697_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_697_str_ = new ::std::string;
  }
  sparse_697_str_->assign(value);
}
inline void Database_NoBench::set_sparse_697_str(const char* value) {
  set_has_sparse_697_str();
  if (sparse_697_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_697_str_ = new ::std::string;
  }
  sparse_697_str_->assign(value);
}
inline void Database_NoBench::set_sparse_697_str(const char* value, size_t size) {
  set_has_sparse_697_str();
  if (sparse_697_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_697_str_ = new ::std::string;
  }
  sparse_697_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_697_str() {
  set_has_sparse_697_str();
  if (sparse_697_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_697_str_ = new ::std::string;
  }
  return sparse_697_str_;
}
inline ::std::string* Database_NoBench::release_sparse_697_str() {
  clear_has_sparse_697_str();
  if (sparse_697_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_697_str_;
    sparse_697_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_697_str(::std::string* sparse_697_str) {
  if (sparse_697_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_697_str_;
  }
  if (sparse_697_str) {
    set_has_sparse_697_str();
    sparse_697_str_ = sparse_697_str;
  } else {
    clear_has_sparse_697_str();
    sparse_697_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_698_str = 710;
inline bool Database_NoBench::has_sparse_698_str() const {
  return (_has_bits_[22] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_698_str() {
  _has_bits_[22] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_698_str() {
  _has_bits_[22] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_698_str() {
  if (sparse_698_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_698_str_->clear();
  }
  clear_has_sparse_698_str();
}
inline const ::std::string& Database_NoBench::sparse_698_str() const {
  return *sparse_698_str_;
}
inline void Database_NoBench::set_sparse_698_str(const ::std::string& value) {
  set_has_sparse_698_str();
  if (sparse_698_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_698_str_ = new ::std::string;
  }
  sparse_698_str_->assign(value);
}
inline void Database_NoBench::set_sparse_698_str(const char* value) {
  set_has_sparse_698_str();
  if (sparse_698_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_698_str_ = new ::std::string;
  }
  sparse_698_str_->assign(value);
}
inline void Database_NoBench::set_sparse_698_str(const char* value, size_t size) {
  set_has_sparse_698_str();
  if (sparse_698_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_698_str_ = new ::std::string;
  }
  sparse_698_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_698_str() {
  set_has_sparse_698_str();
  if (sparse_698_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_698_str_ = new ::std::string;
  }
  return sparse_698_str_;
}
inline ::std::string* Database_NoBench::release_sparse_698_str() {
  clear_has_sparse_698_str();
  if (sparse_698_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_698_str_;
    sparse_698_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_698_str(::std::string* sparse_698_str) {
  if (sparse_698_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_698_str_;
  }
  if (sparse_698_str) {
    set_has_sparse_698_str();
    sparse_698_str_ = sparse_698_str;
  } else {
    clear_has_sparse_698_str();
    sparse_698_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_699_str = 711;
inline bool Database_NoBench::has_sparse_699_str() const {
  return (_has_bits_[22] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_699_str() {
  _has_bits_[22] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_699_str() {
  _has_bits_[22] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_699_str() {
  if (sparse_699_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_699_str_->clear();
  }
  clear_has_sparse_699_str();
}
inline const ::std::string& Database_NoBench::sparse_699_str() const {
  return *sparse_699_str_;
}
inline void Database_NoBench::set_sparse_699_str(const ::std::string& value) {
  set_has_sparse_699_str();
  if (sparse_699_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_699_str_ = new ::std::string;
  }
  sparse_699_str_->assign(value);
}
inline void Database_NoBench::set_sparse_699_str(const char* value) {
  set_has_sparse_699_str();
  if (sparse_699_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_699_str_ = new ::std::string;
  }
  sparse_699_str_->assign(value);
}
inline void Database_NoBench::set_sparse_699_str(const char* value, size_t size) {
  set_has_sparse_699_str();
  if (sparse_699_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_699_str_ = new ::std::string;
  }
  sparse_699_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_699_str() {
  set_has_sparse_699_str();
  if (sparse_699_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_699_str_ = new ::std::string;
  }
  return sparse_699_str_;
}
inline ::std::string* Database_NoBench::release_sparse_699_str() {
  clear_has_sparse_699_str();
  if (sparse_699_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_699_str_;
    sparse_699_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_699_str(::std::string* sparse_699_str) {
  if (sparse_699_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_699_str_;
  }
  if (sparse_699_str) {
    set_has_sparse_699_str();
    sparse_699_str_ = sparse_699_str;
  } else {
    clear_has_sparse_699_str();
    sparse_699_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_700_str = 712;
inline bool Database_NoBench::has_sparse_700_str() const {
  return (_has_bits_[22] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_700_str() {
  _has_bits_[22] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_700_str() {
  _has_bits_[22] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_700_str() {
  if (sparse_700_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_700_str_->clear();
  }
  clear_has_sparse_700_str();
}
inline const ::std::string& Database_NoBench::sparse_700_str() const {
  return *sparse_700_str_;
}
inline void Database_NoBench::set_sparse_700_str(const ::std::string& value) {
  set_has_sparse_700_str();
  if (sparse_700_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_700_str_ = new ::std::string;
  }
  sparse_700_str_->assign(value);
}
inline void Database_NoBench::set_sparse_700_str(const char* value) {
  set_has_sparse_700_str();
  if (sparse_700_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_700_str_ = new ::std::string;
  }
  sparse_700_str_->assign(value);
}
inline void Database_NoBench::set_sparse_700_str(const char* value, size_t size) {
  set_has_sparse_700_str();
  if (sparse_700_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_700_str_ = new ::std::string;
  }
  sparse_700_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_700_str() {
  set_has_sparse_700_str();
  if (sparse_700_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_700_str_ = new ::std::string;
  }
  return sparse_700_str_;
}
inline ::std::string* Database_NoBench::release_sparse_700_str() {
  clear_has_sparse_700_str();
  if (sparse_700_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_700_str_;
    sparse_700_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_700_str(::std::string* sparse_700_str) {
  if (sparse_700_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_700_str_;
  }
  if (sparse_700_str) {
    set_has_sparse_700_str();
    sparse_700_str_ = sparse_700_str;
  } else {
    clear_has_sparse_700_str();
    sparse_700_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_701_str = 713;
inline bool Database_NoBench::has_sparse_701_str() const {
  return (_has_bits_[22] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_701_str() {
  _has_bits_[22] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_701_str() {
  _has_bits_[22] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_701_str() {
  if (sparse_701_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_701_str_->clear();
  }
  clear_has_sparse_701_str();
}
inline const ::std::string& Database_NoBench::sparse_701_str() const {
  return *sparse_701_str_;
}
inline void Database_NoBench::set_sparse_701_str(const ::std::string& value) {
  set_has_sparse_701_str();
  if (sparse_701_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_701_str_ = new ::std::string;
  }
  sparse_701_str_->assign(value);
}
inline void Database_NoBench::set_sparse_701_str(const char* value) {
  set_has_sparse_701_str();
  if (sparse_701_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_701_str_ = new ::std::string;
  }
  sparse_701_str_->assign(value);
}
inline void Database_NoBench::set_sparse_701_str(const char* value, size_t size) {
  set_has_sparse_701_str();
  if (sparse_701_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_701_str_ = new ::std::string;
  }
  sparse_701_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_701_str() {
  set_has_sparse_701_str();
  if (sparse_701_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_701_str_ = new ::std::string;
  }
  return sparse_701_str_;
}
inline ::std::string* Database_NoBench::release_sparse_701_str() {
  clear_has_sparse_701_str();
  if (sparse_701_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_701_str_;
    sparse_701_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_701_str(::std::string* sparse_701_str) {
  if (sparse_701_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_701_str_;
  }
  if (sparse_701_str) {
    set_has_sparse_701_str();
    sparse_701_str_ = sparse_701_str;
  } else {
    clear_has_sparse_701_str();
    sparse_701_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_702_str = 714;
inline bool Database_NoBench::has_sparse_702_str() const {
  return (_has_bits_[22] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_702_str() {
  _has_bits_[22] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_702_str() {
  _has_bits_[22] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_702_str() {
  if (sparse_702_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_702_str_->clear();
  }
  clear_has_sparse_702_str();
}
inline const ::std::string& Database_NoBench::sparse_702_str() const {
  return *sparse_702_str_;
}
inline void Database_NoBench::set_sparse_702_str(const ::std::string& value) {
  set_has_sparse_702_str();
  if (sparse_702_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_702_str_ = new ::std::string;
  }
  sparse_702_str_->assign(value);
}
inline void Database_NoBench::set_sparse_702_str(const char* value) {
  set_has_sparse_702_str();
  if (sparse_702_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_702_str_ = new ::std::string;
  }
  sparse_702_str_->assign(value);
}
inline void Database_NoBench::set_sparse_702_str(const char* value, size_t size) {
  set_has_sparse_702_str();
  if (sparse_702_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_702_str_ = new ::std::string;
  }
  sparse_702_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_702_str() {
  set_has_sparse_702_str();
  if (sparse_702_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_702_str_ = new ::std::string;
  }
  return sparse_702_str_;
}
inline ::std::string* Database_NoBench::release_sparse_702_str() {
  clear_has_sparse_702_str();
  if (sparse_702_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_702_str_;
    sparse_702_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_702_str(::std::string* sparse_702_str) {
  if (sparse_702_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_702_str_;
  }
  if (sparse_702_str) {
    set_has_sparse_702_str();
    sparse_702_str_ = sparse_702_str;
  } else {
    clear_has_sparse_702_str();
    sparse_702_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_703_str = 715;
inline bool Database_NoBench::has_sparse_703_str() const {
  return (_has_bits_[22] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_703_str() {
  _has_bits_[22] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_703_str() {
  _has_bits_[22] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_703_str() {
  if (sparse_703_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_703_str_->clear();
  }
  clear_has_sparse_703_str();
}
inline const ::std::string& Database_NoBench::sparse_703_str() const {
  return *sparse_703_str_;
}
inline void Database_NoBench::set_sparse_703_str(const ::std::string& value) {
  set_has_sparse_703_str();
  if (sparse_703_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_703_str_ = new ::std::string;
  }
  sparse_703_str_->assign(value);
}
inline void Database_NoBench::set_sparse_703_str(const char* value) {
  set_has_sparse_703_str();
  if (sparse_703_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_703_str_ = new ::std::string;
  }
  sparse_703_str_->assign(value);
}
inline void Database_NoBench::set_sparse_703_str(const char* value, size_t size) {
  set_has_sparse_703_str();
  if (sparse_703_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_703_str_ = new ::std::string;
  }
  sparse_703_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_703_str() {
  set_has_sparse_703_str();
  if (sparse_703_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_703_str_ = new ::std::string;
  }
  return sparse_703_str_;
}
inline ::std::string* Database_NoBench::release_sparse_703_str() {
  clear_has_sparse_703_str();
  if (sparse_703_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_703_str_;
    sparse_703_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_703_str(::std::string* sparse_703_str) {
  if (sparse_703_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_703_str_;
  }
  if (sparse_703_str) {
    set_has_sparse_703_str();
    sparse_703_str_ = sparse_703_str;
  } else {
    clear_has_sparse_703_str();
    sparse_703_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_704_str = 716;
inline bool Database_NoBench::has_sparse_704_str() const {
  return (_has_bits_[22] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_704_str() {
  _has_bits_[22] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_704_str() {
  _has_bits_[22] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_704_str() {
  if (sparse_704_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_704_str_->clear();
  }
  clear_has_sparse_704_str();
}
inline const ::std::string& Database_NoBench::sparse_704_str() const {
  return *sparse_704_str_;
}
inline void Database_NoBench::set_sparse_704_str(const ::std::string& value) {
  set_has_sparse_704_str();
  if (sparse_704_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_704_str_ = new ::std::string;
  }
  sparse_704_str_->assign(value);
}
inline void Database_NoBench::set_sparse_704_str(const char* value) {
  set_has_sparse_704_str();
  if (sparse_704_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_704_str_ = new ::std::string;
  }
  sparse_704_str_->assign(value);
}
inline void Database_NoBench::set_sparse_704_str(const char* value, size_t size) {
  set_has_sparse_704_str();
  if (sparse_704_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_704_str_ = new ::std::string;
  }
  sparse_704_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_704_str() {
  set_has_sparse_704_str();
  if (sparse_704_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_704_str_ = new ::std::string;
  }
  return sparse_704_str_;
}
inline ::std::string* Database_NoBench::release_sparse_704_str() {
  clear_has_sparse_704_str();
  if (sparse_704_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_704_str_;
    sparse_704_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_704_str(::std::string* sparse_704_str) {
  if (sparse_704_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_704_str_;
  }
  if (sparse_704_str) {
    set_has_sparse_704_str();
    sparse_704_str_ = sparse_704_str;
  } else {
    clear_has_sparse_704_str();
    sparse_704_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_705_str = 717;
inline bool Database_NoBench::has_sparse_705_str() const {
  return (_has_bits_[22] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_705_str() {
  _has_bits_[22] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_705_str() {
  _has_bits_[22] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_705_str() {
  if (sparse_705_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_705_str_->clear();
  }
  clear_has_sparse_705_str();
}
inline const ::std::string& Database_NoBench::sparse_705_str() const {
  return *sparse_705_str_;
}
inline void Database_NoBench::set_sparse_705_str(const ::std::string& value) {
  set_has_sparse_705_str();
  if (sparse_705_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_705_str_ = new ::std::string;
  }
  sparse_705_str_->assign(value);
}
inline void Database_NoBench::set_sparse_705_str(const char* value) {
  set_has_sparse_705_str();
  if (sparse_705_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_705_str_ = new ::std::string;
  }
  sparse_705_str_->assign(value);
}
inline void Database_NoBench::set_sparse_705_str(const char* value, size_t size) {
  set_has_sparse_705_str();
  if (sparse_705_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_705_str_ = new ::std::string;
  }
  sparse_705_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_705_str() {
  set_has_sparse_705_str();
  if (sparse_705_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_705_str_ = new ::std::string;
  }
  return sparse_705_str_;
}
inline ::std::string* Database_NoBench::release_sparse_705_str() {
  clear_has_sparse_705_str();
  if (sparse_705_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_705_str_;
    sparse_705_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_705_str(::std::string* sparse_705_str) {
  if (sparse_705_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_705_str_;
  }
  if (sparse_705_str) {
    set_has_sparse_705_str();
    sparse_705_str_ = sparse_705_str;
  } else {
    clear_has_sparse_705_str();
    sparse_705_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_706_str = 718;
inline bool Database_NoBench::has_sparse_706_str() const {
  return (_has_bits_[22] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_706_str() {
  _has_bits_[22] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_706_str() {
  _has_bits_[22] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_706_str() {
  if (sparse_706_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_706_str_->clear();
  }
  clear_has_sparse_706_str();
}
inline const ::std::string& Database_NoBench::sparse_706_str() const {
  return *sparse_706_str_;
}
inline void Database_NoBench::set_sparse_706_str(const ::std::string& value) {
  set_has_sparse_706_str();
  if (sparse_706_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_706_str_ = new ::std::string;
  }
  sparse_706_str_->assign(value);
}
inline void Database_NoBench::set_sparse_706_str(const char* value) {
  set_has_sparse_706_str();
  if (sparse_706_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_706_str_ = new ::std::string;
  }
  sparse_706_str_->assign(value);
}
inline void Database_NoBench::set_sparse_706_str(const char* value, size_t size) {
  set_has_sparse_706_str();
  if (sparse_706_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_706_str_ = new ::std::string;
  }
  sparse_706_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_706_str() {
  set_has_sparse_706_str();
  if (sparse_706_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_706_str_ = new ::std::string;
  }
  return sparse_706_str_;
}
inline ::std::string* Database_NoBench::release_sparse_706_str() {
  clear_has_sparse_706_str();
  if (sparse_706_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_706_str_;
    sparse_706_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_706_str(::std::string* sparse_706_str) {
  if (sparse_706_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_706_str_;
  }
  if (sparse_706_str) {
    set_has_sparse_706_str();
    sparse_706_str_ = sparse_706_str;
  } else {
    clear_has_sparse_706_str();
    sparse_706_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_707_str = 719;
inline bool Database_NoBench::has_sparse_707_str() const {
  return (_has_bits_[22] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_707_str() {
  _has_bits_[22] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_707_str() {
  _has_bits_[22] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_707_str() {
  if (sparse_707_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_707_str_->clear();
  }
  clear_has_sparse_707_str();
}
inline const ::std::string& Database_NoBench::sparse_707_str() const {
  return *sparse_707_str_;
}
inline void Database_NoBench::set_sparse_707_str(const ::std::string& value) {
  set_has_sparse_707_str();
  if (sparse_707_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_707_str_ = new ::std::string;
  }
  sparse_707_str_->assign(value);
}
inline void Database_NoBench::set_sparse_707_str(const char* value) {
  set_has_sparse_707_str();
  if (sparse_707_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_707_str_ = new ::std::string;
  }
  sparse_707_str_->assign(value);
}
inline void Database_NoBench::set_sparse_707_str(const char* value, size_t size) {
  set_has_sparse_707_str();
  if (sparse_707_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_707_str_ = new ::std::string;
  }
  sparse_707_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_707_str() {
  set_has_sparse_707_str();
  if (sparse_707_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_707_str_ = new ::std::string;
  }
  return sparse_707_str_;
}
inline ::std::string* Database_NoBench::release_sparse_707_str() {
  clear_has_sparse_707_str();
  if (sparse_707_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_707_str_;
    sparse_707_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_707_str(::std::string* sparse_707_str) {
  if (sparse_707_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_707_str_;
  }
  if (sparse_707_str) {
    set_has_sparse_707_str();
    sparse_707_str_ = sparse_707_str;
  } else {
    clear_has_sparse_707_str();
    sparse_707_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_708_str = 720;
inline bool Database_NoBench::has_sparse_708_str() const {
  return (_has_bits_[22] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_708_str() {
  _has_bits_[22] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_708_str() {
  _has_bits_[22] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_708_str() {
  if (sparse_708_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_708_str_->clear();
  }
  clear_has_sparse_708_str();
}
inline const ::std::string& Database_NoBench::sparse_708_str() const {
  return *sparse_708_str_;
}
inline void Database_NoBench::set_sparse_708_str(const ::std::string& value) {
  set_has_sparse_708_str();
  if (sparse_708_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_708_str_ = new ::std::string;
  }
  sparse_708_str_->assign(value);
}
inline void Database_NoBench::set_sparse_708_str(const char* value) {
  set_has_sparse_708_str();
  if (sparse_708_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_708_str_ = new ::std::string;
  }
  sparse_708_str_->assign(value);
}
inline void Database_NoBench::set_sparse_708_str(const char* value, size_t size) {
  set_has_sparse_708_str();
  if (sparse_708_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_708_str_ = new ::std::string;
  }
  sparse_708_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_708_str() {
  set_has_sparse_708_str();
  if (sparse_708_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_708_str_ = new ::std::string;
  }
  return sparse_708_str_;
}
inline ::std::string* Database_NoBench::release_sparse_708_str() {
  clear_has_sparse_708_str();
  if (sparse_708_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_708_str_;
    sparse_708_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_708_str(::std::string* sparse_708_str) {
  if (sparse_708_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_708_str_;
  }
  if (sparse_708_str) {
    set_has_sparse_708_str();
    sparse_708_str_ = sparse_708_str;
  } else {
    clear_has_sparse_708_str();
    sparse_708_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_709_str = 721;
inline bool Database_NoBench::has_sparse_709_str() const {
  return (_has_bits_[22] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_709_str() {
  _has_bits_[22] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_709_str() {
  _has_bits_[22] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_709_str() {
  if (sparse_709_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_709_str_->clear();
  }
  clear_has_sparse_709_str();
}
inline const ::std::string& Database_NoBench::sparse_709_str() const {
  return *sparse_709_str_;
}
inline void Database_NoBench::set_sparse_709_str(const ::std::string& value) {
  set_has_sparse_709_str();
  if (sparse_709_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_709_str_ = new ::std::string;
  }
  sparse_709_str_->assign(value);
}
inline void Database_NoBench::set_sparse_709_str(const char* value) {
  set_has_sparse_709_str();
  if (sparse_709_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_709_str_ = new ::std::string;
  }
  sparse_709_str_->assign(value);
}
inline void Database_NoBench::set_sparse_709_str(const char* value, size_t size) {
  set_has_sparse_709_str();
  if (sparse_709_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_709_str_ = new ::std::string;
  }
  sparse_709_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_709_str() {
  set_has_sparse_709_str();
  if (sparse_709_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_709_str_ = new ::std::string;
  }
  return sparse_709_str_;
}
inline ::std::string* Database_NoBench::release_sparse_709_str() {
  clear_has_sparse_709_str();
  if (sparse_709_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_709_str_;
    sparse_709_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_709_str(::std::string* sparse_709_str) {
  if (sparse_709_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_709_str_;
  }
  if (sparse_709_str) {
    set_has_sparse_709_str();
    sparse_709_str_ = sparse_709_str;
  } else {
    clear_has_sparse_709_str();
    sparse_709_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_710_str = 722;
inline bool Database_NoBench::has_sparse_710_str() const {
  return (_has_bits_[22] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_710_str() {
  _has_bits_[22] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_710_str() {
  _has_bits_[22] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_710_str() {
  if (sparse_710_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_710_str_->clear();
  }
  clear_has_sparse_710_str();
}
inline const ::std::string& Database_NoBench::sparse_710_str() const {
  return *sparse_710_str_;
}
inline void Database_NoBench::set_sparse_710_str(const ::std::string& value) {
  set_has_sparse_710_str();
  if (sparse_710_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_710_str_ = new ::std::string;
  }
  sparse_710_str_->assign(value);
}
inline void Database_NoBench::set_sparse_710_str(const char* value) {
  set_has_sparse_710_str();
  if (sparse_710_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_710_str_ = new ::std::string;
  }
  sparse_710_str_->assign(value);
}
inline void Database_NoBench::set_sparse_710_str(const char* value, size_t size) {
  set_has_sparse_710_str();
  if (sparse_710_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_710_str_ = new ::std::string;
  }
  sparse_710_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_710_str() {
  set_has_sparse_710_str();
  if (sparse_710_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_710_str_ = new ::std::string;
  }
  return sparse_710_str_;
}
inline ::std::string* Database_NoBench::release_sparse_710_str() {
  clear_has_sparse_710_str();
  if (sparse_710_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_710_str_;
    sparse_710_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_710_str(::std::string* sparse_710_str) {
  if (sparse_710_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_710_str_;
  }
  if (sparse_710_str) {
    set_has_sparse_710_str();
    sparse_710_str_ = sparse_710_str;
  } else {
    clear_has_sparse_710_str();
    sparse_710_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_711_str = 723;
inline bool Database_NoBench::has_sparse_711_str() const {
  return (_has_bits_[22] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_711_str() {
  _has_bits_[22] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_711_str() {
  _has_bits_[22] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_711_str() {
  if (sparse_711_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_711_str_->clear();
  }
  clear_has_sparse_711_str();
}
inline const ::std::string& Database_NoBench::sparse_711_str() const {
  return *sparse_711_str_;
}
inline void Database_NoBench::set_sparse_711_str(const ::std::string& value) {
  set_has_sparse_711_str();
  if (sparse_711_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_711_str_ = new ::std::string;
  }
  sparse_711_str_->assign(value);
}
inline void Database_NoBench::set_sparse_711_str(const char* value) {
  set_has_sparse_711_str();
  if (sparse_711_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_711_str_ = new ::std::string;
  }
  sparse_711_str_->assign(value);
}
inline void Database_NoBench::set_sparse_711_str(const char* value, size_t size) {
  set_has_sparse_711_str();
  if (sparse_711_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_711_str_ = new ::std::string;
  }
  sparse_711_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_711_str() {
  set_has_sparse_711_str();
  if (sparse_711_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_711_str_ = new ::std::string;
  }
  return sparse_711_str_;
}
inline ::std::string* Database_NoBench::release_sparse_711_str() {
  clear_has_sparse_711_str();
  if (sparse_711_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_711_str_;
    sparse_711_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_711_str(::std::string* sparse_711_str) {
  if (sparse_711_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_711_str_;
  }
  if (sparse_711_str) {
    set_has_sparse_711_str();
    sparse_711_str_ = sparse_711_str;
  } else {
    clear_has_sparse_711_str();
    sparse_711_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_712_str = 724;
inline bool Database_NoBench::has_sparse_712_str() const {
  return (_has_bits_[22] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_712_str() {
  _has_bits_[22] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_712_str() {
  _has_bits_[22] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_712_str() {
  if (sparse_712_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_712_str_->clear();
  }
  clear_has_sparse_712_str();
}
inline const ::std::string& Database_NoBench::sparse_712_str() const {
  return *sparse_712_str_;
}
inline void Database_NoBench::set_sparse_712_str(const ::std::string& value) {
  set_has_sparse_712_str();
  if (sparse_712_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_712_str_ = new ::std::string;
  }
  sparse_712_str_->assign(value);
}
inline void Database_NoBench::set_sparse_712_str(const char* value) {
  set_has_sparse_712_str();
  if (sparse_712_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_712_str_ = new ::std::string;
  }
  sparse_712_str_->assign(value);
}
inline void Database_NoBench::set_sparse_712_str(const char* value, size_t size) {
  set_has_sparse_712_str();
  if (sparse_712_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_712_str_ = new ::std::string;
  }
  sparse_712_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_712_str() {
  set_has_sparse_712_str();
  if (sparse_712_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_712_str_ = new ::std::string;
  }
  return sparse_712_str_;
}
inline ::std::string* Database_NoBench::release_sparse_712_str() {
  clear_has_sparse_712_str();
  if (sparse_712_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_712_str_;
    sparse_712_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_712_str(::std::string* sparse_712_str) {
  if (sparse_712_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_712_str_;
  }
  if (sparse_712_str) {
    set_has_sparse_712_str();
    sparse_712_str_ = sparse_712_str;
  } else {
    clear_has_sparse_712_str();
    sparse_712_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_713_str = 725;
inline bool Database_NoBench::has_sparse_713_str() const {
  return (_has_bits_[22] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_713_str() {
  _has_bits_[22] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_713_str() {
  _has_bits_[22] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_713_str() {
  if (sparse_713_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_713_str_->clear();
  }
  clear_has_sparse_713_str();
}
inline const ::std::string& Database_NoBench::sparse_713_str() const {
  return *sparse_713_str_;
}
inline void Database_NoBench::set_sparse_713_str(const ::std::string& value) {
  set_has_sparse_713_str();
  if (sparse_713_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_713_str_ = new ::std::string;
  }
  sparse_713_str_->assign(value);
}
inline void Database_NoBench::set_sparse_713_str(const char* value) {
  set_has_sparse_713_str();
  if (sparse_713_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_713_str_ = new ::std::string;
  }
  sparse_713_str_->assign(value);
}
inline void Database_NoBench::set_sparse_713_str(const char* value, size_t size) {
  set_has_sparse_713_str();
  if (sparse_713_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_713_str_ = new ::std::string;
  }
  sparse_713_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_713_str() {
  set_has_sparse_713_str();
  if (sparse_713_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_713_str_ = new ::std::string;
  }
  return sparse_713_str_;
}
inline ::std::string* Database_NoBench::release_sparse_713_str() {
  clear_has_sparse_713_str();
  if (sparse_713_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_713_str_;
    sparse_713_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_713_str(::std::string* sparse_713_str) {
  if (sparse_713_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_713_str_;
  }
  if (sparse_713_str) {
    set_has_sparse_713_str();
    sparse_713_str_ = sparse_713_str;
  } else {
    clear_has_sparse_713_str();
    sparse_713_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_714_str = 726;
inline bool Database_NoBench::has_sparse_714_str() const {
  return (_has_bits_[22] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_714_str() {
  _has_bits_[22] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_714_str() {
  _has_bits_[22] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_714_str() {
  if (sparse_714_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_714_str_->clear();
  }
  clear_has_sparse_714_str();
}
inline const ::std::string& Database_NoBench::sparse_714_str() const {
  return *sparse_714_str_;
}
inline void Database_NoBench::set_sparse_714_str(const ::std::string& value) {
  set_has_sparse_714_str();
  if (sparse_714_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_714_str_ = new ::std::string;
  }
  sparse_714_str_->assign(value);
}
inline void Database_NoBench::set_sparse_714_str(const char* value) {
  set_has_sparse_714_str();
  if (sparse_714_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_714_str_ = new ::std::string;
  }
  sparse_714_str_->assign(value);
}
inline void Database_NoBench::set_sparse_714_str(const char* value, size_t size) {
  set_has_sparse_714_str();
  if (sparse_714_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_714_str_ = new ::std::string;
  }
  sparse_714_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_714_str() {
  set_has_sparse_714_str();
  if (sparse_714_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_714_str_ = new ::std::string;
  }
  return sparse_714_str_;
}
inline ::std::string* Database_NoBench::release_sparse_714_str() {
  clear_has_sparse_714_str();
  if (sparse_714_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_714_str_;
    sparse_714_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_714_str(::std::string* sparse_714_str) {
  if (sparse_714_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_714_str_;
  }
  if (sparse_714_str) {
    set_has_sparse_714_str();
    sparse_714_str_ = sparse_714_str;
  } else {
    clear_has_sparse_714_str();
    sparse_714_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_715_str = 727;
inline bool Database_NoBench::has_sparse_715_str() const {
  return (_has_bits_[22] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_715_str() {
  _has_bits_[22] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_715_str() {
  _has_bits_[22] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_715_str() {
  if (sparse_715_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_715_str_->clear();
  }
  clear_has_sparse_715_str();
}
inline const ::std::string& Database_NoBench::sparse_715_str() const {
  return *sparse_715_str_;
}
inline void Database_NoBench::set_sparse_715_str(const ::std::string& value) {
  set_has_sparse_715_str();
  if (sparse_715_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_715_str_ = new ::std::string;
  }
  sparse_715_str_->assign(value);
}
inline void Database_NoBench::set_sparse_715_str(const char* value) {
  set_has_sparse_715_str();
  if (sparse_715_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_715_str_ = new ::std::string;
  }
  sparse_715_str_->assign(value);
}
inline void Database_NoBench::set_sparse_715_str(const char* value, size_t size) {
  set_has_sparse_715_str();
  if (sparse_715_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_715_str_ = new ::std::string;
  }
  sparse_715_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_715_str() {
  set_has_sparse_715_str();
  if (sparse_715_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_715_str_ = new ::std::string;
  }
  return sparse_715_str_;
}
inline ::std::string* Database_NoBench::release_sparse_715_str() {
  clear_has_sparse_715_str();
  if (sparse_715_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_715_str_;
    sparse_715_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_715_str(::std::string* sparse_715_str) {
  if (sparse_715_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_715_str_;
  }
  if (sparse_715_str) {
    set_has_sparse_715_str();
    sparse_715_str_ = sparse_715_str;
  } else {
    clear_has_sparse_715_str();
    sparse_715_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_716_str = 728;
inline bool Database_NoBench::has_sparse_716_str() const {
  return (_has_bits_[22] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_716_str() {
  _has_bits_[22] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_716_str() {
  _has_bits_[22] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_716_str() {
  if (sparse_716_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_716_str_->clear();
  }
  clear_has_sparse_716_str();
}
inline const ::std::string& Database_NoBench::sparse_716_str() const {
  return *sparse_716_str_;
}
inline void Database_NoBench::set_sparse_716_str(const ::std::string& value) {
  set_has_sparse_716_str();
  if (sparse_716_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_716_str_ = new ::std::string;
  }
  sparse_716_str_->assign(value);
}
inline void Database_NoBench::set_sparse_716_str(const char* value) {
  set_has_sparse_716_str();
  if (sparse_716_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_716_str_ = new ::std::string;
  }
  sparse_716_str_->assign(value);
}
inline void Database_NoBench::set_sparse_716_str(const char* value, size_t size) {
  set_has_sparse_716_str();
  if (sparse_716_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_716_str_ = new ::std::string;
  }
  sparse_716_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_716_str() {
  set_has_sparse_716_str();
  if (sparse_716_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_716_str_ = new ::std::string;
  }
  return sparse_716_str_;
}
inline ::std::string* Database_NoBench::release_sparse_716_str() {
  clear_has_sparse_716_str();
  if (sparse_716_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_716_str_;
    sparse_716_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_716_str(::std::string* sparse_716_str) {
  if (sparse_716_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_716_str_;
  }
  if (sparse_716_str) {
    set_has_sparse_716_str();
    sparse_716_str_ = sparse_716_str;
  } else {
    clear_has_sparse_716_str();
    sparse_716_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_717_str = 729;
inline bool Database_NoBench::has_sparse_717_str() const {
  return (_has_bits_[22] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_717_str() {
  _has_bits_[22] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_717_str() {
  _has_bits_[22] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_717_str() {
  if (sparse_717_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_717_str_->clear();
  }
  clear_has_sparse_717_str();
}
inline const ::std::string& Database_NoBench::sparse_717_str() const {
  return *sparse_717_str_;
}
inline void Database_NoBench::set_sparse_717_str(const ::std::string& value) {
  set_has_sparse_717_str();
  if (sparse_717_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_717_str_ = new ::std::string;
  }
  sparse_717_str_->assign(value);
}
inline void Database_NoBench::set_sparse_717_str(const char* value) {
  set_has_sparse_717_str();
  if (sparse_717_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_717_str_ = new ::std::string;
  }
  sparse_717_str_->assign(value);
}
inline void Database_NoBench::set_sparse_717_str(const char* value, size_t size) {
  set_has_sparse_717_str();
  if (sparse_717_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_717_str_ = new ::std::string;
  }
  sparse_717_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_717_str() {
  set_has_sparse_717_str();
  if (sparse_717_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_717_str_ = new ::std::string;
  }
  return sparse_717_str_;
}
inline ::std::string* Database_NoBench::release_sparse_717_str() {
  clear_has_sparse_717_str();
  if (sparse_717_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_717_str_;
    sparse_717_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_717_str(::std::string* sparse_717_str) {
  if (sparse_717_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_717_str_;
  }
  if (sparse_717_str) {
    set_has_sparse_717_str();
    sparse_717_str_ = sparse_717_str;
  } else {
    clear_has_sparse_717_str();
    sparse_717_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_718_str = 730;
inline bool Database_NoBench::has_sparse_718_str() const {
  return (_has_bits_[22] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_718_str() {
  _has_bits_[22] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_718_str() {
  _has_bits_[22] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_718_str() {
  if (sparse_718_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_718_str_->clear();
  }
  clear_has_sparse_718_str();
}
inline const ::std::string& Database_NoBench::sparse_718_str() const {
  return *sparse_718_str_;
}
inline void Database_NoBench::set_sparse_718_str(const ::std::string& value) {
  set_has_sparse_718_str();
  if (sparse_718_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_718_str_ = new ::std::string;
  }
  sparse_718_str_->assign(value);
}
inline void Database_NoBench::set_sparse_718_str(const char* value) {
  set_has_sparse_718_str();
  if (sparse_718_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_718_str_ = new ::std::string;
  }
  sparse_718_str_->assign(value);
}
inline void Database_NoBench::set_sparse_718_str(const char* value, size_t size) {
  set_has_sparse_718_str();
  if (sparse_718_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_718_str_ = new ::std::string;
  }
  sparse_718_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_718_str() {
  set_has_sparse_718_str();
  if (sparse_718_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_718_str_ = new ::std::string;
  }
  return sparse_718_str_;
}
inline ::std::string* Database_NoBench::release_sparse_718_str() {
  clear_has_sparse_718_str();
  if (sparse_718_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_718_str_;
    sparse_718_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_718_str(::std::string* sparse_718_str) {
  if (sparse_718_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_718_str_;
  }
  if (sparse_718_str) {
    set_has_sparse_718_str();
    sparse_718_str_ = sparse_718_str;
  } else {
    clear_has_sparse_718_str();
    sparse_718_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_719_str = 731;
inline bool Database_NoBench::has_sparse_719_str() const {
  return (_has_bits_[22] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_719_str() {
  _has_bits_[22] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_719_str() {
  _has_bits_[22] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_719_str() {
  if (sparse_719_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_719_str_->clear();
  }
  clear_has_sparse_719_str();
}
inline const ::std::string& Database_NoBench::sparse_719_str() const {
  return *sparse_719_str_;
}
inline void Database_NoBench::set_sparse_719_str(const ::std::string& value) {
  set_has_sparse_719_str();
  if (sparse_719_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_719_str_ = new ::std::string;
  }
  sparse_719_str_->assign(value);
}
inline void Database_NoBench::set_sparse_719_str(const char* value) {
  set_has_sparse_719_str();
  if (sparse_719_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_719_str_ = new ::std::string;
  }
  sparse_719_str_->assign(value);
}
inline void Database_NoBench::set_sparse_719_str(const char* value, size_t size) {
  set_has_sparse_719_str();
  if (sparse_719_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_719_str_ = new ::std::string;
  }
  sparse_719_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_719_str() {
  set_has_sparse_719_str();
  if (sparse_719_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_719_str_ = new ::std::string;
  }
  return sparse_719_str_;
}
inline ::std::string* Database_NoBench::release_sparse_719_str() {
  clear_has_sparse_719_str();
  if (sparse_719_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_719_str_;
    sparse_719_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_719_str(::std::string* sparse_719_str) {
  if (sparse_719_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_719_str_;
  }
  if (sparse_719_str) {
    set_has_sparse_719_str();
    sparse_719_str_ = sparse_719_str;
  } else {
    clear_has_sparse_719_str();
    sparse_719_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_720_str = 732;
inline bool Database_NoBench::has_sparse_720_str() const {
  return (_has_bits_[22] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_720_str() {
  _has_bits_[22] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_720_str() {
  _has_bits_[22] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_720_str() {
  if (sparse_720_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_720_str_->clear();
  }
  clear_has_sparse_720_str();
}
inline const ::std::string& Database_NoBench::sparse_720_str() const {
  return *sparse_720_str_;
}
inline void Database_NoBench::set_sparse_720_str(const ::std::string& value) {
  set_has_sparse_720_str();
  if (sparse_720_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_720_str_ = new ::std::string;
  }
  sparse_720_str_->assign(value);
}
inline void Database_NoBench::set_sparse_720_str(const char* value) {
  set_has_sparse_720_str();
  if (sparse_720_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_720_str_ = new ::std::string;
  }
  sparse_720_str_->assign(value);
}
inline void Database_NoBench::set_sparse_720_str(const char* value, size_t size) {
  set_has_sparse_720_str();
  if (sparse_720_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_720_str_ = new ::std::string;
  }
  sparse_720_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_720_str() {
  set_has_sparse_720_str();
  if (sparse_720_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_720_str_ = new ::std::string;
  }
  return sparse_720_str_;
}
inline ::std::string* Database_NoBench::release_sparse_720_str() {
  clear_has_sparse_720_str();
  if (sparse_720_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_720_str_;
    sparse_720_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_720_str(::std::string* sparse_720_str) {
  if (sparse_720_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_720_str_;
  }
  if (sparse_720_str) {
    set_has_sparse_720_str();
    sparse_720_str_ = sparse_720_str;
  } else {
    clear_has_sparse_720_str();
    sparse_720_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_721_str = 733;
inline bool Database_NoBench::has_sparse_721_str() const {
  return (_has_bits_[22] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_721_str() {
  _has_bits_[22] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_721_str() {
  _has_bits_[22] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_721_str() {
  if (sparse_721_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_721_str_->clear();
  }
  clear_has_sparse_721_str();
}
inline const ::std::string& Database_NoBench::sparse_721_str() const {
  return *sparse_721_str_;
}
inline void Database_NoBench::set_sparse_721_str(const ::std::string& value) {
  set_has_sparse_721_str();
  if (sparse_721_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_721_str_ = new ::std::string;
  }
  sparse_721_str_->assign(value);
}
inline void Database_NoBench::set_sparse_721_str(const char* value) {
  set_has_sparse_721_str();
  if (sparse_721_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_721_str_ = new ::std::string;
  }
  sparse_721_str_->assign(value);
}
inline void Database_NoBench::set_sparse_721_str(const char* value, size_t size) {
  set_has_sparse_721_str();
  if (sparse_721_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_721_str_ = new ::std::string;
  }
  sparse_721_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_721_str() {
  set_has_sparse_721_str();
  if (sparse_721_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_721_str_ = new ::std::string;
  }
  return sparse_721_str_;
}
inline ::std::string* Database_NoBench::release_sparse_721_str() {
  clear_has_sparse_721_str();
  if (sparse_721_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_721_str_;
    sparse_721_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_721_str(::std::string* sparse_721_str) {
  if (sparse_721_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_721_str_;
  }
  if (sparse_721_str) {
    set_has_sparse_721_str();
    sparse_721_str_ = sparse_721_str;
  } else {
    clear_has_sparse_721_str();
    sparse_721_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_722_str = 734;
inline bool Database_NoBench::has_sparse_722_str() const {
  return (_has_bits_[22] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_722_str() {
  _has_bits_[22] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_722_str() {
  _has_bits_[22] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_722_str() {
  if (sparse_722_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_722_str_->clear();
  }
  clear_has_sparse_722_str();
}
inline const ::std::string& Database_NoBench::sparse_722_str() const {
  return *sparse_722_str_;
}
inline void Database_NoBench::set_sparse_722_str(const ::std::string& value) {
  set_has_sparse_722_str();
  if (sparse_722_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_722_str_ = new ::std::string;
  }
  sparse_722_str_->assign(value);
}
inline void Database_NoBench::set_sparse_722_str(const char* value) {
  set_has_sparse_722_str();
  if (sparse_722_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_722_str_ = new ::std::string;
  }
  sparse_722_str_->assign(value);
}
inline void Database_NoBench::set_sparse_722_str(const char* value, size_t size) {
  set_has_sparse_722_str();
  if (sparse_722_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_722_str_ = new ::std::string;
  }
  sparse_722_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_722_str() {
  set_has_sparse_722_str();
  if (sparse_722_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_722_str_ = new ::std::string;
  }
  return sparse_722_str_;
}
inline ::std::string* Database_NoBench::release_sparse_722_str() {
  clear_has_sparse_722_str();
  if (sparse_722_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_722_str_;
    sparse_722_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_722_str(::std::string* sparse_722_str) {
  if (sparse_722_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_722_str_;
  }
  if (sparse_722_str) {
    set_has_sparse_722_str();
    sparse_722_str_ = sparse_722_str;
  } else {
    clear_has_sparse_722_str();
    sparse_722_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_723_str = 735;
inline bool Database_NoBench::has_sparse_723_str() const {
  return (_has_bits_[23] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_723_str() {
  _has_bits_[23] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_723_str() {
  _has_bits_[23] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_723_str() {
  if (sparse_723_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_723_str_->clear();
  }
  clear_has_sparse_723_str();
}
inline const ::std::string& Database_NoBench::sparse_723_str() const {
  return *sparse_723_str_;
}
inline void Database_NoBench::set_sparse_723_str(const ::std::string& value) {
  set_has_sparse_723_str();
  if (sparse_723_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_723_str_ = new ::std::string;
  }
  sparse_723_str_->assign(value);
}
inline void Database_NoBench::set_sparse_723_str(const char* value) {
  set_has_sparse_723_str();
  if (sparse_723_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_723_str_ = new ::std::string;
  }
  sparse_723_str_->assign(value);
}
inline void Database_NoBench::set_sparse_723_str(const char* value, size_t size) {
  set_has_sparse_723_str();
  if (sparse_723_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_723_str_ = new ::std::string;
  }
  sparse_723_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_723_str() {
  set_has_sparse_723_str();
  if (sparse_723_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_723_str_ = new ::std::string;
  }
  return sparse_723_str_;
}
inline ::std::string* Database_NoBench::release_sparse_723_str() {
  clear_has_sparse_723_str();
  if (sparse_723_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_723_str_;
    sparse_723_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_723_str(::std::string* sparse_723_str) {
  if (sparse_723_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_723_str_;
  }
  if (sparse_723_str) {
    set_has_sparse_723_str();
    sparse_723_str_ = sparse_723_str;
  } else {
    clear_has_sparse_723_str();
    sparse_723_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_724_str = 736;
inline bool Database_NoBench::has_sparse_724_str() const {
  return (_has_bits_[23] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_724_str() {
  _has_bits_[23] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_724_str() {
  _has_bits_[23] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_724_str() {
  if (sparse_724_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_724_str_->clear();
  }
  clear_has_sparse_724_str();
}
inline const ::std::string& Database_NoBench::sparse_724_str() const {
  return *sparse_724_str_;
}
inline void Database_NoBench::set_sparse_724_str(const ::std::string& value) {
  set_has_sparse_724_str();
  if (sparse_724_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_724_str_ = new ::std::string;
  }
  sparse_724_str_->assign(value);
}
inline void Database_NoBench::set_sparse_724_str(const char* value) {
  set_has_sparse_724_str();
  if (sparse_724_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_724_str_ = new ::std::string;
  }
  sparse_724_str_->assign(value);
}
inline void Database_NoBench::set_sparse_724_str(const char* value, size_t size) {
  set_has_sparse_724_str();
  if (sparse_724_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_724_str_ = new ::std::string;
  }
  sparse_724_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_724_str() {
  set_has_sparse_724_str();
  if (sparse_724_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_724_str_ = new ::std::string;
  }
  return sparse_724_str_;
}
inline ::std::string* Database_NoBench::release_sparse_724_str() {
  clear_has_sparse_724_str();
  if (sparse_724_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_724_str_;
    sparse_724_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_724_str(::std::string* sparse_724_str) {
  if (sparse_724_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_724_str_;
  }
  if (sparse_724_str) {
    set_has_sparse_724_str();
    sparse_724_str_ = sparse_724_str;
  } else {
    clear_has_sparse_724_str();
    sparse_724_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_725_str = 737;
inline bool Database_NoBench::has_sparse_725_str() const {
  return (_has_bits_[23] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_725_str() {
  _has_bits_[23] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_725_str() {
  _has_bits_[23] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_725_str() {
  if (sparse_725_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_725_str_->clear();
  }
  clear_has_sparse_725_str();
}
inline const ::std::string& Database_NoBench::sparse_725_str() const {
  return *sparse_725_str_;
}
inline void Database_NoBench::set_sparse_725_str(const ::std::string& value) {
  set_has_sparse_725_str();
  if (sparse_725_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_725_str_ = new ::std::string;
  }
  sparse_725_str_->assign(value);
}
inline void Database_NoBench::set_sparse_725_str(const char* value) {
  set_has_sparse_725_str();
  if (sparse_725_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_725_str_ = new ::std::string;
  }
  sparse_725_str_->assign(value);
}
inline void Database_NoBench::set_sparse_725_str(const char* value, size_t size) {
  set_has_sparse_725_str();
  if (sparse_725_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_725_str_ = new ::std::string;
  }
  sparse_725_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_725_str() {
  set_has_sparse_725_str();
  if (sparse_725_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_725_str_ = new ::std::string;
  }
  return sparse_725_str_;
}
inline ::std::string* Database_NoBench::release_sparse_725_str() {
  clear_has_sparse_725_str();
  if (sparse_725_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_725_str_;
    sparse_725_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_725_str(::std::string* sparse_725_str) {
  if (sparse_725_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_725_str_;
  }
  if (sparse_725_str) {
    set_has_sparse_725_str();
    sparse_725_str_ = sparse_725_str;
  } else {
    clear_has_sparse_725_str();
    sparse_725_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_726_str = 738;
inline bool Database_NoBench::has_sparse_726_str() const {
  return (_has_bits_[23] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_726_str() {
  _has_bits_[23] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_726_str() {
  _has_bits_[23] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_726_str() {
  if (sparse_726_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_726_str_->clear();
  }
  clear_has_sparse_726_str();
}
inline const ::std::string& Database_NoBench::sparse_726_str() const {
  return *sparse_726_str_;
}
inline void Database_NoBench::set_sparse_726_str(const ::std::string& value) {
  set_has_sparse_726_str();
  if (sparse_726_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_726_str_ = new ::std::string;
  }
  sparse_726_str_->assign(value);
}
inline void Database_NoBench::set_sparse_726_str(const char* value) {
  set_has_sparse_726_str();
  if (sparse_726_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_726_str_ = new ::std::string;
  }
  sparse_726_str_->assign(value);
}
inline void Database_NoBench::set_sparse_726_str(const char* value, size_t size) {
  set_has_sparse_726_str();
  if (sparse_726_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_726_str_ = new ::std::string;
  }
  sparse_726_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_726_str() {
  set_has_sparse_726_str();
  if (sparse_726_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_726_str_ = new ::std::string;
  }
  return sparse_726_str_;
}
inline ::std::string* Database_NoBench::release_sparse_726_str() {
  clear_has_sparse_726_str();
  if (sparse_726_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_726_str_;
    sparse_726_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_726_str(::std::string* sparse_726_str) {
  if (sparse_726_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_726_str_;
  }
  if (sparse_726_str) {
    set_has_sparse_726_str();
    sparse_726_str_ = sparse_726_str;
  } else {
    clear_has_sparse_726_str();
    sparse_726_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_727_str = 739;
inline bool Database_NoBench::has_sparse_727_str() const {
  return (_has_bits_[23] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_727_str() {
  _has_bits_[23] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_727_str() {
  _has_bits_[23] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_727_str() {
  if (sparse_727_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_727_str_->clear();
  }
  clear_has_sparse_727_str();
}
inline const ::std::string& Database_NoBench::sparse_727_str() const {
  return *sparse_727_str_;
}
inline void Database_NoBench::set_sparse_727_str(const ::std::string& value) {
  set_has_sparse_727_str();
  if (sparse_727_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_727_str_ = new ::std::string;
  }
  sparse_727_str_->assign(value);
}
inline void Database_NoBench::set_sparse_727_str(const char* value) {
  set_has_sparse_727_str();
  if (sparse_727_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_727_str_ = new ::std::string;
  }
  sparse_727_str_->assign(value);
}
inline void Database_NoBench::set_sparse_727_str(const char* value, size_t size) {
  set_has_sparse_727_str();
  if (sparse_727_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_727_str_ = new ::std::string;
  }
  sparse_727_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_727_str() {
  set_has_sparse_727_str();
  if (sparse_727_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_727_str_ = new ::std::string;
  }
  return sparse_727_str_;
}
inline ::std::string* Database_NoBench::release_sparse_727_str() {
  clear_has_sparse_727_str();
  if (sparse_727_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_727_str_;
    sparse_727_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_727_str(::std::string* sparse_727_str) {
  if (sparse_727_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_727_str_;
  }
  if (sparse_727_str) {
    set_has_sparse_727_str();
    sparse_727_str_ = sparse_727_str;
  } else {
    clear_has_sparse_727_str();
    sparse_727_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_728_str = 740;
inline bool Database_NoBench::has_sparse_728_str() const {
  return (_has_bits_[23] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_728_str() {
  _has_bits_[23] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_728_str() {
  _has_bits_[23] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_728_str() {
  if (sparse_728_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_728_str_->clear();
  }
  clear_has_sparse_728_str();
}
inline const ::std::string& Database_NoBench::sparse_728_str() const {
  return *sparse_728_str_;
}
inline void Database_NoBench::set_sparse_728_str(const ::std::string& value) {
  set_has_sparse_728_str();
  if (sparse_728_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_728_str_ = new ::std::string;
  }
  sparse_728_str_->assign(value);
}
inline void Database_NoBench::set_sparse_728_str(const char* value) {
  set_has_sparse_728_str();
  if (sparse_728_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_728_str_ = new ::std::string;
  }
  sparse_728_str_->assign(value);
}
inline void Database_NoBench::set_sparse_728_str(const char* value, size_t size) {
  set_has_sparse_728_str();
  if (sparse_728_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_728_str_ = new ::std::string;
  }
  sparse_728_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_728_str() {
  set_has_sparse_728_str();
  if (sparse_728_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_728_str_ = new ::std::string;
  }
  return sparse_728_str_;
}
inline ::std::string* Database_NoBench::release_sparse_728_str() {
  clear_has_sparse_728_str();
  if (sparse_728_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_728_str_;
    sparse_728_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_728_str(::std::string* sparse_728_str) {
  if (sparse_728_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_728_str_;
  }
  if (sparse_728_str) {
    set_has_sparse_728_str();
    sparse_728_str_ = sparse_728_str;
  } else {
    clear_has_sparse_728_str();
    sparse_728_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_729_str = 741;
inline bool Database_NoBench::has_sparse_729_str() const {
  return (_has_bits_[23] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_729_str() {
  _has_bits_[23] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_729_str() {
  _has_bits_[23] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_729_str() {
  if (sparse_729_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_729_str_->clear();
  }
  clear_has_sparse_729_str();
}
inline const ::std::string& Database_NoBench::sparse_729_str() const {
  return *sparse_729_str_;
}
inline void Database_NoBench::set_sparse_729_str(const ::std::string& value) {
  set_has_sparse_729_str();
  if (sparse_729_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_729_str_ = new ::std::string;
  }
  sparse_729_str_->assign(value);
}
inline void Database_NoBench::set_sparse_729_str(const char* value) {
  set_has_sparse_729_str();
  if (sparse_729_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_729_str_ = new ::std::string;
  }
  sparse_729_str_->assign(value);
}
inline void Database_NoBench::set_sparse_729_str(const char* value, size_t size) {
  set_has_sparse_729_str();
  if (sparse_729_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_729_str_ = new ::std::string;
  }
  sparse_729_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_729_str() {
  set_has_sparse_729_str();
  if (sparse_729_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_729_str_ = new ::std::string;
  }
  return sparse_729_str_;
}
inline ::std::string* Database_NoBench::release_sparse_729_str() {
  clear_has_sparse_729_str();
  if (sparse_729_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_729_str_;
    sparse_729_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_729_str(::std::string* sparse_729_str) {
  if (sparse_729_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_729_str_;
  }
  if (sparse_729_str) {
    set_has_sparse_729_str();
    sparse_729_str_ = sparse_729_str;
  } else {
    clear_has_sparse_729_str();
    sparse_729_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_730_str = 742;
inline bool Database_NoBench::has_sparse_730_str() const {
  return (_has_bits_[23] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_730_str() {
  _has_bits_[23] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_730_str() {
  _has_bits_[23] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_730_str() {
  if (sparse_730_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_730_str_->clear();
  }
  clear_has_sparse_730_str();
}
inline const ::std::string& Database_NoBench::sparse_730_str() const {
  return *sparse_730_str_;
}
inline void Database_NoBench::set_sparse_730_str(const ::std::string& value) {
  set_has_sparse_730_str();
  if (sparse_730_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_730_str_ = new ::std::string;
  }
  sparse_730_str_->assign(value);
}
inline void Database_NoBench::set_sparse_730_str(const char* value) {
  set_has_sparse_730_str();
  if (sparse_730_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_730_str_ = new ::std::string;
  }
  sparse_730_str_->assign(value);
}
inline void Database_NoBench::set_sparse_730_str(const char* value, size_t size) {
  set_has_sparse_730_str();
  if (sparse_730_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_730_str_ = new ::std::string;
  }
  sparse_730_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_730_str() {
  set_has_sparse_730_str();
  if (sparse_730_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_730_str_ = new ::std::string;
  }
  return sparse_730_str_;
}
inline ::std::string* Database_NoBench::release_sparse_730_str() {
  clear_has_sparse_730_str();
  if (sparse_730_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_730_str_;
    sparse_730_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_730_str(::std::string* sparse_730_str) {
  if (sparse_730_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_730_str_;
  }
  if (sparse_730_str) {
    set_has_sparse_730_str();
    sparse_730_str_ = sparse_730_str;
  } else {
    clear_has_sparse_730_str();
    sparse_730_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_731_str = 743;
inline bool Database_NoBench::has_sparse_731_str() const {
  return (_has_bits_[23] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_731_str() {
  _has_bits_[23] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_731_str() {
  _has_bits_[23] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_731_str() {
  if (sparse_731_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_731_str_->clear();
  }
  clear_has_sparse_731_str();
}
inline const ::std::string& Database_NoBench::sparse_731_str() const {
  return *sparse_731_str_;
}
inline void Database_NoBench::set_sparse_731_str(const ::std::string& value) {
  set_has_sparse_731_str();
  if (sparse_731_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_731_str_ = new ::std::string;
  }
  sparse_731_str_->assign(value);
}
inline void Database_NoBench::set_sparse_731_str(const char* value) {
  set_has_sparse_731_str();
  if (sparse_731_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_731_str_ = new ::std::string;
  }
  sparse_731_str_->assign(value);
}
inline void Database_NoBench::set_sparse_731_str(const char* value, size_t size) {
  set_has_sparse_731_str();
  if (sparse_731_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_731_str_ = new ::std::string;
  }
  sparse_731_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_731_str() {
  set_has_sparse_731_str();
  if (sparse_731_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_731_str_ = new ::std::string;
  }
  return sparse_731_str_;
}
inline ::std::string* Database_NoBench::release_sparse_731_str() {
  clear_has_sparse_731_str();
  if (sparse_731_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_731_str_;
    sparse_731_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_731_str(::std::string* sparse_731_str) {
  if (sparse_731_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_731_str_;
  }
  if (sparse_731_str) {
    set_has_sparse_731_str();
    sparse_731_str_ = sparse_731_str;
  } else {
    clear_has_sparse_731_str();
    sparse_731_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_732_str = 744;
inline bool Database_NoBench::has_sparse_732_str() const {
  return (_has_bits_[23] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_732_str() {
  _has_bits_[23] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_732_str() {
  _has_bits_[23] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_732_str() {
  if (sparse_732_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_732_str_->clear();
  }
  clear_has_sparse_732_str();
}
inline const ::std::string& Database_NoBench::sparse_732_str() const {
  return *sparse_732_str_;
}
inline void Database_NoBench::set_sparse_732_str(const ::std::string& value) {
  set_has_sparse_732_str();
  if (sparse_732_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_732_str_ = new ::std::string;
  }
  sparse_732_str_->assign(value);
}
inline void Database_NoBench::set_sparse_732_str(const char* value) {
  set_has_sparse_732_str();
  if (sparse_732_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_732_str_ = new ::std::string;
  }
  sparse_732_str_->assign(value);
}
inline void Database_NoBench::set_sparse_732_str(const char* value, size_t size) {
  set_has_sparse_732_str();
  if (sparse_732_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_732_str_ = new ::std::string;
  }
  sparse_732_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_732_str() {
  set_has_sparse_732_str();
  if (sparse_732_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_732_str_ = new ::std::string;
  }
  return sparse_732_str_;
}
inline ::std::string* Database_NoBench::release_sparse_732_str() {
  clear_has_sparse_732_str();
  if (sparse_732_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_732_str_;
    sparse_732_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_732_str(::std::string* sparse_732_str) {
  if (sparse_732_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_732_str_;
  }
  if (sparse_732_str) {
    set_has_sparse_732_str();
    sparse_732_str_ = sparse_732_str;
  } else {
    clear_has_sparse_732_str();
    sparse_732_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_733_str = 745;
inline bool Database_NoBench::has_sparse_733_str() const {
  return (_has_bits_[23] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_733_str() {
  _has_bits_[23] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_733_str() {
  _has_bits_[23] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_733_str() {
  if (sparse_733_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_733_str_->clear();
  }
  clear_has_sparse_733_str();
}
inline const ::std::string& Database_NoBench::sparse_733_str() const {
  return *sparse_733_str_;
}
inline void Database_NoBench::set_sparse_733_str(const ::std::string& value) {
  set_has_sparse_733_str();
  if (sparse_733_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_733_str_ = new ::std::string;
  }
  sparse_733_str_->assign(value);
}
inline void Database_NoBench::set_sparse_733_str(const char* value) {
  set_has_sparse_733_str();
  if (sparse_733_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_733_str_ = new ::std::string;
  }
  sparse_733_str_->assign(value);
}
inline void Database_NoBench::set_sparse_733_str(const char* value, size_t size) {
  set_has_sparse_733_str();
  if (sparse_733_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_733_str_ = new ::std::string;
  }
  sparse_733_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_733_str() {
  set_has_sparse_733_str();
  if (sparse_733_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_733_str_ = new ::std::string;
  }
  return sparse_733_str_;
}
inline ::std::string* Database_NoBench::release_sparse_733_str() {
  clear_has_sparse_733_str();
  if (sparse_733_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_733_str_;
    sparse_733_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_733_str(::std::string* sparse_733_str) {
  if (sparse_733_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_733_str_;
  }
  if (sparse_733_str) {
    set_has_sparse_733_str();
    sparse_733_str_ = sparse_733_str;
  } else {
    clear_has_sparse_733_str();
    sparse_733_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_734_str = 746;
inline bool Database_NoBench::has_sparse_734_str() const {
  return (_has_bits_[23] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_734_str() {
  _has_bits_[23] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_734_str() {
  _has_bits_[23] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_734_str() {
  if (sparse_734_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_734_str_->clear();
  }
  clear_has_sparse_734_str();
}
inline const ::std::string& Database_NoBench::sparse_734_str() const {
  return *sparse_734_str_;
}
inline void Database_NoBench::set_sparse_734_str(const ::std::string& value) {
  set_has_sparse_734_str();
  if (sparse_734_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_734_str_ = new ::std::string;
  }
  sparse_734_str_->assign(value);
}
inline void Database_NoBench::set_sparse_734_str(const char* value) {
  set_has_sparse_734_str();
  if (sparse_734_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_734_str_ = new ::std::string;
  }
  sparse_734_str_->assign(value);
}
inline void Database_NoBench::set_sparse_734_str(const char* value, size_t size) {
  set_has_sparse_734_str();
  if (sparse_734_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_734_str_ = new ::std::string;
  }
  sparse_734_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_734_str() {
  set_has_sparse_734_str();
  if (sparse_734_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_734_str_ = new ::std::string;
  }
  return sparse_734_str_;
}
inline ::std::string* Database_NoBench::release_sparse_734_str() {
  clear_has_sparse_734_str();
  if (sparse_734_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_734_str_;
    sparse_734_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_734_str(::std::string* sparse_734_str) {
  if (sparse_734_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_734_str_;
  }
  if (sparse_734_str) {
    set_has_sparse_734_str();
    sparse_734_str_ = sparse_734_str;
  } else {
    clear_has_sparse_734_str();
    sparse_734_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_735_str = 747;
inline bool Database_NoBench::has_sparse_735_str() const {
  return (_has_bits_[23] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_735_str() {
  _has_bits_[23] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_735_str() {
  _has_bits_[23] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_735_str() {
  if (sparse_735_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_735_str_->clear();
  }
  clear_has_sparse_735_str();
}
inline const ::std::string& Database_NoBench::sparse_735_str() const {
  return *sparse_735_str_;
}
inline void Database_NoBench::set_sparse_735_str(const ::std::string& value) {
  set_has_sparse_735_str();
  if (sparse_735_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_735_str_ = new ::std::string;
  }
  sparse_735_str_->assign(value);
}
inline void Database_NoBench::set_sparse_735_str(const char* value) {
  set_has_sparse_735_str();
  if (sparse_735_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_735_str_ = new ::std::string;
  }
  sparse_735_str_->assign(value);
}
inline void Database_NoBench::set_sparse_735_str(const char* value, size_t size) {
  set_has_sparse_735_str();
  if (sparse_735_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_735_str_ = new ::std::string;
  }
  sparse_735_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_735_str() {
  set_has_sparse_735_str();
  if (sparse_735_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_735_str_ = new ::std::string;
  }
  return sparse_735_str_;
}
inline ::std::string* Database_NoBench::release_sparse_735_str() {
  clear_has_sparse_735_str();
  if (sparse_735_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_735_str_;
    sparse_735_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_735_str(::std::string* sparse_735_str) {
  if (sparse_735_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_735_str_;
  }
  if (sparse_735_str) {
    set_has_sparse_735_str();
    sparse_735_str_ = sparse_735_str;
  } else {
    clear_has_sparse_735_str();
    sparse_735_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_736_str = 748;
inline bool Database_NoBench::has_sparse_736_str() const {
  return (_has_bits_[23] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_736_str() {
  _has_bits_[23] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_736_str() {
  _has_bits_[23] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_736_str() {
  if (sparse_736_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_736_str_->clear();
  }
  clear_has_sparse_736_str();
}
inline const ::std::string& Database_NoBench::sparse_736_str() const {
  return *sparse_736_str_;
}
inline void Database_NoBench::set_sparse_736_str(const ::std::string& value) {
  set_has_sparse_736_str();
  if (sparse_736_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_736_str_ = new ::std::string;
  }
  sparse_736_str_->assign(value);
}
inline void Database_NoBench::set_sparse_736_str(const char* value) {
  set_has_sparse_736_str();
  if (sparse_736_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_736_str_ = new ::std::string;
  }
  sparse_736_str_->assign(value);
}
inline void Database_NoBench::set_sparse_736_str(const char* value, size_t size) {
  set_has_sparse_736_str();
  if (sparse_736_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_736_str_ = new ::std::string;
  }
  sparse_736_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_736_str() {
  set_has_sparse_736_str();
  if (sparse_736_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_736_str_ = new ::std::string;
  }
  return sparse_736_str_;
}
inline ::std::string* Database_NoBench::release_sparse_736_str() {
  clear_has_sparse_736_str();
  if (sparse_736_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_736_str_;
    sparse_736_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_736_str(::std::string* sparse_736_str) {
  if (sparse_736_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_736_str_;
  }
  if (sparse_736_str) {
    set_has_sparse_736_str();
    sparse_736_str_ = sparse_736_str;
  } else {
    clear_has_sparse_736_str();
    sparse_736_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_737_str = 749;
inline bool Database_NoBench::has_sparse_737_str() const {
  return (_has_bits_[23] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_737_str() {
  _has_bits_[23] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_737_str() {
  _has_bits_[23] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_737_str() {
  if (sparse_737_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_737_str_->clear();
  }
  clear_has_sparse_737_str();
}
inline const ::std::string& Database_NoBench::sparse_737_str() const {
  return *sparse_737_str_;
}
inline void Database_NoBench::set_sparse_737_str(const ::std::string& value) {
  set_has_sparse_737_str();
  if (sparse_737_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_737_str_ = new ::std::string;
  }
  sparse_737_str_->assign(value);
}
inline void Database_NoBench::set_sparse_737_str(const char* value) {
  set_has_sparse_737_str();
  if (sparse_737_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_737_str_ = new ::std::string;
  }
  sparse_737_str_->assign(value);
}
inline void Database_NoBench::set_sparse_737_str(const char* value, size_t size) {
  set_has_sparse_737_str();
  if (sparse_737_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_737_str_ = new ::std::string;
  }
  sparse_737_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_737_str() {
  set_has_sparse_737_str();
  if (sparse_737_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_737_str_ = new ::std::string;
  }
  return sparse_737_str_;
}
inline ::std::string* Database_NoBench::release_sparse_737_str() {
  clear_has_sparse_737_str();
  if (sparse_737_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_737_str_;
    sparse_737_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_737_str(::std::string* sparse_737_str) {
  if (sparse_737_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_737_str_;
  }
  if (sparse_737_str) {
    set_has_sparse_737_str();
    sparse_737_str_ = sparse_737_str;
  } else {
    clear_has_sparse_737_str();
    sparse_737_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_738_str = 750;
inline bool Database_NoBench::has_sparse_738_str() const {
  return (_has_bits_[23] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_738_str() {
  _has_bits_[23] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_738_str() {
  _has_bits_[23] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_738_str() {
  if (sparse_738_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_738_str_->clear();
  }
  clear_has_sparse_738_str();
}
inline const ::std::string& Database_NoBench::sparse_738_str() const {
  return *sparse_738_str_;
}
inline void Database_NoBench::set_sparse_738_str(const ::std::string& value) {
  set_has_sparse_738_str();
  if (sparse_738_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_738_str_ = new ::std::string;
  }
  sparse_738_str_->assign(value);
}
inline void Database_NoBench::set_sparse_738_str(const char* value) {
  set_has_sparse_738_str();
  if (sparse_738_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_738_str_ = new ::std::string;
  }
  sparse_738_str_->assign(value);
}
inline void Database_NoBench::set_sparse_738_str(const char* value, size_t size) {
  set_has_sparse_738_str();
  if (sparse_738_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_738_str_ = new ::std::string;
  }
  sparse_738_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_738_str() {
  set_has_sparse_738_str();
  if (sparse_738_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_738_str_ = new ::std::string;
  }
  return sparse_738_str_;
}
inline ::std::string* Database_NoBench::release_sparse_738_str() {
  clear_has_sparse_738_str();
  if (sparse_738_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_738_str_;
    sparse_738_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_738_str(::std::string* sparse_738_str) {
  if (sparse_738_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_738_str_;
  }
  if (sparse_738_str) {
    set_has_sparse_738_str();
    sparse_738_str_ = sparse_738_str;
  } else {
    clear_has_sparse_738_str();
    sparse_738_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_739_str = 751;
inline bool Database_NoBench::has_sparse_739_str() const {
  return (_has_bits_[23] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_739_str() {
  _has_bits_[23] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_739_str() {
  _has_bits_[23] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_739_str() {
  if (sparse_739_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_739_str_->clear();
  }
  clear_has_sparse_739_str();
}
inline const ::std::string& Database_NoBench::sparse_739_str() const {
  return *sparse_739_str_;
}
inline void Database_NoBench::set_sparse_739_str(const ::std::string& value) {
  set_has_sparse_739_str();
  if (sparse_739_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_739_str_ = new ::std::string;
  }
  sparse_739_str_->assign(value);
}
inline void Database_NoBench::set_sparse_739_str(const char* value) {
  set_has_sparse_739_str();
  if (sparse_739_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_739_str_ = new ::std::string;
  }
  sparse_739_str_->assign(value);
}
inline void Database_NoBench::set_sparse_739_str(const char* value, size_t size) {
  set_has_sparse_739_str();
  if (sparse_739_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_739_str_ = new ::std::string;
  }
  sparse_739_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_739_str() {
  set_has_sparse_739_str();
  if (sparse_739_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_739_str_ = new ::std::string;
  }
  return sparse_739_str_;
}
inline ::std::string* Database_NoBench::release_sparse_739_str() {
  clear_has_sparse_739_str();
  if (sparse_739_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_739_str_;
    sparse_739_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_739_str(::std::string* sparse_739_str) {
  if (sparse_739_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_739_str_;
  }
  if (sparse_739_str) {
    set_has_sparse_739_str();
    sparse_739_str_ = sparse_739_str;
  } else {
    clear_has_sparse_739_str();
    sparse_739_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_740_str = 752;
inline bool Database_NoBench::has_sparse_740_str() const {
  return (_has_bits_[23] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_740_str() {
  _has_bits_[23] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_740_str() {
  _has_bits_[23] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_740_str() {
  if (sparse_740_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_740_str_->clear();
  }
  clear_has_sparse_740_str();
}
inline const ::std::string& Database_NoBench::sparse_740_str() const {
  return *sparse_740_str_;
}
inline void Database_NoBench::set_sparse_740_str(const ::std::string& value) {
  set_has_sparse_740_str();
  if (sparse_740_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_740_str_ = new ::std::string;
  }
  sparse_740_str_->assign(value);
}
inline void Database_NoBench::set_sparse_740_str(const char* value) {
  set_has_sparse_740_str();
  if (sparse_740_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_740_str_ = new ::std::string;
  }
  sparse_740_str_->assign(value);
}
inline void Database_NoBench::set_sparse_740_str(const char* value, size_t size) {
  set_has_sparse_740_str();
  if (sparse_740_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_740_str_ = new ::std::string;
  }
  sparse_740_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_740_str() {
  set_has_sparse_740_str();
  if (sparse_740_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_740_str_ = new ::std::string;
  }
  return sparse_740_str_;
}
inline ::std::string* Database_NoBench::release_sparse_740_str() {
  clear_has_sparse_740_str();
  if (sparse_740_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_740_str_;
    sparse_740_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_740_str(::std::string* sparse_740_str) {
  if (sparse_740_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_740_str_;
  }
  if (sparse_740_str) {
    set_has_sparse_740_str();
    sparse_740_str_ = sparse_740_str;
  } else {
    clear_has_sparse_740_str();
    sparse_740_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_741_str = 753;
inline bool Database_NoBench::has_sparse_741_str() const {
  return (_has_bits_[23] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_741_str() {
  _has_bits_[23] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_741_str() {
  _has_bits_[23] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_741_str() {
  if (sparse_741_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_741_str_->clear();
  }
  clear_has_sparse_741_str();
}
inline const ::std::string& Database_NoBench::sparse_741_str() const {
  return *sparse_741_str_;
}
inline void Database_NoBench::set_sparse_741_str(const ::std::string& value) {
  set_has_sparse_741_str();
  if (sparse_741_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_741_str_ = new ::std::string;
  }
  sparse_741_str_->assign(value);
}
inline void Database_NoBench::set_sparse_741_str(const char* value) {
  set_has_sparse_741_str();
  if (sparse_741_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_741_str_ = new ::std::string;
  }
  sparse_741_str_->assign(value);
}
inline void Database_NoBench::set_sparse_741_str(const char* value, size_t size) {
  set_has_sparse_741_str();
  if (sparse_741_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_741_str_ = new ::std::string;
  }
  sparse_741_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_741_str() {
  set_has_sparse_741_str();
  if (sparse_741_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_741_str_ = new ::std::string;
  }
  return sparse_741_str_;
}
inline ::std::string* Database_NoBench::release_sparse_741_str() {
  clear_has_sparse_741_str();
  if (sparse_741_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_741_str_;
    sparse_741_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_741_str(::std::string* sparse_741_str) {
  if (sparse_741_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_741_str_;
  }
  if (sparse_741_str) {
    set_has_sparse_741_str();
    sparse_741_str_ = sparse_741_str;
  } else {
    clear_has_sparse_741_str();
    sparse_741_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_742_str = 754;
inline bool Database_NoBench::has_sparse_742_str() const {
  return (_has_bits_[23] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_742_str() {
  _has_bits_[23] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_742_str() {
  _has_bits_[23] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_742_str() {
  if (sparse_742_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_742_str_->clear();
  }
  clear_has_sparse_742_str();
}
inline const ::std::string& Database_NoBench::sparse_742_str() const {
  return *sparse_742_str_;
}
inline void Database_NoBench::set_sparse_742_str(const ::std::string& value) {
  set_has_sparse_742_str();
  if (sparse_742_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_742_str_ = new ::std::string;
  }
  sparse_742_str_->assign(value);
}
inline void Database_NoBench::set_sparse_742_str(const char* value) {
  set_has_sparse_742_str();
  if (sparse_742_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_742_str_ = new ::std::string;
  }
  sparse_742_str_->assign(value);
}
inline void Database_NoBench::set_sparse_742_str(const char* value, size_t size) {
  set_has_sparse_742_str();
  if (sparse_742_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_742_str_ = new ::std::string;
  }
  sparse_742_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_742_str() {
  set_has_sparse_742_str();
  if (sparse_742_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_742_str_ = new ::std::string;
  }
  return sparse_742_str_;
}
inline ::std::string* Database_NoBench::release_sparse_742_str() {
  clear_has_sparse_742_str();
  if (sparse_742_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_742_str_;
    sparse_742_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_742_str(::std::string* sparse_742_str) {
  if (sparse_742_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_742_str_;
  }
  if (sparse_742_str) {
    set_has_sparse_742_str();
    sparse_742_str_ = sparse_742_str;
  } else {
    clear_has_sparse_742_str();
    sparse_742_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_743_str = 755;
inline bool Database_NoBench::has_sparse_743_str() const {
  return (_has_bits_[23] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_743_str() {
  _has_bits_[23] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_743_str() {
  _has_bits_[23] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_743_str() {
  if (sparse_743_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_743_str_->clear();
  }
  clear_has_sparse_743_str();
}
inline const ::std::string& Database_NoBench::sparse_743_str() const {
  return *sparse_743_str_;
}
inline void Database_NoBench::set_sparse_743_str(const ::std::string& value) {
  set_has_sparse_743_str();
  if (sparse_743_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_743_str_ = new ::std::string;
  }
  sparse_743_str_->assign(value);
}
inline void Database_NoBench::set_sparse_743_str(const char* value) {
  set_has_sparse_743_str();
  if (sparse_743_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_743_str_ = new ::std::string;
  }
  sparse_743_str_->assign(value);
}
inline void Database_NoBench::set_sparse_743_str(const char* value, size_t size) {
  set_has_sparse_743_str();
  if (sparse_743_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_743_str_ = new ::std::string;
  }
  sparse_743_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_743_str() {
  set_has_sparse_743_str();
  if (sparse_743_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_743_str_ = new ::std::string;
  }
  return sparse_743_str_;
}
inline ::std::string* Database_NoBench::release_sparse_743_str() {
  clear_has_sparse_743_str();
  if (sparse_743_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_743_str_;
    sparse_743_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_743_str(::std::string* sparse_743_str) {
  if (sparse_743_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_743_str_;
  }
  if (sparse_743_str) {
    set_has_sparse_743_str();
    sparse_743_str_ = sparse_743_str;
  } else {
    clear_has_sparse_743_str();
    sparse_743_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_744_str = 756;
inline bool Database_NoBench::has_sparse_744_str() const {
  return (_has_bits_[23] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_744_str() {
  _has_bits_[23] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_744_str() {
  _has_bits_[23] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_744_str() {
  if (sparse_744_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_744_str_->clear();
  }
  clear_has_sparse_744_str();
}
inline const ::std::string& Database_NoBench::sparse_744_str() const {
  return *sparse_744_str_;
}
inline void Database_NoBench::set_sparse_744_str(const ::std::string& value) {
  set_has_sparse_744_str();
  if (sparse_744_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_744_str_ = new ::std::string;
  }
  sparse_744_str_->assign(value);
}
inline void Database_NoBench::set_sparse_744_str(const char* value) {
  set_has_sparse_744_str();
  if (sparse_744_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_744_str_ = new ::std::string;
  }
  sparse_744_str_->assign(value);
}
inline void Database_NoBench::set_sparse_744_str(const char* value, size_t size) {
  set_has_sparse_744_str();
  if (sparse_744_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_744_str_ = new ::std::string;
  }
  sparse_744_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_744_str() {
  set_has_sparse_744_str();
  if (sparse_744_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_744_str_ = new ::std::string;
  }
  return sparse_744_str_;
}
inline ::std::string* Database_NoBench::release_sparse_744_str() {
  clear_has_sparse_744_str();
  if (sparse_744_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_744_str_;
    sparse_744_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_744_str(::std::string* sparse_744_str) {
  if (sparse_744_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_744_str_;
  }
  if (sparse_744_str) {
    set_has_sparse_744_str();
    sparse_744_str_ = sparse_744_str;
  } else {
    clear_has_sparse_744_str();
    sparse_744_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_745_str = 757;
inline bool Database_NoBench::has_sparse_745_str() const {
  return (_has_bits_[23] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_745_str() {
  _has_bits_[23] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_745_str() {
  _has_bits_[23] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_745_str() {
  if (sparse_745_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_745_str_->clear();
  }
  clear_has_sparse_745_str();
}
inline const ::std::string& Database_NoBench::sparse_745_str() const {
  return *sparse_745_str_;
}
inline void Database_NoBench::set_sparse_745_str(const ::std::string& value) {
  set_has_sparse_745_str();
  if (sparse_745_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_745_str_ = new ::std::string;
  }
  sparse_745_str_->assign(value);
}
inline void Database_NoBench::set_sparse_745_str(const char* value) {
  set_has_sparse_745_str();
  if (sparse_745_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_745_str_ = new ::std::string;
  }
  sparse_745_str_->assign(value);
}
inline void Database_NoBench::set_sparse_745_str(const char* value, size_t size) {
  set_has_sparse_745_str();
  if (sparse_745_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_745_str_ = new ::std::string;
  }
  sparse_745_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_745_str() {
  set_has_sparse_745_str();
  if (sparse_745_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_745_str_ = new ::std::string;
  }
  return sparse_745_str_;
}
inline ::std::string* Database_NoBench::release_sparse_745_str() {
  clear_has_sparse_745_str();
  if (sparse_745_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_745_str_;
    sparse_745_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_745_str(::std::string* sparse_745_str) {
  if (sparse_745_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_745_str_;
  }
  if (sparse_745_str) {
    set_has_sparse_745_str();
    sparse_745_str_ = sparse_745_str;
  } else {
    clear_has_sparse_745_str();
    sparse_745_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_746_str = 758;
inline bool Database_NoBench::has_sparse_746_str() const {
  return (_has_bits_[23] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_746_str() {
  _has_bits_[23] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_746_str() {
  _has_bits_[23] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_746_str() {
  if (sparse_746_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_746_str_->clear();
  }
  clear_has_sparse_746_str();
}
inline const ::std::string& Database_NoBench::sparse_746_str() const {
  return *sparse_746_str_;
}
inline void Database_NoBench::set_sparse_746_str(const ::std::string& value) {
  set_has_sparse_746_str();
  if (sparse_746_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_746_str_ = new ::std::string;
  }
  sparse_746_str_->assign(value);
}
inline void Database_NoBench::set_sparse_746_str(const char* value) {
  set_has_sparse_746_str();
  if (sparse_746_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_746_str_ = new ::std::string;
  }
  sparse_746_str_->assign(value);
}
inline void Database_NoBench::set_sparse_746_str(const char* value, size_t size) {
  set_has_sparse_746_str();
  if (sparse_746_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_746_str_ = new ::std::string;
  }
  sparse_746_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_746_str() {
  set_has_sparse_746_str();
  if (sparse_746_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_746_str_ = new ::std::string;
  }
  return sparse_746_str_;
}
inline ::std::string* Database_NoBench::release_sparse_746_str() {
  clear_has_sparse_746_str();
  if (sparse_746_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_746_str_;
    sparse_746_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_746_str(::std::string* sparse_746_str) {
  if (sparse_746_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_746_str_;
  }
  if (sparse_746_str) {
    set_has_sparse_746_str();
    sparse_746_str_ = sparse_746_str;
  } else {
    clear_has_sparse_746_str();
    sparse_746_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_747_str = 759;
inline bool Database_NoBench::has_sparse_747_str() const {
  return (_has_bits_[23] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_747_str() {
  _has_bits_[23] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_747_str() {
  _has_bits_[23] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_747_str() {
  if (sparse_747_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_747_str_->clear();
  }
  clear_has_sparse_747_str();
}
inline const ::std::string& Database_NoBench::sparse_747_str() const {
  return *sparse_747_str_;
}
inline void Database_NoBench::set_sparse_747_str(const ::std::string& value) {
  set_has_sparse_747_str();
  if (sparse_747_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_747_str_ = new ::std::string;
  }
  sparse_747_str_->assign(value);
}
inline void Database_NoBench::set_sparse_747_str(const char* value) {
  set_has_sparse_747_str();
  if (sparse_747_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_747_str_ = new ::std::string;
  }
  sparse_747_str_->assign(value);
}
inline void Database_NoBench::set_sparse_747_str(const char* value, size_t size) {
  set_has_sparse_747_str();
  if (sparse_747_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_747_str_ = new ::std::string;
  }
  sparse_747_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_747_str() {
  set_has_sparse_747_str();
  if (sparse_747_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_747_str_ = new ::std::string;
  }
  return sparse_747_str_;
}
inline ::std::string* Database_NoBench::release_sparse_747_str() {
  clear_has_sparse_747_str();
  if (sparse_747_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_747_str_;
    sparse_747_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_747_str(::std::string* sparse_747_str) {
  if (sparse_747_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_747_str_;
  }
  if (sparse_747_str) {
    set_has_sparse_747_str();
    sparse_747_str_ = sparse_747_str;
  } else {
    clear_has_sparse_747_str();
    sparse_747_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_748_str = 760;
inline bool Database_NoBench::has_sparse_748_str() const {
  return (_has_bits_[23] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_748_str() {
  _has_bits_[23] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_748_str() {
  _has_bits_[23] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_748_str() {
  if (sparse_748_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_748_str_->clear();
  }
  clear_has_sparse_748_str();
}
inline const ::std::string& Database_NoBench::sparse_748_str() const {
  return *sparse_748_str_;
}
inline void Database_NoBench::set_sparse_748_str(const ::std::string& value) {
  set_has_sparse_748_str();
  if (sparse_748_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_748_str_ = new ::std::string;
  }
  sparse_748_str_->assign(value);
}
inline void Database_NoBench::set_sparse_748_str(const char* value) {
  set_has_sparse_748_str();
  if (sparse_748_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_748_str_ = new ::std::string;
  }
  sparse_748_str_->assign(value);
}
inline void Database_NoBench::set_sparse_748_str(const char* value, size_t size) {
  set_has_sparse_748_str();
  if (sparse_748_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_748_str_ = new ::std::string;
  }
  sparse_748_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_748_str() {
  set_has_sparse_748_str();
  if (sparse_748_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_748_str_ = new ::std::string;
  }
  return sparse_748_str_;
}
inline ::std::string* Database_NoBench::release_sparse_748_str() {
  clear_has_sparse_748_str();
  if (sparse_748_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_748_str_;
    sparse_748_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_748_str(::std::string* sparse_748_str) {
  if (sparse_748_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_748_str_;
  }
  if (sparse_748_str) {
    set_has_sparse_748_str();
    sparse_748_str_ = sparse_748_str;
  } else {
    clear_has_sparse_748_str();
    sparse_748_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_749_str = 761;
inline bool Database_NoBench::has_sparse_749_str() const {
  return (_has_bits_[23] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_749_str() {
  _has_bits_[23] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_749_str() {
  _has_bits_[23] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_749_str() {
  if (sparse_749_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_749_str_->clear();
  }
  clear_has_sparse_749_str();
}
inline const ::std::string& Database_NoBench::sparse_749_str() const {
  return *sparse_749_str_;
}
inline void Database_NoBench::set_sparse_749_str(const ::std::string& value) {
  set_has_sparse_749_str();
  if (sparse_749_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_749_str_ = new ::std::string;
  }
  sparse_749_str_->assign(value);
}
inline void Database_NoBench::set_sparse_749_str(const char* value) {
  set_has_sparse_749_str();
  if (sparse_749_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_749_str_ = new ::std::string;
  }
  sparse_749_str_->assign(value);
}
inline void Database_NoBench::set_sparse_749_str(const char* value, size_t size) {
  set_has_sparse_749_str();
  if (sparse_749_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_749_str_ = new ::std::string;
  }
  sparse_749_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_749_str() {
  set_has_sparse_749_str();
  if (sparse_749_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_749_str_ = new ::std::string;
  }
  return sparse_749_str_;
}
inline ::std::string* Database_NoBench::release_sparse_749_str() {
  clear_has_sparse_749_str();
  if (sparse_749_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_749_str_;
    sparse_749_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_749_str(::std::string* sparse_749_str) {
  if (sparse_749_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_749_str_;
  }
  if (sparse_749_str) {
    set_has_sparse_749_str();
    sparse_749_str_ = sparse_749_str;
  } else {
    clear_has_sparse_749_str();
    sparse_749_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_750_str = 762;
inline bool Database_NoBench::has_sparse_750_str() const {
  return (_has_bits_[23] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_750_str() {
  _has_bits_[23] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_750_str() {
  _has_bits_[23] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_750_str() {
  if (sparse_750_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_750_str_->clear();
  }
  clear_has_sparse_750_str();
}
inline const ::std::string& Database_NoBench::sparse_750_str() const {
  return *sparse_750_str_;
}
inline void Database_NoBench::set_sparse_750_str(const ::std::string& value) {
  set_has_sparse_750_str();
  if (sparse_750_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_750_str_ = new ::std::string;
  }
  sparse_750_str_->assign(value);
}
inline void Database_NoBench::set_sparse_750_str(const char* value) {
  set_has_sparse_750_str();
  if (sparse_750_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_750_str_ = new ::std::string;
  }
  sparse_750_str_->assign(value);
}
inline void Database_NoBench::set_sparse_750_str(const char* value, size_t size) {
  set_has_sparse_750_str();
  if (sparse_750_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_750_str_ = new ::std::string;
  }
  sparse_750_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_750_str() {
  set_has_sparse_750_str();
  if (sparse_750_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_750_str_ = new ::std::string;
  }
  return sparse_750_str_;
}
inline ::std::string* Database_NoBench::release_sparse_750_str() {
  clear_has_sparse_750_str();
  if (sparse_750_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_750_str_;
    sparse_750_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_750_str(::std::string* sparse_750_str) {
  if (sparse_750_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_750_str_;
  }
  if (sparse_750_str) {
    set_has_sparse_750_str();
    sparse_750_str_ = sparse_750_str;
  } else {
    clear_has_sparse_750_str();
    sparse_750_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_751_str = 763;
inline bool Database_NoBench::has_sparse_751_str() const {
  return (_has_bits_[23] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_751_str() {
  _has_bits_[23] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_751_str() {
  _has_bits_[23] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_751_str() {
  if (sparse_751_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_751_str_->clear();
  }
  clear_has_sparse_751_str();
}
inline const ::std::string& Database_NoBench::sparse_751_str() const {
  return *sparse_751_str_;
}
inline void Database_NoBench::set_sparse_751_str(const ::std::string& value) {
  set_has_sparse_751_str();
  if (sparse_751_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_751_str_ = new ::std::string;
  }
  sparse_751_str_->assign(value);
}
inline void Database_NoBench::set_sparse_751_str(const char* value) {
  set_has_sparse_751_str();
  if (sparse_751_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_751_str_ = new ::std::string;
  }
  sparse_751_str_->assign(value);
}
inline void Database_NoBench::set_sparse_751_str(const char* value, size_t size) {
  set_has_sparse_751_str();
  if (sparse_751_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_751_str_ = new ::std::string;
  }
  sparse_751_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_751_str() {
  set_has_sparse_751_str();
  if (sparse_751_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_751_str_ = new ::std::string;
  }
  return sparse_751_str_;
}
inline ::std::string* Database_NoBench::release_sparse_751_str() {
  clear_has_sparse_751_str();
  if (sparse_751_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_751_str_;
    sparse_751_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_751_str(::std::string* sparse_751_str) {
  if (sparse_751_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_751_str_;
  }
  if (sparse_751_str) {
    set_has_sparse_751_str();
    sparse_751_str_ = sparse_751_str;
  } else {
    clear_has_sparse_751_str();
    sparse_751_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_752_str = 764;
inline bool Database_NoBench::has_sparse_752_str() const {
  return (_has_bits_[23] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_752_str() {
  _has_bits_[23] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_752_str() {
  _has_bits_[23] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_752_str() {
  if (sparse_752_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_752_str_->clear();
  }
  clear_has_sparse_752_str();
}
inline const ::std::string& Database_NoBench::sparse_752_str() const {
  return *sparse_752_str_;
}
inline void Database_NoBench::set_sparse_752_str(const ::std::string& value) {
  set_has_sparse_752_str();
  if (sparse_752_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_752_str_ = new ::std::string;
  }
  sparse_752_str_->assign(value);
}
inline void Database_NoBench::set_sparse_752_str(const char* value) {
  set_has_sparse_752_str();
  if (sparse_752_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_752_str_ = new ::std::string;
  }
  sparse_752_str_->assign(value);
}
inline void Database_NoBench::set_sparse_752_str(const char* value, size_t size) {
  set_has_sparse_752_str();
  if (sparse_752_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_752_str_ = new ::std::string;
  }
  sparse_752_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_752_str() {
  set_has_sparse_752_str();
  if (sparse_752_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_752_str_ = new ::std::string;
  }
  return sparse_752_str_;
}
inline ::std::string* Database_NoBench::release_sparse_752_str() {
  clear_has_sparse_752_str();
  if (sparse_752_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_752_str_;
    sparse_752_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_752_str(::std::string* sparse_752_str) {
  if (sparse_752_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_752_str_;
  }
  if (sparse_752_str) {
    set_has_sparse_752_str();
    sparse_752_str_ = sparse_752_str;
  } else {
    clear_has_sparse_752_str();
    sparse_752_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_753_str = 765;
inline bool Database_NoBench::has_sparse_753_str() const {
  return (_has_bits_[23] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_753_str() {
  _has_bits_[23] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_753_str() {
  _has_bits_[23] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_753_str() {
  if (sparse_753_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_753_str_->clear();
  }
  clear_has_sparse_753_str();
}
inline const ::std::string& Database_NoBench::sparse_753_str() const {
  return *sparse_753_str_;
}
inline void Database_NoBench::set_sparse_753_str(const ::std::string& value) {
  set_has_sparse_753_str();
  if (sparse_753_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_753_str_ = new ::std::string;
  }
  sparse_753_str_->assign(value);
}
inline void Database_NoBench::set_sparse_753_str(const char* value) {
  set_has_sparse_753_str();
  if (sparse_753_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_753_str_ = new ::std::string;
  }
  sparse_753_str_->assign(value);
}
inline void Database_NoBench::set_sparse_753_str(const char* value, size_t size) {
  set_has_sparse_753_str();
  if (sparse_753_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_753_str_ = new ::std::string;
  }
  sparse_753_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_753_str() {
  set_has_sparse_753_str();
  if (sparse_753_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_753_str_ = new ::std::string;
  }
  return sparse_753_str_;
}
inline ::std::string* Database_NoBench::release_sparse_753_str() {
  clear_has_sparse_753_str();
  if (sparse_753_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_753_str_;
    sparse_753_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_753_str(::std::string* sparse_753_str) {
  if (sparse_753_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_753_str_;
  }
  if (sparse_753_str) {
    set_has_sparse_753_str();
    sparse_753_str_ = sparse_753_str;
  } else {
    clear_has_sparse_753_str();
    sparse_753_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_754_str = 766;
inline bool Database_NoBench::has_sparse_754_str() const {
  return (_has_bits_[23] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_754_str() {
  _has_bits_[23] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_754_str() {
  _has_bits_[23] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_754_str() {
  if (sparse_754_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_754_str_->clear();
  }
  clear_has_sparse_754_str();
}
inline const ::std::string& Database_NoBench::sparse_754_str() const {
  return *sparse_754_str_;
}
inline void Database_NoBench::set_sparse_754_str(const ::std::string& value) {
  set_has_sparse_754_str();
  if (sparse_754_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_754_str_ = new ::std::string;
  }
  sparse_754_str_->assign(value);
}
inline void Database_NoBench::set_sparse_754_str(const char* value) {
  set_has_sparse_754_str();
  if (sparse_754_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_754_str_ = new ::std::string;
  }
  sparse_754_str_->assign(value);
}
inline void Database_NoBench::set_sparse_754_str(const char* value, size_t size) {
  set_has_sparse_754_str();
  if (sparse_754_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_754_str_ = new ::std::string;
  }
  sparse_754_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_754_str() {
  set_has_sparse_754_str();
  if (sparse_754_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_754_str_ = new ::std::string;
  }
  return sparse_754_str_;
}
inline ::std::string* Database_NoBench::release_sparse_754_str() {
  clear_has_sparse_754_str();
  if (sparse_754_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_754_str_;
    sparse_754_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_754_str(::std::string* sparse_754_str) {
  if (sparse_754_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_754_str_;
  }
  if (sparse_754_str) {
    set_has_sparse_754_str();
    sparse_754_str_ = sparse_754_str;
  } else {
    clear_has_sparse_754_str();
    sparse_754_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_755_str = 767;
inline bool Database_NoBench::has_sparse_755_str() const {
  return (_has_bits_[24] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_755_str() {
  _has_bits_[24] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_755_str() {
  _has_bits_[24] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_755_str() {
  if (sparse_755_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_755_str_->clear();
  }
  clear_has_sparse_755_str();
}
inline const ::std::string& Database_NoBench::sparse_755_str() const {
  return *sparse_755_str_;
}
inline void Database_NoBench::set_sparse_755_str(const ::std::string& value) {
  set_has_sparse_755_str();
  if (sparse_755_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_755_str_ = new ::std::string;
  }
  sparse_755_str_->assign(value);
}
inline void Database_NoBench::set_sparse_755_str(const char* value) {
  set_has_sparse_755_str();
  if (sparse_755_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_755_str_ = new ::std::string;
  }
  sparse_755_str_->assign(value);
}
inline void Database_NoBench::set_sparse_755_str(const char* value, size_t size) {
  set_has_sparse_755_str();
  if (sparse_755_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_755_str_ = new ::std::string;
  }
  sparse_755_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_755_str() {
  set_has_sparse_755_str();
  if (sparse_755_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_755_str_ = new ::std::string;
  }
  return sparse_755_str_;
}
inline ::std::string* Database_NoBench::release_sparse_755_str() {
  clear_has_sparse_755_str();
  if (sparse_755_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_755_str_;
    sparse_755_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_755_str(::std::string* sparse_755_str) {
  if (sparse_755_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_755_str_;
  }
  if (sparse_755_str) {
    set_has_sparse_755_str();
    sparse_755_str_ = sparse_755_str;
  } else {
    clear_has_sparse_755_str();
    sparse_755_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_756_str = 768;
inline bool Database_NoBench::has_sparse_756_str() const {
  return (_has_bits_[24] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_756_str() {
  _has_bits_[24] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_756_str() {
  _has_bits_[24] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_756_str() {
  if (sparse_756_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_756_str_->clear();
  }
  clear_has_sparse_756_str();
}
inline const ::std::string& Database_NoBench::sparse_756_str() const {
  return *sparse_756_str_;
}
inline void Database_NoBench::set_sparse_756_str(const ::std::string& value) {
  set_has_sparse_756_str();
  if (sparse_756_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_756_str_ = new ::std::string;
  }
  sparse_756_str_->assign(value);
}
inline void Database_NoBench::set_sparse_756_str(const char* value) {
  set_has_sparse_756_str();
  if (sparse_756_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_756_str_ = new ::std::string;
  }
  sparse_756_str_->assign(value);
}
inline void Database_NoBench::set_sparse_756_str(const char* value, size_t size) {
  set_has_sparse_756_str();
  if (sparse_756_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_756_str_ = new ::std::string;
  }
  sparse_756_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_756_str() {
  set_has_sparse_756_str();
  if (sparse_756_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_756_str_ = new ::std::string;
  }
  return sparse_756_str_;
}
inline ::std::string* Database_NoBench::release_sparse_756_str() {
  clear_has_sparse_756_str();
  if (sparse_756_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_756_str_;
    sparse_756_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_756_str(::std::string* sparse_756_str) {
  if (sparse_756_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_756_str_;
  }
  if (sparse_756_str) {
    set_has_sparse_756_str();
    sparse_756_str_ = sparse_756_str;
  } else {
    clear_has_sparse_756_str();
    sparse_756_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_757_str = 769;
inline bool Database_NoBench::has_sparse_757_str() const {
  return (_has_bits_[24] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_757_str() {
  _has_bits_[24] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_757_str() {
  _has_bits_[24] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_757_str() {
  if (sparse_757_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_757_str_->clear();
  }
  clear_has_sparse_757_str();
}
inline const ::std::string& Database_NoBench::sparse_757_str() const {
  return *sparse_757_str_;
}
inline void Database_NoBench::set_sparse_757_str(const ::std::string& value) {
  set_has_sparse_757_str();
  if (sparse_757_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_757_str_ = new ::std::string;
  }
  sparse_757_str_->assign(value);
}
inline void Database_NoBench::set_sparse_757_str(const char* value) {
  set_has_sparse_757_str();
  if (sparse_757_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_757_str_ = new ::std::string;
  }
  sparse_757_str_->assign(value);
}
inline void Database_NoBench::set_sparse_757_str(const char* value, size_t size) {
  set_has_sparse_757_str();
  if (sparse_757_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_757_str_ = new ::std::string;
  }
  sparse_757_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_757_str() {
  set_has_sparse_757_str();
  if (sparse_757_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_757_str_ = new ::std::string;
  }
  return sparse_757_str_;
}
inline ::std::string* Database_NoBench::release_sparse_757_str() {
  clear_has_sparse_757_str();
  if (sparse_757_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_757_str_;
    sparse_757_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_757_str(::std::string* sparse_757_str) {
  if (sparse_757_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_757_str_;
  }
  if (sparse_757_str) {
    set_has_sparse_757_str();
    sparse_757_str_ = sparse_757_str;
  } else {
    clear_has_sparse_757_str();
    sparse_757_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_758_str = 770;
inline bool Database_NoBench::has_sparse_758_str() const {
  return (_has_bits_[24] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_758_str() {
  _has_bits_[24] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_758_str() {
  _has_bits_[24] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_758_str() {
  if (sparse_758_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_758_str_->clear();
  }
  clear_has_sparse_758_str();
}
inline const ::std::string& Database_NoBench::sparse_758_str() const {
  return *sparse_758_str_;
}
inline void Database_NoBench::set_sparse_758_str(const ::std::string& value) {
  set_has_sparse_758_str();
  if (sparse_758_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_758_str_ = new ::std::string;
  }
  sparse_758_str_->assign(value);
}
inline void Database_NoBench::set_sparse_758_str(const char* value) {
  set_has_sparse_758_str();
  if (sparse_758_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_758_str_ = new ::std::string;
  }
  sparse_758_str_->assign(value);
}
inline void Database_NoBench::set_sparse_758_str(const char* value, size_t size) {
  set_has_sparse_758_str();
  if (sparse_758_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_758_str_ = new ::std::string;
  }
  sparse_758_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_758_str() {
  set_has_sparse_758_str();
  if (sparse_758_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_758_str_ = new ::std::string;
  }
  return sparse_758_str_;
}
inline ::std::string* Database_NoBench::release_sparse_758_str() {
  clear_has_sparse_758_str();
  if (sparse_758_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_758_str_;
    sparse_758_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_758_str(::std::string* sparse_758_str) {
  if (sparse_758_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_758_str_;
  }
  if (sparse_758_str) {
    set_has_sparse_758_str();
    sparse_758_str_ = sparse_758_str;
  } else {
    clear_has_sparse_758_str();
    sparse_758_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_759_str = 771;
inline bool Database_NoBench::has_sparse_759_str() const {
  return (_has_bits_[24] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_759_str() {
  _has_bits_[24] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_759_str() {
  _has_bits_[24] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_759_str() {
  if (sparse_759_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_759_str_->clear();
  }
  clear_has_sparse_759_str();
}
inline const ::std::string& Database_NoBench::sparse_759_str() const {
  return *sparse_759_str_;
}
inline void Database_NoBench::set_sparse_759_str(const ::std::string& value) {
  set_has_sparse_759_str();
  if (sparse_759_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_759_str_ = new ::std::string;
  }
  sparse_759_str_->assign(value);
}
inline void Database_NoBench::set_sparse_759_str(const char* value) {
  set_has_sparse_759_str();
  if (sparse_759_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_759_str_ = new ::std::string;
  }
  sparse_759_str_->assign(value);
}
inline void Database_NoBench::set_sparse_759_str(const char* value, size_t size) {
  set_has_sparse_759_str();
  if (sparse_759_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_759_str_ = new ::std::string;
  }
  sparse_759_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_759_str() {
  set_has_sparse_759_str();
  if (sparse_759_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_759_str_ = new ::std::string;
  }
  return sparse_759_str_;
}
inline ::std::string* Database_NoBench::release_sparse_759_str() {
  clear_has_sparse_759_str();
  if (sparse_759_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_759_str_;
    sparse_759_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_759_str(::std::string* sparse_759_str) {
  if (sparse_759_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_759_str_;
  }
  if (sparse_759_str) {
    set_has_sparse_759_str();
    sparse_759_str_ = sparse_759_str;
  } else {
    clear_has_sparse_759_str();
    sparse_759_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_760_str = 772;
inline bool Database_NoBench::has_sparse_760_str() const {
  return (_has_bits_[24] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_760_str() {
  _has_bits_[24] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_760_str() {
  _has_bits_[24] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_760_str() {
  if (sparse_760_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_760_str_->clear();
  }
  clear_has_sparse_760_str();
}
inline const ::std::string& Database_NoBench::sparse_760_str() const {
  return *sparse_760_str_;
}
inline void Database_NoBench::set_sparse_760_str(const ::std::string& value) {
  set_has_sparse_760_str();
  if (sparse_760_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_760_str_ = new ::std::string;
  }
  sparse_760_str_->assign(value);
}
inline void Database_NoBench::set_sparse_760_str(const char* value) {
  set_has_sparse_760_str();
  if (sparse_760_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_760_str_ = new ::std::string;
  }
  sparse_760_str_->assign(value);
}
inline void Database_NoBench::set_sparse_760_str(const char* value, size_t size) {
  set_has_sparse_760_str();
  if (sparse_760_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_760_str_ = new ::std::string;
  }
  sparse_760_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_760_str() {
  set_has_sparse_760_str();
  if (sparse_760_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_760_str_ = new ::std::string;
  }
  return sparse_760_str_;
}
inline ::std::string* Database_NoBench::release_sparse_760_str() {
  clear_has_sparse_760_str();
  if (sparse_760_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_760_str_;
    sparse_760_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_760_str(::std::string* sparse_760_str) {
  if (sparse_760_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_760_str_;
  }
  if (sparse_760_str) {
    set_has_sparse_760_str();
    sparse_760_str_ = sparse_760_str;
  } else {
    clear_has_sparse_760_str();
    sparse_760_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_761_str = 773;
inline bool Database_NoBench::has_sparse_761_str() const {
  return (_has_bits_[24] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_761_str() {
  _has_bits_[24] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_761_str() {
  _has_bits_[24] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_761_str() {
  if (sparse_761_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_761_str_->clear();
  }
  clear_has_sparse_761_str();
}
inline const ::std::string& Database_NoBench::sparse_761_str() const {
  return *sparse_761_str_;
}
inline void Database_NoBench::set_sparse_761_str(const ::std::string& value) {
  set_has_sparse_761_str();
  if (sparse_761_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_761_str_ = new ::std::string;
  }
  sparse_761_str_->assign(value);
}
inline void Database_NoBench::set_sparse_761_str(const char* value) {
  set_has_sparse_761_str();
  if (sparse_761_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_761_str_ = new ::std::string;
  }
  sparse_761_str_->assign(value);
}
inline void Database_NoBench::set_sparse_761_str(const char* value, size_t size) {
  set_has_sparse_761_str();
  if (sparse_761_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_761_str_ = new ::std::string;
  }
  sparse_761_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_761_str() {
  set_has_sparse_761_str();
  if (sparse_761_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_761_str_ = new ::std::string;
  }
  return sparse_761_str_;
}
inline ::std::string* Database_NoBench::release_sparse_761_str() {
  clear_has_sparse_761_str();
  if (sparse_761_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_761_str_;
    sparse_761_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_761_str(::std::string* sparse_761_str) {
  if (sparse_761_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_761_str_;
  }
  if (sparse_761_str) {
    set_has_sparse_761_str();
    sparse_761_str_ = sparse_761_str;
  } else {
    clear_has_sparse_761_str();
    sparse_761_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_762_str = 774;
inline bool Database_NoBench::has_sparse_762_str() const {
  return (_has_bits_[24] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_762_str() {
  _has_bits_[24] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_762_str() {
  _has_bits_[24] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_762_str() {
  if (sparse_762_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_762_str_->clear();
  }
  clear_has_sparse_762_str();
}
inline const ::std::string& Database_NoBench::sparse_762_str() const {
  return *sparse_762_str_;
}
inline void Database_NoBench::set_sparse_762_str(const ::std::string& value) {
  set_has_sparse_762_str();
  if (sparse_762_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_762_str_ = new ::std::string;
  }
  sparse_762_str_->assign(value);
}
inline void Database_NoBench::set_sparse_762_str(const char* value) {
  set_has_sparse_762_str();
  if (sparse_762_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_762_str_ = new ::std::string;
  }
  sparse_762_str_->assign(value);
}
inline void Database_NoBench::set_sparse_762_str(const char* value, size_t size) {
  set_has_sparse_762_str();
  if (sparse_762_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_762_str_ = new ::std::string;
  }
  sparse_762_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_762_str() {
  set_has_sparse_762_str();
  if (sparse_762_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_762_str_ = new ::std::string;
  }
  return sparse_762_str_;
}
inline ::std::string* Database_NoBench::release_sparse_762_str() {
  clear_has_sparse_762_str();
  if (sparse_762_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_762_str_;
    sparse_762_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_762_str(::std::string* sparse_762_str) {
  if (sparse_762_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_762_str_;
  }
  if (sparse_762_str) {
    set_has_sparse_762_str();
    sparse_762_str_ = sparse_762_str;
  } else {
    clear_has_sparse_762_str();
    sparse_762_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_763_str = 775;
inline bool Database_NoBench::has_sparse_763_str() const {
  return (_has_bits_[24] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_763_str() {
  _has_bits_[24] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_763_str() {
  _has_bits_[24] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_763_str() {
  if (sparse_763_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_763_str_->clear();
  }
  clear_has_sparse_763_str();
}
inline const ::std::string& Database_NoBench::sparse_763_str() const {
  return *sparse_763_str_;
}
inline void Database_NoBench::set_sparse_763_str(const ::std::string& value) {
  set_has_sparse_763_str();
  if (sparse_763_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_763_str_ = new ::std::string;
  }
  sparse_763_str_->assign(value);
}
inline void Database_NoBench::set_sparse_763_str(const char* value) {
  set_has_sparse_763_str();
  if (sparse_763_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_763_str_ = new ::std::string;
  }
  sparse_763_str_->assign(value);
}
inline void Database_NoBench::set_sparse_763_str(const char* value, size_t size) {
  set_has_sparse_763_str();
  if (sparse_763_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_763_str_ = new ::std::string;
  }
  sparse_763_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_763_str() {
  set_has_sparse_763_str();
  if (sparse_763_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_763_str_ = new ::std::string;
  }
  return sparse_763_str_;
}
inline ::std::string* Database_NoBench::release_sparse_763_str() {
  clear_has_sparse_763_str();
  if (sparse_763_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_763_str_;
    sparse_763_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_763_str(::std::string* sparse_763_str) {
  if (sparse_763_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_763_str_;
  }
  if (sparse_763_str) {
    set_has_sparse_763_str();
    sparse_763_str_ = sparse_763_str;
  } else {
    clear_has_sparse_763_str();
    sparse_763_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_764_str = 776;
inline bool Database_NoBench::has_sparse_764_str() const {
  return (_has_bits_[24] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_764_str() {
  _has_bits_[24] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_764_str() {
  _has_bits_[24] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_764_str() {
  if (sparse_764_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_764_str_->clear();
  }
  clear_has_sparse_764_str();
}
inline const ::std::string& Database_NoBench::sparse_764_str() const {
  return *sparse_764_str_;
}
inline void Database_NoBench::set_sparse_764_str(const ::std::string& value) {
  set_has_sparse_764_str();
  if (sparse_764_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_764_str_ = new ::std::string;
  }
  sparse_764_str_->assign(value);
}
inline void Database_NoBench::set_sparse_764_str(const char* value) {
  set_has_sparse_764_str();
  if (sparse_764_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_764_str_ = new ::std::string;
  }
  sparse_764_str_->assign(value);
}
inline void Database_NoBench::set_sparse_764_str(const char* value, size_t size) {
  set_has_sparse_764_str();
  if (sparse_764_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_764_str_ = new ::std::string;
  }
  sparse_764_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_764_str() {
  set_has_sparse_764_str();
  if (sparse_764_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_764_str_ = new ::std::string;
  }
  return sparse_764_str_;
}
inline ::std::string* Database_NoBench::release_sparse_764_str() {
  clear_has_sparse_764_str();
  if (sparse_764_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_764_str_;
    sparse_764_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_764_str(::std::string* sparse_764_str) {
  if (sparse_764_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_764_str_;
  }
  if (sparse_764_str) {
    set_has_sparse_764_str();
    sparse_764_str_ = sparse_764_str;
  } else {
    clear_has_sparse_764_str();
    sparse_764_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_765_str = 777;
inline bool Database_NoBench::has_sparse_765_str() const {
  return (_has_bits_[24] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_765_str() {
  _has_bits_[24] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_765_str() {
  _has_bits_[24] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_765_str() {
  if (sparse_765_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_765_str_->clear();
  }
  clear_has_sparse_765_str();
}
inline const ::std::string& Database_NoBench::sparse_765_str() const {
  return *sparse_765_str_;
}
inline void Database_NoBench::set_sparse_765_str(const ::std::string& value) {
  set_has_sparse_765_str();
  if (sparse_765_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_765_str_ = new ::std::string;
  }
  sparse_765_str_->assign(value);
}
inline void Database_NoBench::set_sparse_765_str(const char* value) {
  set_has_sparse_765_str();
  if (sparse_765_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_765_str_ = new ::std::string;
  }
  sparse_765_str_->assign(value);
}
inline void Database_NoBench::set_sparse_765_str(const char* value, size_t size) {
  set_has_sparse_765_str();
  if (sparse_765_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_765_str_ = new ::std::string;
  }
  sparse_765_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_765_str() {
  set_has_sparse_765_str();
  if (sparse_765_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_765_str_ = new ::std::string;
  }
  return sparse_765_str_;
}
inline ::std::string* Database_NoBench::release_sparse_765_str() {
  clear_has_sparse_765_str();
  if (sparse_765_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_765_str_;
    sparse_765_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_765_str(::std::string* sparse_765_str) {
  if (sparse_765_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_765_str_;
  }
  if (sparse_765_str) {
    set_has_sparse_765_str();
    sparse_765_str_ = sparse_765_str;
  } else {
    clear_has_sparse_765_str();
    sparse_765_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_766_str = 778;
inline bool Database_NoBench::has_sparse_766_str() const {
  return (_has_bits_[24] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_766_str() {
  _has_bits_[24] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_766_str() {
  _has_bits_[24] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_766_str() {
  if (sparse_766_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_766_str_->clear();
  }
  clear_has_sparse_766_str();
}
inline const ::std::string& Database_NoBench::sparse_766_str() const {
  return *sparse_766_str_;
}
inline void Database_NoBench::set_sparse_766_str(const ::std::string& value) {
  set_has_sparse_766_str();
  if (sparse_766_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_766_str_ = new ::std::string;
  }
  sparse_766_str_->assign(value);
}
inline void Database_NoBench::set_sparse_766_str(const char* value) {
  set_has_sparse_766_str();
  if (sparse_766_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_766_str_ = new ::std::string;
  }
  sparse_766_str_->assign(value);
}
inline void Database_NoBench::set_sparse_766_str(const char* value, size_t size) {
  set_has_sparse_766_str();
  if (sparse_766_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_766_str_ = new ::std::string;
  }
  sparse_766_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_766_str() {
  set_has_sparse_766_str();
  if (sparse_766_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_766_str_ = new ::std::string;
  }
  return sparse_766_str_;
}
inline ::std::string* Database_NoBench::release_sparse_766_str() {
  clear_has_sparse_766_str();
  if (sparse_766_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_766_str_;
    sparse_766_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_766_str(::std::string* sparse_766_str) {
  if (sparse_766_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_766_str_;
  }
  if (sparse_766_str) {
    set_has_sparse_766_str();
    sparse_766_str_ = sparse_766_str;
  } else {
    clear_has_sparse_766_str();
    sparse_766_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_767_str = 779;
inline bool Database_NoBench::has_sparse_767_str() const {
  return (_has_bits_[24] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_767_str() {
  _has_bits_[24] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_767_str() {
  _has_bits_[24] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_767_str() {
  if (sparse_767_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_767_str_->clear();
  }
  clear_has_sparse_767_str();
}
inline const ::std::string& Database_NoBench::sparse_767_str() const {
  return *sparse_767_str_;
}
inline void Database_NoBench::set_sparse_767_str(const ::std::string& value) {
  set_has_sparse_767_str();
  if (sparse_767_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_767_str_ = new ::std::string;
  }
  sparse_767_str_->assign(value);
}
inline void Database_NoBench::set_sparse_767_str(const char* value) {
  set_has_sparse_767_str();
  if (sparse_767_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_767_str_ = new ::std::string;
  }
  sparse_767_str_->assign(value);
}
inline void Database_NoBench::set_sparse_767_str(const char* value, size_t size) {
  set_has_sparse_767_str();
  if (sparse_767_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_767_str_ = new ::std::string;
  }
  sparse_767_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_767_str() {
  set_has_sparse_767_str();
  if (sparse_767_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_767_str_ = new ::std::string;
  }
  return sparse_767_str_;
}
inline ::std::string* Database_NoBench::release_sparse_767_str() {
  clear_has_sparse_767_str();
  if (sparse_767_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_767_str_;
    sparse_767_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_767_str(::std::string* sparse_767_str) {
  if (sparse_767_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_767_str_;
  }
  if (sparse_767_str) {
    set_has_sparse_767_str();
    sparse_767_str_ = sparse_767_str;
  } else {
    clear_has_sparse_767_str();
    sparse_767_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_768_str = 780;
inline bool Database_NoBench::has_sparse_768_str() const {
  return (_has_bits_[24] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_768_str() {
  _has_bits_[24] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_768_str() {
  _has_bits_[24] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_768_str() {
  if (sparse_768_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_768_str_->clear();
  }
  clear_has_sparse_768_str();
}
inline const ::std::string& Database_NoBench::sparse_768_str() const {
  return *sparse_768_str_;
}
inline void Database_NoBench::set_sparse_768_str(const ::std::string& value) {
  set_has_sparse_768_str();
  if (sparse_768_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_768_str_ = new ::std::string;
  }
  sparse_768_str_->assign(value);
}
inline void Database_NoBench::set_sparse_768_str(const char* value) {
  set_has_sparse_768_str();
  if (sparse_768_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_768_str_ = new ::std::string;
  }
  sparse_768_str_->assign(value);
}
inline void Database_NoBench::set_sparse_768_str(const char* value, size_t size) {
  set_has_sparse_768_str();
  if (sparse_768_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_768_str_ = new ::std::string;
  }
  sparse_768_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_768_str() {
  set_has_sparse_768_str();
  if (sparse_768_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_768_str_ = new ::std::string;
  }
  return sparse_768_str_;
}
inline ::std::string* Database_NoBench::release_sparse_768_str() {
  clear_has_sparse_768_str();
  if (sparse_768_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_768_str_;
    sparse_768_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_768_str(::std::string* sparse_768_str) {
  if (sparse_768_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_768_str_;
  }
  if (sparse_768_str) {
    set_has_sparse_768_str();
    sparse_768_str_ = sparse_768_str;
  } else {
    clear_has_sparse_768_str();
    sparse_768_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_769_str = 781;
inline bool Database_NoBench::has_sparse_769_str() const {
  return (_has_bits_[24] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_769_str() {
  _has_bits_[24] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_769_str() {
  _has_bits_[24] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_769_str() {
  if (sparse_769_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_769_str_->clear();
  }
  clear_has_sparse_769_str();
}
inline const ::std::string& Database_NoBench::sparse_769_str() const {
  return *sparse_769_str_;
}
inline void Database_NoBench::set_sparse_769_str(const ::std::string& value) {
  set_has_sparse_769_str();
  if (sparse_769_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_769_str_ = new ::std::string;
  }
  sparse_769_str_->assign(value);
}
inline void Database_NoBench::set_sparse_769_str(const char* value) {
  set_has_sparse_769_str();
  if (sparse_769_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_769_str_ = new ::std::string;
  }
  sparse_769_str_->assign(value);
}
inline void Database_NoBench::set_sparse_769_str(const char* value, size_t size) {
  set_has_sparse_769_str();
  if (sparse_769_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_769_str_ = new ::std::string;
  }
  sparse_769_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_769_str() {
  set_has_sparse_769_str();
  if (sparse_769_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_769_str_ = new ::std::string;
  }
  return sparse_769_str_;
}
inline ::std::string* Database_NoBench::release_sparse_769_str() {
  clear_has_sparse_769_str();
  if (sparse_769_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_769_str_;
    sparse_769_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_769_str(::std::string* sparse_769_str) {
  if (sparse_769_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_769_str_;
  }
  if (sparse_769_str) {
    set_has_sparse_769_str();
    sparse_769_str_ = sparse_769_str;
  } else {
    clear_has_sparse_769_str();
    sparse_769_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_770_str = 782;
inline bool Database_NoBench::has_sparse_770_str() const {
  return (_has_bits_[24] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_770_str() {
  _has_bits_[24] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_770_str() {
  _has_bits_[24] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_770_str() {
  if (sparse_770_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_770_str_->clear();
  }
  clear_has_sparse_770_str();
}
inline const ::std::string& Database_NoBench::sparse_770_str() const {
  return *sparse_770_str_;
}
inline void Database_NoBench::set_sparse_770_str(const ::std::string& value) {
  set_has_sparse_770_str();
  if (sparse_770_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_770_str_ = new ::std::string;
  }
  sparse_770_str_->assign(value);
}
inline void Database_NoBench::set_sparse_770_str(const char* value) {
  set_has_sparse_770_str();
  if (sparse_770_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_770_str_ = new ::std::string;
  }
  sparse_770_str_->assign(value);
}
inline void Database_NoBench::set_sparse_770_str(const char* value, size_t size) {
  set_has_sparse_770_str();
  if (sparse_770_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_770_str_ = new ::std::string;
  }
  sparse_770_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_770_str() {
  set_has_sparse_770_str();
  if (sparse_770_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_770_str_ = new ::std::string;
  }
  return sparse_770_str_;
}
inline ::std::string* Database_NoBench::release_sparse_770_str() {
  clear_has_sparse_770_str();
  if (sparse_770_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_770_str_;
    sparse_770_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_770_str(::std::string* sparse_770_str) {
  if (sparse_770_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_770_str_;
  }
  if (sparse_770_str) {
    set_has_sparse_770_str();
    sparse_770_str_ = sparse_770_str;
  } else {
    clear_has_sparse_770_str();
    sparse_770_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_771_str = 783;
inline bool Database_NoBench::has_sparse_771_str() const {
  return (_has_bits_[24] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_771_str() {
  _has_bits_[24] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_771_str() {
  _has_bits_[24] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_771_str() {
  if (sparse_771_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_771_str_->clear();
  }
  clear_has_sparse_771_str();
}
inline const ::std::string& Database_NoBench::sparse_771_str() const {
  return *sparse_771_str_;
}
inline void Database_NoBench::set_sparse_771_str(const ::std::string& value) {
  set_has_sparse_771_str();
  if (sparse_771_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_771_str_ = new ::std::string;
  }
  sparse_771_str_->assign(value);
}
inline void Database_NoBench::set_sparse_771_str(const char* value) {
  set_has_sparse_771_str();
  if (sparse_771_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_771_str_ = new ::std::string;
  }
  sparse_771_str_->assign(value);
}
inline void Database_NoBench::set_sparse_771_str(const char* value, size_t size) {
  set_has_sparse_771_str();
  if (sparse_771_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_771_str_ = new ::std::string;
  }
  sparse_771_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_771_str() {
  set_has_sparse_771_str();
  if (sparse_771_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_771_str_ = new ::std::string;
  }
  return sparse_771_str_;
}
inline ::std::string* Database_NoBench::release_sparse_771_str() {
  clear_has_sparse_771_str();
  if (sparse_771_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_771_str_;
    sparse_771_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_771_str(::std::string* sparse_771_str) {
  if (sparse_771_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_771_str_;
  }
  if (sparse_771_str) {
    set_has_sparse_771_str();
    sparse_771_str_ = sparse_771_str;
  } else {
    clear_has_sparse_771_str();
    sparse_771_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_772_str = 784;
inline bool Database_NoBench::has_sparse_772_str() const {
  return (_has_bits_[24] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_772_str() {
  _has_bits_[24] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_772_str() {
  _has_bits_[24] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_772_str() {
  if (sparse_772_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_772_str_->clear();
  }
  clear_has_sparse_772_str();
}
inline const ::std::string& Database_NoBench::sparse_772_str() const {
  return *sparse_772_str_;
}
inline void Database_NoBench::set_sparse_772_str(const ::std::string& value) {
  set_has_sparse_772_str();
  if (sparse_772_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_772_str_ = new ::std::string;
  }
  sparse_772_str_->assign(value);
}
inline void Database_NoBench::set_sparse_772_str(const char* value) {
  set_has_sparse_772_str();
  if (sparse_772_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_772_str_ = new ::std::string;
  }
  sparse_772_str_->assign(value);
}
inline void Database_NoBench::set_sparse_772_str(const char* value, size_t size) {
  set_has_sparse_772_str();
  if (sparse_772_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_772_str_ = new ::std::string;
  }
  sparse_772_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_772_str() {
  set_has_sparse_772_str();
  if (sparse_772_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_772_str_ = new ::std::string;
  }
  return sparse_772_str_;
}
inline ::std::string* Database_NoBench::release_sparse_772_str() {
  clear_has_sparse_772_str();
  if (sparse_772_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_772_str_;
    sparse_772_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_772_str(::std::string* sparse_772_str) {
  if (sparse_772_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_772_str_;
  }
  if (sparse_772_str) {
    set_has_sparse_772_str();
    sparse_772_str_ = sparse_772_str;
  } else {
    clear_has_sparse_772_str();
    sparse_772_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_773_str = 785;
inline bool Database_NoBench::has_sparse_773_str() const {
  return (_has_bits_[24] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_773_str() {
  _has_bits_[24] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_773_str() {
  _has_bits_[24] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_773_str() {
  if (sparse_773_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_773_str_->clear();
  }
  clear_has_sparse_773_str();
}
inline const ::std::string& Database_NoBench::sparse_773_str() const {
  return *sparse_773_str_;
}
inline void Database_NoBench::set_sparse_773_str(const ::std::string& value) {
  set_has_sparse_773_str();
  if (sparse_773_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_773_str_ = new ::std::string;
  }
  sparse_773_str_->assign(value);
}
inline void Database_NoBench::set_sparse_773_str(const char* value) {
  set_has_sparse_773_str();
  if (sparse_773_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_773_str_ = new ::std::string;
  }
  sparse_773_str_->assign(value);
}
inline void Database_NoBench::set_sparse_773_str(const char* value, size_t size) {
  set_has_sparse_773_str();
  if (sparse_773_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_773_str_ = new ::std::string;
  }
  sparse_773_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_773_str() {
  set_has_sparse_773_str();
  if (sparse_773_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_773_str_ = new ::std::string;
  }
  return sparse_773_str_;
}
inline ::std::string* Database_NoBench::release_sparse_773_str() {
  clear_has_sparse_773_str();
  if (sparse_773_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_773_str_;
    sparse_773_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_773_str(::std::string* sparse_773_str) {
  if (sparse_773_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_773_str_;
  }
  if (sparse_773_str) {
    set_has_sparse_773_str();
    sparse_773_str_ = sparse_773_str;
  } else {
    clear_has_sparse_773_str();
    sparse_773_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_774_str = 786;
inline bool Database_NoBench::has_sparse_774_str() const {
  return (_has_bits_[24] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_774_str() {
  _has_bits_[24] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_774_str() {
  _has_bits_[24] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_774_str() {
  if (sparse_774_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_774_str_->clear();
  }
  clear_has_sparse_774_str();
}
inline const ::std::string& Database_NoBench::sparse_774_str() const {
  return *sparse_774_str_;
}
inline void Database_NoBench::set_sparse_774_str(const ::std::string& value) {
  set_has_sparse_774_str();
  if (sparse_774_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_774_str_ = new ::std::string;
  }
  sparse_774_str_->assign(value);
}
inline void Database_NoBench::set_sparse_774_str(const char* value) {
  set_has_sparse_774_str();
  if (sparse_774_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_774_str_ = new ::std::string;
  }
  sparse_774_str_->assign(value);
}
inline void Database_NoBench::set_sparse_774_str(const char* value, size_t size) {
  set_has_sparse_774_str();
  if (sparse_774_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_774_str_ = new ::std::string;
  }
  sparse_774_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_774_str() {
  set_has_sparse_774_str();
  if (sparse_774_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_774_str_ = new ::std::string;
  }
  return sparse_774_str_;
}
inline ::std::string* Database_NoBench::release_sparse_774_str() {
  clear_has_sparse_774_str();
  if (sparse_774_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_774_str_;
    sparse_774_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_774_str(::std::string* sparse_774_str) {
  if (sparse_774_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_774_str_;
  }
  if (sparse_774_str) {
    set_has_sparse_774_str();
    sparse_774_str_ = sparse_774_str;
  } else {
    clear_has_sparse_774_str();
    sparse_774_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_775_str = 787;
inline bool Database_NoBench::has_sparse_775_str() const {
  return (_has_bits_[24] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_775_str() {
  _has_bits_[24] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_775_str() {
  _has_bits_[24] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_775_str() {
  if (sparse_775_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_775_str_->clear();
  }
  clear_has_sparse_775_str();
}
inline const ::std::string& Database_NoBench::sparse_775_str() const {
  return *sparse_775_str_;
}
inline void Database_NoBench::set_sparse_775_str(const ::std::string& value) {
  set_has_sparse_775_str();
  if (sparse_775_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_775_str_ = new ::std::string;
  }
  sparse_775_str_->assign(value);
}
inline void Database_NoBench::set_sparse_775_str(const char* value) {
  set_has_sparse_775_str();
  if (sparse_775_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_775_str_ = new ::std::string;
  }
  sparse_775_str_->assign(value);
}
inline void Database_NoBench::set_sparse_775_str(const char* value, size_t size) {
  set_has_sparse_775_str();
  if (sparse_775_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_775_str_ = new ::std::string;
  }
  sparse_775_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_775_str() {
  set_has_sparse_775_str();
  if (sparse_775_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_775_str_ = new ::std::string;
  }
  return sparse_775_str_;
}
inline ::std::string* Database_NoBench::release_sparse_775_str() {
  clear_has_sparse_775_str();
  if (sparse_775_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_775_str_;
    sparse_775_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_775_str(::std::string* sparse_775_str) {
  if (sparse_775_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_775_str_;
  }
  if (sparse_775_str) {
    set_has_sparse_775_str();
    sparse_775_str_ = sparse_775_str;
  } else {
    clear_has_sparse_775_str();
    sparse_775_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_776_str = 788;
inline bool Database_NoBench::has_sparse_776_str() const {
  return (_has_bits_[24] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_776_str() {
  _has_bits_[24] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_776_str() {
  _has_bits_[24] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_776_str() {
  if (sparse_776_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_776_str_->clear();
  }
  clear_has_sparse_776_str();
}
inline const ::std::string& Database_NoBench::sparse_776_str() const {
  return *sparse_776_str_;
}
inline void Database_NoBench::set_sparse_776_str(const ::std::string& value) {
  set_has_sparse_776_str();
  if (sparse_776_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_776_str_ = new ::std::string;
  }
  sparse_776_str_->assign(value);
}
inline void Database_NoBench::set_sparse_776_str(const char* value) {
  set_has_sparse_776_str();
  if (sparse_776_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_776_str_ = new ::std::string;
  }
  sparse_776_str_->assign(value);
}
inline void Database_NoBench::set_sparse_776_str(const char* value, size_t size) {
  set_has_sparse_776_str();
  if (sparse_776_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_776_str_ = new ::std::string;
  }
  sparse_776_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_776_str() {
  set_has_sparse_776_str();
  if (sparse_776_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_776_str_ = new ::std::string;
  }
  return sparse_776_str_;
}
inline ::std::string* Database_NoBench::release_sparse_776_str() {
  clear_has_sparse_776_str();
  if (sparse_776_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_776_str_;
    sparse_776_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_776_str(::std::string* sparse_776_str) {
  if (sparse_776_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_776_str_;
  }
  if (sparse_776_str) {
    set_has_sparse_776_str();
    sparse_776_str_ = sparse_776_str;
  } else {
    clear_has_sparse_776_str();
    sparse_776_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_777_str = 789;
inline bool Database_NoBench::has_sparse_777_str() const {
  return (_has_bits_[24] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_777_str() {
  _has_bits_[24] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_777_str() {
  _has_bits_[24] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_777_str() {
  if (sparse_777_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_777_str_->clear();
  }
  clear_has_sparse_777_str();
}
inline const ::std::string& Database_NoBench::sparse_777_str() const {
  return *sparse_777_str_;
}
inline void Database_NoBench::set_sparse_777_str(const ::std::string& value) {
  set_has_sparse_777_str();
  if (sparse_777_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_777_str_ = new ::std::string;
  }
  sparse_777_str_->assign(value);
}
inline void Database_NoBench::set_sparse_777_str(const char* value) {
  set_has_sparse_777_str();
  if (sparse_777_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_777_str_ = new ::std::string;
  }
  sparse_777_str_->assign(value);
}
inline void Database_NoBench::set_sparse_777_str(const char* value, size_t size) {
  set_has_sparse_777_str();
  if (sparse_777_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_777_str_ = new ::std::string;
  }
  sparse_777_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_777_str() {
  set_has_sparse_777_str();
  if (sparse_777_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_777_str_ = new ::std::string;
  }
  return sparse_777_str_;
}
inline ::std::string* Database_NoBench::release_sparse_777_str() {
  clear_has_sparse_777_str();
  if (sparse_777_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_777_str_;
    sparse_777_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_777_str(::std::string* sparse_777_str) {
  if (sparse_777_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_777_str_;
  }
  if (sparse_777_str) {
    set_has_sparse_777_str();
    sparse_777_str_ = sparse_777_str;
  } else {
    clear_has_sparse_777_str();
    sparse_777_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_778_str = 790;
inline bool Database_NoBench::has_sparse_778_str() const {
  return (_has_bits_[24] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_778_str() {
  _has_bits_[24] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_778_str() {
  _has_bits_[24] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_778_str() {
  if (sparse_778_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_778_str_->clear();
  }
  clear_has_sparse_778_str();
}
inline const ::std::string& Database_NoBench::sparse_778_str() const {
  return *sparse_778_str_;
}
inline void Database_NoBench::set_sparse_778_str(const ::std::string& value) {
  set_has_sparse_778_str();
  if (sparse_778_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_778_str_ = new ::std::string;
  }
  sparse_778_str_->assign(value);
}
inline void Database_NoBench::set_sparse_778_str(const char* value) {
  set_has_sparse_778_str();
  if (sparse_778_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_778_str_ = new ::std::string;
  }
  sparse_778_str_->assign(value);
}
inline void Database_NoBench::set_sparse_778_str(const char* value, size_t size) {
  set_has_sparse_778_str();
  if (sparse_778_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_778_str_ = new ::std::string;
  }
  sparse_778_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_778_str() {
  set_has_sparse_778_str();
  if (sparse_778_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_778_str_ = new ::std::string;
  }
  return sparse_778_str_;
}
inline ::std::string* Database_NoBench::release_sparse_778_str() {
  clear_has_sparse_778_str();
  if (sparse_778_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_778_str_;
    sparse_778_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_778_str(::std::string* sparse_778_str) {
  if (sparse_778_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_778_str_;
  }
  if (sparse_778_str) {
    set_has_sparse_778_str();
    sparse_778_str_ = sparse_778_str;
  } else {
    clear_has_sparse_778_str();
    sparse_778_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_779_str = 791;
inline bool Database_NoBench::has_sparse_779_str() const {
  return (_has_bits_[24] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_779_str() {
  _has_bits_[24] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_779_str() {
  _has_bits_[24] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_779_str() {
  if (sparse_779_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_779_str_->clear();
  }
  clear_has_sparse_779_str();
}
inline const ::std::string& Database_NoBench::sparse_779_str() const {
  return *sparse_779_str_;
}
inline void Database_NoBench::set_sparse_779_str(const ::std::string& value) {
  set_has_sparse_779_str();
  if (sparse_779_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_779_str_ = new ::std::string;
  }
  sparse_779_str_->assign(value);
}
inline void Database_NoBench::set_sparse_779_str(const char* value) {
  set_has_sparse_779_str();
  if (sparse_779_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_779_str_ = new ::std::string;
  }
  sparse_779_str_->assign(value);
}
inline void Database_NoBench::set_sparse_779_str(const char* value, size_t size) {
  set_has_sparse_779_str();
  if (sparse_779_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_779_str_ = new ::std::string;
  }
  sparse_779_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_779_str() {
  set_has_sparse_779_str();
  if (sparse_779_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_779_str_ = new ::std::string;
  }
  return sparse_779_str_;
}
inline ::std::string* Database_NoBench::release_sparse_779_str() {
  clear_has_sparse_779_str();
  if (sparse_779_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_779_str_;
    sparse_779_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_779_str(::std::string* sparse_779_str) {
  if (sparse_779_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_779_str_;
  }
  if (sparse_779_str) {
    set_has_sparse_779_str();
    sparse_779_str_ = sparse_779_str;
  } else {
    clear_has_sparse_779_str();
    sparse_779_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_780_str = 792;
inline bool Database_NoBench::has_sparse_780_str() const {
  return (_has_bits_[24] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_780_str() {
  _has_bits_[24] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_780_str() {
  _has_bits_[24] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_780_str() {
  if (sparse_780_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_780_str_->clear();
  }
  clear_has_sparse_780_str();
}
inline const ::std::string& Database_NoBench::sparse_780_str() const {
  return *sparse_780_str_;
}
inline void Database_NoBench::set_sparse_780_str(const ::std::string& value) {
  set_has_sparse_780_str();
  if (sparse_780_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_780_str_ = new ::std::string;
  }
  sparse_780_str_->assign(value);
}
inline void Database_NoBench::set_sparse_780_str(const char* value) {
  set_has_sparse_780_str();
  if (sparse_780_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_780_str_ = new ::std::string;
  }
  sparse_780_str_->assign(value);
}
inline void Database_NoBench::set_sparse_780_str(const char* value, size_t size) {
  set_has_sparse_780_str();
  if (sparse_780_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_780_str_ = new ::std::string;
  }
  sparse_780_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_780_str() {
  set_has_sparse_780_str();
  if (sparse_780_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_780_str_ = new ::std::string;
  }
  return sparse_780_str_;
}
inline ::std::string* Database_NoBench::release_sparse_780_str() {
  clear_has_sparse_780_str();
  if (sparse_780_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_780_str_;
    sparse_780_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_780_str(::std::string* sparse_780_str) {
  if (sparse_780_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_780_str_;
  }
  if (sparse_780_str) {
    set_has_sparse_780_str();
    sparse_780_str_ = sparse_780_str;
  } else {
    clear_has_sparse_780_str();
    sparse_780_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_781_str = 793;
inline bool Database_NoBench::has_sparse_781_str() const {
  return (_has_bits_[24] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_781_str() {
  _has_bits_[24] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_781_str() {
  _has_bits_[24] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_781_str() {
  if (sparse_781_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_781_str_->clear();
  }
  clear_has_sparse_781_str();
}
inline const ::std::string& Database_NoBench::sparse_781_str() const {
  return *sparse_781_str_;
}
inline void Database_NoBench::set_sparse_781_str(const ::std::string& value) {
  set_has_sparse_781_str();
  if (sparse_781_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_781_str_ = new ::std::string;
  }
  sparse_781_str_->assign(value);
}
inline void Database_NoBench::set_sparse_781_str(const char* value) {
  set_has_sparse_781_str();
  if (sparse_781_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_781_str_ = new ::std::string;
  }
  sparse_781_str_->assign(value);
}
inline void Database_NoBench::set_sparse_781_str(const char* value, size_t size) {
  set_has_sparse_781_str();
  if (sparse_781_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_781_str_ = new ::std::string;
  }
  sparse_781_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_781_str() {
  set_has_sparse_781_str();
  if (sparse_781_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_781_str_ = new ::std::string;
  }
  return sparse_781_str_;
}
inline ::std::string* Database_NoBench::release_sparse_781_str() {
  clear_has_sparse_781_str();
  if (sparse_781_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_781_str_;
    sparse_781_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_781_str(::std::string* sparse_781_str) {
  if (sparse_781_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_781_str_;
  }
  if (sparse_781_str) {
    set_has_sparse_781_str();
    sparse_781_str_ = sparse_781_str;
  } else {
    clear_has_sparse_781_str();
    sparse_781_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_782_str = 794;
inline bool Database_NoBench::has_sparse_782_str() const {
  return (_has_bits_[24] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_782_str() {
  _has_bits_[24] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_782_str() {
  _has_bits_[24] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_782_str() {
  if (sparse_782_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_782_str_->clear();
  }
  clear_has_sparse_782_str();
}
inline const ::std::string& Database_NoBench::sparse_782_str() const {
  return *sparse_782_str_;
}
inline void Database_NoBench::set_sparse_782_str(const ::std::string& value) {
  set_has_sparse_782_str();
  if (sparse_782_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_782_str_ = new ::std::string;
  }
  sparse_782_str_->assign(value);
}
inline void Database_NoBench::set_sparse_782_str(const char* value) {
  set_has_sparse_782_str();
  if (sparse_782_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_782_str_ = new ::std::string;
  }
  sparse_782_str_->assign(value);
}
inline void Database_NoBench::set_sparse_782_str(const char* value, size_t size) {
  set_has_sparse_782_str();
  if (sparse_782_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_782_str_ = new ::std::string;
  }
  sparse_782_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_782_str() {
  set_has_sparse_782_str();
  if (sparse_782_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_782_str_ = new ::std::string;
  }
  return sparse_782_str_;
}
inline ::std::string* Database_NoBench::release_sparse_782_str() {
  clear_has_sparse_782_str();
  if (sparse_782_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_782_str_;
    sparse_782_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_782_str(::std::string* sparse_782_str) {
  if (sparse_782_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_782_str_;
  }
  if (sparse_782_str) {
    set_has_sparse_782_str();
    sparse_782_str_ = sparse_782_str;
  } else {
    clear_has_sparse_782_str();
    sparse_782_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_783_str = 795;
inline bool Database_NoBench::has_sparse_783_str() const {
  return (_has_bits_[24] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_783_str() {
  _has_bits_[24] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_783_str() {
  _has_bits_[24] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_783_str() {
  if (sparse_783_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_783_str_->clear();
  }
  clear_has_sparse_783_str();
}
inline const ::std::string& Database_NoBench::sparse_783_str() const {
  return *sparse_783_str_;
}
inline void Database_NoBench::set_sparse_783_str(const ::std::string& value) {
  set_has_sparse_783_str();
  if (sparse_783_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_783_str_ = new ::std::string;
  }
  sparse_783_str_->assign(value);
}
inline void Database_NoBench::set_sparse_783_str(const char* value) {
  set_has_sparse_783_str();
  if (sparse_783_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_783_str_ = new ::std::string;
  }
  sparse_783_str_->assign(value);
}
inline void Database_NoBench::set_sparse_783_str(const char* value, size_t size) {
  set_has_sparse_783_str();
  if (sparse_783_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_783_str_ = new ::std::string;
  }
  sparse_783_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_783_str() {
  set_has_sparse_783_str();
  if (sparse_783_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_783_str_ = new ::std::string;
  }
  return sparse_783_str_;
}
inline ::std::string* Database_NoBench::release_sparse_783_str() {
  clear_has_sparse_783_str();
  if (sparse_783_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_783_str_;
    sparse_783_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_783_str(::std::string* sparse_783_str) {
  if (sparse_783_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_783_str_;
  }
  if (sparse_783_str) {
    set_has_sparse_783_str();
    sparse_783_str_ = sparse_783_str;
  } else {
    clear_has_sparse_783_str();
    sparse_783_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_784_str = 796;
inline bool Database_NoBench::has_sparse_784_str() const {
  return (_has_bits_[24] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_784_str() {
  _has_bits_[24] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_784_str() {
  _has_bits_[24] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_784_str() {
  if (sparse_784_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_784_str_->clear();
  }
  clear_has_sparse_784_str();
}
inline const ::std::string& Database_NoBench::sparse_784_str() const {
  return *sparse_784_str_;
}
inline void Database_NoBench::set_sparse_784_str(const ::std::string& value) {
  set_has_sparse_784_str();
  if (sparse_784_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_784_str_ = new ::std::string;
  }
  sparse_784_str_->assign(value);
}
inline void Database_NoBench::set_sparse_784_str(const char* value) {
  set_has_sparse_784_str();
  if (sparse_784_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_784_str_ = new ::std::string;
  }
  sparse_784_str_->assign(value);
}
inline void Database_NoBench::set_sparse_784_str(const char* value, size_t size) {
  set_has_sparse_784_str();
  if (sparse_784_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_784_str_ = new ::std::string;
  }
  sparse_784_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_784_str() {
  set_has_sparse_784_str();
  if (sparse_784_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_784_str_ = new ::std::string;
  }
  return sparse_784_str_;
}
inline ::std::string* Database_NoBench::release_sparse_784_str() {
  clear_has_sparse_784_str();
  if (sparse_784_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_784_str_;
    sparse_784_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_784_str(::std::string* sparse_784_str) {
  if (sparse_784_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_784_str_;
  }
  if (sparse_784_str) {
    set_has_sparse_784_str();
    sparse_784_str_ = sparse_784_str;
  } else {
    clear_has_sparse_784_str();
    sparse_784_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_785_str = 797;
inline bool Database_NoBench::has_sparse_785_str() const {
  return (_has_bits_[24] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_785_str() {
  _has_bits_[24] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_785_str() {
  _has_bits_[24] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_785_str() {
  if (sparse_785_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_785_str_->clear();
  }
  clear_has_sparse_785_str();
}
inline const ::std::string& Database_NoBench::sparse_785_str() const {
  return *sparse_785_str_;
}
inline void Database_NoBench::set_sparse_785_str(const ::std::string& value) {
  set_has_sparse_785_str();
  if (sparse_785_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_785_str_ = new ::std::string;
  }
  sparse_785_str_->assign(value);
}
inline void Database_NoBench::set_sparse_785_str(const char* value) {
  set_has_sparse_785_str();
  if (sparse_785_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_785_str_ = new ::std::string;
  }
  sparse_785_str_->assign(value);
}
inline void Database_NoBench::set_sparse_785_str(const char* value, size_t size) {
  set_has_sparse_785_str();
  if (sparse_785_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_785_str_ = new ::std::string;
  }
  sparse_785_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_785_str() {
  set_has_sparse_785_str();
  if (sparse_785_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_785_str_ = new ::std::string;
  }
  return sparse_785_str_;
}
inline ::std::string* Database_NoBench::release_sparse_785_str() {
  clear_has_sparse_785_str();
  if (sparse_785_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_785_str_;
    sparse_785_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_785_str(::std::string* sparse_785_str) {
  if (sparse_785_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_785_str_;
  }
  if (sparse_785_str) {
    set_has_sparse_785_str();
    sparse_785_str_ = sparse_785_str;
  } else {
    clear_has_sparse_785_str();
    sparse_785_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_786_str = 798;
inline bool Database_NoBench::has_sparse_786_str() const {
  return (_has_bits_[24] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_786_str() {
  _has_bits_[24] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_786_str() {
  _has_bits_[24] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_786_str() {
  if (sparse_786_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_786_str_->clear();
  }
  clear_has_sparse_786_str();
}
inline const ::std::string& Database_NoBench::sparse_786_str() const {
  return *sparse_786_str_;
}
inline void Database_NoBench::set_sparse_786_str(const ::std::string& value) {
  set_has_sparse_786_str();
  if (sparse_786_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_786_str_ = new ::std::string;
  }
  sparse_786_str_->assign(value);
}
inline void Database_NoBench::set_sparse_786_str(const char* value) {
  set_has_sparse_786_str();
  if (sparse_786_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_786_str_ = new ::std::string;
  }
  sparse_786_str_->assign(value);
}
inline void Database_NoBench::set_sparse_786_str(const char* value, size_t size) {
  set_has_sparse_786_str();
  if (sparse_786_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_786_str_ = new ::std::string;
  }
  sparse_786_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_786_str() {
  set_has_sparse_786_str();
  if (sparse_786_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_786_str_ = new ::std::string;
  }
  return sparse_786_str_;
}
inline ::std::string* Database_NoBench::release_sparse_786_str() {
  clear_has_sparse_786_str();
  if (sparse_786_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_786_str_;
    sparse_786_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_786_str(::std::string* sparse_786_str) {
  if (sparse_786_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_786_str_;
  }
  if (sparse_786_str) {
    set_has_sparse_786_str();
    sparse_786_str_ = sparse_786_str;
  } else {
    clear_has_sparse_786_str();
    sparse_786_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_787_str = 799;
inline bool Database_NoBench::has_sparse_787_str() const {
  return (_has_bits_[25] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_787_str() {
  _has_bits_[25] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_787_str() {
  _has_bits_[25] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_787_str() {
  if (sparse_787_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_787_str_->clear();
  }
  clear_has_sparse_787_str();
}
inline const ::std::string& Database_NoBench::sparse_787_str() const {
  return *sparse_787_str_;
}
inline void Database_NoBench::set_sparse_787_str(const ::std::string& value) {
  set_has_sparse_787_str();
  if (sparse_787_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_787_str_ = new ::std::string;
  }
  sparse_787_str_->assign(value);
}
inline void Database_NoBench::set_sparse_787_str(const char* value) {
  set_has_sparse_787_str();
  if (sparse_787_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_787_str_ = new ::std::string;
  }
  sparse_787_str_->assign(value);
}
inline void Database_NoBench::set_sparse_787_str(const char* value, size_t size) {
  set_has_sparse_787_str();
  if (sparse_787_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_787_str_ = new ::std::string;
  }
  sparse_787_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_787_str() {
  set_has_sparse_787_str();
  if (sparse_787_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_787_str_ = new ::std::string;
  }
  return sparse_787_str_;
}
inline ::std::string* Database_NoBench::release_sparse_787_str() {
  clear_has_sparse_787_str();
  if (sparse_787_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_787_str_;
    sparse_787_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_787_str(::std::string* sparse_787_str) {
  if (sparse_787_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_787_str_;
  }
  if (sparse_787_str) {
    set_has_sparse_787_str();
    sparse_787_str_ = sparse_787_str;
  } else {
    clear_has_sparse_787_str();
    sparse_787_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_788_str = 800;
inline bool Database_NoBench::has_sparse_788_str() const {
  return (_has_bits_[25] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_788_str() {
  _has_bits_[25] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_788_str() {
  _has_bits_[25] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_788_str() {
  if (sparse_788_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_788_str_->clear();
  }
  clear_has_sparse_788_str();
}
inline const ::std::string& Database_NoBench::sparse_788_str() const {
  return *sparse_788_str_;
}
inline void Database_NoBench::set_sparse_788_str(const ::std::string& value) {
  set_has_sparse_788_str();
  if (sparse_788_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_788_str_ = new ::std::string;
  }
  sparse_788_str_->assign(value);
}
inline void Database_NoBench::set_sparse_788_str(const char* value) {
  set_has_sparse_788_str();
  if (sparse_788_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_788_str_ = new ::std::string;
  }
  sparse_788_str_->assign(value);
}
inline void Database_NoBench::set_sparse_788_str(const char* value, size_t size) {
  set_has_sparse_788_str();
  if (sparse_788_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_788_str_ = new ::std::string;
  }
  sparse_788_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_788_str() {
  set_has_sparse_788_str();
  if (sparse_788_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_788_str_ = new ::std::string;
  }
  return sparse_788_str_;
}
inline ::std::string* Database_NoBench::release_sparse_788_str() {
  clear_has_sparse_788_str();
  if (sparse_788_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_788_str_;
    sparse_788_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_788_str(::std::string* sparse_788_str) {
  if (sparse_788_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_788_str_;
  }
  if (sparse_788_str) {
    set_has_sparse_788_str();
    sparse_788_str_ = sparse_788_str;
  } else {
    clear_has_sparse_788_str();
    sparse_788_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_789_str = 801;
inline bool Database_NoBench::has_sparse_789_str() const {
  return (_has_bits_[25] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_789_str() {
  _has_bits_[25] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_789_str() {
  _has_bits_[25] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_789_str() {
  if (sparse_789_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_789_str_->clear();
  }
  clear_has_sparse_789_str();
}
inline const ::std::string& Database_NoBench::sparse_789_str() const {
  return *sparse_789_str_;
}
inline void Database_NoBench::set_sparse_789_str(const ::std::string& value) {
  set_has_sparse_789_str();
  if (sparse_789_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_789_str_ = new ::std::string;
  }
  sparse_789_str_->assign(value);
}
inline void Database_NoBench::set_sparse_789_str(const char* value) {
  set_has_sparse_789_str();
  if (sparse_789_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_789_str_ = new ::std::string;
  }
  sparse_789_str_->assign(value);
}
inline void Database_NoBench::set_sparse_789_str(const char* value, size_t size) {
  set_has_sparse_789_str();
  if (sparse_789_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_789_str_ = new ::std::string;
  }
  sparse_789_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_789_str() {
  set_has_sparse_789_str();
  if (sparse_789_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_789_str_ = new ::std::string;
  }
  return sparse_789_str_;
}
inline ::std::string* Database_NoBench::release_sparse_789_str() {
  clear_has_sparse_789_str();
  if (sparse_789_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_789_str_;
    sparse_789_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_789_str(::std::string* sparse_789_str) {
  if (sparse_789_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_789_str_;
  }
  if (sparse_789_str) {
    set_has_sparse_789_str();
    sparse_789_str_ = sparse_789_str;
  } else {
    clear_has_sparse_789_str();
    sparse_789_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_790_str = 802;
inline bool Database_NoBench::has_sparse_790_str() const {
  return (_has_bits_[25] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_790_str() {
  _has_bits_[25] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_790_str() {
  _has_bits_[25] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_790_str() {
  if (sparse_790_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_790_str_->clear();
  }
  clear_has_sparse_790_str();
}
inline const ::std::string& Database_NoBench::sparse_790_str() const {
  return *sparse_790_str_;
}
inline void Database_NoBench::set_sparse_790_str(const ::std::string& value) {
  set_has_sparse_790_str();
  if (sparse_790_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_790_str_ = new ::std::string;
  }
  sparse_790_str_->assign(value);
}
inline void Database_NoBench::set_sparse_790_str(const char* value) {
  set_has_sparse_790_str();
  if (sparse_790_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_790_str_ = new ::std::string;
  }
  sparse_790_str_->assign(value);
}
inline void Database_NoBench::set_sparse_790_str(const char* value, size_t size) {
  set_has_sparse_790_str();
  if (sparse_790_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_790_str_ = new ::std::string;
  }
  sparse_790_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_790_str() {
  set_has_sparse_790_str();
  if (sparse_790_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_790_str_ = new ::std::string;
  }
  return sparse_790_str_;
}
inline ::std::string* Database_NoBench::release_sparse_790_str() {
  clear_has_sparse_790_str();
  if (sparse_790_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_790_str_;
    sparse_790_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_790_str(::std::string* sparse_790_str) {
  if (sparse_790_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_790_str_;
  }
  if (sparse_790_str) {
    set_has_sparse_790_str();
    sparse_790_str_ = sparse_790_str;
  } else {
    clear_has_sparse_790_str();
    sparse_790_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_791_str = 803;
inline bool Database_NoBench::has_sparse_791_str() const {
  return (_has_bits_[25] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_791_str() {
  _has_bits_[25] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_791_str() {
  _has_bits_[25] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_791_str() {
  if (sparse_791_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_791_str_->clear();
  }
  clear_has_sparse_791_str();
}
inline const ::std::string& Database_NoBench::sparse_791_str() const {
  return *sparse_791_str_;
}
inline void Database_NoBench::set_sparse_791_str(const ::std::string& value) {
  set_has_sparse_791_str();
  if (sparse_791_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_791_str_ = new ::std::string;
  }
  sparse_791_str_->assign(value);
}
inline void Database_NoBench::set_sparse_791_str(const char* value) {
  set_has_sparse_791_str();
  if (sparse_791_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_791_str_ = new ::std::string;
  }
  sparse_791_str_->assign(value);
}
inline void Database_NoBench::set_sparse_791_str(const char* value, size_t size) {
  set_has_sparse_791_str();
  if (sparse_791_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_791_str_ = new ::std::string;
  }
  sparse_791_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_791_str() {
  set_has_sparse_791_str();
  if (sparse_791_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_791_str_ = new ::std::string;
  }
  return sparse_791_str_;
}
inline ::std::string* Database_NoBench::release_sparse_791_str() {
  clear_has_sparse_791_str();
  if (sparse_791_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_791_str_;
    sparse_791_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_791_str(::std::string* sparse_791_str) {
  if (sparse_791_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_791_str_;
  }
  if (sparse_791_str) {
    set_has_sparse_791_str();
    sparse_791_str_ = sparse_791_str;
  } else {
    clear_has_sparse_791_str();
    sparse_791_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_792_str = 804;
inline bool Database_NoBench::has_sparse_792_str() const {
  return (_has_bits_[25] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_792_str() {
  _has_bits_[25] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_792_str() {
  _has_bits_[25] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_792_str() {
  if (sparse_792_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_792_str_->clear();
  }
  clear_has_sparse_792_str();
}
inline const ::std::string& Database_NoBench::sparse_792_str() const {
  return *sparse_792_str_;
}
inline void Database_NoBench::set_sparse_792_str(const ::std::string& value) {
  set_has_sparse_792_str();
  if (sparse_792_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_792_str_ = new ::std::string;
  }
  sparse_792_str_->assign(value);
}
inline void Database_NoBench::set_sparse_792_str(const char* value) {
  set_has_sparse_792_str();
  if (sparse_792_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_792_str_ = new ::std::string;
  }
  sparse_792_str_->assign(value);
}
inline void Database_NoBench::set_sparse_792_str(const char* value, size_t size) {
  set_has_sparse_792_str();
  if (sparse_792_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_792_str_ = new ::std::string;
  }
  sparse_792_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_792_str() {
  set_has_sparse_792_str();
  if (sparse_792_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_792_str_ = new ::std::string;
  }
  return sparse_792_str_;
}
inline ::std::string* Database_NoBench::release_sparse_792_str() {
  clear_has_sparse_792_str();
  if (sparse_792_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_792_str_;
    sparse_792_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_792_str(::std::string* sparse_792_str) {
  if (sparse_792_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_792_str_;
  }
  if (sparse_792_str) {
    set_has_sparse_792_str();
    sparse_792_str_ = sparse_792_str;
  } else {
    clear_has_sparse_792_str();
    sparse_792_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_793_str = 805;
inline bool Database_NoBench::has_sparse_793_str() const {
  return (_has_bits_[25] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_793_str() {
  _has_bits_[25] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_793_str() {
  _has_bits_[25] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_793_str() {
  if (sparse_793_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_793_str_->clear();
  }
  clear_has_sparse_793_str();
}
inline const ::std::string& Database_NoBench::sparse_793_str() const {
  return *sparse_793_str_;
}
inline void Database_NoBench::set_sparse_793_str(const ::std::string& value) {
  set_has_sparse_793_str();
  if (sparse_793_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_793_str_ = new ::std::string;
  }
  sparse_793_str_->assign(value);
}
inline void Database_NoBench::set_sparse_793_str(const char* value) {
  set_has_sparse_793_str();
  if (sparse_793_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_793_str_ = new ::std::string;
  }
  sparse_793_str_->assign(value);
}
inline void Database_NoBench::set_sparse_793_str(const char* value, size_t size) {
  set_has_sparse_793_str();
  if (sparse_793_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_793_str_ = new ::std::string;
  }
  sparse_793_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_793_str() {
  set_has_sparse_793_str();
  if (sparse_793_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_793_str_ = new ::std::string;
  }
  return sparse_793_str_;
}
inline ::std::string* Database_NoBench::release_sparse_793_str() {
  clear_has_sparse_793_str();
  if (sparse_793_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_793_str_;
    sparse_793_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_793_str(::std::string* sparse_793_str) {
  if (sparse_793_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_793_str_;
  }
  if (sparse_793_str) {
    set_has_sparse_793_str();
    sparse_793_str_ = sparse_793_str;
  } else {
    clear_has_sparse_793_str();
    sparse_793_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_794_str = 806;
inline bool Database_NoBench::has_sparse_794_str() const {
  return (_has_bits_[25] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_794_str() {
  _has_bits_[25] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_794_str() {
  _has_bits_[25] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_794_str() {
  if (sparse_794_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_794_str_->clear();
  }
  clear_has_sparse_794_str();
}
inline const ::std::string& Database_NoBench::sparse_794_str() const {
  return *sparse_794_str_;
}
inline void Database_NoBench::set_sparse_794_str(const ::std::string& value) {
  set_has_sparse_794_str();
  if (sparse_794_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_794_str_ = new ::std::string;
  }
  sparse_794_str_->assign(value);
}
inline void Database_NoBench::set_sparse_794_str(const char* value) {
  set_has_sparse_794_str();
  if (sparse_794_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_794_str_ = new ::std::string;
  }
  sparse_794_str_->assign(value);
}
inline void Database_NoBench::set_sparse_794_str(const char* value, size_t size) {
  set_has_sparse_794_str();
  if (sparse_794_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_794_str_ = new ::std::string;
  }
  sparse_794_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_794_str() {
  set_has_sparse_794_str();
  if (sparse_794_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_794_str_ = new ::std::string;
  }
  return sparse_794_str_;
}
inline ::std::string* Database_NoBench::release_sparse_794_str() {
  clear_has_sparse_794_str();
  if (sparse_794_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_794_str_;
    sparse_794_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_794_str(::std::string* sparse_794_str) {
  if (sparse_794_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_794_str_;
  }
  if (sparse_794_str) {
    set_has_sparse_794_str();
    sparse_794_str_ = sparse_794_str;
  } else {
    clear_has_sparse_794_str();
    sparse_794_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_795_str = 807;
inline bool Database_NoBench::has_sparse_795_str() const {
  return (_has_bits_[25] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_795_str() {
  _has_bits_[25] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_795_str() {
  _has_bits_[25] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_795_str() {
  if (sparse_795_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_795_str_->clear();
  }
  clear_has_sparse_795_str();
}
inline const ::std::string& Database_NoBench::sparse_795_str() const {
  return *sparse_795_str_;
}
inline void Database_NoBench::set_sparse_795_str(const ::std::string& value) {
  set_has_sparse_795_str();
  if (sparse_795_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_795_str_ = new ::std::string;
  }
  sparse_795_str_->assign(value);
}
inline void Database_NoBench::set_sparse_795_str(const char* value) {
  set_has_sparse_795_str();
  if (sparse_795_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_795_str_ = new ::std::string;
  }
  sparse_795_str_->assign(value);
}
inline void Database_NoBench::set_sparse_795_str(const char* value, size_t size) {
  set_has_sparse_795_str();
  if (sparse_795_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_795_str_ = new ::std::string;
  }
  sparse_795_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_795_str() {
  set_has_sparse_795_str();
  if (sparse_795_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_795_str_ = new ::std::string;
  }
  return sparse_795_str_;
}
inline ::std::string* Database_NoBench::release_sparse_795_str() {
  clear_has_sparse_795_str();
  if (sparse_795_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_795_str_;
    sparse_795_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_795_str(::std::string* sparse_795_str) {
  if (sparse_795_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_795_str_;
  }
  if (sparse_795_str) {
    set_has_sparse_795_str();
    sparse_795_str_ = sparse_795_str;
  } else {
    clear_has_sparse_795_str();
    sparse_795_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_796_str = 808;
inline bool Database_NoBench::has_sparse_796_str() const {
  return (_has_bits_[25] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_796_str() {
  _has_bits_[25] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_796_str() {
  _has_bits_[25] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_796_str() {
  if (sparse_796_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_796_str_->clear();
  }
  clear_has_sparse_796_str();
}
inline const ::std::string& Database_NoBench::sparse_796_str() const {
  return *sparse_796_str_;
}
inline void Database_NoBench::set_sparse_796_str(const ::std::string& value) {
  set_has_sparse_796_str();
  if (sparse_796_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_796_str_ = new ::std::string;
  }
  sparse_796_str_->assign(value);
}
inline void Database_NoBench::set_sparse_796_str(const char* value) {
  set_has_sparse_796_str();
  if (sparse_796_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_796_str_ = new ::std::string;
  }
  sparse_796_str_->assign(value);
}
inline void Database_NoBench::set_sparse_796_str(const char* value, size_t size) {
  set_has_sparse_796_str();
  if (sparse_796_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_796_str_ = new ::std::string;
  }
  sparse_796_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_796_str() {
  set_has_sparse_796_str();
  if (sparse_796_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_796_str_ = new ::std::string;
  }
  return sparse_796_str_;
}
inline ::std::string* Database_NoBench::release_sparse_796_str() {
  clear_has_sparse_796_str();
  if (sparse_796_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_796_str_;
    sparse_796_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_796_str(::std::string* sparse_796_str) {
  if (sparse_796_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_796_str_;
  }
  if (sparse_796_str) {
    set_has_sparse_796_str();
    sparse_796_str_ = sparse_796_str;
  } else {
    clear_has_sparse_796_str();
    sparse_796_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_797_str = 809;
inline bool Database_NoBench::has_sparse_797_str() const {
  return (_has_bits_[25] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_797_str() {
  _has_bits_[25] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_797_str() {
  _has_bits_[25] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_797_str() {
  if (sparse_797_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_797_str_->clear();
  }
  clear_has_sparse_797_str();
}
inline const ::std::string& Database_NoBench::sparse_797_str() const {
  return *sparse_797_str_;
}
inline void Database_NoBench::set_sparse_797_str(const ::std::string& value) {
  set_has_sparse_797_str();
  if (sparse_797_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_797_str_ = new ::std::string;
  }
  sparse_797_str_->assign(value);
}
inline void Database_NoBench::set_sparse_797_str(const char* value) {
  set_has_sparse_797_str();
  if (sparse_797_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_797_str_ = new ::std::string;
  }
  sparse_797_str_->assign(value);
}
inline void Database_NoBench::set_sparse_797_str(const char* value, size_t size) {
  set_has_sparse_797_str();
  if (sparse_797_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_797_str_ = new ::std::string;
  }
  sparse_797_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_797_str() {
  set_has_sparse_797_str();
  if (sparse_797_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_797_str_ = new ::std::string;
  }
  return sparse_797_str_;
}
inline ::std::string* Database_NoBench::release_sparse_797_str() {
  clear_has_sparse_797_str();
  if (sparse_797_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_797_str_;
    sparse_797_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_797_str(::std::string* sparse_797_str) {
  if (sparse_797_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_797_str_;
  }
  if (sparse_797_str) {
    set_has_sparse_797_str();
    sparse_797_str_ = sparse_797_str;
  } else {
    clear_has_sparse_797_str();
    sparse_797_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_798_str = 810;
inline bool Database_NoBench::has_sparse_798_str() const {
  return (_has_bits_[25] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_798_str() {
  _has_bits_[25] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_798_str() {
  _has_bits_[25] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_798_str() {
  if (sparse_798_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_798_str_->clear();
  }
  clear_has_sparse_798_str();
}
inline const ::std::string& Database_NoBench::sparse_798_str() const {
  return *sparse_798_str_;
}
inline void Database_NoBench::set_sparse_798_str(const ::std::string& value) {
  set_has_sparse_798_str();
  if (sparse_798_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_798_str_ = new ::std::string;
  }
  sparse_798_str_->assign(value);
}
inline void Database_NoBench::set_sparse_798_str(const char* value) {
  set_has_sparse_798_str();
  if (sparse_798_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_798_str_ = new ::std::string;
  }
  sparse_798_str_->assign(value);
}
inline void Database_NoBench::set_sparse_798_str(const char* value, size_t size) {
  set_has_sparse_798_str();
  if (sparse_798_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_798_str_ = new ::std::string;
  }
  sparse_798_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_798_str() {
  set_has_sparse_798_str();
  if (sparse_798_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_798_str_ = new ::std::string;
  }
  return sparse_798_str_;
}
inline ::std::string* Database_NoBench::release_sparse_798_str() {
  clear_has_sparse_798_str();
  if (sparse_798_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_798_str_;
    sparse_798_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_798_str(::std::string* sparse_798_str) {
  if (sparse_798_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_798_str_;
  }
  if (sparse_798_str) {
    set_has_sparse_798_str();
    sparse_798_str_ = sparse_798_str;
  } else {
    clear_has_sparse_798_str();
    sparse_798_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_799_str = 811;
inline bool Database_NoBench::has_sparse_799_str() const {
  return (_has_bits_[25] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_799_str() {
  _has_bits_[25] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_799_str() {
  _has_bits_[25] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_799_str() {
  if (sparse_799_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_799_str_->clear();
  }
  clear_has_sparse_799_str();
}
inline const ::std::string& Database_NoBench::sparse_799_str() const {
  return *sparse_799_str_;
}
inline void Database_NoBench::set_sparse_799_str(const ::std::string& value) {
  set_has_sparse_799_str();
  if (sparse_799_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_799_str_ = new ::std::string;
  }
  sparse_799_str_->assign(value);
}
inline void Database_NoBench::set_sparse_799_str(const char* value) {
  set_has_sparse_799_str();
  if (sparse_799_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_799_str_ = new ::std::string;
  }
  sparse_799_str_->assign(value);
}
inline void Database_NoBench::set_sparse_799_str(const char* value, size_t size) {
  set_has_sparse_799_str();
  if (sparse_799_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_799_str_ = new ::std::string;
  }
  sparse_799_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_799_str() {
  set_has_sparse_799_str();
  if (sparse_799_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_799_str_ = new ::std::string;
  }
  return sparse_799_str_;
}
inline ::std::string* Database_NoBench::release_sparse_799_str() {
  clear_has_sparse_799_str();
  if (sparse_799_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_799_str_;
    sparse_799_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_799_str(::std::string* sparse_799_str) {
  if (sparse_799_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_799_str_;
  }
  if (sparse_799_str) {
    set_has_sparse_799_str();
    sparse_799_str_ = sparse_799_str;
  } else {
    clear_has_sparse_799_str();
    sparse_799_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_800_str = 812;
inline bool Database_NoBench::has_sparse_800_str() const {
  return (_has_bits_[25] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_800_str() {
  _has_bits_[25] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_800_str() {
  _has_bits_[25] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_800_str() {
  if (sparse_800_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_800_str_->clear();
  }
  clear_has_sparse_800_str();
}
inline const ::std::string& Database_NoBench::sparse_800_str() const {
  return *sparse_800_str_;
}
inline void Database_NoBench::set_sparse_800_str(const ::std::string& value) {
  set_has_sparse_800_str();
  if (sparse_800_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_800_str_ = new ::std::string;
  }
  sparse_800_str_->assign(value);
}
inline void Database_NoBench::set_sparse_800_str(const char* value) {
  set_has_sparse_800_str();
  if (sparse_800_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_800_str_ = new ::std::string;
  }
  sparse_800_str_->assign(value);
}
inline void Database_NoBench::set_sparse_800_str(const char* value, size_t size) {
  set_has_sparse_800_str();
  if (sparse_800_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_800_str_ = new ::std::string;
  }
  sparse_800_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_800_str() {
  set_has_sparse_800_str();
  if (sparse_800_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_800_str_ = new ::std::string;
  }
  return sparse_800_str_;
}
inline ::std::string* Database_NoBench::release_sparse_800_str() {
  clear_has_sparse_800_str();
  if (sparse_800_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_800_str_;
    sparse_800_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_800_str(::std::string* sparse_800_str) {
  if (sparse_800_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_800_str_;
  }
  if (sparse_800_str) {
    set_has_sparse_800_str();
    sparse_800_str_ = sparse_800_str;
  } else {
    clear_has_sparse_800_str();
    sparse_800_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_801_str = 813;
inline bool Database_NoBench::has_sparse_801_str() const {
  return (_has_bits_[25] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_801_str() {
  _has_bits_[25] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_801_str() {
  _has_bits_[25] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_801_str() {
  if (sparse_801_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_801_str_->clear();
  }
  clear_has_sparse_801_str();
}
inline const ::std::string& Database_NoBench::sparse_801_str() const {
  return *sparse_801_str_;
}
inline void Database_NoBench::set_sparse_801_str(const ::std::string& value) {
  set_has_sparse_801_str();
  if (sparse_801_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_801_str_ = new ::std::string;
  }
  sparse_801_str_->assign(value);
}
inline void Database_NoBench::set_sparse_801_str(const char* value) {
  set_has_sparse_801_str();
  if (sparse_801_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_801_str_ = new ::std::string;
  }
  sparse_801_str_->assign(value);
}
inline void Database_NoBench::set_sparse_801_str(const char* value, size_t size) {
  set_has_sparse_801_str();
  if (sparse_801_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_801_str_ = new ::std::string;
  }
  sparse_801_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_801_str() {
  set_has_sparse_801_str();
  if (sparse_801_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_801_str_ = new ::std::string;
  }
  return sparse_801_str_;
}
inline ::std::string* Database_NoBench::release_sparse_801_str() {
  clear_has_sparse_801_str();
  if (sparse_801_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_801_str_;
    sparse_801_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_801_str(::std::string* sparse_801_str) {
  if (sparse_801_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_801_str_;
  }
  if (sparse_801_str) {
    set_has_sparse_801_str();
    sparse_801_str_ = sparse_801_str;
  } else {
    clear_has_sparse_801_str();
    sparse_801_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_802_str = 814;
inline bool Database_NoBench::has_sparse_802_str() const {
  return (_has_bits_[25] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_802_str() {
  _has_bits_[25] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_802_str() {
  _has_bits_[25] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_802_str() {
  if (sparse_802_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_802_str_->clear();
  }
  clear_has_sparse_802_str();
}
inline const ::std::string& Database_NoBench::sparse_802_str() const {
  return *sparse_802_str_;
}
inline void Database_NoBench::set_sparse_802_str(const ::std::string& value) {
  set_has_sparse_802_str();
  if (sparse_802_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_802_str_ = new ::std::string;
  }
  sparse_802_str_->assign(value);
}
inline void Database_NoBench::set_sparse_802_str(const char* value) {
  set_has_sparse_802_str();
  if (sparse_802_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_802_str_ = new ::std::string;
  }
  sparse_802_str_->assign(value);
}
inline void Database_NoBench::set_sparse_802_str(const char* value, size_t size) {
  set_has_sparse_802_str();
  if (sparse_802_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_802_str_ = new ::std::string;
  }
  sparse_802_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_802_str() {
  set_has_sparse_802_str();
  if (sparse_802_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_802_str_ = new ::std::string;
  }
  return sparse_802_str_;
}
inline ::std::string* Database_NoBench::release_sparse_802_str() {
  clear_has_sparse_802_str();
  if (sparse_802_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_802_str_;
    sparse_802_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_802_str(::std::string* sparse_802_str) {
  if (sparse_802_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_802_str_;
  }
  if (sparse_802_str) {
    set_has_sparse_802_str();
    sparse_802_str_ = sparse_802_str;
  } else {
    clear_has_sparse_802_str();
    sparse_802_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_803_str = 815;
inline bool Database_NoBench::has_sparse_803_str() const {
  return (_has_bits_[25] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_803_str() {
  _has_bits_[25] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_803_str() {
  _has_bits_[25] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_803_str() {
  if (sparse_803_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_803_str_->clear();
  }
  clear_has_sparse_803_str();
}
inline const ::std::string& Database_NoBench::sparse_803_str() const {
  return *sparse_803_str_;
}
inline void Database_NoBench::set_sparse_803_str(const ::std::string& value) {
  set_has_sparse_803_str();
  if (sparse_803_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_803_str_ = new ::std::string;
  }
  sparse_803_str_->assign(value);
}
inline void Database_NoBench::set_sparse_803_str(const char* value) {
  set_has_sparse_803_str();
  if (sparse_803_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_803_str_ = new ::std::string;
  }
  sparse_803_str_->assign(value);
}
inline void Database_NoBench::set_sparse_803_str(const char* value, size_t size) {
  set_has_sparse_803_str();
  if (sparse_803_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_803_str_ = new ::std::string;
  }
  sparse_803_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_803_str() {
  set_has_sparse_803_str();
  if (sparse_803_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_803_str_ = new ::std::string;
  }
  return sparse_803_str_;
}
inline ::std::string* Database_NoBench::release_sparse_803_str() {
  clear_has_sparse_803_str();
  if (sparse_803_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_803_str_;
    sparse_803_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_803_str(::std::string* sparse_803_str) {
  if (sparse_803_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_803_str_;
  }
  if (sparse_803_str) {
    set_has_sparse_803_str();
    sparse_803_str_ = sparse_803_str;
  } else {
    clear_has_sparse_803_str();
    sparse_803_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_804_str = 816;
inline bool Database_NoBench::has_sparse_804_str() const {
  return (_has_bits_[25] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_804_str() {
  _has_bits_[25] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_804_str() {
  _has_bits_[25] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_804_str() {
  if (sparse_804_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_804_str_->clear();
  }
  clear_has_sparse_804_str();
}
inline const ::std::string& Database_NoBench::sparse_804_str() const {
  return *sparse_804_str_;
}
inline void Database_NoBench::set_sparse_804_str(const ::std::string& value) {
  set_has_sparse_804_str();
  if (sparse_804_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_804_str_ = new ::std::string;
  }
  sparse_804_str_->assign(value);
}
inline void Database_NoBench::set_sparse_804_str(const char* value) {
  set_has_sparse_804_str();
  if (sparse_804_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_804_str_ = new ::std::string;
  }
  sparse_804_str_->assign(value);
}
inline void Database_NoBench::set_sparse_804_str(const char* value, size_t size) {
  set_has_sparse_804_str();
  if (sparse_804_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_804_str_ = new ::std::string;
  }
  sparse_804_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_804_str() {
  set_has_sparse_804_str();
  if (sparse_804_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_804_str_ = new ::std::string;
  }
  return sparse_804_str_;
}
inline ::std::string* Database_NoBench::release_sparse_804_str() {
  clear_has_sparse_804_str();
  if (sparse_804_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_804_str_;
    sparse_804_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_804_str(::std::string* sparse_804_str) {
  if (sparse_804_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_804_str_;
  }
  if (sparse_804_str) {
    set_has_sparse_804_str();
    sparse_804_str_ = sparse_804_str;
  } else {
    clear_has_sparse_804_str();
    sparse_804_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_805_str = 817;
inline bool Database_NoBench::has_sparse_805_str() const {
  return (_has_bits_[25] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_805_str() {
  _has_bits_[25] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_805_str() {
  _has_bits_[25] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_805_str() {
  if (sparse_805_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_805_str_->clear();
  }
  clear_has_sparse_805_str();
}
inline const ::std::string& Database_NoBench::sparse_805_str() const {
  return *sparse_805_str_;
}
inline void Database_NoBench::set_sparse_805_str(const ::std::string& value) {
  set_has_sparse_805_str();
  if (sparse_805_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_805_str_ = new ::std::string;
  }
  sparse_805_str_->assign(value);
}
inline void Database_NoBench::set_sparse_805_str(const char* value) {
  set_has_sparse_805_str();
  if (sparse_805_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_805_str_ = new ::std::string;
  }
  sparse_805_str_->assign(value);
}
inline void Database_NoBench::set_sparse_805_str(const char* value, size_t size) {
  set_has_sparse_805_str();
  if (sparse_805_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_805_str_ = new ::std::string;
  }
  sparse_805_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_805_str() {
  set_has_sparse_805_str();
  if (sparse_805_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_805_str_ = new ::std::string;
  }
  return sparse_805_str_;
}
inline ::std::string* Database_NoBench::release_sparse_805_str() {
  clear_has_sparse_805_str();
  if (sparse_805_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_805_str_;
    sparse_805_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_805_str(::std::string* sparse_805_str) {
  if (sparse_805_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_805_str_;
  }
  if (sparse_805_str) {
    set_has_sparse_805_str();
    sparse_805_str_ = sparse_805_str;
  } else {
    clear_has_sparse_805_str();
    sparse_805_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_806_str = 818;
inline bool Database_NoBench::has_sparse_806_str() const {
  return (_has_bits_[25] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_806_str() {
  _has_bits_[25] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_806_str() {
  _has_bits_[25] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_806_str() {
  if (sparse_806_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_806_str_->clear();
  }
  clear_has_sparse_806_str();
}
inline const ::std::string& Database_NoBench::sparse_806_str() const {
  return *sparse_806_str_;
}
inline void Database_NoBench::set_sparse_806_str(const ::std::string& value) {
  set_has_sparse_806_str();
  if (sparse_806_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_806_str_ = new ::std::string;
  }
  sparse_806_str_->assign(value);
}
inline void Database_NoBench::set_sparse_806_str(const char* value) {
  set_has_sparse_806_str();
  if (sparse_806_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_806_str_ = new ::std::string;
  }
  sparse_806_str_->assign(value);
}
inline void Database_NoBench::set_sparse_806_str(const char* value, size_t size) {
  set_has_sparse_806_str();
  if (sparse_806_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_806_str_ = new ::std::string;
  }
  sparse_806_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_806_str() {
  set_has_sparse_806_str();
  if (sparse_806_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_806_str_ = new ::std::string;
  }
  return sparse_806_str_;
}
inline ::std::string* Database_NoBench::release_sparse_806_str() {
  clear_has_sparse_806_str();
  if (sparse_806_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_806_str_;
    sparse_806_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_806_str(::std::string* sparse_806_str) {
  if (sparse_806_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_806_str_;
  }
  if (sparse_806_str) {
    set_has_sparse_806_str();
    sparse_806_str_ = sparse_806_str;
  } else {
    clear_has_sparse_806_str();
    sparse_806_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_807_str = 819;
inline bool Database_NoBench::has_sparse_807_str() const {
  return (_has_bits_[25] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_807_str() {
  _has_bits_[25] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_807_str() {
  _has_bits_[25] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_807_str() {
  if (sparse_807_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_807_str_->clear();
  }
  clear_has_sparse_807_str();
}
inline const ::std::string& Database_NoBench::sparse_807_str() const {
  return *sparse_807_str_;
}
inline void Database_NoBench::set_sparse_807_str(const ::std::string& value) {
  set_has_sparse_807_str();
  if (sparse_807_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_807_str_ = new ::std::string;
  }
  sparse_807_str_->assign(value);
}
inline void Database_NoBench::set_sparse_807_str(const char* value) {
  set_has_sparse_807_str();
  if (sparse_807_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_807_str_ = new ::std::string;
  }
  sparse_807_str_->assign(value);
}
inline void Database_NoBench::set_sparse_807_str(const char* value, size_t size) {
  set_has_sparse_807_str();
  if (sparse_807_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_807_str_ = new ::std::string;
  }
  sparse_807_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_807_str() {
  set_has_sparse_807_str();
  if (sparse_807_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_807_str_ = new ::std::string;
  }
  return sparse_807_str_;
}
inline ::std::string* Database_NoBench::release_sparse_807_str() {
  clear_has_sparse_807_str();
  if (sparse_807_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_807_str_;
    sparse_807_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_807_str(::std::string* sparse_807_str) {
  if (sparse_807_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_807_str_;
  }
  if (sparse_807_str) {
    set_has_sparse_807_str();
    sparse_807_str_ = sparse_807_str;
  } else {
    clear_has_sparse_807_str();
    sparse_807_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_808_str = 820;
inline bool Database_NoBench::has_sparse_808_str() const {
  return (_has_bits_[25] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_808_str() {
  _has_bits_[25] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_808_str() {
  _has_bits_[25] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_808_str() {
  if (sparse_808_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_808_str_->clear();
  }
  clear_has_sparse_808_str();
}
inline const ::std::string& Database_NoBench::sparse_808_str() const {
  return *sparse_808_str_;
}
inline void Database_NoBench::set_sparse_808_str(const ::std::string& value) {
  set_has_sparse_808_str();
  if (sparse_808_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_808_str_ = new ::std::string;
  }
  sparse_808_str_->assign(value);
}
inline void Database_NoBench::set_sparse_808_str(const char* value) {
  set_has_sparse_808_str();
  if (sparse_808_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_808_str_ = new ::std::string;
  }
  sparse_808_str_->assign(value);
}
inline void Database_NoBench::set_sparse_808_str(const char* value, size_t size) {
  set_has_sparse_808_str();
  if (sparse_808_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_808_str_ = new ::std::string;
  }
  sparse_808_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_808_str() {
  set_has_sparse_808_str();
  if (sparse_808_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_808_str_ = new ::std::string;
  }
  return sparse_808_str_;
}
inline ::std::string* Database_NoBench::release_sparse_808_str() {
  clear_has_sparse_808_str();
  if (sparse_808_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_808_str_;
    sparse_808_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_808_str(::std::string* sparse_808_str) {
  if (sparse_808_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_808_str_;
  }
  if (sparse_808_str) {
    set_has_sparse_808_str();
    sparse_808_str_ = sparse_808_str;
  } else {
    clear_has_sparse_808_str();
    sparse_808_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_809_str = 821;
inline bool Database_NoBench::has_sparse_809_str() const {
  return (_has_bits_[25] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_809_str() {
  _has_bits_[25] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_809_str() {
  _has_bits_[25] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_809_str() {
  if (sparse_809_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_809_str_->clear();
  }
  clear_has_sparse_809_str();
}
inline const ::std::string& Database_NoBench::sparse_809_str() const {
  return *sparse_809_str_;
}
inline void Database_NoBench::set_sparse_809_str(const ::std::string& value) {
  set_has_sparse_809_str();
  if (sparse_809_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_809_str_ = new ::std::string;
  }
  sparse_809_str_->assign(value);
}
inline void Database_NoBench::set_sparse_809_str(const char* value) {
  set_has_sparse_809_str();
  if (sparse_809_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_809_str_ = new ::std::string;
  }
  sparse_809_str_->assign(value);
}
inline void Database_NoBench::set_sparse_809_str(const char* value, size_t size) {
  set_has_sparse_809_str();
  if (sparse_809_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_809_str_ = new ::std::string;
  }
  sparse_809_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_809_str() {
  set_has_sparse_809_str();
  if (sparse_809_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_809_str_ = new ::std::string;
  }
  return sparse_809_str_;
}
inline ::std::string* Database_NoBench::release_sparse_809_str() {
  clear_has_sparse_809_str();
  if (sparse_809_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_809_str_;
    sparse_809_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_809_str(::std::string* sparse_809_str) {
  if (sparse_809_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_809_str_;
  }
  if (sparse_809_str) {
    set_has_sparse_809_str();
    sparse_809_str_ = sparse_809_str;
  } else {
    clear_has_sparse_809_str();
    sparse_809_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_810_str = 822;
inline bool Database_NoBench::has_sparse_810_str() const {
  return (_has_bits_[25] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_810_str() {
  _has_bits_[25] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_810_str() {
  _has_bits_[25] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_810_str() {
  if (sparse_810_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_810_str_->clear();
  }
  clear_has_sparse_810_str();
}
inline const ::std::string& Database_NoBench::sparse_810_str() const {
  return *sparse_810_str_;
}
inline void Database_NoBench::set_sparse_810_str(const ::std::string& value) {
  set_has_sparse_810_str();
  if (sparse_810_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_810_str_ = new ::std::string;
  }
  sparse_810_str_->assign(value);
}
inline void Database_NoBench::set_sparse_810_str(const char* value) {
  set_has_sparse_810_str();
  if (sparse_810_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_810_str_ = new ::std::string;
  }
  sparse_810_str_->assign(value);
}
inline void Database_NoBench::set_sparse_810_str(const char* value, size_t size) {
  set_has_sparse_810_str();
  if (sparse_810_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_810_str_ = new ::std::string;
  }
  sparse_810_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_810_str() {
  set_has_sparse_810_str();
  if (sparse_810_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_810_str_ = new ::std::string;
  }
  return sparse_810_str_;
}
inline ::std::string* Database_NoBench::release_sparse_810_str() {
  clear_has_sparse_810_str();
  if (sparse_810_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_810_str_;
    sparse_810_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_810_str(::std::string* sparse_810_str) {
  if (sparse_810_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_810_str_;
  }
  if (sparse_810_str) {
    set_has_sparse_810_str();
    sparse_810_str_ = sparse_810_str;
  } else {
    clear_has_sparse_810_str();
    sparse_810_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_811_str = 823;
inline bool Database_NoBench::has_sparse_811_str() const {
  return (_has_bits_[25] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_811_str() {
  _has_bits_[25] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_811_str() {
  _has_bits_[25] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_811_str() {
  if (sparse_811_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_811_str_->clear();
  }
  clear_has_sparse_811_str();
}
inline const ::std::string& Database_NoBench::sparse_811_str() const {
  return *sparse_811_str_;
}
inline void Database_NoBench::set_sparse_811_str(const ::std::string& value) {
  set_has_sparse_811_str();
  if (sparse_811_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_811_str_ = new ::std::string;
  }
  sparse_811_str_->assign(value);
}
inline void Database_NoBench::set_sparse_811_str(const char* value) {
  set_has_sparse_811_str();
  if (sparse_811_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_811_str_ = new ::std::string;
  }
  sparse_811_str_->assign(value);
}
inline void Database_NoBench::set_sparse_811_str(const char* value, size_t size) {
  set_has_sparse_811_str();
  if (sparse_811_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_811_str_ = new ::std::string;
  }
  sparse_811_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_811_str() {
  set_has_sparse_811_str();
  if (sparse_811_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_811_str_ = new ::std::string;
  }
  return sparse_811_str_;
}
inline ::std::string* Database_NoBench::release_sparse_811_str() {
  clear_has_sparse_811_str();
  if (sparse_811_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_811_str_;
    sparse_811_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_811_str(::std::string* sparse_811_str) {
  if (sparse_811_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_811_str_;
  }
  if (sparse_811_str) {
    set_has_sparse_811_str();
    sparse_811_str_ = sparse_811_str;
  } else {
    clear_has_sparse_811_str();
    sparse_811_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_812_str = 824;
inline bool Database_NoBench::has_sparse_812_str() const {
  return (_has_bits_[25] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_812_str() {
  _has_bits_[25] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_812_str() {
  _has_bits_[25] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_812_str() {
  if (sparse_812_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_812_str_->clear();
  }
  clear_has_sparse_812_str();
}
inline const ::std::string& Database_NoBench::sparse_812_str() const {
  return *sparse_812_str_;
}
inline void Database_NoBench::set_sparse_812_str(const ::std::string& value) {
  set_has_sparse_812_str();
  if (sparse_812_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_812_str_ = new ::std::string;
  }
  sparse_812_str_->assign(value);
}
inline void Database_NoBench::set_sparse_812_str(const char* value) {
  set_has_sparse_812_str();
  if (sparse_812_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_812_str_ = new ::std::string;
  }
  sparse_812_str_->assign(value);
}
inline void Database_NoBench::set_sparse_812_str(const char* value, size_t size) {
  set_has_sparse_812_str();
  if (sparse_812_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_812_str_ = new ::std::string;
  }
  sparse_812_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_812_str() {
  set_has_sparse_812_str();
  if (sparse_812_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_812_str_ = new ::std::string;
  }
  return sparse_812_str_;
}
inline ::std::string* Database_NoBench::release_sparse_812_str() {
  clear_has_sparse_812_str();
  if (sparse_812_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_812_str_;
    sparse_812_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_812_str(::std::string* sparse_812_str) {
  if (sparse_812_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_812_str_;
  }
  if (sparse_812_str) {
    set_has_sparse_812_str();
    sparse_812_str_ = sparse_812_str;
  } else {
    clear_has_sparse_812_str();
    sparse_812_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_813_str = 825;
inline bool Database_NoBench::has_sparse_813_str() const {
  return (_has_bits_[25] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_813_str() {
  _has_bits_[25] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_813_str() {
  _has_bits_[25] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_813_str() {
  if (sparse_813_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_813_str_->clear();
  }
  clear_has_sparse_813_str();
}
inline const ::std::string& Database_NoBench::sparse_813_str() const {
  return *sparse_813_str_;
}
inline void Database_NoBench::set_sparse_813_str(const ::std::string& value) {
  set_has_sparse_813_str();
  if (sparse_813_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_813_str_ = new ::std::string;
  }
  sparse_813_str_->assign(value);
}
inline void Database_NoBench::set_sparse_813_str(const char* value) {
  set_has_sparse_813_str();
  if (sparse_813_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_813_str_ = new ::std::string;
  }
  sparse_813_str_->assign(value);
}
inline void Database_NoBench::set_sparse_813_str(const char* value, size_t size) {
  set_has_sparse_813_str();
  if (sparse_813_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_813_str_ = new ::std::string;
  }
  sparse_813_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_813_str() {
  set_has_sparse_813_str();
  if (sparse_813_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_813_str_ = new ::std::string;
  }
  return sparse_813_str_;
}
inline ::std::string* Database_NoBench::release_sparse_813_str() {
  clear_has_sparse_813_str();
  if (sparse_813_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_813_str_;
    sparse_813_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_813_str(::std::string* sparse_813_str) {
  if (sparse_813_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_813_str_;
  }
  if (sparse_813_str) {
    set_has_sparse_813_str();
    sparse_813_str_ = sparse_813_str;
  } else {
    clear_has_sparse_813_str();
    sparse_813_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_814_str = 826;
inline bool Database_NoBench::has_sparse_814_str() const {
  return (_has_bits_[25] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_814_str() {
  _has_bits_[25] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_814_str() {
  _has_bits_[25] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_814_str() {
  if (sparse_814_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_814_str_->clear();
  }
  clear_has_sparse_814_str();
}
inline const ::std::string& Database_NoBench::sparse_814_str() const {
  return *sparse_814_str_;
}
inline void Database_NoBench::set_sparse_814_str(const ::std::string& value) {
  set_has_sparse_814_str();
  if (sparse_814_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_814_str_ = new ::std::string;
  }
  sparse_814_str_->assign(value);
}
inline void Database_NoBench::set_sparse_814_str(const char* value) {
  set_has_sparse_814_str();
  if (sparse_814_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_814_str_ = new ::std::string;
  }
  sparse_814_str_->assign(value);
}
inline void Database_NoBench::set_sparse_814_str(const char* value, size_t size) {
  set_has_sparse_814_str();
  if (sparse_814_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_814_str_ = new ::std::string;
  }
  sparse_814_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_814_str() {
  set_has_sparse_814_str();
  if (sparse_814_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_814_str_ = new ::std::string;
  }
  return sparse_814_str_;
}
inline ::std::string* Database_NoBench::release_sparse_814_str() {
  clear_has_sparse_814_str();
  if (sparse_814_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_814_str_;
    sparse_814_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_814_str(::std::string* sparse_814_str) {
  if (sparse_814_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_814_str_;
  }
  if (sparse_814_str) {
    set_has_sparse_814_str();
    sparse_814_str_ = sparse_814_str;
  } else {
    clear_has_sparse_814_str();
    sparse_814_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_815_str = 827;
inline bool Database_NoBench::has_sparse_815_str() const {
  return (_has_bits_[25] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_815_str() {
  _has_bits_[25] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_815_str() {
  _has_bits_[25] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_815_str() {
  if (sparse_815_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_815_str_->clear();
  }
  clear_has_sparse_815_str();
}
inline const ::std::string& Database_NoBench::sparse_815_str() const {
  return *sparse_815_str_;
}
inline void Database_NoBench::set_sparse_815_str(const ::std::string& value) {
  set_has_sparse_815_str();
  if (sparse_815_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_815_str_ = new ::std::string;
  }
  sparse_815_str_->assign(value);
}
inline void Database_NoBench::set_sparse_815_str(const char* value) {
  set_has_sparse_815_str();
  if (sparse_815_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_815_str_ = new ::std::string;
  }
  sparse_815_str_->assign(value);
}
inline void Database_NoBench::set_sparse_815_str(const char* value, size_t size) {
  set_has_sparse_815_str();
  if (sparse_815_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_815_str_ = new ::std::string;
  }
  sparse_815_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_815_str() {
  set_has_sparse_815_str();
  if (sparse_815_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_815_str_ = new ::std::string;
  }
  return sparse_815_str_;
}
inline ::std::string* Database_NoBench::release_sparse_815_str() {
  clear_has_sparse_815_str();
  if (sparse_815_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_815_str_;
    sparse_815_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_815_str(::std::string* sparse_815_str) {
  if (sparse_815_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_815_str_;
  }
  if (sparse_815_str) {
    set_has_sparse_815_str();
    sparse_815_str_ = sparse_815_str;
  } else {
    clear_has_sparse_815_str();
    sparse_815_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_816_str = 828;
inline bool Database_NoBench::has_sparse_816_str() const {
  return (_has_bits_[25] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_816_str() {
  _has_bits_[25] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_816_str() {
  _has_bits_[25] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_816_str() {
  if (sparse_816_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_816_str_->clear();
  }
  clear_has_sparse_816_str();
}
inline const ::std::string& Database_NoBench::sparse_816_str() const {
  return *sparse_816_str_;
}
inline void Database_NoBench::set_sparse_816_str(const ::std::string& value) {
  set_has_sparse_816_str();
  if (sparse_816_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_816_str_ = new ::std::string;
  }
  sparse_816_str_->assign(value);
}
inline void Database_NoBench::set_sparse_816_str(const char* value) {
  set_has_sparse_816_str();
  if (sparse_816_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_816_str_ = new ::std::string;
  }
  sparse_816_str_->assign(value);
}
inline void Database_NoBench::set_sparse_816_str(const char* value, size_t size) {
  set_has_sparse_816_str();
  if (sparse_816_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_816_str_ = new ::std::string;
  }
  sparse_816_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_816_str() {
  set_has_sparse_816_str();
  if (sparse_816_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_816_str_ = new ::std::string;
  }
  return sparse_816_str_;
}
inline ::std::string* Database_NoBench::release_sparse_816_str() {
  clear_has_sparse_816_str();
  if (sparse_816_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_816_str_;
    sparse_816_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_816_str(::std::string* sparse_816_str) {
  if (sparse_816_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_816_str_;
  }
  if (sparse_816_str) {
    set_has_sparse_816_str();
    sparse_816_str_ = sparse_816_str;
  } else {
    clear_has_sparse_816_str();
    sparse_816_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_817_str = 829;
inline bool Database_NoBench::has_sparse_817_str() const {
  return (_has_bits_[25] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_817_str() {
  _has_bits_[25] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_817_str() {
  _has_bits_[25] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_817_str() {
  if (sparse_817_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_817_str_->clear();
  }
  clear_has_sparse_817_str();
}
inline const ::std::string& Database_NoBench::sparse_817_str() const {
  return *sparse_817_str_;
}
inline void Database_NoBench::set_sparse_817_str(const ::std::string& value) {
  set_has_sparse_817_str();
  if (sparse_817_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_817_str_ = new ::std::string;
  }
  sparse_817_str_->assign(value);
}
inline void Database_NoBench::set_sparse_817_str(const char* value) {
  set_has_sparse_817_str();
  if (sparse_817_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_817_str_ = new ::std::string;
  }
  sparse_817_str_->assign(value);
}
inline void Database_NoBench::set_sparse_817_str(const char* value, size_t size) {
  set_has_sparse_817_str();
  if (sparse_817_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_817_str_ = new ::std::string;
  }
  sparse_817_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_817_str() {
  set_has_sparse_817_str();
  if (sparse_817_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_817_str_ = new ::std::string;
  }
  return sparse_817_str_;
}
inline ::std::string* Database_NoBench::release_sparse_817_str() {
  clear_has_sparse_817_str();
  if (sparse_817_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_817_str_;
    sparse_817_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_817_str(::std::string* sparse_817_str) {
  if (sparse_817_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_817_str_;
  }
  if (sparse_817_str) {
    set_has_sparse_817_str();
    sparse_817_str_ = sparse_817_str;
  } else {
    clear_has_sparse_817_str();
    sparse_817_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_818_str = 830;
inline bool Database_NoBench::has_sparse_818_str() const {
  return (_has_bits_[25] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_818_str() {
  _has_bits_[25] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_818_str() {
  _has_bits_[25] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_818_str() {
  if (sparse_818_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_818_str_->clear();
  }
  clear_has_sparse_818_str();
}
inline const ::std::string& Database_NoBench::sparse_818_str() const {
  return *sparse_818_str_;
}
inline void Database_NoBench::set_sparse_818_str(const ::std::string& value) {
  set_has_sparse_818_str();
  if (sparse_818_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_818_str_ = new ::std::string;
  }
  sparse_818_str_->assign(value);
}
inline void Database_NoBench::set_sparse_818_str(const char* value) {
  set_has_sparse_818_str();
  if (sparse_818_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_818_str_ = new ::std::string;
  }
  sparse_818_str_->assign(value);
}
inline void Database_NoBench::set_sparse_818_str(const char* value, size_t size) {
  set_has_sparse_818_str();
  if (sparse_818_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_818_str_ = new ::std::string;
  }
  sparse_818_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_818_str() {
  set_has_sparse_818_str();
  if (sparse_818_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_818_str_ = new ::std::string;
  }
  return sparse_818_str_;
}
inline ::std::string* Database_NoBench::release_sparse_818_str() {
  clear_has_sparse_818_str();
  if (sparse_818_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_818_str_;
    sparse_818_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_818_str(::std::string* sparse_818_str) {
  if (sparse_818_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_818_str_;
  }
  if (sparse_818_str) {
    set_has_sparse_818_str();
    sparse_818_str_ = sparse_818_str;
  } else {
    clear_has_sparse_818_str();
    sparse_818_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_819_str = 831;
inline bool Database_NoBench::has_sparse_819_str() const {
  return (_has_bits_[26] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_819_str() {
  _has_bits_[26] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_819_str() {
  _has_bits_[26] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_819_str() {
  if (sparse_819_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_819_str_->clear();
  }
  clear_has_sparse_819_str();
}
inline const ::std::string& Database_NoBench::sparse_819_str() const {
  return *sparse_819_str_;
}
inline void Database_NoBench::set_sparse_819_str(const ::std::string& value) {
  set_has_sparse_819_str();
  if (sparse_819_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_819_str_ = new ::std::string;
  }
  sparse_819_str_->assign(value);
}
inline void Database_NoBench::set_sparse_819_str(const char* value) {
  set_has_sparse_819_str();
  if (sparse_819_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_819_str_ = new ::std::string;
  }
  sparse_819_str_->assign(value);
}
inline void Database_NoBench::set_sparse_819_str(const char* value, size_t size) {
  set_has_sparse_819_str();
  if (sparse_819_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_819_str_ = new ::std::string;
  }
  sparse_819_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_819_str() {
  set_has_sparse_819_str();
  if (sparse_819_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_819_str_ = new ::std::string;
  }
  return sparse_819_str_;
}
inline ::std::string* Database_NoBench::release_sparse_819_str() {
  clear_has_sparse_819_str();
  if (sparse_819_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_819_str_;
    sparse_819_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_819_str(::std::string* sparse_819_str) {
  if (sparse_819_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_819_str_;
  }
  if (sparse_819_str) {
    set_has_sparse_819_str();
    sparse_819_str_ = sparse_819_str;
  } else {
    clear_has_sparse_819_str();
    sparse_819_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_820_str = 832;
inline bool Database_NoBench::has_sparse_820_str() const {
  return (_has_bits_[26] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_820_str() {
  _has_bits_[26] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_820_str() {
  _has_bits_[26] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_820_str() {
  if (sparse_820_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_820_str_->clear();
  }
  clear_has_sparse_820_str();
}
inline const ::std::string& Database_NoBench::sparse_820_str() const {
  return *sparse_820_str_;
}
inline void Database_NoBench::set_sparse_820_str(const ::std::string& value) {
  set_has_sparse_820_str();
  if (sparse_820_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_820_str_ = new ::std::string;
  }
  sparse_820_str_->assign(value);
}
inline void Database_NoBench::set_sparse_820_str(const char* value) {
  set_has_sparse_820_str();
  if (sparse_820_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_820_str_ = new ::std::string;
  }
  sparse_820_str_->assign(value);
}
inline void Database_NoBench::set_sparse_820_str(const char* value, size_t size) {
  set_has_sparse_820_str();
  if (sparse_820_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_820_str_ = new ::std::string;
  }
  sparse_820_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_820_str() {
  set_has_sparse_820_str();
  if (sparse_820_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_820_str_ = new ::std::string;
  }
  return sparse_820_str_;
}
inline ::std::string* Database_NoBench::release_sparse_820_str() {
  clear_has_sparse_820_str();
  if (sparse_820_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_820_str_;
    sparse_820_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_820_str(::std::string* sparse_820_str) {
  if (sparse_820_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_820_str_;
  }
  if (sparse_820_str) {
    set_has_sparse_820_str();
    sparse_820_str_ = sparse_820_str;
  } else {
    clear_has_sparse_820_str();
    sparse_820_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_821_str = 833;
inline bool Database_NoBench::has_sparse_821_str() const {
  return (_has_bits_[26] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_821_str() {
  _has_bits_[26] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_821_str() {
  _has_bits_[26] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_821_str() {
  if (sparse_821_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_821_str_->clear();
  }
  clear_has_sparse_821_str();
}
inline const ::std::string& Database_NoBench::sparse_821_str() const {
  return *sparse_821_str_;
}
inline void Database_NoBench::set_sparse_821_str(const ::std::string& value) {
  set_has_sparse_821_str();
  if (sparse_821_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_821_str_ = new ::std::string;
  }
  sparse_821_str_->assign(value);
}
inline void Database_NoBench::set_sparse_821_str(const char* value) {
  set_has_sparse_821_str();
  if (sparse_821_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_821_str_ = new ::std::string;
  }
  sparse_821_str_->assign(value);
}
inline void Database_NoBench::set_sparse_821_str(const char* value, size_t size) {
  set_has_sparse_821_str();
  if (sparse_821_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_821_str_ = new ::std::string;
  }
  sparse_821_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_821_str() {
  set_has_sparse_821_str();
  if (sparse_821_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_821_str_ = new ::std::string;
  }
  return sparse_821_str_;
}
inline ::std::string* Database_NoBench::release_sparse_821_str() {
  clear_has_sparse_821_str();
  if (sparse_821_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_821_str_;
    sparse_821_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_821_str(::std::string* sparse_821_str) {
  if (sparse_821_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_821_str_;
  }
  if (sparse_821_str) {
    set_has_sparse_821_str();
    sparse_821_str_ = sparse_821_str;
  } else {
    clear_has_sparse_821_str();
    sparse_821_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_822_str = 834;
inline bool Database_NoBench::has_sparse_822_str() const {
  return (_has_bits_[26] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_822_str() {
  _has_bits_[26] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_822_str() {
  _has_bits_[26] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_822_str() {
  if (sparse_822_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_822_str_->clear();
  }
  clear_has_sparse_822_str();
}
inline const ::std::string& Database_NoBench::sparse_822_str() const {
  return *sparse_822_str_;
}
inline void Database_NoBench::set_sparse_822_str(const ::std::string& value) {
  set_has_sparse_822_str();
  if (sparse_822_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_822_str_ = new ::std::string;
  }
  sparse_822_str_->assign(value);
}
inline void Database_NoBench::set_sparse_822_str(const char* value) {
  set_has_sparse_822_str();
  if (sparse_822_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_822_str_ = new ::std::string;
  }
  sparse_822_str_->assign(value);
}
inline void Database_NoBench::set_sparse_822_str(const char* value, size_t size) {
  set_has_sparse_822_str();
  if (sparse_822_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_822_str_ = new ::std::string;
  }
  sparse_822_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_822_str() {
  set_has_sparse_822_str();
  if (sparse_822_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_822_str_ = new ::std::string;
  }
  return sparse_822_str_;
}
inline ::std::string* Database_NoBench::release_sparse_822_str() {
  clear_has_sparse_822_str();
  if (sparse_822_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_822_str_;
    sparse_822_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_822_str(::std::string* sparse_822_str) {
  if (sparse_822_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_822_str_;
  }
  if (sparse_822_str) {
    set_has_sparse_822_str();
    sparse_822_str_ = sparse_822_str;
  } else {
    clear_has_sparse_822_str();
    sparse_822_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_823_str = 835;
inline bool Database_NoBench::has_sparse_823_str() const {
  return (_has_bits_[26] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_823_str() {
  _has_bits_[26] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_823_str() {
  _has_bits_[26] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_823_str() {
  if (sparse_823_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_823_str_->clear();
  }
  clear_has_sparse_823_str();
}
inline const ::std::string& Database_NoBench::sparse_823_str() const {
  return *sparse_823_str_;
}
inline void Database_NoBench::set_sparse_823_str(const ::std::string& value) {
  set_has_sparse_823_str();
  if (sparse_823_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_823_str_ = new ::std::string;
  }
  sparse_823_str_->assign(value);
}
inline void Database_NoBench::set_sparse_823_str(const char* value) {
  set_has_sparse_823_str();
  if (sparse_823_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_823_str_ = new ::std::string;
  }
  sparse_823_str_->assign(value);
}
inline void Database_NoBench::set_sparse_823_str(const char* value, size_t size) {
  set_has_sparse_823_str();
  if (sparse_823_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_823_str_ = new ::std::string;
  }
  sparse_823_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_823_str() {
  set_has_sparse_823_str();
  if (sparse_823_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_823_str_ = new ::std::string;
  }
  return sparse_823_str_;
}
inline ::std::string* Database_NoBench::release_sparse_823_str() {
  clear_has_sparse_823_str();
  if (sparse_823_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_823_str_;
    sparse_823_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_823_str(::std::string* sparse_823_str) {
  if (sparse_823_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_823_str_;
  }
  if (sparse_823_str) {
    set_has_sparse_823_str();
    sparse_823_str_ = sparse_823_str;
  } else {
    clear_has_sparse_823_str();
    sparse_823_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_824_str = 836;
inline bool Database_NoBench::has_sparse_824_str() const {
  return (_has_bits_[26] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_824_str() {
  _has_bits_[26] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_824_str() {
  _has_bits_[26] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_824_str() {
  if (sparse_824_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_824_str_->clear();
  }
  clear_has_sparse_824_str();
}
inline const ::std::string& Database_NoBench::sparse_824_str() const {
  return *sparse_824_str_;
}
inline void Database_NoBench::set_sparse_824_str(const ::std::string& value) {
  set_has_sparse_824_str();
  if (sparse_824_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_824_str_ = new ::std::string;
  }
  sparse_824_str_->assign(value);
}
inline void Database_NoBench::set_sparse_824_str(const char* value) {
  set_has_sparse_824_str();
  if (sparse_824_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_824_str_ = new ::std::string;
  }
  sparse_824_str_->assign(value);
}
inline void Database_NoBench::set_sparse_824_str(const char* value, size_t size) {
  set_has_sparse_824_str();
  if (sparse_824_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_824_str_ = new ::std::string;
  }
  sparse_824_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_824_str() {
  set_has_sparse_824_str();
  if (sparse_824_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_824_str_ = new ::std::string;
  }
  return sparse_824_str_;
}
inline ::std::string* Database_NoBench::release_sparse_824_str() {
  clear_has_sparse_824_str();
  if (sparse_824_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_824_str_;
    sparse_824_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_824_str(::std::string* sparse_824_str) {
  if (sparse_824_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_824_str_;
  }
  if (sparse_824_str) {
    set_has_sparse_824_str();
    sparse_824_str_ = sparse_824_str;
  } else {
    clear_has_sparse_824_str();
    sparse_824_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_825_str = 837;
inline bool Database_NoBench::has_sparse_825_str() const {
  return (_has_bits_[26] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_825_str() {
  _has_bits_[26] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_825_str() {
  _has_bits_[26] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_825_str() {
  if (sparse_825_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_825_str_->clear();
  }
  clear_has_sparse_825_str();
}
inline const ::std::string& Database_NoBench::sparse_825_str() const {
  return *sparse_825_str_;
}
inline void Database_NoBench::set_sparse_825_str(const ::std::string& value) {
  set_has_sparse_825_str();
  if (sparse_825_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_825_str_ = new ::std::string;
  }
  sparse_825_str_->assign(value);
}
inline void Database_NoBench::set_sparse_825_str(const char* value) {
  set_has_sparse_825_str();
  if (sparse_825_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_825_str_ = new ::std::string;
  }
  sparse_825_str_->assign(value);
}
inline void Database_NoBench::set_sparse_825_str(const char* value, size_t size) {
  set_has_sparse_825_str();
  if (sparse_825_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_825_str_ = new ::std::string;
  }
  sparse_825_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_825_str() {
  set_has_sparse_825_str();
  if (sparse_825_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_825_str_ = new ::std::string;
  }
  return sparse_825_str_;
}
inline ::std::string* Database_NoBench::release_sparse_825_str() {
  clear_has_sparse_825_str();
  if (sparse_825_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_825_str_;
    sparse_825_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_825_str(::std::string* sparse_825_str) {
  if (sparse_825_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_825_str_;
  }
  if (sparse_825_str) {
    set_has_sparse_825_str();
    sparse_825_str_ = sparse_825_str;
  } else {
    clear_has_sparse_825_str();
    sparse_825_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_826_str = 838;
inline bool Database_NoBench::has_sparse_826_str() const {
  return (_has_bits_[26] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_826_str() {
  _has_bits_[26] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_826_str() {
  _has_bits_[26] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_826_str() {
  if (sparse_826_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_826_str_->clear();
  }
  clear_has_sparse_826_str();
}
inline const ::std::string& Database_NoBench::sparse_826_str() const {
  return *sparse_826_str_;
}
inline void Database_NoBench::set_sparse_826_str(const ::std::string& value) {
  set_has_sparse_826_str();
  if (sparse_826_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_826_str_ = new ::std::string;
  }
  sparse_826_str_->assign(value);
}
inline void Database_NoBench::set_sparse_826_str(const char* value) {
  set_has_sparse_826_str();
  if (sparse_826_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_826_str_ = new ::std::string;
  }
  sparse_826_str_->assign(value);
}
inline void Database_NoBench::set_sparse_826_str(const char* value, size_t size) {
  set_has_sparse_826_str();
  if (sparse_826_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_826_str_ = new ::std::string;
  }
  sparse_826_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_826_str() {
  set_has_sparse_826_str();
  if (sparse_826_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_826_str_ = new ::std::string;
  }
  return sparse_826_str_;
}
inline ::std::string* Database_NoBench::release_sparse_826_str() {
  clear_has_sparse_826_str();
  if (sparse_826_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_826_str_;
    sparse_826_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_826_str(::std::string* sparse_826_str) {
  if (sparse_826_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_826_str_;
  }
  if (sparse_826_str) {
    set_has_sparse_826_str();
    sparse_826_str_ = sparse_826_str;
  } else {
    clear_has_sparse_826_str();
    sparse_826_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_827_str = 839;
inline bool Database_NoBench::has_sparse_827_str() const {
  return (_has_bits_[26] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_827_str() {
  _has_bits_[26] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_827_str() {
  _has_bits_[26] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_827_str() {
  if (sparse_827_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_827_str_->clear();
  }
  clear_has_sparse_827_str();
}
inline const ::std::string& Database_NoBench::sparse_827_str() const {
  return *sparse_827_str_;
}
inline void Database_NoBench::set_sparse_827_str(const ::std::string& value) {
  set_has_sparse_827_str();
  if (sparse_827_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_827_str_ = new ::std::string;
  }
  sparse_827_str_->assign(value);
}
inline void Database_NoBench::set_sparse_827_str(const char* value) {
  set_has_sparse_827_str();
  if (sparse_827_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_827_str_ = new ::std::string;
  }
  sparse_827_str_->assign(value);
}
inline void Database_NoBench::set_sparse_827_str(const char* value, size_t size) {
  set_has_sparse_827_str();
  if (sparse_827_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_827_str_ = new ::std::string;
  }
  sparse_827_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_827_str() {
  set_has_sparse_827_str();
  if (sparse_827_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_827_str_ = new ::std::string;
  }
  return sparse_827_str_;
}
inline ::std::string* Database_NoBench::release_sparse_827_str() {
  clear_has_sparse_827_str();
  if (sparse_827_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_827_str_;
    sparse_827_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_827_str(::std::string* sparse_827_str) {
  if (sparse_827_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_827_str_;
  }
  if (sparse_827_str) {
    set_has_sparse_827_str();
    sparse_827_str_ = sparse_827_str;
  } else {
    clear_has_sparse_827_str();
    sparse_827_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_828_str = 840;
inline bool Database_NoBench::has_sparse_828_str() const {
  return (_has_bits_[26] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_828_str() {
  _has_bits_[26] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_828_str() {
  _has_bits_[26] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_828_str() {
  if (sparse_828_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_828_str_->clear();
  }
  clear_has_sparse_828_str();
}
inline const ::std::string& Database_NoBench::sparse_828_str() const {
  return *sparse_828_str_;
}
inline void Database_NoBench::set_sparse_828_str(const ::std::string& value) {
  set_has_sparse_828_str();
  if (sparse_828_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_828_str_ = new ::std::string;
  }
  sparse_828_str_->assign(value);
}
inline void Database_NoBench::set_sparse_828_str(const char* value) {
  set_has_sparse_828_str();
  if (sparse_828_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_828_str_ = new ::std::string;
  }
  sparse_828_str_->assign(value);
}
inline void Database_NoBench::set_sparse_828_str(const char* value, size_t size) {
  set_has_sparse_828_str();
  if (sparse_828_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_828_str_ = new ::std::string;
  }
  sparse_828_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_828_str() {
  set_has_sparse_828_str();
  if (sparse_828_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_828_str_ = new ::std::string;
  }
  return sparse_828_str_;
}
inline ::std::string* Database_NoBench::release_sparse_828_str() {
  clear_has_sparse_828_str();
  if (sparse_828_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_828_str_;
    sparse_828_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_828_str(::std::string* sparse_828_str) {
  if (sparse_828_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_828_str_;
  }
  if (sparse_828_str) {
    set_has_sparse_828_str();
    sparse_828_str_ = sparse_828_str;
  } else {
    clear_has_sparse_828_str();
    sparse_828_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_829_str = 841;
inline bool Database_NoBench::has_sparse_829_str() const {
  return (_has_bits_[26] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_829_str() {
  _has_bits_[26] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_829_str() {
  _has_bits_[26] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_829_str() {
  if (sparse_829_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_829_str_->clear();
  }
  clear_has_sparse_829_str();
}
inline const ::std::string& Database_NoBench::sparse_829_str() const {
  return *sparse_829_str_;
}
inline void Database_NoBench::set_sparse_829_str(const ::std::string& value) {
  set_has_sparse_829_str();
  if (sparse_829_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_829_str_ = new ::std::string;
  }
  sparse_829_str_->assign(value);
}
inline void Database_NoBench::set_sparse_829_str(const char* value) {
  set_has_sparse_829_str();
  if (sparse_829_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_829_str_ = new ::std::string;
  }
  sparse_829_str_->assign(value);
}
inline void Database_NoBench::set_sparse_829_str(const char* value, size_t size) {
  set_has_sparse_829_str();
  if (sparse_829_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_829_str_ = new ::std::string;
  }
  sparse_829_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_829_str() {
  set_has_sparse_829_str();
  if (sparse_829_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_829_str_ = new ::std::string;
  }
  return sparse_829_str_;
}
inline ::std::string* Database_NoBench::release_sparse_829_str() {
  clear_has_sparse_829_str();
  if (sparse_829_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_829_str_;
    sparse_829_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_829_str(::std::string* sparse_829_str) {
  if (sparse_829_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_829_str_;
  }
  if (sparse_829_str) {
    set_has_sparse_829_str();
    sparse_829_str_ = sparse_829_str;
  } else {
    clear_has_sparse_829_str();
    sparse_829_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_830_str = 842;
inline bool Database_NoBench::has_sparse_830_str() const {
  return (_has_bits_[26] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_830_str() {
  _has_bits_[26] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_830_str() {
  _has_bits_[26] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_830_str() {
  if (sparse_830_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_830_str_->clear();
  }
  clear_has_sparse_830_str();
}
inline const ::std::string& Database_NoBench::sparse_830_str() const {
  return *sparse_830_str_;
}
inline void Database_NoBench::set_sparse_830_str(const ::std::string& value) {
  set_has_sparse_830_str();
  if (sparse_830_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_830_str_ = new ::std::string;
  }
  sparse_830_str_->assign(value);
}
inline void Database_NoBench::set_sparse_830_str(const char* value) {
  set_has_sparse_830_str();
  if (sparse_830_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_830_str_ = new ::std::string;
  }
  sparse_830_str_->assign(value);
}
inline void Database_NoBench::set_sparse_830_str(const char* value, size_t size) {
  set_has_sparse_830_str();
  if (sparse_830_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_830_str_ = new ::std::string;
  }
  sparse_830_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_830_str() {
  set_has_sparse_830_str();
  if (sparse_830_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_830_str_ = new ::std::string;
  }
  return sparse_830_str_;
}
inline ::std::string* Database_NoBench::release_sparse_830_str() {
  clear_has_sparse_830_str();
  if (sparse_830_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_830_str_;
    sparse_830_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_830_str(::std::string* sparse_830_str) {
  if (sparse_830_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_830_str_;
  }
  if (sparse_830_str) {
    set_has_sparse_830_str();
    sparse_830_str_ = sparse_830_str;
  } else {
    clear_has_sparse_830_str();
    sparse_830_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_831_str = 843;
inline bool Database_NoBench::has_sparse_831_str() const {
  return (_has_bits_[26] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_831_str() {
  _has_bits_[26] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_831_str() {
  _has_bits_[26] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_831_str() {
  if (sparse_831_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_831_str_->clear();
  }
  clear_has_sparse_831_str();
}
inline const ::std::string& Database_NoBench::sparse_831_str() const {
  return *sparse_831_str_;
}
inline void Database_NoBench::set_sparse_831_str(const ::std::string& value) {
  set_has_sparse_831_str();
  if (sparse_831_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_831_str_ = new ::std::string;
  }
  sparse_831_str_->assign(value);
}
inline void Database_NoBench::set_sparse_831_str(const char* value) {
  set_has_sparse_831_str();
  if (sparse_831_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_831_str_ = new ::std::string;
  }
  sparse_831_str_->assign(value);
}
inline void Database_NoBench::set_sparse_831_str(const char* value, size_t size) {
  set_has_sparse_831_str();
  if (sparse_831_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_831_str_ = new ::std::string;
  }
  sparse_831_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_831_str() {
  set_has_sparse_831_str();
  if (sparse_831_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_831_str_ = new ::std::string;
  }
  return sparse_831_str_;
}
inline ::std::string* Database_NoBench::release_sparse_831_str() {
  clear_has_sparse_831_str();
  if (sparse_831_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_831_str_;
    sparse_831_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_831_str(::std::string* sparse_831_str) {
  if (sparse_831_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_831_str_;
  }
  if (sparse_831_str) {
    set_has_sparse_831_str();
    sparse_831_str_ = sparse_831_str;
  } else {
    clear_has_sparse_831_str();
    sparse_831_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_832_str = 844;
inline bool Database_NoBench::has_sparse_832_str() const {
  return (_has_bits_[26] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_832_str() {
  _has_bits_[26] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_832_str() {
  _has_bits_[26] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_832_str() {
  if (sparse_832_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_832_str_->clear();
  }
  clear_has_sparse_832_str();
}
inline const ::std::string& Database_NoBench::sparse_832_str() const {
  return *sparse_832_str_;
}
inline void Database_NoBench::set_sparse_832_str(const ::std::string& value) {
  set_has_sparse_832_str();
  if (sparse_832_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_832_str_ = new ::std::string;
  }
  sparse_832_str_->assign(value);
}
inline void Database_NoBench::set_sparse_832_str(const char* value) {
  set_has_sparse_832_str();
  if (sparse_832_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_832_str_ = new ::std::string;
  }
  sparse_832_str_->assign(value);
}
inline void Database_NoBench::set_sparse_832_str(const char* value, size_t size) {
  set_has_sparse_832_str();
  if (sparse_832_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_832_str_ = new ::std::string;
  }
  sparse_832_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_832_str() {
  set_has_sparse_832_str();
  if (sparse_832_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_832_str_ = new ::std::string;
  }
  return sparse_832_str_;
}
inline ::std::string* Database_NoBench::release_sparse_832_str() {
  clear_has_sparse_832_str();
  if (sparse_832_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_832_str_;
    sparse_832_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_832_str(::std::string* sparse_832_str) {
  if (sparse_832_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_832_str_;
  }
  if (sparse_832_str) {
    set_has_sparse_832_str();
    sparse_832_str_ = sparse_832_str;
  } else {
    clear_has_sparse_832_str();
    sparse_832_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_833_str = 845;
inline bool Database_NoBench::has_sparse_833_str() const {
  return (_has_bits_[26] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_833_str() {
  _has_bits_[26] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_833_str() {
  _has_bits_[26] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_833_str() {
  if (sparse_833_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_833_str_->clear();
  }
  clear_has_sparse_833_str();
}
inline const ::std::string& Database_NoBench::sparse_833_str() const {
  return *sparse_833_str_;
}
inline void Database_NoBench::set_sparse_833_str(const ::std::string& value) {
  set_has_sparse_833_str();
  if (sparse_833_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_833_str_ = new ::std::string;
  }
  sparse_833_str_->assign(value);
}
inline void Database_NoBench::set_sparse_833_str(const char* value) {
  set_has_sparse_833_str();
  if (sparse_833_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_833_str_ = new ::std::string;
  }
  sparse_833_str_->assign(value);
}
inline void Database_NoBench::set_sparse_833_str(const char* value, size_t size) {
  set_has_sparse_833_str();
  if (sparse_833_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_833_str_ = new ::std::string;
  }
  sparse_833_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_833_str() {
  set_has_sparse_833_str();
  if (sparse_833_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_833_str_ = new ::std::string;
  }
  return sparse_833_str_;
}
inline ::std::string* Database_NoBench::release_sparse_833_str() {
  clear_has_sparse_833_str();
  if (sparse_833_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_833_str_;
    sparse_833_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_833_str(::std::string* sparse_833_str) {
  if (sparse_833_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_833_str_;
  }
  if (sparse_833_str) {
    set_has_sparse_833_str();
    sparse_833_str_ = sparse_833_str;
  } else {
    clear_has_sparse_833_str();
    sparse_833_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_834_str = 846;
inline bool Database_NoBench::has_sparse_834_str() const {
  return (_has_bits_[26] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_834_str() {
  _has_bits_[26] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_834_str() {
  _has_bits_[26] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_834_str() {
  if (sparse_834_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_834_str_->clear();
  }
  clear_has_sparse_834_str();
}
inline const ::std::string& Database_NoBench::sparse_834_str() const {
  return *sparse_834_str_;
}
inline void Database_NoBench::set_sparse_834_str(const ::std::string& value) {
  set_has_sparse_834_str();
  if (sparse_834_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_834_str_ = new ::std::string;
  }
  sparse_834_str_->assign(value);
}
inline void Database_NoBench::set_sparse_834_str(const char* value) {
  set_has_sparse_834_str();
  if (sparse_834_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_834_str_ = new ::std::string;
  }
  sparse_834_str_->assign(value);
}
inline void Database_NoBench::set_sparse_834_str(const char* value, size_t size) {
  set_has_sparse_834_str();
  if (sparse_834_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_834_str_ = new ::std::string;
  }
  sparse_834_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_834_str() {
  set_has_sparse_834_str();
  if (sparse_834_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_834_str_ = new ::std::string;
  }
  return sparse_834_str_;
}
inline ::std::string* Database_NoBench::release_sparse_834_str() {
  clear_has_sparse_834_str();
  if (sparse_834_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_834_str_;
    sparse_834_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_834_str(::std::string* sparse_834_str) {
  if (sparse_834_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_834_str_;
  }
  if (sparse_834_str) {
    set_has_sparse_834_str();
    sparse_834_str_ = sparse_834_str;
  } else {
    clear_has_sparse_834_str();
    sparse_834_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_835_str = 847;
inline bool Database_NoBench::has_sparse_835_str() const {
  return (_has_bits_[26] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_835_str() {
  _has_bits_[26] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_835_str() {
  _has_bits_[26] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_835_str() {
  if (sparse_835_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_835_str_->clear();
  }
  clear_has_sparse_835_str();
}
inline const ::std::string& Database_NoBench::sparse_835_str() const {
  return *sparse_835_str_;
}
inline void Database_NoBench::set_sparse_835_str(const ::std::string& value) {
  set_has_sparse_835_str();
  if (sparse_835_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_835_str_ = new ::std::string;
  }
  sparse_835_str_->assign(value);
}
inline void Database_NoBench::set_sparse_835_str(const char* value) {
  set_has_sparse_835_str();
  if (sparse_835_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_835_str_ = new ::std::string;
  }
  sparse_835_str_->assign(value);
}
inline void Database_NoBench::set_sparse_835_str(const char* value, size_t size) {
  set_has_sparse_835_str();
  if (sparse_835_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_835_str_ = new ::std::string;
  }
  sparse_835_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_835_str() {
  set_has_sparse_835_str();
  if (sparse_835_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_835_str_ = new ::std::string;
  }
  return sparse_835_str_;
}
inline ::std::string* Database_NoBench::release_sparse_835_str() {
  clear_has_sparse_835_str();
  if (sparse_835_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_835_str_;
    sparse_835_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_835_str(::std::string* sparse_835_str) {
  if (sparse_835_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_835_str_;
  }
  if (sparse_835_str) {
    set_has_sparse_835_str();
    sparse_835_str_ = sparse_835_str;
  } else {
    clear_has_sparse_835_str();
    sparse_835_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_836_str = 848;
inline bool Database_NoBench::has_sparse_836_str() const {
  return (_has_bits_[26] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_836_str() {
  _has_bits_[26] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_836_str() {
  _has_bits_[26] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_836_str() {
  if (sparse_836_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_836_str_->clear();
  }
  clear_has_sparse_836_str();
}
inline const ::std::string& Database_NoBench::sparse_836_str() const {
  return *sparse_836_str_;
}
inline void Database_NoBench::set_sparse_836_str(const ::std::string& value) {
  set_has_sparse_836_str();
  if (sparse_836_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_836_str_ = new ::std::string;
  }
  sparse_836_str_->assign(value);
}
inline void Database_NoBench::set_sparse_836_str(const char* value) {
  set_has_sparse_836_str();
  if (sparse_836_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_836_str_ = new ::std::string;
  }
  sparse_836_str_->assign(value);
}
inline void Database_NoBench::set_sparse_836_str(const char* value, size_t size) {
  set_has_sparse_836_str();
  if (sparse_836_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_836_str_ = new ::std::string;
  }
  sparse_836_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_836_str() {
  set_has_sparse_836_str();
  if (sparse_836_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_836_str_ = new ::std::string;
  }
  return sparse_836_str_;
}
inline ::std::string* Database_NoBench::release_sparse_836_str() {
  clear_has_sparse_836_str();
  if (sparse_836_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_836_str_;
    sparse_836_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_836_str(::std::string* sparse_836_str) {
  if (sparse_836_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_836_str_;
  }
  if (sparse_836_str) {
    set_has_sparse_836_str();
    sparse_836_str_ = sparse_836_str;
  } else {
    clear_has_sparse_836_str();
    sparse_836_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_837_str = 849;
inline bool Database_NoBench::has_sparse_837_str() const {
  return (_has_bits_[26] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_837_str() {
  _has_bits_[26] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_837_str() {
  _has_bits_[26] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_837_str() {
  if (sparse_837_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_837_str_->clear();
  }
  clear_has_sparse_837_str();
}
inline const ::std::string& Database_NoBench::sparse_837_str() const {
  return *sparse_837_str_;
}
inline void Database_NoBench::set_sparse_837_str(const ::std::string& value) {
  set_has_sparse_837_str();
  if (sparse_837_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_837_str_ = new ::std::string;
  }
  sparse_837_str_->assign(value);
}
inline void Database_NoBench::set_sparse_837_str(const char* value) {
  set_has_sparse_837_str();
  if (sparse_837_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_837_str_ = new ::std::string;
  }
  sparse_837_str_->assign(value);
}
inline void Database_NoBench::set_sparse_837_str(const char* value, size_t size) {
  set_has_sparse_837_str();
  if (sparse_837_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_837_str_ = new ::std::string;
  }
  sparse_837_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_837_str() {
  set_has_sparse_837_str();
  if (sparse_837_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_837_str_ = new ::std::string;
  }
  return sparse_837_str_;
}
inline ::std::string* Database_NoBench::release_sparse_837_str() {
  clear_has_sparse_837_str();
  if (sparse_837_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_837_str_;
    sparse_837_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_837_str(::std::string* sparse_837_str) {
  if (sparse_837_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_837_str_;
  }
  if (sparse_837_str) {
    set_has_sparse_837_str();
    sparse_837_str_ = sparse_837_str;
  } else {
    clear_has_sparse_837_str();
    sparse_837_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_838_str = 850;
inline bool Database_NoBench::has_sparse_838_str() const {
  return (_has_bits_[26] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_838_str() {
  _has_bits_[26] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_838_str() {
  _has_bits_[26] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_838_str() {
  if (sparse_838_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_838_str_->clear();
  }
  clear_has_sparse_838_str();
}
inline const ::std::string& Database_NoBench::sparse_838_str() const {
  return *sparse_838_str_;
}
inline void Database_NoBench::set_sparse_838_str(const ::std::string& value) {
  set_has_sparse_838_str();
  if (sparse_838_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_838_str_ = new ::std::string;
  }
  sparse_838_str_->assign(value);
}
inline void Database_NoBench::set_sparse_838_str(const char* value) {
  set_has_sparse_838_str();
  if (sparse_838_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_838_str_ = new ::std::string;
  }
  sparse_838_str_->assign(value);
}
inline void Database_NoBench::set_sparse_838_str(const char* value, size_t size) {
  set_has_sparse_838_str();
  if (sparse_838_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_838_str_ = new ::std::string;
  }
  sparse_838_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_838_str() {
  set_has_sparse_838_str();
  if (sparse_838_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_838_str_ = new ::std::string;
  }
  return sparse_838_str_;
}
inline ::std::string* Database_NoBench::release_sparse_838_str() {
  clear_has_sparse_838_str();
  if (sparse_838_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_838_str_;
    sparse_838_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_838_str(::std::string* sparse_838_str) {
  if (sparse_838_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_838_str_;
  }
  if (sparse_838_str) {
    set_has_sparse_838_str();
    sparse_838_str_ = sparse_838_str;
  } else {
    clear_has_sparse_838_str();
    sparse_838_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_839_str = 851;
inline bool Database_NoBench::has_sparse_839_str() const {
  return (_has_bits_[26] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_839_str() {
  _has_bits_[26] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_839_str() {
  _has_bits_[26] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_839_str() {
  if (sparse_839_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_839_str_->clear();
  }
  clear_has_sparse_839_str();
}
inline const ::std::string& Database_NoBench::sparse_839_str() const {
  return *sparse_839_str_;
}
inline void Database_NoBench::set_sparse_839_str(const ::std::string& value) {
  set_has_sparse_839_str();
  if (sparse_839_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_839_str_ = new ::std::string;
  }
  sparse_839_str_->assign(value);
}
inline void Database_NoBench::set_sparse_839_str(const char* value) {
  set_has_sparse_839_str();
  if (sparse_839_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_839_str_ = new ::std::string;
  }
  sparse_839_str_->assign(value);
}
inline void Database_NoBench::set_sparse_839_str(const char* value, size_t size) {
  set_has_sparse_839_str();
  if (sparse_839_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_839_str_ = new ::std::string;
  }
  sparse_839_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_839_str() {
  set_has_sparse_839_str();
  if (sparse_839_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_839_str_ = new ::std::string;
  }
  return sparse_839_str_;
}
inline ::std::string* Database_NoBench::release_sparse_839_str() {
  clear_has_sparse_839_str();
  if (sparse_839_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_839_str_;
    sparse_839_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_839_str(::std::string* sparse_839_str) {
  if (sparse_839_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_839_str_;
  }
  if (sparse_839_str) {
    set_has_sparse_839_str();
    sparse_839_str_ = sparse_839_str;
  } else {
    clear_has_sparse_839_str();
    sparse_839_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_840_str = 852;
inline bool Database_NoBench::has_sparse_840_str() const {
  return (_has_bits_[26] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_840_str() {
  _has_bits_[26] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_840_str() {
  _has_bits_[26] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_840_str() {
  if (sparse_840_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_840_str_->clear();
  }
  clear_has_sparse_840_str();
}
inline const ::std::string& Database_NoBench::sparse_840_str() const {
  return *sparse_840_str_;
}
inline void Database_NoBench::set_sparse_840_str(const ::std::string& value) {
  set_has_sparse_840_str();
  if (sparse_840_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_840_str_ = new ::std::string;
  }
  sparse_840_str_->assign(value);
}
inline void Database_NoBench::set_sparse_840_str(const char* value) {
  set_has_sparse_840_str();
  if (sparse_840_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_840_str_ = new ::std::string;
  }
  sparse_840_str_->assign(value);
}
inline void Database_NoBench::set_sparse_840_str(const char* value, size_t size) {
  set_has_sparse_840_str();
  if (sparse_840_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_840_str_ = new ::std::string;
  }
  sparse_840_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_840_str() {
  set_has_sparse_840_str();
  if (sparse_840_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_840_str_ = new ::std::string;
  }
  return sparse_840_str_;
}
inline ::std::string* Database_NoBench::release_sparse_840_str() {
  clear_has_sparse_840_str();
  if (sparse_840_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_840_str_;
    sparse_840_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_840_str(::std::string* sparse_840_str) {
  if (sparse_840_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_840_str_;
  }
  if (sparse_840_str) {
    set_has_sparse_840_str();
    sparse_840_str_ = sparse_840_str;
  } else {
    clear_has_sparse_840_str();
    sparse_840_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_841_str = 853;
inline bool Database_NoBench::has_sparse_841_str() const {
  return (_has_bits_[26] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_841_str() {
  _has_bits_[26] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_841_str() {
  _has_bits_[26] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_841_str() {
  if (sparse_841_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_841_str_->clear();
  }
  clear_has_sparse_841_str();
}
inline const ::std::string& Database_NoBench::sparse_841_str() const {
  return *sparse_841_str_;
}
inline void Database_NoBench::set_sparse_841_str(const ::std::string& value) {
  set_has_sparse_841_str();
  if (sparse_841_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_841_str_ = new ::std::string;
  }
  sparse_841_str_->assign(value);
}
inline void Database_NoBench::set_sparse_841_str(const char* value) {
  set_has_sparse_841_str();
  if (sparse_841_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_841_str_ = new ::std::string;
  }
  sparse_841_str_->assign(value);
}
inline void Database_NoBench::set_sparse_841_str(const char* value, size_t size) {
  set_has_sparse_841_str();
  if (sparse_841_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_841_str_ = new ::std::string;
  }
  sparse_841_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_841_str() {
  set_has_sparse_841_str();
  if (sparse_841_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_841_str_ = new ::std::string;
  }
  return sparse_841_str_;
}
inline ::std::string* Database_NoBench::release_sparse_841_str() {
  clear_has_sparse_841_str();
  if (sparse_841_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_841_str_;
    sparse_841_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_841_str(::std::string* sparse_841_str) {
  if (sparse_841_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_841_str_;
  }
  if (sparse_841_str) {
    set_has_sparse_841_str();
    sparse_841_str_ = sparse_841_str;
  } else {
    clear_has_sparse_841_str();
    sparse_841_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_842_str = 854;
inline bool Database_NoBench::has_sparse_842_str() const {
  return (_has_bits_[26] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_842_str() {
  _has_bits_[26] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_842_str() {
  _has_bits_[26] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_842_str() {
  if (sparse_842_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_842_str_->clear();
  }
  clear_has_sparse_842_str();
}
inline const ::std::string& Database_NoBench::sparse_842_str() const {
  return *sparse_842_str_;
}
inline void Database_NoBench::set_sparse_842_str(const ::std::string& value) {
  set_has_sparse_842_str();
  if (sparse_842_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_842_str_ = new ::std::string;
  }
  sparse_842_str_->assign(value);
}
inline void Database_NoBench::set_sparse_842_str(const char* value) {
  set_has_sparse_842_str();
  if (sparse_842_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_842_str_ = new ::std::string;
  }
  sparse_842_str_->assign(value);
}
inline void Database_NoBench::set_sparse_842_str(const char* value, size_t size) {
  set_has_sparse_842_str();
  if (sparse_842_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_842_str_ = new ::std::string;
  }
  sparse_842_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_842_str() {
  set_has_sparse_842_str();
  if (sparse_842_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_842_str_ = new ::std::string;
  }
  return sparse_842_str_;
}
inline ::std::string* Database_NoBench::release_sparse_842_str() {
  clear_has_sparse_842_str();
  if (sparse_842_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_842_str_;
    sparse_842_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_842_str(::std::string* sparse_842_str) {
  if (sparse_842_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_842_str_;
  }
  if (sparse_842_str) {
    set_has_sparse_842_str();
    sparse_842_str_ = sparse_842_str;
  } else {
    clear_has_sparse_842_str();
    sparse_842_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_843_str = 855;
inline bool Database_NoBench::has_sparse_843_str() const {
  return (_has_bits_[26] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_843_str() {
  _has_bits_[26] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_843_str() {
  _has_bits_[26] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_843_str() {
  if (sparse_843_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_843_str_->clear();
  }
  clear_has_sparse_843_str();
}
inline const ::std::string& Database_NoBench::sparse_843_str() const {
  return *sparse_843_str_;
}
inline void Database_NoBench::set_sparse_843_str(const ::std::string& value) {
  set_has_sparse_843_str();
  if (sparse_843_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_843_str_ = new ::std::string;
  }
  sparse_843_str_->assign(value);
}
inline void Database_NoBench::set_sparse_843_str(const char* value) {
  set_has_sparse_843_str();
  if (sparse_843_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_843_str_ = new ::std::string;
  }
  sparse_843_str_->assign(value);
}
inline void Database_NoBench::set_sparse_843_str(const char* value, size_t size) {
  set_has_sparse_843_str();
  if (sparse_843_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_843_str_ = new ::std::string;
  }
  sparse_843_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_843_str() {
  set_has_sparse_843_str();
  if (sparse_843_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_843_str_ = new ::std::string;
  }
  return sparse_843_str_;
}
inline ::std::string* Database_NoBench::release_sparse_843_str() {
  clear_has_sparse_843_str();
  if (sparse_843_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_843_str_;
    sparse_843_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_843_str(::std::string* sparse_843_str) {
  if (sparse_843_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_843_str_;
  }
  if (sparse_843_str) {
    set_has_sparse_843_str();
    sparse_843_str_ = sparse_843_str;
  } else {
    clear_has_sparse_843_str();
    sparse_843_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_844_str = 856;
inline bool Database_NoBench::has_sparse_844_str() const {
  return (_has_bits_[26] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_844_str() {
  _has_bits_[26] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_844_str() {
  _has_bits_[26] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_844_str() {
  if (sparse_844_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_844_str_->clear();
  }
  clear_has_sparse_844_str();
}
inline const ::std::string& Database_NoBench::sparse_844_str() const {
  return *sparse_844_str_;
}
inline void Database_NoBench::set_sparse_844_str(const ::std::string& value) {
  set_has_sparse_844_str();
  if (sparse_844_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_844_str_ = new ::std::string;
  }
  sparse_844_str_->assign(value);
}
inline void Database_NoBench::set_sparse_844_str(const char* value) {
  set_has_sparse_844_str();
  if (sparse_844_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_844_str_ = new ::std::string;
  }
  sparse_844_str_->assign(value);
}
inline void Database_NoBench::set_sparse_844_str(const char* value, size_t size) {
  set_has_sparse_844_str();
  if (sparse_844_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_844_str_ = new ::std::string;
  }
  sparse_844_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_844_str() {
  set_has_sparse_844_str();
  if (sparse_844_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_844_str_ = new ::std::string;
  }
  return sparse_844_str_;
}
inline ::std::string* Database_NoBench::release_sparse_844_str() {
  clear_has_sparse_844_str();
  if (sparse_844_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_844_str_;
    sparse_844_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_844_str(::std::string* sparse_844_str) {
  if (sparse_844_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_844_str_;
  }
  if (sparse_844_str) {
    set_has_sparse_844_str();
    sparse_844_str_ = sparse_844_str;
  } else {
    clear_has_sparse_844_str();
    sparse_844_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_845_str = 857;
inline bool Database_NoBench::has_sparse_845_str() const {
  return (_has_bits_[26] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_845_str() {
  _has_bits_[26] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_845_str() {
  _has_bits_[26] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_845_str() {
  if (sparse_845_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_845_str_->clear();
  }
  clear_has_sparse_845_str();
}
inline const ::std::string& Database_NoBench::sparse_845_str() const {
  return *sparse_845_str_;
}
inline void Database_NoBench::set_sparse_845_str(const ::std::string& value) {
  set_has_sparse_845_str();
  if (sparse_845_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_845_str_ = new ::std::string;
  }
  sparse_845_str_->assign(value);
}
inline void Database_NoBench::set_sparse_845_str(const char* value) {
  set_has_sparse_845_str();
  if (sparse_845_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_845_str_ = new ::std::string;
  }
  sparse_845_str_->assign(value);
}
inline void Database_NoBench::set_sparse_845_str(const char* value, size_t size) {
  set_has_sparse_845_str();
  if (sparse_845_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_845_str_ = new ::std::string;
  }
  sparse_845_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_845_str() {
  set_has_sparse_845_str();
  if (sparse_845_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_845_str_ = new ::std::string;
  }
  return sparse_845_str_;
}
inline ::std::string* Database_NoBench::release_sparse_845_str() {
  clear_has_sparse_845_str();
  if (sparse_845_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_845_str_;
    sparse_845_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_845_str(::std::string* sparse_845_str) {
  if (sparse_845_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_845_str_;
  }
  if (sparse_845_str) {
    set_has_sparse_845_str();
    sparse_845_str_ = sparse_845_str;
  } else {
    clear_has_sparse_845_str();
    sparse_845_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_846_str = 858;
inline bool Database_NoBench::has_sparse_846_str() const {
  return (_has_bits_[26] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_846_str() {
  _has_bits_[26] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_846_str() {
  _has_bits_[26] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_846_str() {
  if (sparse_846_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_846_str_->clear();
  }
  clear_has_sparse_846_str();
}
inline const ::std::string& Database_NoBench::sparse_846_str() const {
  return *sparse_846_str_;
}
inline void Database_NoBench::set_sparse_846_str(const ::std::string& value) {
  set_has_sparse_846_str();
  if (sparse_846_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_846_str_ = new ::std::string;
  }
  sparse_846_str_->assign(value);
}
inline void Database_NoBench::set_sparse_846_str(const char* value) {
  set_has_sparse_846_str();
  if (sparse_846_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_846_str_ = new ::std::string;
  }
  sparse_846_str_->assign(value);
}
inline void Database_NoBench::set_sparse_846_str(const char* value, size_t size) {
  set_has_sparse_846_str();
  if (sparse_846_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_846_str_ = new ::std::string;
  }
  sparse_846_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_846_str() {
  set_has_sparse_846_str();
  if (sparse_846_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_846_str_ = new ::std::string;
  }
  return sparse_846_str_;
}
inline ::std::string* Database_NoBench::release_sparse_846_str() {
  clear_has_sparse_846_str();
  if (sparse_846_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_846_str_;
    sparse_846_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_846_str(::std::string* sparse_846_str) {
  if (sparse_846_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_846_str_;
  }
  if (sparse_846_str) {
    set_has_sparse_846_str();
    sparse_846_str_ = sparse_846_str;
  } else {
    clear_has_sparse_846_str();
    sparse_846_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_847_str = 859;
inline bool Database_NoBench::has_sparse_847_str() const {
  return (_has_bits_[26] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_847_str() {
  _has_bits_[26] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_847_str() {
  _has_bits_[26] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_847_str() {
  if (sparse_847_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_847_str_->clear();
  }
  clear_has_sparse_847_str();
}
inline const ::std::string& Database_NoBench::sparse_847_str() const {
  return *sparse_847_str_;
}
inline void Database_NoBench::set_sparse_847_str(const ::std::string& value) {
  set_has_sparse_847_str();
  if (sparse_847_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_847_str_ = new ::std::string;
  }
  sparse_847_str_->assign(value);
}
inline void Database_NoBench::set_sparse_847_str(const char* value) {
  set_has_sparse_847_str();
  if (sparse_847_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_847_str_ = new ::std::string;
  }
  sparse_847_str_->assign(value);
}
inline void Database_NoBench::set_sparse_847_str(const char* value, size_t size) {
  set_has_sparse_847_str();
  if (sparse_847_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_847_str_ = new ::std::string;
  }
  sparse_847_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_847_str() {
  set_has_sparse_847_str();
  if (sparse_847_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_847_str_ = new ::std::string;
  }
  return sparse_847_str_;
}
inline ::std::string* Database_NoBench::release_sparse_847_str() {
  clear_has_sparse_847_str();
  if (sparse_847_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_847_str_;
    sparse_847_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_847_str(::std::string* sparse_847_str) {
  if (sparse_847_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_847_str_;
  }
  if (sparse_847_str) {
    set_has_sparse_847_str();
    sparse_847_str_ = sparse_847_str;
  } else {
    clear_has_sparse_847_str();
    sparse_847_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_848_str = 860;
inline bool Database_NoBench::has_sparse_848_str() const {
  return (_has_bits_[26] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_848_str() {
  _has_bits_[26] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_848_str() {
  _has_bits_[26] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_848_str() {
  if (sparse_848_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_848_str_->clear();
  }
  clear_has_sparse_848_str();
}
inline const ::std::string& Database_NoBench::sparse_848_str() const {
  return *sparse_848_str_;
}
inline void Database_NoBench::set_sparse_848_str(const ::std::string& value) {
  set_has_sparse_848_str();
  if (sparse_848_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_848_str_ = new ::std::string;
  }
  sparse_848_str_->assign(value);
}
inline void Database_NoBench::set_sparse_848_str(const char* value) {
  set_has_sparse_848_str();
  if (sparse_848_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_848_str_ = new ::std::string;
  }
  sparse_848_str_->assign(value);
}
inline void Database_NoBench::set_sparse_848_str(const char* value, size_t size) {
  set_has_sparse_848_str();
  if (sparse_848_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_848_str_ = new ::std::string;
  }
  sparse_848_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_848_str() {
  set_has_sparse_848_str();
  if (sparse_848_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_848_str_ = new ::std::string;
  }
  return sparse_848_str_;
}
inline ::std::string* Database_NoBench::release_sparse_848_str() {
  clear_has_sparse_848_str();
  if (sparse_848_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_848_str_;
    sparse_848_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_848_str(::std::string* sparse_848_str) {
  if (sparse_848_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_848_str_;
  }
  if (sparse_848_str) {
    set_has_sparse_848_str();
    sparse_848_str_ = sparse_848_str;
  } else {
    clear_has_sparse_848_str();
    sparse_848_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_849_str = 861;
inline bool Database_NoBench::has_sparse_849_str() const {
  return (_has_bits_[26] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_849_str() {
  _has_bits_[26] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_849_str() {
  _has_bits_[26] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_849_str() {
  if (sparse_849_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_849_str_->clear();
  }
  clear_has_sparse_849_str();
}
inline const ::std::string& Database_NoBench::sparse_849_str() const {
  return *sparse_849_str_;
}
inline void Database_NoBench::set_sparse_849_str(const ::std::string& value) {
  set_has_sparse_849_str();
  if (sparse_849_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_849_str_ = new ::std::string;
  }
  sparse_849_str_->assign(value);
}
inline void Database_NoBench::set_sparse_849_str(const char* value) {
  set_has_sparse_849_str();
  if (sparse_849_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_849_str_ = new ::std::string;
  }
  sparse_849_str_->assign(value);
}
inline void Database_NoBench::set_sparse_849_str(const char* value, size_t size) {
  set_has_sparse_849_str();
  if (sparse_849_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_849_str_ = new ::std::string;
  }
  sparse_849_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_849_str() {
  set_has_sparse_849_str();
  if (sparse_849_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_849_str_ = new ::std::string;
  }
  return sparse_849_str_;
}
inline ::std::string* Database_NoBench::release_sparse_849_str() {
  clear_has_sparse_849_str();
  if (sparse_849_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_849_str_;
    sparse_849_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_849_str(::std::string* sparse_849_str) {
  if (sparse_849_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_849_str_;
  }
  if (sparse_849_str) {
    set_has_sparse_849_str();
    sparse_849_str_ = sparse_849_str;
  } else {
    clear_has_sparse_849_str();
    sparse_849_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_850_str = 862;
inline bool Database_NoBench::has_sparse_850_str() const {
  return (_has_bits_[26] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_850_str() {
  _has_bits_[26] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_850_str() {
  _has_bits_[26] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_850_str() {
  if (sparse_850_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_850_str_->clear();
  }
  clear_has_sparse_850_str();
}
inline const ::std::string& Database_NoBench::sparse_850_str() const {
  return *sparse_850_str_;
}
inline void Database_NoBench::set_sparse_850_str(const ::std::string& value) {
  set_has_sparse_850_str();
  if (sparse_850_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_850_str_ = new ::std::string;
  }
  sparse_850_str_->assign(value);
}
inline void Database_NoBench::set_sparse_850_str(const char* value) {
  set_has_sparse_850_str();
  if (sparse_850_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_850_str_ = new ::std::string;
  }
  sparse_850_str_->assign(value);
}
inline void Database_NoBench::set_sparse_850_str(const char* value, size_t size) {
  set_has_sparse_850_str();
  if (sparse_850_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_850_str_ = new ::std::string;
  }
  sparse_850_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_850_str() {
  set_has_sparse_850_str();
  if (sparse_850_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_850_str_ = new ::std::string;
  }
  return sparse_850_str_;
}
inline ::std::string* Database_NoBench::release_sparse_850_str() {
  clear_has_sparse_850_str();
  if (sparse_850_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_850_str_;
    sparse_850_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_850_str(::std::string* sparse_850_str) {
  if (sparse_850_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_850_str_;
  }
  if (sparse_850_str) {
    set_has_sparse_850_str();
    sparse_850_str_ = sparse_850_str;
  } else {
    clear_has_sparse_850_str();
    sparse_850_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_851_str = 863;
inline bool Database_NoBench::has_sparse_851_str() const {
  return (_has_bits_[27] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_851_str() {
  _has_bits_[27] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_851_str() {
  _has_bits_[27] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_851_str() {
  if (sparse_851_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_851_str_->clear();
  }
  clear_has_sparse_851_str();
}
inline const ::std::string& Database_NoBench::sparse_851_str() const {
  return *sparse_851_str_;
}
inline void Database_NoBench::set_sparse_851_str(const ::std::string& value) {
  set_has_sparse_851_str();
  if (sparse_851_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_851_str_ = new ::std::string;
  }
  sparse_851_str_->assign(value);
}
inline void Database_NoBench::set_sparse_851_str(const char* value) {
  set_has_sparse_851_str();
  if (sparse_851_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_851_str_ = new ::std::string;
  }
  sparse_851_str_->assign(value);
}
inline void Database_NoBench::set_sparse_851_str(const char* value, size_t size) {
  set_has_sparse_851_str();
  if (sparse_851_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_851_str_ = new ::std::string;
  }
  sparse_851_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_851_str() {
  set_has_sparse_851_str();
  if (sparse_851_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_851_str_ = new ::std::string;
  }
  return sparse_851_str_;
}
inline ::std::string* Database_NoBench::release_sparse_851_str() {
  clear_has_sparse_851_str();
  if (sparse_851_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_851_str_;
    sparse_851_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_851_str(::std::string* sparse_851_str) {
  if (sparse_851_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_851_str_;
  }
  if (sparse_851_str) {
    set_has_sparse_851_str();
    sparse_851_str_ = sparse_851_str;
  } else {
    clear_has_sparse_851_str();
    sparse_851_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_852_str = 864;
inline bool Database_NoBench::has_sparse_852_str() const {
  return (_has_bits_[27] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_852_str() {
  _has_bits_[27] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_852_str() {
  _has_bits_[27] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_852_str() {
  if (sparse_852_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_852_str_->clear();
  }
  clear_has_sparse_852_str();
}
inline const ::std::string& Database_NoBench::sparse_852_str() const {
  return *sparse_852_str_;
}
inline void Database_NoBench::set_sparse_852_str(const ::std::string& value) {
  set_has_sparse_852_str();
  if (sparse_852_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_852_str_ = new ::std::string;
  }
  sparse_852_str_->assign(value);
}
inline void Database_NoBench::set_sparse_852_str(const char* value) {
  set_has_sparse_852_str();
  if (sparse_852_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_852_str_ = new ::std::string;
  }
  sparse_852_str_->assign(value);
}
inline void Database_NoBench::set_sparse_852_str(const char* value, size_t size) {
  set_has_sparse_852_str();
  if (sparse_852_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_852_str_ = new ::std::string;
  }
  sparse_852_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_852_str() {
  set_has_sparse_852_str();
  if (sparse_852_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_852_str_ = new ::std::string;
  }
  return sparse_852_str_;
}
inline ::std::string* Database_NoBench::release_sparse_852_str() {
  clear_has_sparse_852_str();
  if (sparse_852_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_852_str_;
    sparse_852_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_852_str(::std::string* sparse_852_str) {
  if (sparse_852_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_852_str_;
  }
  if (sparse_852_str) {
    set_has_sparse_852_str();
    sparse_852_str_ = sparse_852_str;
  } else {
    clear_has_sparse_852_str();
    sparse_852_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_853_str = 865;
inline bool Database_NoBench::has_sparse_853_str() const {
  return (_has_bits_[27] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_853_str() {
  _has_bits_[27] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_853_str() {
  _has_bits_[27] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_853_str() {
  if (sparse_853_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_853_str_->clear();
  }
  clear_has_sparse_853_str();
}
inline const ::std::string& Database_NoBench::sparse_853_str() const {
  return *sparse_853_str_;
}
inline void Database_NoBench::set_sparse_853_str(const ::std::string& value) {
  set_has_sparse_853_str();
  if (sparse_853_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_853_str_ = new ::std::string;
  }
  sparse_853_str_->assign(value);
}
inline void Database_NoBench::set_sparse_853_str(const char* value) {
  set_has_sparse_853_str();
  if (sparse_853_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_853_str_ = new ::std::string;
  }
  sparse_853_str_->assign(value);
}
inline void Database_NoBench::set_sparse_853_str(const char* value, size_t size) {
  set_has_sparse_853_str();
  if (sparse_853_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_853_str_ = new ::std::string;
  }
  sparse_853_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_853_str() {
  set_has_sparse_853_str();
  if (sparse_853_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_853_str_ = new ::std::string;
  }
  return sparse_853_str_;
}
inline ::std::string* Database_NoBench::release_sparse_853_str() {
  clear_has_sparse_853_str();
  if (sparse_853_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_853_str_;
    sparse_853_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_853_str(::std::string* sparse_853_str) {
  if (sparse_853_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_853_str_;
  }
  if (sparse_853_str) {
    set_has_sparse_853_str();
    sparse_853_str_ = sparse_853_str;
  } else {
    clear_has_sparse_853_str();
    sparse_853_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_854_str = 866;
inline bool Database_NoBench::has_sparse_854_str() const {
  return (_has_bits_[27] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_854_str() {
  _has_bits_[27] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_854_str() {
  _has_bits_[27] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_854_str() {
  if (sparse_854_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_854_str_->clear();
  }
  clear_has_sparse_854_str();
}
inline const ::std::string& Database_NoBench::sparse_854_str() const {
  return *sparse_854_str_;
}
inline void Database_NoBench::set_sparse_854_str(const ::std::string& value) {
  set_has_sparse_854_str();
  if (sparse_854_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_854_str_ = new ::std::string;
  }
  sparse_854_str_->assign(value);
}
inline void Database_NoBench::set_sparse_854_str(const char* value) {
  set_has_sparse_854_str();
  if (sparse_854_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_854_str_ = new ::std::string;
  }
  sparse_854_str_->assign(value);
}
inline void Database_NoBench::set_sparse_854_str(const char* value, size_t size) {
  set_has_sparse_854_str();
  if (sparse_854_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_854_str_ = new ::std::string;
  }
  sparse_854_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_854_str() {
  set_has_sparse_854_str();
  if (sparse_854_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_854_str_ = new ::std::string;
  }
  return sparse_854_str_;
}
inline ::std::string* Database_NoBench::release_sparse_854_str() {
  clear_has_sparse_854_str();
  if (sparse_854_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_854_str_;
    sparse_854_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_854_str(::std::string* sparse_854_str) {
  if (sparse_854_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_854_str_;
  }
  if (sparse_854_str) {
    set_has_sparse_854_str();
    sparse_854_str_ = sparse_854_str;
  } else {
    clear_has_sparse_854_str();
    sparse_854_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_855_str = 867;
inline bool Database_NoBench::has_sparse_855_str() const {
  return (_has_bits_[27] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_855_str() {
  _has_bits_[27] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_855_str() {
  _has_bits_[27] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_855_str() {
  if (sparse_855_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_855_str_->clear();
  }
  clear_has_sparse_855_str();
}
inline const ::std::string& Database_NoBench::sparse_855_str() const {
  return *sparse_855_str_;
}
inline void Database_NoBench::set_sparse_855_str(const ::std::string& value) {
  set_has_sparse_855_str();
  if (sparse_855_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_855_str_ = new ::std::string;
  }
  sparse_855_str_->assign(value);
}
inline void Database_NoBench::set_sparse_855_str(const char* value) {
  set_has_sparse_855_str();
  if (sparse_855_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_855_str_ = new ::std::string;
  }
  sparse_855_str_->assign(value);
}
inline void Database_NoBench::set_sparse_855_str(const char* value, size_t size) {
  set_has_sparse_855_str();
  if (sparse_855_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_855_str_ = new ::std::string;
  }
  sparse_855_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_855_str() {
  set_has_sparse_855_str();
  if (sparse_855_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_855_str_ = new ::std::string;
  }
  return sparse_855_str_;
}
inline ::std::string* Database_NoBench::release_sparse_855_str() {
  clear_has_sparse_855_str();
  if (sparse_855_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_855_str_;
    sparse_855_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_855_str(::std::string* sparse_855_str) {
  if (sparse_855_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_855_str_;
  }
  if (sparse_855_str) {
    set_has_sparse_855_str();
    sparse_855_str_ = sparse_855_str;
  } else {
    clear_has_sparse_855_str();
    sparse_855_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_856_str = 868;
inline bool Database_NoBench::has_sparse_856_str() const {
  return (_has_bits_[27] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_856_str() {
  _has_bits_[27] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_856_str() {
  _has_bits_[27] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_856_str() {
  if (sparse_856_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_856_str_->clear();
  }
  clear_has_sparse_856_str();
}
inline const ::std::string& Database_NoBench::sparse_856_str() const {
  return *sparse_856_str_;
}
inline void Database_NoBench::set_sparse_856_str(const ::std::string& value) {
  set_has_sparse_856_str();
  if (sparse_856_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_856_str_ = new ::std::string;
  }
  sparse_856_str_->assign(value);
}
inline void Database_NoBench::set_sparse_856_str(const char* value) {
  set_has_sparse_856_str();
  if (sparse_856_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_856_str_ = new ::std::string;
  }
  sparse_856_str_->assign(value);
}
inline void Database_NoBench::set_sparse_856_str(const char* value, size_t size) {
  set_has_sparse_856_str();
  if (sparse_856_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_856_str_ = new ::std::string;
  }
  sparse_856_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_856_str() {
  set_has_sparse_856_str();
  if (sparse_856_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_856_str_ = new ::std::string;
  }
  return sparse_856_str_;
}
inline ::std::string* Database_NoBench::release_sparse_856_str() {
  clear_has_sparse_856_str();
  if (sparse_856_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_856_str_;
    sparse_856_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_856_str(::std::string* sparse_856_str) {
  if (sparse_856_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_856_str_;
  }
  if (sparse_856_str) {
    set_has_sparse_856_str();
    sparse_856_str_ = sparse_856_str;
  } else {
    clear_has_sparse_856_str();
    sparse_856_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_857_str = 869;
inline bool Database_NoBench::has_sparse_857_str() const {
  return (_has_bits_[27] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_857_str() {
  _has_bits_[27] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_857_str() {
  _has_bits_[27] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_857_str() {
  if (sparse_857_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_857_str_->clear();
  }
  clear_has_sparse_857_str();
}
inline const ::std::string& Database_NoBench::sparse_857_str() const {
  return *sparse_857_str_;
}
inline void Database_NoBench::set_sparse_857_str(const ::std::string& value) {
  set_has_sparse_857_str();
  if (sparse_857_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_857_str_ = new ::std::string;
  }
  sparse_857_str_->assign(value);
}
inline void Database_NoBench::set_sparse_857_str(const char* value) {
  set_has_sparse_857_str();
  if (sparse_857_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_857_str_ = new ::std::string;
  }
  sparse_857_str_->assign(value);
}
inline void Database_NoBench::set_sparse_857_str(const char* value, size_t size) {
  set_has_sparse_857_str();
  if (sparse_857_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_857_str_ = new ::std::string;
  }
  sparse_857_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_857_str() {
  set_has_sparse_857_str();
  if (sparse_857_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_857_str_ = new ::std::string;
  }
  return sparse_857_str_;
}
inline ::std::string* Database_NoBench::release_sparse_857_str() {
  clear_has_sparse_857_str();
  if (sparse_857_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_857_str_;
    sparse_857_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_857_str(::std::string* sparse_857_str) {
  if (sparse_857_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_857_str_;
  }
  if (sparse_857_str) {
    set_has_sparse_857_str();
    sparse_857_str_ = sparse_857_str;
  } else {
    clear_has_sparse_857_str();
    sparse_857_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_858_str = 870;
inline bool Database_NoBench::has_sparse_858_str() const {
  return (_has_bits_[27] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_858_str() {
  _has_bits_[27] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_858_str() {
  _has_bits_[27] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_858_str() {
  if (sparse_858_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_858_str_->clear();
  }
  clear_has_sparse_858_str();
}
inline const ::std::string& Database_NoBench::sparse_858_str() const {
  return *sparse_858_str_;
}
inline void Database_NoBench::set_sparse_858_str(const ::std::string& value) {
  set_has_sparse_858_str();
  if (sparse_858_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_858_str_ = new ::std::string;
  }
  sparse_858_str_->assign(value);
}
inline void Database_NoBench::set_sparse_858_str(const char* value) {
  set_has_sparse_858_str();
  if (sparse_858_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_858_str_ = new ::std::string;
  }
  sparse_858_str_->assign(value);
}
inline void Database_NoBench::set_sparse_858_str(const char* value, size_t size) {
  set_has_sparse_858_str();
  if (sparse_858_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_858_str_ = new ::std::string;
  }
  sparse_858_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_858_str() {
  set_has_sparse_858_str();
  if (sparse_858_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_858_str_ = new ::std::string;
  }
  return sparse_858_str_;
}
inline ::std::string* Database_NoBench::release_sparse_858_str() {
  clear_has_sparse_858_str();
  if (sparse_858_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_858_str_;
    sparse_858_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_858_str(::std::string* sparse_858_str) {
  if (sparse_858_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_858_str_;
  }
  if (sparse_858_str) {
    set_has_sparse_858_str();
    sparse_858_str_ = sparse_858_str;
  } else {
    clear_has_sparse_858_str();
    sparse_858_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_859_str = 871;
inline bool Database_NoBench::has_sparse_859_str() const {
  return (_has_bits_[27] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_859_str() {
  _has_bits_[27] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_859_str() {
  _has_bits_[27] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_859_str() {
  if (sparse_859_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_859_str_->clear();
  }
  clear_has_sparse_859_str();
}
inline const ::std::string& Database_NoBench::sparse_859_str() const {
  return *sparse_859_str_;
}
inline void Database_NoBench::set_sparse_859_str(const ::std::string& value) {
  set_has_sparse_859_str();
  if (sparse_859_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_859_str_ = new ::std::string;
  }
  sparse_859_str_->assign(value);
}
inline void Database_NoBench::set_sparse_859_str(const char* value) {
  set_has_sparse_859_str();
  if (sparse_859_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_859_str_ = new ::std::string;
  }
  sparse_859_str_->assign(value);
}
inline void Database_NoBench::set_sparse_859_str(const char* value, size_t size) {
  set_has_sparse_859_str();
  if (sparse_859_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_859_str_ = new ::std::string;
  }
  sparse_859_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_859_str() {
  set_has_sparse_859_str();
  if (sparse_859_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_859_str_ = new ::std::string;
  }
  return sparse_859_str_;
}
inline ::std::string* Database_NoBench::release_sparse_859_str() {
  clear_has_sparse_859_str();
  if (sparse_859_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_859_str_;
    sparse_859_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_859_str(::std::string* sparse_859_str) {
  if (sparse_859_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_859_str_;
  }
  if (sparse_859_str) {
    set_has_sparse_859_str();
    sparse_859_str_ = sparse_859_str;
  } else {
    clear_has_sparse_859_str();
    sparse_859_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_860_str = 872;
inline bool Database_NoBench::has_sparse_860_str() const {
  return (_has_bits_[27] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_860_str() {
  _has_bits_[27] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_860_str() {
  _has_bits_[27] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_860_str() {
  if (sparse_860_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_860_str_->clear();
  }
  clear_has_sparse_860_str();
}
inline const ::std::string& Database_NoBench::sparse_860_str() const {
  return *sparse_860_str_;
}
inline void Database_NoBench::set_sparse_860_str(const ::std::string& value) {
  set_has_sparse_860_str();
  if (sparse_860_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_860_str_ = new ::std::string;
  }
  sparse_860_str_->assign(value);
}
inline void Database_NoBench::set_sparse_860_str(const char* value) {
  set_has_sparse_860_str();
  if (sparse_860_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_860_str_ = new ::std::string;
  }
  sparse_860_str_->assign(value);
}
inline void Database_NoBench::set_sparse_860_str(const char* value, size_t size) {
  set_has_sparse_860_str();
  if (sparse_860_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_860_str_ = new ::std::string;
  }
  sparse_860_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_860_str() {
  set_has_sparse_860_str();
  if (sparse_860_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_860_str_ = new ::std::string;
  }
  return sparse_860_str_;
}
inline ::std::string* Database_NoBench::release_sparse_860_str() {
  clear_has_sparse_860_str();
  if (sparse_860_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_860_str_;
    sparse_860_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_860_str(::std::string* sparse_860_str) {
  if (sparse_860_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_860_str_;
  }
  if (sparse_860_str) {
    set_has_sparse_860_str();
    sparse_860_str_ = sparse_860_str;
  } else {
    clear_has_sparse_860_str();
    sparse_860_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_861_str = 873;
inline bool Database_NoBench::has_sparse_861_str() const {
  return (_has_bits_[27] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_861_str() {
  _has_bits_[27] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_861_str() {
  _has_bits_[27] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_861_str() {
  if (sparse_861_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_861_str_->clear();
  }
  clear_has_sparse_861_str();
}
inline const ::std::string& Database_NoBench::sparse_861_str() const {
  return *sparse_861_str_;
}
inline void Database_NoBench::set_sparse_861_str(const ::std::string& value) {
  set_has_sparse_861_str();
  if (sparse_861_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_861_str_ = new ::std::string;
  }
  sparse_861_str_->assign(value);
}
inline void Database_NoBench::set_sparse_861_str(const char* value) {
  set_has_sparse_861_str();
  if (sparse_861_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_861_str_ = new ::std::string;
  }
  sparse_861_str_->assign(value);
}
inline void Database_NoBench::set_sparse_861_str(const char* value, size_t size) {
  set_has_sparse_861_str();
  if (sparse_861_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_861_str_ = new ::std::string;
  }
  sparse_861_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_861_str() {
  set_has_sparse_861_str();
  if (sparse_861_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_861_str_ = new ::std::string;
  }
  return sparse_861_str_;
}
inline ::std::string* Database_NoBench::release_sparse_861_str() {
  clear_has_sparse_861_str();
  if (sparse_861_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_861_str_;
    sparse_861_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_861_str(::std::string* sparse_861_str) {
  if (sparse_861_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_861_str_;
  }
  if (sparse_861_str) {
    set_has_sparse_861_str();
    sparse_861_str_ = sparse_861_str;
  } else {
    clear_has_sparse_861_str();
    sparse_861_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_862_str = 874;
inline bool Database_NoBench::has_sparse_862_str() const {
  return (_has_bits_[27] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_862_str() {
  _has_bits_[27] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_862_str() {
  _has_bits_[27] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_862_str() {
  if (sparse_862_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_862_str_->clear();
  }
  clear_has_sparse_862_str();
}
inline const ::std::string& Database_NoBench::sparse_862_str() const {
  return *sparse_862_str_;
}
inline void Database_NoBench::set_sparse_862_str(const ::std::string& value) {
  set_has_sparse_862_str();
  if (sparse_862_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_862_str_ = new ::std::string;
  }
  sparse_862_str_->assign(value);
}
inline void Database_NoBench::set_sparse_862_str(const char* value) {
  set_has_sparse_862_str();
  if (sparse_862_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_862_str_ = new ::std::string;
  }
  sparse_862_str_->assign(value);
}
inline void Database_NoBench::set_sparse_862_str(const char* value, size_t size) {
  set_has_sparse_862_str();
  if (sparse_862_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_862_str_ = new ::std::string;
  }
  sparse_862_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_862_str() {
  set_has_sparse_862_str();
  if (sparse_862_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_862_str_ = new ::std::string;
  }
  return sparse_862_str_;
}
inline ::std::string* Database_NoBench::release_sparse_862_str() {
  clear_has_sparse_862_str();
  if (sparse_862_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_862_str_;
    sparse_862_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_862_str(::std::string* sparse_862_str) {
  if (sparse_862_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_862_str_;
  }
  if (sparse_862_str) {
    set_has_sparse_862_str();
    sparse_862_str_ = sparse_862_str;
  } else {
    clear_has_sparse_862_str();
    sparse_862_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_863_str = 875;
inline bool Database_NoBench::has_sparse_863_str() const {
  return (_has_bits_[27] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_863_str() {
  _has_bits_[27] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_863_str() {
  _has_bits_[27] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_863_str() {
  if (sparse_863_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_863_str_->clear();
  }
  clear_has_sparse_863_str();
}
inline const ::std::string& Database_NoBench::sparse_863_str() const {
  return *sparse_863_str_;
}
inline void Database_NoBench::set_sparse_863_str(const ::std::string& value) {
  set_has_sparse_863_str();
  if (sparse_863_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_863_str_ = new ::std::string;
  }
  sparse_863_str_->assign(value);
}
inline void Database_NoBench::set_sparse_863_str(const char* value) {
  set_has_sparse_863_str();
  if (sparse_863_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_863_str_ = new ::std::string;
  }
  sparse_863_str_->assign(value);
}
inline void Database_NoBench::set_sparse_863_str(const char* value, size_t size) {
  set_has_sparse_863_str();
  if (sparse_863_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_863_str_ = new ::std::string;
  }
  sparse_863_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_863_str() {
  set_has_sparse_863_str();
  if (sparse_863_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_863_str_ = new ::std::string;
  }
  return sparse_863_str_;
}
inline ::std::string* Database_NoBench::release_sparse_863_str() {
  clear_has_sparse_863_str();
  if (sparse_863_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_863_str_;
    sparse_863_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_863_str(::std::string* sparse_863_str) {
  if (sparse_863_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_863_str_;
  }
  if (sparse_863_str) {
    set_has_sparse_863_str();
    sparse_863_str_ = sparse_863_str;
  } else {
    clear_has_sparse_863_str();
    sparse_863_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_864_str = 876;
inline bool Database_NoBench::has_sparse_864_str() const {
  return (_has_bits_[27] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_864_str() {
  _has_bits_[27] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_864_str() {
  _has_bits_[27] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_864_str() {
  if (sparse_864_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_864_str_->clear();
  }
  clear_has_sparse_864_str();
}
inline const ::std::string& Database_NoBench::sparse_864_str() const {
  return *sparse_864_str_;
}
inline void Database_NoBench::set_sparse_864_str(const ::std::string& value) {
  set_has_sparse_864_str();
  if (sparse_864_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_864_str_ = new ::std::string;
  }
  sparse_864_str_->assign(value);
}
inline void Database_NoBench::set_sparse_864_str(const char* value) {
  set_has_sparse_864_str();
  if (sparse_864_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_864_str_ = new ::std::string;
  }
  sparse_864_str_->assign(value);
}
inline void Database_NoBench::set_sparse_864_str(const char* value, size_t size) {
  set_has_sparse_864_str();
  if (sparse_864_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_864_str_ = new ::std::string;
  }
  sparse_864_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_864_str() {
  set_has_sparse_864_str();
  if (sparse_864_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_864_str_ = new ::std::string;
  }
  return sparse_864_str_;
}
inline ::std::string* Database_NoBench::release_sparse_864_str() {
  clear_has_sparse_864_str();
  if (sparse_864_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_864_str_;
    sparse_864_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_864_str(::std::string* sparse_864_str) {
  if (sparse_864_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_864_str_;
  }
  if (sparse_864_str) {
    set_has_sparse_864_str();
    sparse_864_str_ = sparse_864_str;
  } else {
    clear_has_sparse_864_str();
    sparse_864_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_865_str = 877;
inline bool Database_NoBench::has_sparse_865_str() const {
  return (_has_bits_[27] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_865_str() {
  _has_bits_[27] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_865_str() {
  _has_bits_[27] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_865_str() {
  if (sparse_865_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_865_str_->clear();
  }
  clear_has_sparse_865_str();
}
inline const ::std::string& Database_NoBench::sparse_865_str() const {
  return *sparse_865_str_;
}
inline void Database_NoBench::set_sparse_865_str(const ::std::string& value) {
  set_has_sparse_865_str();
  if (sparse_865_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_865_str_ = new ::std::string;
  }
  sparse_865_str_->assign(value);
}
inline void Database_NoBench::set_sparse_865_str(const char* value) {
  set_has_sparse_865_str();
  if (sparse_865_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_865_str_ = new ::std::string;
  }
  sparse_865_str_->assign(value);
}
inline void Database_NoBench::set_sparse_865_str(const char* value, size_t size) {
  set_has_sparse_865_str();
  if (sparse_865_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_865_str_ = new ::std::string;
  }
  sparse_865_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_865_str() {
  set_has_sparse_865_str();
  if (sparse_865_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_865_str_ = new ::std::string;
  }
  return sparse_865_str_;
}
inline ::std::string* Database_NoBench::release_sparse_865_str() {
  clear_has_sparse_865_str();
  if (sparse_865_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_865_str_;
    sparse_865_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_865_str(::std::string* sparse_865_str) {
  if (sparse_865_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_865_str_;
  }
  if (sparse_865_str) {
    set_has_sparse_865_str();
    sparse_865_str_ = sparse_865_str;
  } else {
    clear_has_sparse_865_str();
    sparse_865_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_866_str = 878;
inline bool Database_NoBench::has_sparse_866_str() const {
  return (_has_bits_[27] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_866_str() {
  _has_bits_[27] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_866_str() {
  _has_bits_[27] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_866_str() {
  if (sparse_866_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_866_str_->clear();
  }
  clear_has_sparse_866_str();
}
inline const ::std::string& Database_NoBench::sparse_866_str() const {
  return *sparse_866_str_;
}
inline void Database_NoBench::set_sparse_866_str(const ::std::string& value) {
  set_has_sparse_866_str();
  if (sparse_866_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_866_str_ = new ::std::string;
  }
  sparse_866_str_->assign(value);
}
inline void Database_NoBench::set_sparse_866_str(const char* value) {
  set_has_sparse_866_str();
  if (sparse_866_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_866_str_ = new ::std::string;
  }
  sparse_866_str_->assign(value);
}
inline void Database_NoBench::set_sparse_866_str(const char* value, size_t size) {
  set_has_sparse_866_str();
  if (sparse_866_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_866_str_ = new ::std::string;
  }
  sparse_866_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_866_str() {
  set_has_sparse_866_str();
  if (sparse_866_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_866_str_ = new ::std::string;
  }
  return sparse_866_str_;
}
inline ::std::string* Database_NoBench::release_sparse_866_str() {
  clear_has_sparse_866_str();
  if (sparse_866_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_866_str_;
    sparse_866_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_866_str(::std::string* sparse_866_str) {
  if (sparse_866_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_866_str_;
  }
  if (sparse_866_str) {
    set_has_sparse_866_str();
    sparse_866_str_ = sparse_866_str;
  } else {
    clear_has_sparse_866_str();
    sparse_866_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_867_str = 879;
inline bool Database_NoBench::has_sparse_867_str() const {
  return (_has_bits_[27] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_867_str() {
  _has_bits_[27] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_867_str() {
  _has_bits_[27] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_867_str() {
  if (sparse_867_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_867_str_->clear();
  }
  clear_has_sparse_867_str();
}
inline const ::std::string& Database_NoBench::sparse_867_str() const {
  return *sparse_867_str_;
}
inline void Database_NoBench::set_sparse_867_str(const ::std::string& value) {
  set_has_sparse_867_str();
  if (sparse_867_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_867_str_ = new ::std::string;
  }
  sparse_867_str_->assign(value);
}
inline void Database_NoBench::set_sparse_867_str(const char* value) {
  set_has_sparse_867_str();
  if (sparse_867_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_867_str_ = new ::std::string;
  }
  sparse_867_str_->assign(value);
}
inline void Database_NoBench::set_sparse_867_str(const char* value, size_t size) {
  set_has_sparse_867_str();
  if (sparse_867_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_867_str_ = new ::std::string;
  }
  sparse_867_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_867_str() {
  set_has_sparse_867_str();
  if (sparse_867_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_867_str_ = new ::std::string;
  }
  return sparse_867_str_;
}
inline ::std::string* Database_NoBench::release_sparse_867_str() {
  clear_has_sparse_867_str();
  if (sparse_867_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_867_str_;
    sparse_867_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_867_str(::std::string* sparse_867_str) {
  if (sparse_867_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_867_str_;
  }
  if (sparse_867_str) {
    set_has_sparse_867_str();
    sparse_867_str_ = sparse_867_str;
  } else {
    clear_has_sparse_867_str();
    sparse_867_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_868_str = 880;
inline bool Database_NoBench::has_sparse_868_str() const {
  return (_has_bits_[27] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_868_str() {
  _has_bits_[27] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_868_str() {
  _has_bits_[27] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_868_str() {
  if (sparse_868_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_868_str_->clear();
  }
  clear_has_sparse_868_str();
}
inline const ::std::string& Database_NoBench::sparse_868_str() const {
  return *sparse_868_str_;
}
inline void Database_NoBench::set_sparse_868_str(const ::std::string& value) {
  set_has_sparse_868_str();
  if (sparse_868_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_868_str_ = new ::std::string;
  }
  sparse_868_str_->assign(value);
}
inline void Database_NoBench::set_sparse_868_str(const char* value) {
  set_has_sparse_868_str();
  if (sparse_868_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_868_str_ = new ::std::string;
  }
  sparse_868_str_->assign(value);
}
inline void Database_NoBench::set_sparse_868_str(const char* value, size_t size) {
  set_has_sparse_868_str();
  if (sparse_868_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_868_str_ = new ::std::string;
  }
  sparse_868_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_868_str() {
  set_has_sparse_868_str();
  if (sparse_868_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_868_str_ = new ::std::string;
  }
  return sparse_868_str_;
}
inline ::std::string* Database_NoBench::release_sparse_868_str() {
  clear_has_sparse_868_str();
  if (sparse_868_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_868_str_;
    sparse_868_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_868_str(::std::string* sparse_868_str) {
  if (sparse_868_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_868_str_;
  }
  if (sparse_868_str) {
    set_has_sparse_868_str();
    sparse_868_str_ = sparse_868_str;
  } else {
    clear_has_sparse_868_str();
    sparse_868_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_869_str = 881;
inline bool Database_NoBench::has_sparse_869_str() const {
  return (_has_bits_[27] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_869_str() {
  _has_bits_[27] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_869_str() {
  _has_bits_[27] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_869_str() {
  if (sparse_869_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_869_str_->clear();
  }
  clear_has_sparse_869_str();
}
inline const ::std::string& Database_NoBench::sparse_869_str() const {
  return *sparse_869_str_;
}
inline void Database_NoBench::set_sparse_869_str(const ::std::string& value) {
  set_has_sparse_869_str();
  if (sparse_869_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_869_str_ = new ::std::string;
  }
  sparse_869_str_->assign(value);
}
inline void Database_NoBench::set_sparse_869_str(const char* value) {
  set_has_sparse_869_str();
  if (sparse_869_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_869_str_ = new ::std::string;
  }
  sparse_869_str_->assign(value);
}
inline void Database_NoBench::set_sparse_869_str(const char* value, size_t size) {
  set_has_sparse_869_str();
  if (sparse_869_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_869_str_ = new ::std::string;
  }
  sparse_869_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_869_str() {
  set_has_sparse_869_str();
  if (sparse_869_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_869_str_ = new ::std::string;
  }
  return sparse_869_str_;
}
inline ::std::string* Database_NoBench::release_sparse_869_str() {
  clear_has_sparse_869_str();
  if (sparse_869_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_869_str_;
    sparse_869_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_869_str(::std::string* sparse_869_str) {
  if (sparse_869_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_869_str_;
  }
  if (sparse_869_str) {
    set_has_sparse_869_str();
    sparse_869_str_ = sparse_869_str;
  } else {
    clear_has_sparse_869_str();
    sparse_869_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_870_str = 882;
inline bool Database_NoBench::has_sparse_870_str() const {
  return (_has_bits_[27] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_870_str() {
  _has_bits_[27] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_870_str() {
  _has_bits_[27] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_870_str() {
  if (sparse_870_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_870_str_->clear();
  }
  clear_has_sparse_870_str();
}
inline const ::std::string& Database_NoBench::sparse_870_str() const {
  return *sparse_870_str_;
}
inline void Database_NoBench::set_sparse_870_str(const ::std::string& value) {
  set_has_sparse_870_str();
  if (sparse_870_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_870_str_ = new ::std::string;
  }
  sparse_870_str_->assign(value);
}
inline void Database_NoBench::set_sparse_870_str(const char* value) {
  set_has_sparse_870_str();
  if (sparse_870_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_870_str_ = new ::std::string;
  }
  sparse_870_str_->assign(value);
}
inline void Database_NoBench::set_sparse_870_str(const char* value, size_t size) {
  set_has_sparse_870_str();
  if (sparse_870_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_870_str_ = new ::std::string;
  }
  sparse_870_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_870_str() {
  set_has_sparse_870_str();
  if (sparse_870_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_870_str_ = new ::std::string;
  }
  return sparse_870_str_;
}
inline ::std::string* Database_NoBench::release_sparse_870_str() {
  clear_has_sparse_870_str();
  if (sparse_870_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_870_str_;
    sparse_870_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_870_str(::std::string* sparse_870_str) {
  if (sparse_870_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_870_str_;
  }
  if (sparse_870_str) {
    set_has_sparse_870_str();
    sparse_870_str_ = sparse_870_str;
  } else {
    clear_has_sparse_870_str();
    sparse_870_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_871_str = 883;
inline bool Database_NoBench::has_sparse_871_str() const {
  return (_has_bits_[27] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_871_str() {
  _has_bits_[27] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_871_str() {
  _has_bits_[27] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_871_str() {
  if (sparse_871_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_871_str_->clear();
  }
  clear_has_sparse_871_str();
}
inline const ::std::string& Database_NoBench::sparse_871_str() const {
  return *sparse_871_str_;
}
inline void Database_NoBench::set_sparse_871_str(const ::std::string& value) {
  set_has_sparse_871_str();
  if (sparse_871_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_871_str_ = new ::std::string;
  }
  sparse_871_str_->assign(value);
}
inline void Database_NoBench::set_sparse_871_str(const char* value) {
  set_has_sparse_871_str();
  if (sparse_871_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_871_str_ = new ::std::string;
  }
  sparse_871_str_->assign(value);
}
inline void Database_NoBench::set_sparse_871_str(const char* value, size_t size) {
  set_has_sparse_871_str();
  if (sparse_871_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_871_str_ = new ::std::string;
  }
  sparse_871_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_871_str() {
  set_has_sparse_871_str();
  if (sparse_871_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_871_str_ = new ::std::string;
  }
  return sparse_871_str_;
}
inline ::std::string* Database_NoBench::release_sparse_871_str() {
  clear_has_sparse_871_str();
  if (sparse_871_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_871_str_;
    sparse_871_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_871_str(::std::string* sparse_871_str) {
  if (sparse_871_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_871_str_;
  }
  if (sparse_871_str) {
    set_has_sparse_871_str();
    sparse_871_str_ = sparse_871_str;
  } else {
    clear_has_sparse_871_str();
    sparse_871_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_872_str = 884;
inline bool Database_NoBench::has_sparse_872_str() const {
  return (_has_bits_[27] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_872_str() {
  _has_bits_[27] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_872_str() {
  _has_bits_[27] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_872_str() {
  if (sparse_872_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_872_str_->clear();
  }
  clear_has_sparse_872_str();
}
inline const ::std::string& Database_NoBench::sparse_872_str() const {
  return *sparse_872_str_;
}
inline void Database_NoBench::set_sparse_872_str(const ::std::string& value) {
  set_has_sparse_872_str();
  if (sparse_872_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_872_str_ = new ::std::string;
  }
  sparse_872_str_->assign(value);
}
inline void Database_NoBench::set_sparse_872_str(const char* value) {
  set_has_sparse_872_str();
  if (sparse_872_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_872_str_ = new ::std::string;
  }
  sparse_872_str_->assign(value);
}
inline void Database_NoBench::set_sparse_872_str(const char* value, size_t size) {
  set_has_sparse_872_str();
  if (sparse_872_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_872_str_ = new ::std::string;
  }
  sparse_872_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_872_str() {
  set_has_sparse_872_str();
  if (sparse_872_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_872_str_ = new ::std::string;
  }
  return sparse_872_str_;
}
inline ::std::string* Database_NoBench::release_sparse_872_str() {
  clear_has_sparse_872_str();
  if (sparse_872_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_872_str_;
    sparse_872_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_872_str(::std::string* sparse_872_str) {
  if (sparse_872_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_872_str_;
  }
  if (sparse_872_str) {
    set_has_sparse_872_str();
    sparse_872_str_ = sparse_872_str;
  } else {
    clear_has_sparse_872_str();
    sparse_872_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_873_str = 885;
inline bool Database_NoBench::has_sparse_873_str() const {
  return (_has_bits_[27] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_873_str() {
  _has_bits_[27] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_873_str() {
  _has_bits_[27] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_873_str() {
  if (sparse_873_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_873_str_->clear();
  }
  clear_has_sparse_873_str();
}
inline const ::std::string& Database_NoBench::sparse_873_str() const {
  return *sparse_873_str_;
}
inline void Database_NoBench::set_sparse_873_str(const ::std::string& value) {
  set_has_sparse_873_str();
  if (sparse_873_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_873_str_ = new ::std::string;
  }
  sparse_873_str_->assign(value);
}
inline void Database_NoBench::set_sparse_873_str(const char* value) {
  set_has_sparse_873_str();
  if (sparse_873_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_873_str_ = new ::std::string;
  }
  sparse_873_str_->assign(value);
}
inline void Database_NoBench::set_sparse_873_str(const char* value, size_t size) {
  set_has_sparse_873_str();
  if (sparse_873_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_873_str_ = new ::std::string;
  }
  sparse_873_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_873_str() {
  set_has_sparse_873_str();
  if (sparse_873_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_873_str_ = new ::std::string;
  }
  return sparse_873_str_;
}
inline ::std::string* Database_NoBench::release_sparse_873_str() {
  clear_has_sparse_873_str();
  if (sparse_873_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_873_str_;
    sparse_873_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_873_str(::std::string* sparse_873_str) {
  if (sparse_873_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_873_str_;
  }
  if (sparse_873_str) {
    set_has_sparse_873_str();
    sparse_873_str_ = sparse_873_str;
  } else {
    clear_has_sparse_873_str();
    sparse_873_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_874_str = 886;
inline bool Database_NoBench::has_sparse_874_str() const {
  return (_has_bits_[27] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_874_str() {
  _has_bits_[27] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_874_str() {
  _has_bits_[27] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_874_str() {
  if (sparse_874_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_874_str_->clear();
  }
  clear_has_sparse_874_str();
}
inline const ::std::string& Database_NoBench::sparse_874_str() const {
  return *sparse_874_str_;
}
inline void Database_NoBench::set_sparse_874_str(const ::std::string& value) {
  set_has_sparse_874_str();
  if (sparse_874_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_874_str_ = new ::std::string;
  }
  sparse_874_str_->assign(value);
}
inline void Database_NoBench::set_sparse_874_str(const char* value) {
  set_has_sparse_874_str();
  if (sparse_874_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_874_str_ = new ::std::string;
  }
  sparse_874_str_->assign(value);
}
inline void Database_NoBench::set_sparse_874_str(const char* value, size_t size) {
  set_has_sparse_874_str();
  if (sparse_874_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_874_str_ = new ::std::string;
  }
  sparse_874_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_874_str() {
  set_has_sparse_874_str();
  if (sparse_874_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_874_str_ = new ::std::string;
  }
  return sparse_874_str_;
}
inline ::std::string* Database_NoBench::release_sparse_874_str() {
  clear_has_sparse_874_str();
  if (sparse_874_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_874_str_;
    sparse_874_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_874_str(::std::string* sparse_874_str) {
  if (sparse_874_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_874_str_;
  }
  if (sparse_874_str) {
    set_has_sparse_874_str();
    sparse_874_str_ = sparse_874_str;
  } else {
    clear_has_sparse_874_str();
    sparse_874_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_875_str = 887;
inline bool Database_NoBench::has_sparse_875_str() const {
  return (_has_bits_[27] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_875_str() {
  _has_bits_[27] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_875_str() {
  _has_bits_[27] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_875_str() {
  if (sparse_875_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_875_str_->clear();
  }
  clear_has_sparse_875_str();
}
inline const ::std::string& Database_NoBench::sparse_875_str() const {
  return *sparse_875_str_;
}
inline void Database_NoBench::set_sparse_875_str(const ::std::string& value) {
  set_has_sparse_875_str();
  if (sparse_875_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_875_str_ = new ::std::string;
  }
  sparse_875_str_->assign(value);
}
inline void Database_NoBench::set_sparse_875_str(const char* value) {
  set_has_sparse_875_str();
  if (sparse_875_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_875_str_ = new ::std::string;
  }
  sparse_875_str_->assign(value);
}
inline void Database_NoBench::set_sparse_875_str(const char* value, size_t size) {
  set_has_sparse_875_str();
  if (sparse_875_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_875_str_ = new ::std::string;
  }
  sparse_875_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_875_str() {
  set_has_sparse_875_str();
  if (sparse_875_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_875_str_ = new ::std::string;
  }
  return sparse_875_str_;
}
inline ::std::string* Database_NoBench::release_sparse_875_str() {
  clear_has_sparse_875_str();
  if (sparse_875_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_875_str_;
    sparse_875_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_875_str(::std::string* sparse_875_str) {
  if (sparse_875_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_875_str_;
  }
  if (sparse_875_str) {
    set_has_sparse_875_str();
    sparse_875_str_ = sparse_875_str;
  } else {
    clear_has_sparse_875_str();
    sparse_875_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_876_str = 888;
inline bool Database_NoBench::has_sparse_876_str() const {
  return (_has_bits_[27] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_876_str() {
  _has_bits_[27] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_876_str() {
  _has_bits_[27] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_876_str() {
  if (sparse_876_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_876_str_->clear();
  }
  clear_has_sparse_876_str();
}
inline const ::std::string& Database_NoBench::sparse_876_str() const {
  return *sparse_876_str_;
}
inline void Database_NoBench::set_sparse_876_str(const ::std::string& value) {
  set_has_sparse_876_str();
  if (sparse_876_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_876_str_ = new ::std::string;
  }
  sparse_876_str_->assign(value);
}
inline void Database_NoBench::set_sparse_876_str(const char* value) {
  set_has_sparse_876_str();
  if (sparse_876_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_876_str_ = new ::std::string;
  }
  sparse_876_str_->assign(value);
}
inline void Database_NoBench::set_sparse_876_str(const char* value, size_t size) {
  set_has_sparse_876_str();
  if (sparse_876_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_876_str_ = new ::std::string;
  }
  sparse_876_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_876_str() {
  set_has_sparse_876_str();
  if (sparse_876_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_876_str_ = new ::std::string;
  }
  return sparse_876_str_;
}
inline ::std::string* Database_NoBench::release_sparse_876_str() {
  clear_has_sparse_876_str();
  if (sparse_876_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_876_str_;
    sparse_876_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_876_str(::std::string* sparse_876_str) {
  if (sparse_876_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_876_str_;
  }
  if (sparse_876_str) {
    set_has_sparse_876_str();
    sparse_876_str_ = sparse_876_str;
  } else {
    clear_has_sparse_876_str();
    sparse_876_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_877_str = 889;
inline bool Database_NoBench::has_sparse_877_str() const {
  return (_has_bits_[27] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_877_str() {
  _has_bits_[27] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_877_str() {
  _has_bits_[27] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_877_str() {
  if (sparse_877_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_877_str_->clear();
  }
  clear_has_sparse_877_str();
}
inline const ::std::string& Database_NoBench::sparse_877_str() const {
  return *sparse_877_str_;
}
inline void Database_NoBench::set_sparse_877_str(const ::std::string& value) {
  set_has_sparse_877_str();
  if (sparse_877_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_877_str_ = new ::std::string;
  }
  sparse_877_str_->assign(value);
}
inline void Database_NoBench::set_sparse_877_str(const char* value) {
  set_has_sparse_877_str();
  if (sparse_877_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_877_str_ = new ::std::string;
  }
  sparse_877_str_->assign(value);
}
inline void Database_NoBench::set_sparse_877_str(const char* value, size_t size) {
  set_has_sparse_877_str();
  if (sparse_877_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_877_str_ = new ::std::string;
  }
  sparse_877_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_877_str() {
  set_has_sparse_877_str();
  if (sparse_877_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_877_str_ = new ::std::string;
  }
  return sparse_877_str_;
}
inline ::std::string* Database_NoBench::release_sparse_877_str() {
  clear_has_sparse_877_str();
  if (sparse_877_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_877_str_;
    sparse_877_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_877_str(::std::string* sparse_877_str) {
  if (sparse_877_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_877_str_;
  }
  if (sparse_877_str) {
    set_has_sparse_877_str();
    sparse_877_str_ = sparse_877_str;
  } else {
    clear_has_sparse_877_str();
    sparse_877_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_878_str = 890;
inline bool Database_NoBench::has_sparse_878_str() const {
  return (_has_bits_[27] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_878_str() {
  _has_bits_[27] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_878_str() {
  _has_bits_[27] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_878_str() {
  if (sparse_878_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_878_str_->clear();
  }
  clear_has_sparse_878_str();
}
inline const ::std::string& Database_NoBench::sparse_878_str() const {
  return *sparse_878_str_;
}
inline void Database_NoBench::set_sparse_878_str(const ::std::string& value) {
  set_has_sparse_878_str();
  if (sparse_878_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_878_str_ = new ::std::string;
  }
  sparse_878_str_->assign(value);
}
inline void Database_NoBench::set_sparse_878_str(const char* value) {
  set_has_sparse_878_str();
  if (sparse_878_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_878_str_ = new ::std::string;
  }
  sparse_878_str_->assign(value);
}
inline void Database_NoBench::set_sparse_878_str(const char* value, size_t size) {
  set_has_sparse_878_str();
  if (sparse_878_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_878_str_ = new ::std::string;
  }
  sparse_878_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_878_str() {
  set_has_sparse_878_str();
  if (sparse_878_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_878_str_ = new ::std::string;
  }
  return sparse_878_str_;
}
inline ::std::string* Database_NoBench::release_sparse_878_str() {
  clear_has_sparse_878_str();
  if (sparse_878_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_878_str_;
    sparse_878_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_878_str(::std::string* sparse_878_str) {
  if (sparse_878_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_878_str_;
  }
  if (sparse_878_str) {
    set_has_sparse_878_str();
    sparse_878_str_ = sparse_878_str;
  } else {
    clear_has_sparse_878_str();
    sparse_878_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_879_str = 891;
inline bool Database_NoBench::has_sparse_879_str() const {
  return (_has_bits_[27] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_879_str() {
  _has_bits_[27] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_879_str() {
  _has_bits_[27] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_879_str() {
  if (sparse_879_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_879_str_->clear();
  }
  clear_has_sparse_879_str();
}
inline const ::std::string& Database_NoBench::sparse_879_str() const {
  return *sparse_879_str_;
}
inline void Database_NoBench::set_sparse_879_str(const ::std::string& value) {
  set_has_sparse_879_str();
  if (sparse_879_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_879_str_ = new ::std::string;
  }
  sparse_879_str_->assign(value);
}
inline void Database_NoBench::set_sparse_879_str(const char* value) {
  set_has_sparse_879_str();
  if (sparse_879_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_879_str_ = new ::std::string;
  }
  sparse_879_str_->assign(value);
}
inline void Database_NoBench::set_sparse_879_str(const char* value, size_t size) {
  set_has_sparse_879_str();
  if (sparse_879_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_879_str_ = new ::std::string;
  }
  sparse_879_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_879_str() {
  set_has_sparse_879_str();
  if (sparse_879_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_879_str_ = new ::std::string;
  }
  return sparse_879_str_;
}
inline ::std::string* Database_NoBench::release_sparse_879_str() {
  clear_has_sparse_879_str();
  if (sparse_879_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_879_str_;
    sparse_879_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_879_str(::std::string* sparse_879_str) {
  if (sparse_879_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_879_str_;
  }
  if (sparse_879_str) {
    set_has_sparse_879_str();
    sparse_879_str_ = sparse_879_str;
  } else {
    clear_has_sparse_879_str();
    sparse_879_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_880_str = 892;
inline bool Database_NoBench::has_sparse_880_str() const {
  return (_has_bits_[27] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_880_str() {
  _has_bits_[27] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_880_str() {
  _has_bits_[27] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_880_str() {
  if (sparse_880_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_880_str_->clear();
  }
  clear_has_sparse_880_str();
}
inline const ::std::string& Database_NoBench::sparse_880_str() const {
  return *sparse_880_str_;
}
inline void Database_NoBench::set_sparse_880_str(const ::std::string& value) {
  set_has_sparse_880_str();
  if (sparse_880_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_880_str_ = new ::std::string;
  }
  sparse_880_str_->assign(value);
}
inline void Database_NoBench::set_sparse_880_str(const char* value) {
  set_has_sparse_880_str();
  if (sparse_880_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_880_str_ = new ::std::string;
  }
  sparse_880_str_->assign(value);
}
inline void Database_NoBench::set_sparse_880_str(const char* value, size_t size) {
  set_has_sparse_880_str();
  if (sparse_880_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_880_str_ = new ::std::string;
  }
  sparse_880_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_880_str() {
  set_has_sparse_880_str();
  if (sparse_880_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_880_str_ = new ::std::string;
  }
  return sparse_880_str_;
}
inline ::std::string* Database_NoBench::release_sparse_880_str() {
  clear_has_sparse_880_str();
  if (sparse_880_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_880_str_;
    sparse_880_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_880_str(::std::string* sparse_880_str) {
  if (sparse_880_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_880_str_;
  }
  if (sparse_880_str) {
    set_has_sparse_880_str();
    sparse_880_str_ = sparse_880_str;
  } else {
    clear_has_sparse_880_str();
    sparse_880_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_881_str = 893;
inline bool Database_NoBench::has_sparse_881_str() const {
  return (_has_bits_[27] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_881_str() {
  _has_bits_[27] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_881_str() {
  _has_bits_[27] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_881_str() {
  if (sparse_881_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_881_str_->clear();
  }
  clear_has_sparse_881_str();
}
inline const ::std::string& Database_NoBench::sparse_881_str() const {
  return *sparse_881_str_;
}
inline void Database_NoBench::set_sparse_881_str(const ::std::string& value) {
  set_has_sparse_881_str();
  if (sparse_881_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_881_str_ = new ::std::string;
  }
  sparse_881_str_->assign(value);
}
inline void Database_NoBench::set_sparse_881_str(const char* value) {
  set_has_sparse_881_str();
  if (sparse_881_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_881_str_ = new ::std::string;
  }
  sparse_881_str_->assign(value);
}
inline void Database_NoBench::set_sparse_881_str(const char* value, size_t size) {
  set_has_sparse_881_str();
  if (sparse_881_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_881_str_ = new ::std::string;
  }
  sparse_881_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_881_str() {
  set_has_sparse_881_str();
  if (sparse_881_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_881_str_ = new ::std::string;
  }
  return sparse_881_str_;
}
inline ::std::string* Database_NoBench::release_sparse_881_str() {
  clear_has_sparse_881_str();
  if (sparse_881_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_881_str_;
    sparse_881_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_881_str(::std::string* sparse_881_str) {
  if (sparse_881_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_881_str_;
  }
  if (sparse_881_str) {
    set_has_sparse_881_str();
    sparse_881_str_ = sparse_881_str;
  } else {
    clear_has_sparse_881_str();
    sparse_881_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_882_str = 894;
inline bool Database_NoBench::has_sparse_882_str() const {
  return (_has_bits_[27] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_882_str() {
  _has_bits_[27] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_882_str() {
  _has_bits_[27] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_882_str() {
  if (sparse_882_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_882_str_->clear();
  }
  clear_has_sparse_882_str();
}
inline const ::std::string& Database_NoBench::sparse_882_str() const {
  return *sparse_882_str_;
}
inline void Database_NoBench::set_sparse_882_str(const ::std::string& value) {
  set_has_sparse_882_str();
  if (sparse_882_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_882_str_ = new ::std::string;
  }
  sparse_882_str_->assign(value);
}
inline void Database_NoBench::set_sparse_882_str(const char* value) {
  set_has_sparse_882_str();
  if (sparse_882_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_882_str_ = new ::std::string;
  }
  sparse_882_str_->assign(value);
}
inline void Database_NoBench::set_sparse_882_str(const char* value, size_t size) {
  set_has_sparse_882_str();
  if (sparse_882_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_882_str_ = new ::std::string;
  }
  sparse_882_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_882_str() {
  set_has_sparse_882_str();
  if (sparse_882_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_882_str_ = new ::std::string;
  }
  return sparse_882_str_;
}
inline ::std::string* Database_NoBench::release_sparse_882_str() {
  clear_has_sparse_882_str();
  if (sparse_882_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_882_str_;
    sparse_882_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_882_str(::std::string* sparse_882_str) {
  if (sparse_882_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_882_str_;
  }
  if (sparse_882_str) {
    set_has_sparse_882_str();
    sparse_882_str_ = sparse_882_str;
  } else {
    clear_has_sparse_882_str();
    sparse_882_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_883_str = 895;
inline bool Database_NoBench::has_sparse_883_str() const {
  return (_has_bits_[28] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_883_str() {
  _has_bits_[28] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_883_str() {
  _has_bits_[28] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_883_str() {
  if (sparse_883_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_883_str_->clear();
  }
  clear_has_sparse_883_str();
}
inline const ::std::string& Database_NoBench::sparse_883_str() const {
  return *sparse_883_str_;
}
inline void Database_NoBench::set_sparse_883_str(const ::std::string& value) {
  set_has_sparse_883_str();
  if (sparse_883_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_883_str_ = new ::std::string;
  }
  sparse_883_str_->assign(value);
}
inline void Database_NoBench::set_sparse_883_str(const char* value) {
  set_has_sparse_883_str();
  if (sparse_883_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_883_str_ = new ::std::string;
  }
  sparse_883_str_->assign(value);
}
inline void Database_NoBench::set_sparse_883_str(const char* value, size_t size) {
  set_has_sparse_883_str();
  if (sparse_883_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_883_str_ = new ::std::string;
  }
  sparse_883_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_883_str() {
  set_has_sparse_883_str();
  if (sparse_883_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_883_str_ = new ::std::string;
  }
  return sparse_883_str_;
}
inline ::std::string* Database_NoBench::release_sparse_883_str() {
  clear_has_sparse_883_str();
  if (sparse_883_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_883_str_;
    sparse_883_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_883_str(::std::string* sparse_883_str) {
  if (sparse_883_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_883_str_;
  }
  if (sparse_883_str) {
    set_has_sparse_883_str();
    sparse_883_str_ = sparse_883_str;
  } else {
    clear_has_sparse_883_str();
    sparse_883_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_884_str = 896;
inline bool Database_NoBench::has_sparse_884_str() const {
  return (_has_bits_[28] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_884_str() {
  _has_bits_[28] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_884_str() {
  _has_bits_[28] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_884_str() {
  if (sparse_884_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_884_str_->clear();
  }
  clear_has_sparse_884_str();
}
inline const ::std::string& Database_NoBench::sparse_884_str() const {
  return *sparse_884_str_;
}
inline void Database_NoBench::set_sparse_884_str(const ::std::string& value) {
  set_has_sparse_884_str();
  if (sparse_884_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_884_str_ = new ::std::string;
  }
  sparse_884_str_->assign(value);
}
inline void Database_NoBench::set_sparse_884_str(const char* value) {
  set_has_sparse_884_str();
  if (sparse_884_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_884_str_ = new ::std::string;
  }
  sparse_884_str_->assign(value);
}
inline void Database_NoBench::set_sparse_884_str(const char* value, size_t size) {
  set_has_sparse_884_str();
  if (sparse_884_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_884_str_ = new ::std::string;
  }
  sparse_884_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_884_str() {
  set_has_sparse_884_str();
  if (sparse_884_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_884_str_ = new ::std::string;
  }
  return sparse_884_str_;
}
inline ::std::string* Database_NoBench::release_sparse_884_str() {
  clear_has_sparse_884_str();
  if (sparse_884_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_884_str_;
    sparse_884_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_884_str(::std::string* sparse_884_str) {
  if (sparse_884_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_884_str_;
  }
  if (sparse_884_str) {
    set_has_sparse_884_str();
    sparse_884_str_ = sparse_884_str;
  } else {
    clear_has_sparse_884_str();
    sparse_884_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_885_str = 897;
inline bool Database_NoBench::has_sparse_885_str() const {
  return (_has_bits_[28] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_885_str() {
  _has_bits_[28] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_885_str() {
  _has_bits_[28] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_885_str() {
  if (sparse_885_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_885_str_->clear();
  }
  clear_has_sparse_885_str();
}
inline const ::std::string& Database_NoBench::sparse_885_str() const {
  return *sparse_885_str_;
}
inline void Database_NoBench::set_sparse_885_str(const ::std::string& value) {
  set_has_sparse_885_str();
  if (sparse_885_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_885_str_ = new ::std::string;
  }
  sparse_885_str_->assign(value);
}
inline void Database_NoBench::set_sparse_885_str(const char* value) {
  set_has_sparse_885_str();
  if (sparse_885_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_885_str_ = new ::std::string;
  }
  sparse_885_str_->assign(value);
}
inline void Database_NoBench::set_sparse_885_str(const char* value, size_t size) {
  set_has_sparse_885_str();
  if (sparse_885_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_885_str_ = new ::std::string;
  }
  sparse_885_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_885_str() {
  set_has_sparse_885_str();
  if (sparse_885_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_885_str_ = new ::std::string;
  }
  return sparse_885_str_;
}
inline ::std::string* Database_NoBench::release_sparse_885_str() {
  clear_has_sparse_885_str();
  if (sparse_885_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_885_str_;
    sparse_885_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_885_str(::std::string* sparse_885_str) {
  if (sparse_885_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_885_str_;
  }
  if (sparse_885_str) {
    set_has_sparse_885_str();
    sparse_885_str_ = sparse_885_str;
  } else {
    clear_has_sparse_885_str();
    sparse_885_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_886_str = 898;
inline bool Database_NoBench::has_sparse_886_str() const {
  return (_has_bits_[28] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_886_str() {
  _has_bits_[28] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_886_str() {
  _has_bits_[28] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_886_str() {
  if (sparse_886_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_886_str_->clear();
  }
  clear_has_sparse_886_str();
}
inline const ::std::string& Database_NoBench::sparse_886_str() const {
  return *sparse_886_str_;
}
inline void Database_NoBench::set_sparse_886_str(const ::std::string& value) {
  set_has_sparse_886_str();
  if (sparse_886_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_886_str_ = new ::std::string;
  }
  sparse_886_str_->assign(value);
}
inline void Database_NoBench::set_sparse_886_str(const char* value) {
  set_has_sparse_886_str();
  if (sparse_886_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_886_str_ = new ::std::string;
  }
  sparse_886_str_->assign(value);
}
inline void Database_NoBench::set_sparse_886_str(const char* value, size_t size) {
  set_has_sparse_886_str();
  if (sparse_886_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_886_str_ = new ::std::string;
  }
  sparse_886_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_886_str() {
  set_has_sparse_886_str();
  if (sparse_886_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_886_str_ = new ::std::string;
  }
  return sparse_886_str_;
}
inline ::std::string* Database_NoBench::release_sparse_886_str() {
  clear_has_sparse_886_str();
  if (sparse_886_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_886_str_;
    sparse_886_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_886_str(::std::string* sparse_886_str) {
  if (sparse_886_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_886_str_;
  }
  if (sparse_886_str) {
    set_has_sparse_886_str();
    sparse_886_str_ = sparse_886_str;
  } else {
    clear_has_sparse_886_str();
    sparse_886_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_887_str = 899;
inline bool Database_NoBench::has_sparse_887_str() const {
  return (_has_bits_[28] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_887_str() {
  _has_bits_[28] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_887_str() {
  _has_bits_[28] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_887_str() {
  if (sparse_887_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_887_str_->clear();
  }
  clear_has_sparse_887_str();
}
inline const ::std::string& Database_NoBench::sparse_887_str() const {
  return *sparse_887_str_;
}
inline void Database_NoBench::set_sparse_887_str(const ::std::string& value) {
  set_has_sparse_887_str();
  if (sparse_887_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_887_str_ = new ::std::string;
  }
  sparse_887_str_->assign(value);
}
inline void Database_NoBench::set_sparse_887_str(const char* value) {
  set_has_sparse_887_str();
  if (sparse_887_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_887_str_ = new ::std::string;
  }
  sparse_887_str_->assign(value);
}
inline void Database_NoBench::set_sparse_887_str(const char* value, size_t size) {
  set_has_sparse_887_str();
  if (sparse_887_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_887_str_ = new ::std::string;
  }
  sparse_887_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_887_str() {
  set_has_sparse_887_str();
  if (sparse_887_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_887_str_ = new ::std::string;
  }
  return sparse_887_str_;
}
inline ::std::string* Database_NoBench::release_sparse_887_str() {
  clear_has_sparse_887_str();
  if (sparse_887_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_887_str_;
    sparse_887_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_887_str(::std::string* sparse_887_str) {
  if (sparse_887_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_887_str_;
  }
  if (sparse_887_str) {
    set_has_sparse_887_str();
    sparse_887_str_ = sparse_887_str;
  } else {
    clear_has_sparse_887_str();
    sparse_887_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_888_str = 900;
inline bool Database_NoBench::has_sparse_888_str() const {
  return (_has_bits_[28] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_888_str() {
  _has_bits_[28] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_888_str() {
  _has_bits_[28] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_888_str() {
  if (sparse_888_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_888_str_->clear();
  }
  clear_has_sparse_888_str();
}
inline const ::std::string& Database_NoBench::sparse_888_str() const {
  return *sparse_888_str_;
}
inline void Database_NoBench::set_sparse_888_str(const ::std::string& value) {
  set_has_sparse_888_str();
  if (sparse_888_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_888_str_ = new ::std::string;
  }
  sparse_888_str_->assign(value);
}
inline void Database_NoBench::set_sparse_888_str(const char* value) {
  set_has_sparse_888_str();
  if (sparse_888_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_888_str_ = new ::std::string;
  }
  sparse_888_str_->assign(value);
}
inline void Database_NoBench::set_sparse_888_str(const char* value, size_t size) {
  set_has_sparse_888_str();
  if (sparse_888_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_888_str_ = new ::std::string;
  }
  sparse_888_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_888_str() {
  set_has_sparse_888_str();
  if (sparse_888_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_888_str_ = new ::std::string;
  }
  return sparse_888_str_;
}
inline ::std::string* Database_NoBench::release_sparse_888_str() {
  clear_has_sparse_888_str();
  if (sparse_888_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_888_str_;
    sparse_888_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_888_str(::std::string* sparse_888_str) {
  if (sparse_888_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_888_str_;
  }
  if (sparse_888_str) {
    set_has_sparse_888_str();
    sparse_888_str_ = sparse_888_str;
  } else {
    clear_has_sparse_888_str();
    sparse_888_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_889_str = 901;
inline bool Database_NoBench::has_sparse_889_str() const {
  return (_has_bits_[28] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_889_str() {
  _has_bits_[28] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_889_str() {
  _has_bits_[28] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_889_str() {
  if (sparse_889_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_889_str_->clear();
  }
  clear_has_sparse_889_str();
}
inline const ::std::string& Database_NoBench::sparse_889_str() const {
  return *sparse_889_str_;
}
inline void Database_NoBench::set_sparse_889_str(const ::std::string& value) {
  set_has_sparse_889_str();
  if (sparse_889_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_889_str_ = new ::std::string;
  }
  sparse_889_str_->assign(value);
}
inline void Database_NoBench::set_sparse_889_str(const char* value) {
  set_has_sparse_889_str();
  if (sparse_889_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_889_str_ = new ::std::string;
  }
  sparse_889_str_->assign(value);
}
inline void Database_NoBench::set_sparse_889_str(const char* value, size_t size) {
  set_has_sparse_889_str();
  if (sparse_889_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_889_str_ = new ::std::string;
  }
  sparse_889_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_889_str() {
  set_has_sparse_889_str();
  if (sparse_889_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_889_str_ = new ::std::string;
  }
  return sparse_889_str_;
}
inline ::std::string* Database_NoBench::release_sparse_889_str() {
  clear_has_sparse_889_str();
  if (sparse_889_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_889_str_;
    sparse_889_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_889_str(::std::string* sparse_889_str) {
  if (sparse_889_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_889_str_;
  }
  if (sparse_889_str) {
    set_has_sparse_889_str();
    sparse_889_str_ = sparse_889_str;
  } else {
    clear_has_sparse_889_str();
    sparse_889_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_890_str = 902;
inline bool Database_NoBench::has_sparse_890_str() const {
  return (_has_bits_[28] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_890_str() {
  _has_bits_[28] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_890_str() {
  _has_bits_[28] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_890_str() {
  if (sparse_890_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_890_str_->clear();
  }
  clear_has_sparse_890_str();
}
inline const ::std::string& Database_NoBench::sparse_890_str() const {
  return *sparse_890_str_;
}
inline void Database_NoBench::set_sparse_890_str(const ::std::string& value) {
  set_has_sparse_890_str();
  if (sparse_890_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_890_str_ = new ::std::string;
  }
  sparse_890_str_->assign(value);
}
inline void Database_NoBench::set_sparse_890_str(const char* value) {
  set_has_sparse_890_str();
  if (sparse_890_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_890_str_ = new ::std::string;
  }
  sparse_890_str_->assign(value);
}
inline void Database_NoBench::set_sparse_890_str(const char* value, size_t size) {
  set_has_sparse_890_str();
  if (sparse_890_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_890_str_ = new ::std::string;
  }
  sparse_890_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_890_str() {
  set_has_sparse_890_str();
  if (sparse_890_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_890_str_ = new ::std::string;
  }
  return sparse_890_str_;
}
inline ::std::string* Database_NoBench::release_sparse_890_str() {
  clear_has_sparse_890_str();
  if (sparse_890_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_890_str_;
    sparse_890_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_890_str(::std::string* sparse_890_str) {
  if (sparse_890_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_890_str_;
  }
  if (sparse_890_str) {
    set_has_sparse_890_str();
    sparse_890_str_ = sparse_890_str;
  } else {
    clear_has_sparse_890_str();
    sparse_890_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_891_str = 903;
inline bool Database_NoBench::has_sparse_891_str() const {
  return (_has_bits_[28] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_891_str() {
  _has_bits_[28] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_891_str() {
  _has_bits_[28] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_891_str() {
  if (sparse_891_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_891_str_->clear();
  }
  clear_has_sparse_891_str();
}
inline const ::std::string& Database_NoBench::sparse_891_str() const {
  return *sparse_891_str_;
}
inline void Database_NoBench::set_sparse_891_str(const ::std::string& value) {
  set_has_sparse_891_str();
  if (sparse_891_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_891_str_ = new ::std::string;
  }
  sparse_891_str_->assign(value);
}
inline void Database_NoBench::set_sparse_891_str(const char* value) {
  set_has_sparse_891_str();
  if (sparse_891_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_891_str_ = new ::std::string;
  }
  sparse_891_str_->assign(value);
}
inline void Database_NoBench::set_sparse_891_str(const char* value, size_t size) {
  set_has_sparse_891_str();
  if (sparse_891_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_891_str_ = new ::std::string;
  }
  sparse_891_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_891_str() {
  set_has_sparse_891_str();
  if (sparse_891_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_891_str_ = new ::std::string;
  }
  return sparse_891_str_;
}
inline ::std::string* Database_NoBench::release_sparse_891_str() {
  clear_has_sparse_891_str();
  if (sparse_891_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_891_str_;
    sparse_891_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_891_str(::std::string* sparse_891_str) {
  if (sparse_891_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_891_str_;
  }
  if (sparse_891_str) {
    set_has_sparse_891_str();
    sparse_891_str_ = sparse_891_str;
  } else {
    clear_has_sparse_891_str();
    sparse_891_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_892_str = 904;
inline bool Database_NoBench::has_sparse_892_str() const {
  return (_has_bits_[28] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_892_str() {
  _has_bits_[28] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_892_str() {
  _has_bits_[28] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_892_str() {
  if (sparse_892_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_892_str_->clear();
  }
  clear_has_sparse_892_str();
}
inline const ::std::string& Database_NoBench::sparse_892_str() const {
  return *sparse_892_str_;
}
inline void Database_NoBench::set_sparse_892_str(const ::std::string& value) {
  set_has_sparse_892_str();
  if (sparse_892_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_892_str_ = new ::std::string;
  }
  sparse_892_str_->assign(value);
}
inline void Database_NoBench::set_sparse_892_str(const char* value) {
  set_has_sparse_892_str();
  if (sparse_892_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_892_str_ = new ::std::string;
  }
  sparse_892_str_->assign(value);
}
inline void Database_NoBench::set_sparse_892_str(const char* value, size_t size) {
  set_has_sparse_892_str();
  if (sparse_892_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_892_str_ = new ::std::string;
  }
  sparse_892_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_892_str() {
  set_has_sparse_892_str();
  if (sparse_892_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_892_str_ = new ::std::string;
  }
  return sparse_892_str_;
}
inline ::std::string* Database_NoBench::release_sparse_892_str() {
  clear_has_sparse_892_str();
  if (sparse_892_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_892_str_;
    sparse_892_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_892_str(::std::string* sparse_892_str) {
  if (sparse_892_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_892_str_;
  }
  if (sparse_892_str) {
    set_has_sparse_892_str();
    sparse_892_str_ = sparse_892_str;
  } else {
    clear_has_sparse_892_str();
    sparse_892_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_893_str = 905;
inline bool Database_NoBench::has_sparse_893_str() const {
  return (_has_bits_[28] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_893_str() {
  _has_bits_[28] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_893_str() {
  _has_bits_[28] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_893_str() {
  if (sparse_893_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_893_str_->clear();
  }
  clear_has_sparse_893_str();
}
inline const ::std::string& Database_NoBench::sparse_893_str() const {
  return *sparse_893_str_;
}
inline void Database_NoBench::set_sparse_893_str(const ::std::string& value) {
  set_has_sparse_893_str();
  if (sparse_893_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_893_str_ = new ::std::string;
  }
  sparse_893_str_->assign(value);
}
inline void Database_NoBench::set_sparse_893_str(const char* value) {
  set_has_sparse_893_str();
  if (sparse_893_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_893_str_ = new ::std::string;
  }
  sparse_893_str_->assign(value);
}
inline void Database_NoBench::set_sparse_893_str(const char* value, size_t size) {
  set_has_sparse_893_str();
  if (sparse_893_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_893_str_ = new ::std::string;
  }
  sparse_893_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_893_str() {
  set_has_sparse_893_str();
  if (sparse_893_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_893_str_ = new ::std::string;
  }
  return sparse_893_str_;
}
inline ::std::string* Database_NoBench::release_sparse_893_str() {
  clear_has_sparse_893_str();
  if (sparse_893_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_893_str_;
    sparse_893_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_893_str(::std::string* sparse_893_str) {
  if (sparse_893_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_893_str_;
  }
  if (sparse_893_str) {
    set_has_sparse_893_str();
    sparse_893_str_ = sparse_893_str;
  } else {
    clear_has_sparse_893_str();
    sparse_893_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_894_str = 906;
inline bool Database_NoBench::has_sparse_894_str() const {
  return (_has_bits_[28] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_894_str() {
  _has_bits_[28] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_894_str() {
  _has_bits_[28] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_894_str() {
  if (sparse_894_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_894_str_->clear();
  }
  clear_has_sparse_894_str();
}
inline const ::std::string& Database_NoBench::sparse_894_str() const {
  return *sparse_894_str_;
}
inline void Database_NoBench::set_sparse_894_str(const ::std::string& value) {
  set_has_sparse_894_str();
  if (sparse_894_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_894_str_ = new ::std::string;
  }
  sparse_894_str_->assign(value);
}
inline void Database_NoBench::set_sparse_894_str(const char* value) {
  set_has_sparse_894_str();
  if (sparse_894_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_894_str_ = new ::std::string;
  }
  sparse_894_str_->assign(value);
}
inline void Database_NoBench::set_sparse_894_str(const char* value, size_t size) {
  set_has_sparse_894_str();
  if (sparse_894_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_894_str_ = new ::std::string;
  }
  sparse_894_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_894_str() {
  set_has_sparse_894_str();
  if (sparse_894_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_894_str_ = new ::std::string;
  }
  return sparse_894_str_;
}
inline ::std::string* Database_NoBench::release_sparse_894_str() {
  clear_has_sparse_894_str();
  if (sparse_894_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_894_str_;
    sparse_894_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_894_str(::std::string* sparse_894_str) {
  if (sparse_894_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_894_str_;
  }
  if (sparse_894_str) {
    set_has_sparse_894_str();
    sparse_894_str_ = sparse_894_str;
  } else {
    clear_has_sparse_894_str();
    sparse_894_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_895_str = 907;
inline bool Database_NoBench::has_sparse_895_str() const {
  return (_has_bits_[28] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_895_str() {
  _has_bits_[28] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_895_str() {
  _has_bits_[28] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_895_str() {
  if (sparse_895_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_895_str_->clear();
  }
  clear_has_sparse_895_str();
}
inline const ::std::string& Database_NoBench::sparse_895_str() const {
  return *sparse_895_str_;
}
inline void Database_NoBench::set_sparse_895_str(const ::std::string& value) {
  set_has_sparse_895_str();
  if (sparse_895_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_895_str_ = new ::std::string;
  }
  sparse_895_str_->assign(value);
}
inline void Database_NoBench::set_sparse_895_str(const char* value) {
  set_has_sparse_895_str();
  if (sparse_895_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_895_str_ = new ::std::string;
  }
  sparse_895_str_->assign(value);
}
inline void Database_NoBench::set_sparse_895_str(const char* value, size_t size) {
  set_has_sparse_895_str();
  if (sparse_895_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_895_str_ = new ::std::string;
  }
  sparse_895_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_895_str() {
  set_has_sparse_895_str();
  if (sparse_895_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_895_str_ = new ::std::string;
  }
  return sparse_895_str_;
}
inline ::std::string* Database_NoBench::release_sparse_895_str() {
  clear_has_sparse_895_str();
  if (sparse_895_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_895_str_;
    sparse_895_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_895_str(::std::string* sparse_895_str) {
  if (sparse_895_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_895_str_;
  }
  if (sparse_895_str) {
    set_has_sparse_895_str();
    sparse_895_str_ = sparse_895_str;
  } else {
    clear_has_sparse_895_str();
    sparse_895_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_896_str = 908;
inline bool Database_NoBench::has_sparse_896_str() const {
  return (_has_bits_[28] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_896_str() {
  _has_bits_[28] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_896_str() {
  _has_bits_[28] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_896_str() {
  if (sparse_896_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_896_str_->clear();
  }
  clear_has_sparse_896_str();
}
inline const ::std::string& Database_NoBench::sparse_896_str() const {
  return *sparse_896_str_;
}
inline void Database_NoBench::set_sparse_896_str(const ::std::string& value) {
  set_has_sparse_896_str();
  if (sparse_896_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_896_str_ = new ::std::string;
  }
  sparse_896_str_->assign(value);
}
inline void Database_NoBench::set_sparse_896_str(const char* value) {
  set_has_sparse_896_str();
  if (sparse_896_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_896_str_ = new ::std::string;
  }
  sparse_896_str_->assign(value);
}
inline void Database_NoBench::set_sparse_896_str(const char* value, size_t size) {
  set_has_sparse_896_str();
  if (sparse_896_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_896_str_ = new ::std::string;
  }
  sparse_896_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_896_str() {
  set_has_sparse_896_str();
  if (sparse_896_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_896_str_ = new ::std::string;
  }
  return sparse_896_str_;
}
inline ::std::string* Database_NoBench::release_sparse_896_str() {
  clear_has_sparse_896_str();
  if (sparse_896_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_896_str_;
    sparse_896_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_896_str(::std::string* sparse_896_str) {
  if (sparse_896_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_896_str_;
  }
  if (sparse_896_str) {
    set_has_sparse_896_str();
    sparse_896_str_ = sparse_896_str;
  } else {
    clear_has_sparse_896_str();
    sparse_896_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_897_str = 909;
inline bool Database_NoBench::has_sparse_897_str() const {
  return (_has_bits_[28] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_897_str() {
  _has_bits_[28] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_897_str() {
  _has_bits_[28] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_897_str() {
  if (sparse_897_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_897_str_->clear();
  }
  clear_has_sparse_897_str();
}
inline const ::std::string& Database_NoBench::sparse_897_str() const {
  return *sparse_897_str_;
}
inline void Database_NoBench::set_sparse_897_str(const ::std::string& value) {
  set_has_sparse_897_str();
  if (sparse_897_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_897_str_ = new ::std::string;
  }
  sparse_897_str_->assign(value);
}
inline void Database_NoBench::set_sparse_897_str(const char* value) {
  set_has_sparse_897_str();
  if (sparse_897_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_897_str_ = new ::std::string;
  }
  sparse_897_str_->assign(value);
}
inline void Database_NoBench::set_sparse_897_str(const char* value, size_t size) {
  set_has_sparse_897_str();
  if (sparse_897_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_897_str_ = new ::std::string;
  }
  sparse_897_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_897_str() {
  set_has_sparse_897_str();
  if (sparse_897_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_897_str_ = new ::std::string;
  }
  return sparse_897_str_;
}
inline ::std::string* Database_NoBench::release_sparse_897_str() {
  clear_has_sparse_897_str();
  if (sparse_897_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_897_str_;
    sparse_897_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_897_str(::std::string* sparse_897_str) {
  if (sparse_897_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_897_str_;
  }
  if (sparse_897_str) {
    set_has_sparse_897_str();
    sparse_897_str_ = sparse_897_str;
  } else {
    clear_has_sparse_897_str();
    sparse_897_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_898_str = 910;
inline bool Database_NoBench::has_sparse_898_str() const {
  return (_has_bits_[28] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_898_str() {
  _has_bits_[28] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_898_str() {
  _has_bits_[28] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_898_str() {
  if (sparse_898_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_898_str_->clear();
  }
  clear_has_sparse_898_str();
}
inline const ::std::string& Database_NoBench::sparse_898_str() const {
  return *sparse_898_str_;
}
inline void Database_NoBench::set_sparse_898_str(const ::std::string& value) {
  set_has_sparse_898_str();
  if (sparse_898_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_898_str_ = new ::std::string;
  }
  sparse_898_str_->assign(value);
}
inline void Database_NoBench::set_sparse_898_str(const char* value) {
  set_has_sparse_898_str();
  if (sparse_898_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_898_str_ = new ::std::string;
  }
  sparse_898_str_->assign(value);
}
inline void Database_NoBench::set_sparse_898_str(const char* value, size_t size) {
  set_has_sparse_898_str();
  if (sparse_898_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_898_str_ = new ::std::string;
  }
  sparse_898_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_898_str() {
  set_has_sparse_898_str();
  if (sparse_898_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_898_str_ = new ::std::string;
  }
  return sparse_898_str_;
}
inline ::std::string* Database_NoBench::release_sparse_898_str() {
  clear_has_sparse_898_str();
  if (sparse_898_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_898_str_;
    sparse_898_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_898_str(::std::string* sparse_898_str) {
  if (sparse_898_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_898_str_;
  }
  if (sparse_898_str) {
    set_has_sparse_898_str();
    sparse_898_str_ = sparse_898_str;
  } else {
    clear_has_sparse_898_str();
    sparse_898_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_899_str = 911;
inline bool Database_NoBench::has_sparse_899_str() const {
  return (_has_bits_[28] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_899_str() {
  _has_bits_[28] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_899_str() {
  _has_bits_[28] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_899_str() {
  if (sparse_899_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_899_str_->clear();
  }
  clear_has_sparse_899_str();
}
inline const ::std::string& Database_NoBench::sparse_899_str() const {
  return *sparse_899_str_;
}
inline void Database_NoBench::set_sparse_899_str(const ::std::string& value) {
  set_has_sparse_899_str();
  if (sparse_899_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_899_str_ = new ::std::string;
  }
  sparse_899_str_->assign(value);
}
inline void Database_NoBench::set_sparse_899_str(const char* value) {
  set_has_sparse_899_str();
  if (sparse_899_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_899_str_ = new ::std::string;
  }
  sparse_899_str_->assign(value);
}
inline void Database_NoBench::set_sparse_899_str(const char* value, size_t size) {
  set_has_sparse_899_str();
  if (sparse_899_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_899_str_ = new ::std::string;
  }
  sparse_899_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_899_str() {
  set_has_sparse_899_str();
  if (sparse_899_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_899_str_ = new ::std::string;
  }
  return sparse_899_str_;
}
inline ::std::string* Database_NoBench::release_sparse_899_str() {
  clear_has_sparse_899_str();
  if (sparse_899_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_899_str_;
    sparse_899_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_899_str(::std::string* sparse_899_str) {
  if (sparse_899_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_899_str_;
  }
  if (sparse_899_str) {
    set_has_sparse_899_str();
    sparse_899_str_ = sparse_899_str;
  } else {
    clear_has_sparse_899_str();
    sparse_899_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_900_str = 912;
inline bool Database_NoBench::has_sparse_900_str() const {
  return (_has_bits_[28] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_900_str() {
  _has_bits_[28] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_900_str() {
  _has_bits_[28] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_900_str() {
  if (sparse_900_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_900_str_->clear();
  }
  clear_has_sparse_900_str();
}
inline const ::std::string& Database_NoBench::sparse_900_str() const {
  return *sparse_900_str_;
}
inline void Database_NoBench::set_sparse_900_str(const ::std::string& value) {
  set_has_sparse_900_str();
  if (sparse_900_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_900_str_ = new ::std::string;
  }
  sparse_900_str_->assign(value);
}
inline void Database_NoBench::set_sparse_900_str(const char* value) {
  set_has_sparse_900_str();
  if (sparse_900_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_900_str_ = new ::std::string;
  }
  sparse_900_str_->assign(value);
}
inline void Database_NoBench::set_sparse_900_str(const char* value, size_t size) {
  set_has_sparse_900_str();
  if (sparse_900_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_900_str_ = new ::std::string;
  }
  sparse_900_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_900_str() {
  set_has_sparse_900_str();
  if (sparse_900_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_900_str_ = new ::std::string;
  }
  return sparse_900_str_;
}
inline ::std::string* Database_NoBench::release_sparse_900_str() {
  clear_has_sparse_900_str();
  if (sparse_900_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_900_str_;
    sparse_900_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_900_str(::std::string* sparse_900_str) {
  if (sparse_900_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_900_str_;
  }
  if (sparse_900_str) {
    set_has_sparse_900_str();
    sparse_900_str_ = sparse_900_str;
  } else {
    clear_has_sparse_900_str();
    sparse_900_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_901_str = 913;
inline bool Database_NoBench::has_sparse_901_str() const {
  return (_has_bits_[28] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_901_str() {
  _has_bits_[28] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_901_str() {
  _has_bits_[28] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_901_str() {
  if (sparse_901_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_901_str_->clear();
  }
  clear_has_sparse_901_str();
}
inline const ::std::string& Database_NoBench::sparse_901_str() const {
  return *sparse_901_str_;
}
inline void Database_NoBench::set_sparse_901_str(const ::std::string& value) {
  set_has_sparse_901_str();
  if (sparse_901_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_901_str_ = new ::std::string;
  }
  sparse_901_str_->assign(value);
}
inline void Database_NoBench::set_sparse_901_str(const char* value) {
  set_has_sparse_901_str();
  if (sparse_901_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_901_str_ = new ::std::string;
  }
  sparse_901_str_->assign(value);
}
inline void Database_NoBench::set_sparse_901_str(const char* value, size_t size) {
  set_has_sparse_901_str();
  if (sparse_901_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_901_str_ = new ::std::string;
  }
  sparse_901_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_901_str() {
  set_has_sparse_901_str();
  if (sparse_901_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_901_str_ = new ::std::string;
  }
  return sparse_901_str_;
}
inline ::std::string* Database_NoBench::release_sparse_901_str() {
  clear_has_sparse_901_str();
  if (sparse_901_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_901_str_;
    sparse_901_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_901_str(::std::string* sparse_901_str) {
  if (sparse_901_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_901_str_;
  }
  if (sparse_901_str) {
    set_has_sparse_901_str();
    sparse_901_str_ = sparse_901_str;
  } else {
    clear_has_sparse_901_str();
    sparse_901_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_902_str = 914;
inline bool Database_NoBench::has_sparse_902_str() const {
  return (_has_bits_[28] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_902_str() {
  _has_bits_[28] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_902_str() {
  _has_bits_[28] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_902_str() {
  if (sparse_902_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_902_str_->clear();
  }
  clear_has_sparse_902_str();
}
inline const ::std::string& Database_NoBench::sparse_902_str() const {
  return *sparse_902_str_;
}
inline void Database_NoBench::set_sparse_902_str(const ::std::string& value) {
  set_has_sparse_902_str();
  if (sparse_902_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_902_str_ = new ::std::string;
  }
  sparse_902_str_->assign(value);
}
inline void Database_NoBench::set_sparse_902_str(const char* value) {
  set_has_sparse_902_str();
  if (sparse_902_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_902_str_ = new ::std::string;
  }
  sparse_902_str_->assign(value);
}
inline void Database_NoBench::set_sparse_902_str(const char* value, size_t size) {
  set_has_sparse_902_str();
  if (sparse_902_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_902_str_ = new ::std::string;
  }
  sparse_902_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_902_str() {
  set_has_sparse_902_str();
  if (sparse_902_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_902_str_ = new ::std::string;
  }
  return sparse_902_str_;
}
inline ::std::string* Database_NoBench::release_sparse_902_str() {
  clear_has_sparse_902_str();
  if (sparse_902_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_902_str_;
    sparse_902_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_902_str(::std::string* sparse_902_str) {
  if (sparse_902_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_902_str_;
  }
  if (sparse_902_str) {
    set_has_sparse_902_str();
    sparse_902_str_ = sparse_902_str;
  } else {
    clear_has_sparse_902_str();
    sparse_902_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_903_str = 915;
inline bool Database_NoBench::has_sparse_903_str() const {
  return (_has_bits_[28] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_903_str() {
  _has_bits_[28] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_903_str() {
  _has_bits_[28] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_903_str() {
  if (sparse_903_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_903_str_->clear();
  }
  clear_has_sparse_903_str();
}
inline const ::std::string& Database_NoBench::sparse_903_str() const {
  return *sparse_903_str_;
}
inline void Database_NoBench::set_sparse_903_str(const ::std::string& value) {
  set_has_sparse_903_str();
  if (sparse_903_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_903_str_ = new ::std::string;
  }
  sparse_903_str_->assign(value);
}
inline void Database_NoBench::set_sparse_903_str(const char* value) {
  set_has_sparse_903_str();
  if (sparse_903_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_903_str_ = new ::std::string;
  }
  sparse_903_str_->assign(value);
}
inline void Database_NoBench::set_sparse_903_str(const char* value, size_t size) {
  set_has_sparse_903_str();
  if (sparse_903_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_903_str_ = new ::std::string;
  }
  sparse_903_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_903_str() {
  set_has_sparse_903_str();
  if (sparse_903_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_903_str_ = new ::std::string;
  }
  return sparse_903_str_;
}
inline ::std::string* Database_NoBench::release_sparse_903_str() {
  clear_has_sparse_903_str();
  if (sparse_903_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_903_str_;
    sparse_903_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_903_str(::std::string* sparse_903_str) {
  if (sparse_903_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_903_str_;
  }
  if (sparse_903_str) {
    set_has_sparse_903_str();
    sparse_903_str_ = sparse_903_str;
  } else {
    clear_has_sparse_903_str();
    sparse_903_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_904_str = 916;
inline bool Database_NoBench::has_sparse_904_str() const {
  return (_has_bits_[28] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_904_str() {
  _has_bits_[28] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_904_str() {
  _has_bits_[28] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_904_str() {
  if (sparse_904_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_904_str_->clear();
  }
  clear_has_sparse_904_str();
}
inline const ::std::string& Database_NoBench::sparse_904_str() const {
  return *sparse_904_str_;
}
inline void Database_NoBench::set_sparse_904_str(const ::std::string& value) {
  set_has_sparse_904_str();
  if (sparse_904_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_904_str_ = new ::std::string;
  }
  sparse_904_str_->assign(value);
}
inline void Database_NoBench::set_sparse_904_str(const char* value) {
  set_has_sparse_904_str();
  if (sparse_904_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_904_str_ = new ::std::string;
  }
  sparse_904_str_->assign(value);
}
inline void Database_NoBench::set_sparse_904_str(const char* value, size_t size) {
  set_has_sparse_904_str();
  if (sparse_904_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_904_str_ = new ::std::string;
  }
  sparse_904_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_904_str() {
  set_has_sparse_904_str();
  if (sparse_904_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_904_str_ = new ::std::string;
  }
  return sparse_904_str_;
}
inline ::std::string* Database_NoBench::release_sparse_904_str() {
  clear_has_sparse_904_str();
  if (sparse_904_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_904_str_;
    sparse_904_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_904_str(::std::string* sparse_904_str) {
  if (sparse_904_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_904_str_;
  }
  if (sparse_904_str) {
    set_has_sparse_904_str();
    sparse_904_str_ = sparse_904_str;
  } else {
    clear_has_sparse_904_str();
    sparse_904_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_905_str = 917;
inline bool Database_NoBench::has_sparse_905_str() const {
  return (_has_bits_[28] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_905_str() {
  _has_bits_[28] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_905_str() {
  _has_bits_[28] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_905_str() {
  if (sparse_905_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_905_str_->clear();
  }
  clear_has_sparse_905_str();
}
inline const ::std::string& Database_NoBench::sparse_905_str() const {
  return *sparse_905_str_;
}
inline void Database_NoBench::set_sparse_905_str(const ::std::string& value) {
  set_has_sparse_905_str();
  if (sparse_905_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_905_str_ = new ::std::string;
  }
  sparse_905_str_->assign(value);
}
inline void Database_NoBench::set_sparse_905_str(const char* value) {
  set_has_sparse_905_str();
  if (sparse_905_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_905_str_ = new ::std::string;
  }
  sparse_905_str_->assign(value);
}
inline void Database_NoBench::set_sparse_905_str(const char* value, size_t size) {
  set_has_sparse_905_str();
  if (sparse_905_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_905_str_ = new ::std::string;
  }
  sparse_905_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_905_str() {
  set_has_sparse_905_str();
  if (sparse_905_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_905_str_ = new ::std::string;
  }
  return sparse_905_str_;
}
inline ::std::string* Database_NoBench::release_sparse_905_str() {
  clear_has_sparse_905_str();
  if (sparse_905_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_905_str_;
    sparse_905_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_905_str(::std::string* sparse_905_str) {
  if (sparse_905_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_905_str_;
  }
  if (sparse_905_str) {
    set_has_sparse_905_str();
    sparse_905_str_ = sparse_905_str;
  } else {
    clear_has_sparse_905_str();
    sparse_905_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_906_str = 918;
inline bool Database_NoBench::has_sparse_906_str() const {
  return (_has_bits_[28] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_906_str() {
  _has_bits_[28] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_906_str() {
  _has_bits_[28] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_906_str() {
  if (sparse_906_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_906_str_->clear();
  }
  clear_has_sparse_906_str();
}
inline const ::std::string& Database_NoBench::sparse_906_str() const {
  return *sparse_906_str_;
}
inline void Database_NoBench::set_sparse_906_str(const ::std::string& value) {
  set_has_sparse_906_str();
  if (sparse_906_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_906_str_ = new ::std::string;
  }
  sparse_906_str_->assign(value);
}
inline void Database_NoBench::set_sparse_906_str(const char* value) {
  set_has_sparse_906_str();
  if (sparse_906_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_906_str_ = new ::std::string;
  }
  sparse_906_str_->assign(value);
}
inline void Database_NoBench::set_sparse_906_str(const char* value, size_t size) {
  set_has_sparse_906_str();
  if (sparse_906_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_906_str_ = new ::std::string;
  }
  sparse_906_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_906_str() {
  set_has_sparse_906_str();
  if (sparse_906_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_906_str_ = new ::std::string;
  }
  return sparse_906_str_;
}
inline ::std::string* Database_NoBench::release_sparse_906_str() {
  clear_has_sparse_906_str();
  if (sparse_906_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_906_str_;
    sparse_906_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_906_str(::std::string* sparse_906_str) {
  if (sparse_906_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_906_str_;
  }
  if (sparse_906_str) {
    set_has_sparse_906_str();
    sparse_906_str_ = sparse_906_str;
  } else {
    clear_has_sparse_906_str();
    sparse_906_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_907_str = 919;
inline bool Database_NoBench::has_sparse_907_str() const {
  return (_has_bits_[28] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_907_str() {
  _has_bits_[28] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_907_str() {
  _has_bits_[28] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_907_str() {
  if (sparse_907_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_907_str_->clear();
  }
  clear_has_sparse_907_str();
}
inline const ::std::string& Database_NoBench::sparse_907_str() const {
  return *sparse_907_str_;
}
inline void Database_NoBench::set_sparse_907_str(const ::std::string& value) {
  set_has_sparse_907_str();
  if (sparse_907_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_907_str_ = new ::std::string;
  }
  sparse_907_str_->assign(value);
}
inline void Database_NoBench::set_sparse_907_str(const char* value) {
  set_has_sparse_907_str();
  if (sparse_907_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_907_str_ = new ::std::string;
  }
  sparse_907_str_->assign(value);
}
inline void Database_NoBench::set_sparse_907_str(const char* value, size_t size) {
  set_has_sparse_907_str();
  if (sparse_907_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_907_str_ = new ::std::string;
  }
  sparse_907_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_907_str() {
  set_has_sparse_907_str();
  if (sparse_907_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_907_str_ = new ::std::string;
  }
  return sparse_907_str_;
}
inline ::std::string* Database_NoBench::release_sparse_907_str() {
  clear_has_sparse_907_str();
  if (sparse_907_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_907_str_;
    sparse_907_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_907_str(::std::string* sparse_907_str) {
  if (sparse_907_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_907_str_;
  }
  if (sparse_907_str) {
    set_has_sparse_907_str();
    sparse_907_str_ = sparse_907_str;
  } else {
    clear_has_sparse_907_str();
    sparse_907_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_908_str = 920;
inline bool Database_NoBench::has_sparse_908_str() const {
  return (_has_bits_[28] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_908_str() {
  _has_bits_[28] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_908_str() {
  _has_bits_[28] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_908_str() {
  if (sparse_908_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_908_str_->clear();
  }
  clear_has_sparse_908_str();
}
inline const ::std::string& Database_NoBench::sparse_908_str() const {
  return *sparse_908_str_;
}
inline void Database_NoBench::set_sparse_908_str(const ::std::string& value) {
  set_has_sparse_908_str();
  if (sparse_908_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_908_str_ = new ::std::string;
  }
  sparse_908_str_->assign(value);
}
inline void Database_NoBench::set_sparse_908_str(const char* value) {
  set_has_sparse_908_str();
  if (sparse_908_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_908_str_ = new ::std::string;
  }
  sparse_908_str_->assign(value);
}
inline void Database_NoBench::set_sparse_908_str(const char* value, size_t size) {
  set_has_sparse_908_str();
  if (sparse_908_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_908_str_ = new ::std::string;
  }
  sparse_908_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_908_str() {
  set_has_sparse_908_str();
  if (sparse_908_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_908_str_ = new ::std::string;
  }
  return sparse_908_str_;
}
inline ::std::string* Database_NoBench::release_sparse_908_str() {
  clear_has_sparse_908_str();
  if (sparse_908_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_908_str_;
    sparse_908_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_908_str(::std::string* sparse_908_str) {
  if (sparse_908_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_908_str_;
  }
  if (sparse_908_str) {
    set_has_sparse_908_str();
    sparse_908_str_ = sparse_908_str;
  } else {
    clear_has_sparse_908_str();
    sparse_908_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_909_str = 921;
inline bool Database_NoBench::has_sparse_909_str() const {
  return (_has_bits_[28] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_909_str() {
  _has_bits_[28] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_909_str() {
  _has_bits_[28] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_909_str() {
  if (sparse_909_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_909_str_->clear();
  }
  clear_has_sparse_909_str();
}
inline const ::std::string& Database_NoBench::sparse_909_str() const {
  return *sparse_909_str_;
}
inline void Database_NoBench::set_sparse_909_str(const ::std::string& value) {
  set_has_sparse_909_str();
  if (sparse_909_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_909_str_ = new ::std::string;
  }
  sparse_909_str_->assign(value);
}
inline void Database_NoBench::set_sparse_909_str(const char* value) {
  set_has_sparse_909_str();
  if (sparse_909_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_909_str_ = new ::std::string;
  }
  sparse_909_str_->assign(value);
}
inline void Database_NoBench::set_sparse_909_str(const char* value, size_t size) {
  set_has_sparse_909_str();
  if (sparse_909_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_909_str_ = new ::std::string;
  }
  sparse_909_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_909_str() {
  set_has_sparse_909_str();
  if (sparse_909_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_909_str_ = new ::std::string;
  }
  return sparse_909_str_;
}
inline ::std::string* Database_NoBench::release_sparse_909_str() {
  clear_has_sparse_909_str();
  if (sparse_909_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_909_str_;
    sparse_909_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_909_str(::std::string* sparse_909_str) {
  if (sparse_909_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_909_str_;
  }
  if (sparse_909_str) {
    set_has_sparse_909_str();
    sparse_909_str_ = sparse_909_str;
  } else {
    clear_has_sparse_909_str();
    sparse_909_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_910_str = 922;
inline bool Database_NoBench::has_sparse_910_str() const {
  return (_has_bits_[28] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_910_str() {
  _has_bits_[28] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_910_str() {
  _has_bits_[28] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_910_str() {
  if (sparse_910_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_910_str_->clear();
  }
  clear_has_sparse_910_str();
}
inline const ::std::string& Database_NoBench::sparse_910_str() const {
  return *sparse_910_str_;
}
inline void Database_NoBench::set_sparse_910_str(const ::std::string& value) {
  set_has_sparse_910_str();
  if (sparse_910_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_910_str_ = new ::std::string;
  }
  sparse_910_str_->assign(value);
}
inline void Database_NoBench::set_sparse_910_str(const char* value) {
  set_has_sparse_910_str();
  if (sparse_910_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_910_str_ = new ::std::string;
  }
  sparse_910_str_->assign(value);
}
inline void Database_NoBench::set_sparse_910_str(const char* value, size_t size) {
  set_has_sparse_910_str();
  if (sparse_910_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_910_str_ = new ::std::string;
  }
  sparse_910_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_910_str() {
  set_has_sparse_910_str();
  if (sparse_910_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_910_str_ = new ::std::string;
  }
  return sparse_910_str_;
}
inline ::std::string* Database_NoBench::release_sparse_910_str() {
  clear_has_sparse_910_str();
  if (sparse_910_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_910_str_;
    sparse_910_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_910_str(::std::string* sparse_910_str) {
  if (sparse_910_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_910_str_;
  }
  if (sparse_910_str) {
    set_has_sparse_910_str();
    sparse_910_str_ = sparse_910_str;
  } else {
    clear_has_sparse_910_str();
    sparse_910_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_911_str = 923;
inline bool Database_NoBench::has_sparse_911_str() const {
  return (_has_bits_[28] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_911_str() {
  _has_bits_[28] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_911_str() {
  _has_bits_[28] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_911_str() {
  if (sparse_911_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_911_str_->clear();
  }
  clear_has_sparse_911_str();
}
inline const ::std::string& Database_NoBench::sparse_911_str() const {
  return *sparse_911_str_;
}
inline void Database_NoBench::set_sparse_911_str(const ::std::string& value) {
  set_has_sparse_911_str();
  if (sparse_911_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_911_str_ = new ::std::string;
  }
  sparse_911_str_->assign(value);
}
inline void Database_NoBench::set_sparse_911_str(const char* value) {
  set_has_sparse_911_str();
  if (sparse_911_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_911_str_ = new ::std::string;
  }
  sparse_911_str_->assign(value);
}
inline void Database_NoBench::set_sparse_911_str(const char* value, size_t size) {
  set_has_sparse_911_str();
  if (sparse_911_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_911_str_ = new ::std::string;
  }
  sparse_911_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_911_str() {
  set_has_sparse_911_str();
  if (sparse_911_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_911_str_ = new ::std::string;
  }
  return sparse_911_str_;
}
inline ::std::string* Database_NoBench::release_sparse_911_str() {
  clear_has_sparse_911_str();
  if (sparse_911_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_911_str_;
    sparse_911_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_911_str(::std::string* sparse_911_str) {
  if (sparse_911_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_911_str_;
  }
  if (sparse_911_str) {
    set_has_sparse_911_str();
    sparse_911_str_ = sparse_911_str;
  } else {
    clear_has_sparse_911_str();
    sparse_911_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_912_str = 924;
inline bool Database_NoBench::has_sparse_912_str() const {
  return (_has_bits_[28] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_912_str() {
  _has_bits_[28] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_912_str() {
  _has_bits_[28] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_912_str() {
  if (sparse_912_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_912_str_->clear();
  }
  clear_has_sparse_912_str();
}
inline const ::std::string& Database_NoBench::sparse_912_str() const {
  return *sparse_912_str_;
}
inline void Database_NoBench::set_sparse_912_str(const ::std::string& value) {
  set_has_sparse_912_str();
  if (sparse_912_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_912_str_ = new ::std::string;
  }
  sparse_912_str_->assign(value);
}
inline void Database_NoBench::set_sparse_912_str(const char* value) {
  set_has_sparse_912_str();
  if (sparse_912_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_912_str_ = new ::std::string;
  }
  sparse_912_str_->assign(value);
}
inline void Database_NoBench::set_sparse_912_str(const char* value, size_t size) {
  set_has_sparse_912_str();
  if (sparse_912_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_912_str_ = new ::std::string;
  }
  sparse_912_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_912_str() {
  set_has_sparse_912_str();
  if (sparse_912_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_912_str_ = new ::std::string;
  }
  return sparse_912_str_;
}
inline ::std::string* Database_NoBench::release_sparse_912_str() {
  clear_has_sparse_912_str();
  if (sparse_912_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_912_str_;
    sparse_912_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_912_str(::std::string* sparse_912_str) {
  if (sparse_912_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_912_str_;
  }
  if (sparse_912_str) {
    set_has_sparse_912_str();
    sparse_912_str_ = sparse_912_str;
  } else {
    clear_has_sparse_912_str();
    sparse_912_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_913_str = 925;
inline bool Database_NoBench::has_sparse_913_str() const {
  return (_has_bits_[28] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_913_str() {
  _has_bits_[28] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_913_str() {
  _has_bits_[28] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_913_str() {
  if (sparse_913_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_913_str_->clear();
  }
  clear_has_sparse_913_str();
}
inline const ::std::string& Database_NoBench::sparse_913_str() const {
  return *sparse_913_str_;
}
inline void Database_NoBench::set_sparse_913_str(const ::std::string& value) {
  set_has_sparse_913_str();
  if (sparse_913_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_913_str_ = new ::std::string;
  }
  sparse_913_str_->assign(value);
}
inline void Database_NoBench::set_sparse_913_str(const char* value) {
  set_has_sparse_913_str();
  if (sparse_913_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_913_str_ = new ::std::string;
  }
  sparse_913_str_->assign(value);
}
inline void Database_NoBench::set_sparse_913_str(const char* value, size_t size) {
  set_has_sparse_913_str();
  if (sparse_913_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_913_str_ = new ::std::string;
  }
  sparse_913_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_913_str() {
  set_has_sparse_913_str();
  if (sparse_913_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_913_str_ = new ::std::string;
  }
  return sparse_913_str_;
}
inline ::std::string* Database_NoBench::release_sparse_913_str() {
  clear_has_sparse_913_str();
  if (sparse_913_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_913_str_;
    sparse_913_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_913_str(::std::string* sparse_913_str) {
  if (sparse_913_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_913_str_;
  }
  if (sparse_913_str) {
    set_has_sparse_913_str();
    sparse_913_str_ = sparse_913_str;
  } else {
    clear_has_sparse_913_str();
    sparse_913_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_914_str = 926;
inline bool Database_NoBench::has_sparse_914_str() const {
  return (_has_bits_[28] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_914_str() {
  _has_bits_[28] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_914_str() {
  _has_bits_[28] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_914_str() {
  if (sparse_914_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_914_str_->clear();
  }
  clear_has_sparse_914_str();
}
inline const ::std::string& Database_NoBench::sparse_914_str() const {
  return *sparse_914_str_;
}
inline void Database_NoBench::set_sparse_914_str(const ::std::string& value) {
  set_has_sparse_914_str();
  if (sparse_914_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_914_str_ = new ::std::string;
  }
  sparse_914_str_->assign(value);
}
inline void Database_NoBench::set_sparse_914_str(const char* value) {
  set_has_sparse_914_str();
  if (sparse_914_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_914_str_ = new ::std::string;
  }
  sparse_914_str_->assign(value);
}
inline void Database_NoBench::set_sparse_914_str(const char* value, size_t size) {
  set_has_sparse_914_str();
  if (sparse_914_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_914_str_ = new ::std::string;
  }
  sparse_914_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_914_str() {
  set_has_sparse_914_str();
  if (sparse_914_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_914_str_ = new ::std::string;
  }
  return sparse_914_str_;
}
inline ::std::string* Database_NoBench::release_sparse_914_str() {
  clear_has_sparse_914_str();
  if (sparse_914_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_914_str_;
    sparse_914_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_914_str(::std::string* sparse_914_str) {
  if (sparse_914_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_914_str_;
  }
  if (sparse_914_str) {
    set_has_sparse_914_str();
    sparse_914_str_ = sparse_914_str;
  } else {
    clear_has_sparse_914_str();
    sparse_914_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_915_str = 927;
inline bool Database_NoBench::has_sparse_915_str() const {
  return (_has_bits_[29] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_915_str() {
  _has_bits_[29] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_915_str() {
  _has_bits_[29] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_915_str() {
  if (sparse_915_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_915_str_->clear();
  }
  clear_has_sparse_915_str();
}
inline const ::std::string& Database_NoBench::sparse_915_str() const {
  return *sparse_915_str_;
}
inline void Database_NoBench::set_sparse_915_str(const ::std::string& value) {
  set_has_sparse_915_str();
  if (sparse_915_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_915_str_ = new ::std::string;
  }
  sparse_915_str_->assign(value);
}
inline void Database_NoBench::set_sparse_915_str(const char* value) {
  set_has_sparse_915_str();
  if (sparse_915_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_915_str_ = new ::std::string;
  }
  sparse_915_str_->assign(value);
}
inline void Database_NoBench::set_sparse_915_str(const char* value, size_t size) {
  set_has_sparse_915_str();
  if (sparse_915_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_915_str_ = new ::std::string;
  }
  sparse_915_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_915_str() {
  set_has_sparse_915_str();
  if (sparse_915_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_915_str_ = new ::std::string;
  }
  return sparse_915_str_;
}
inline ::std::string* Database_NoBench::release_sparse_915_str() {
  clear_has_sparse_915_str();
  if (sparse_915_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_915_str_;
    sparse_915_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_915_str(::std::string* sparse_915_str) {
  if (sparse_915_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_915_str_;
  }
  if (sparse_915_str) {
    set_has_sparse_915_str();
    sparse_915_str_ = sparse_915_str;
  } else {
    clear_has_sparse_915_str();
    sparse_915_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_916_str = 928;
inline bool Database_NoBench::has_sparse_916_str() const {
  return (_has_bits_[29] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_916_str() {
  _has_bits_[29] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_916_str() {
  _has_bits_[29] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_916_str() {
  if (sparse_916_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_916_str_->clear();
  }
  clear_has_sparse_916_str();
}
inline const ::std::string& Database_NoBench::sparse_916_str() const {
  return *sparse_916_str_;
}
inline void Database_NoBench::set_sparse_916_str(const ::std::string& value) {
  set_has_sparse_916_str();
  if (sparse_916_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_916_str_ = new ::std::string;
  }
  sparse_916_str_->assign(value);
}
inline void Database_NoBench::set_sparse_916_str(const char* value) {
  set_has_sparse_916_str();
  if (sparse_916_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_916_str_ = new ::std::string;
  }
  sparse_916_str_->assign(value);
}
inline void Database_NoBench::set_sparse_916_str(const char* value, size_t size) {
  set_has_sparse_916_str();
  if (sparse_916_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_916_str_ = new ::std::string;
  }
  sparse_916_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_916_str() {
  set_has_sparse_916_str();
  if (sparse_916_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_916_str_ = new ::std::string;
  }
  return sparse_916_str_;
}
inline ::std::string* Database_NoBench::release_sparse_916_str() {
  clear_has_sparse_916_str();
  if (sparse_916_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_916_str_;
    sparse_916_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_916_str(::std::string* sparse_916_str) {
  if (sparse_916_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_916_str_;
  }
  if (sparse_916_str) {
    set_has_sparse_916_str();
    sparse_916_str_ = sparse_916_str;
  } else {
    clear_has_sparse_916_str();
    sparse_916_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_917_str = 929;
inline bool Database_NoBench::has_sparse_917_str() const {
  return (_has_bits_[29] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_917_str() {
  _has_bits_[29] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_917_str() {
  _has_bits_[29] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_917_str() {
  if (sparse_917_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_917_str_->clear();
  }
  clear_has_sparse_917_str();
}
inline const ::std::string& Database_NoBench::sparse_917_str() const {
  return *sparse_917_str_;
}
inline void Database_NoBench::set_sparse_917_str(const ::std::string& value) {
  set_has_sparse_917_str();
  if (sparse_917_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_917_str_ = new ::std::string;
  }
  sparse_917_str_->assign(value);
}
inline void Database_NoBench::set_sparse_917_str(const char* value) {
  set_has_sparse_917_str();
  if (sparse_917_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_917_str_ = new ::std::string;
  }
  sparse_917_str_->assign(value);
}
inline void Database_NoBench::set_sparse_917_str(const char* value, size_t size) {
  set_has_sparse_917_str();
  if (sparse_917_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_917_str_ = new ::std::string;
  }
  sparse_917_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_917_str() {
  set_has_sparse_917_str();
  if (sparse_917_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_917_str_ = new ::std::string;
  }
  return sparse_917_str_;
}
inline ::std::string* Database_NoBench::release_sparse_917_str() {
  clear_has_sparse_917_str();
  if (sparse_917_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_917_str_;
    sparse_917_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_917_str(::std::string* sparse_917_str) {
  if (sparse_917_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_917_str_;
  }
  if (sparse_917_str) {
    set_has_sparse_917_str();
    sparse_917_str_ = sparse_917_str;
  } else {
    clear_has_sparse_917_str();
    sparse_917_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_918_str = 930;
inline bool Database_NoBench::has_sparse_918_str() const {
  return (_has_bits_[29] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_918_str() {
  _has_bits_[29] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_918_str() {
  _has_bits_[29] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_918_str() {
  if (sparse_918_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_918_str_->clear();
  }
  clear_has_sparse_918_str();
}
inline const ::std::string& Database_NoBench::sparse_918_str() const {
  return *sparse_918_str_;
}
inline void Database_NoBench::set_sparse_918_str(const ::std::string& value) {
  set_has_sparse_918_str();
  if (sparse_918_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_918_str_ = new ::std::string;
  }
  sparse_918_str_->assign(value);
}
inline void Database_NoBench::set_sparse_918_str(const char* value) {
  set_has_sparse_918_str();
  if (sparse_918_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_918_str_ = new ::std::string;
  }
  sparse_918_str_->assign(value);
}
inline void Database_NoBench::set_sparse_918_str(const char* value, size_t size) {
  set_has_sparse_918_str();
  if (sparse_918_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_918_str_ = new ::std::string;
  }
  sparse_918_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_918_str() {
  set_has_sparse_918_str();
  if (sparse_918_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_918_str_ = new ::std::string;
  }
  return sparse_918_str_;
}
inline ::std::string* Database_NoBench::release_sparse_918_str() {
  clear_has_sparse_918_str();
  if (sparse_918_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_918_str_;
    sparse_918_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_918_str(::std::string* sparse_918_str) {
  if (sparse_918_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_918_str_;
  }
  if (sparse_918_str) {
    set_has_sparse_918_str();
    sparse_918_str_ = sparse_918_str;
  } else {
    clear_has_sparse_918_str();
    sparse_918_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_919_str = 931;
inline bool Database_NoBench::has_sparse_919_str() const {
  return (_has_bits_[29] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_919_str() {
  _has_bits_[29] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_919_str() {
  _has_bits_[29] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_919_str() {
  if (sparse_919_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_919_str_->clear();
  }
  clear_has_sparse_919_str();
}
inline const ::std::string& Database_NoBench::sparse_919_str() const {
  return *sparse_919_str_;
}
inline void Database_NoBench::set_sparse_919_str(const ::std::string& value) {
  set_has_sparse_919_str();
  if (sparse_919_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_919_str_ = new ::std::string;
  }
  sparse_919_str_->assign(value);
}
inline void Database_NoBench::set_sparse_919_str(const char* value) {
  set_has_sparse_919_str();
  if (sparse_919_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_919_str_ = new ::std::string;
  }
  sparse_919_str_->assign(value);
}
inline void Database_NoBench::set_sparse_919_str(const char* value, size_t size) {
  set_has_sparse_919_str();
  if (sparse_919_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_919_str_ = new ::std::string;
  }
  sparse_919_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_919_str() {
  set_has_sparse_919_str();
  if (sparse_919_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_919_str_ = new ::std::string;
  }
  return sparse_919_str_;
}
inline ::std::string* Database_NoBench::release_sparse_919_str() {
  clear_has_sparse_919_str();
  if (sparse_919_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_919_str_;
    sparse_919_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_919_str(::std::string* sparse_919_str) {
  if (sparse_919_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_919_str_;
  }
  if (sparse_919_str) {
    set_has_sparse_919_str();
    sparse_919_str_ = sparse_919_str;
  } else {
    clear_has_sparse_919_str();
    sparse_919_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_920_str = 932;
inline bool Database_NoBench::has_sparse_920_str() const {
  return (_has_bits_[29] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_920_str() {
  _has_bits_[29] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_920_str() {
  _has_bits_[29] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_920_str() {
  if (sparse_920_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_920_str_->clear();
  }
  clear_has_sparse_920_str();
}
inline const ::std::string& Database_NoBench::sparse_920_str() const {
  return *sparse_920_str_;
}
inline void Database_NoBench::set_sparse_920_str(const ::std::string& value) {
  set_has_sparse_920_str();
  if (sparse_920_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_920_str_ = new ::std::string;
  }
  sparse_920_str_->assign(value);
}
inline void Database_NoBench::set_sparse_920_str(const char* value) {
  set_has_sparse_920_str();
  if (sparse_920_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_920_str_ = new ::std::string;
  }
  sparse_920_str_->assign(value);
}
inline void Database_NoBench::set_sparse_920_str(const char* value, size_t size) {
  set_has_sparse_920_str();
  if (sparse_920_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_920_str_ = new ::std::string;
  }
  sparse_920_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_920_str() {
  set_has_sparse_920_str();
  if (sparse_920_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_920_str_ = new ::std::string;
  }
  return sparse_920_str_;
}
inline ::std::string* Database_NoBench::release_sparse_920_str() {
  clear_has_sparse_920_str();
  if (sparse_920_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_920_str_;
    sparse_920_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_920_str(::std::string* sparse_920_str) {
  if (sparse_920_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_920_str_;
  }
  if (sparse_920_str) {
    set_has_sparse_920_str();
    sparse_920_str_ = sparse_920_str;
  } else {
    clear_has_sparse_920_str();
    sparse_920_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_921_str = 933;
inline bool Database_NoBench::has_sparse_921_str() const {
  return (_has_bits_[29] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_921_str() {
  _has_bits_[29] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_921_str() {
  _has_bits_[29] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_921_str() {
  if (sparse_921_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_921_str_->clear();
  }
  clear_has_sparse_921_str();
}
inline const ::std::string& Database_NoBench::sparse_921_str() const {
  return *sparse_921_str_;
}
inline void Database_NoBench::set_sparse_921_str(const ::std::string& value) {
  set_has_sparse_921_str();
  if (sparse_921_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_921_str_ = new ::std::string;
  }
  sparse_921_str_->assign(value);
}
inline void Database_NoBench::set_sparse_921_str(const char* value) {
  set_has_sparse_921_str();
  if (sparse_921_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_921_str_ = new ::std::string;
  }
  sparse_921_str_->assign(value);
}
inline void Database_NoBench::set_sparse_921_str(const char* value, size_t size) {
  set_has_sparse_921_str();
  if (sparse_921_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_921_str_ = new ::std::string;
  }
  sparse_921_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_921_str() {
  set_has_sparse_921_str();
  if (sparse_921_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_921_str_ = new ::std::string;
  }
  return sparse_921_str_;
}
inline ::std::string* Database_NoBench::release_sparse_921_str() {
  clear_has_sparse_921_str();
  if (sparse_921_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_921_str_;
    sparse_921_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_921_str(::std::string* sparse_921_str) {
  if (sparse_921_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_921_str_;
  }
  if (sparse_921_str) {
    set_has_sparse_921_str();
    sparse_921_str_ = sparse_921_str;
  } else {
    clear_has_sparse_921_str();
    sparse_921_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_922_str = 934;
inline bool Database_NoBench::has_sparse_922_str() const {
  return (_has_bits_[29] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_922_str() {
  _has_bits_[29] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_922_str() {
  _has_bits_[29] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_922_str() {
  if (sparse_922_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_922_str_->clear();
  }
  clear_has_sparse_922_str();
}
inline const ::std::string& Database_NoBench::sparse_922_str() const {
  return *sparse_922_str_;
}
inline void Database_NoBench::set_sparse_922_str(const ::std::string& value) {
  set_has_sparse_922_str();
  if (sparse_922_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_922_str_ = new ::std::string;
  }
  sparse_922_str_->assign(value);
}
inline void Database_NoBench::set_sparse_922_str(const char* value) {
  set_has_sparse_922_str();
  if (sparse_922_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_922_str_ = new ::std::string;
  }
  sparse_922_str_->assign(value);
}
inline void Database_NoBench::set_sparse_922_str(const char* value, size_t size) {
  set_has_sparse_922_str();
  if (sparse_922_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_922_str_ = new ::std::string;
  }
  sparse_922_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_922_str() {
  set_has_sparse_922_str();
  if (sparse_922_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_922_str_ = new ::std::string;
  }
  return sparse_922_str_;
}
inline ::std::string* Database_NoBench::release_sparse_922_str() {
  clear_has_sparse_922_str();
  if (sparse_922_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_922_str_;
    sparse_922_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_922_str(::std::string* sparse_922_str) {
  if (sparse_922_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_922_str_;
  }
  if (sparse_922_str) {
    set_has_sparse_922_str();
    sparse_922_str_ = sparse_922_str;
  } else {
    clear_has_sparse_922_str();
    sparse_922_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_923_str = 935;
inline bool Database_NoBench::has_sparse_923_str() const {
  return (_has_bits_[29] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_923_str() {
  _has_bits_[29] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_923_str() {
  _has_bits_[29] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_923_str() {
  if (sparse_923_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_923_str_->clear();
  }
  clear_has_sparse_923_str();
}
inline const ::std::string& Database_NoBench::sparse_923_str() const {
  return *sparse_923_str_;
}
inline void Database_NoBench::set_sparse_923_str(const ::std::string& value) {
  set_has_sparse_923_str();
  if (sparse_923_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_923_str_ = new ::std::string;
  }
  sparse_923_str_->assign(value);
}
inline void Database_NoBench::set_sparse_923_str(const char* value) {
  set_has_sparse_923_str();
  if (sparse_923_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_923_str_ = new ::std::string;
  }
  sparse_923_str_->assign(value);
}
inline void Database_NoBench::set_sparse_923_str(const char* value, size_t size) {
  set_has_sparse_923_str();
  if (sparse_923_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_923_str_ = new ::std::string;
  }
  sparse_923_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_923_str() {
  set_has_sparse_923_str();
  if (sparse_923_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_923_str_ = new ::std::string;
  }
  return sparse_923_str_;
}
inline ::std::string* Database_NoBench::release_sparse_923_str() {
  clear_has_sparse_923_str();
  if (sparse_923_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_923_str_;
    sparse_923_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_923_str(::std::string* sparse_923_str) {
  if (sparse_923_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_923_str_;
  }
  if (sparse_923_str) {
    set_has_sparse_923_str();
    sparse_923_str_ = sparse_923_str;
  } else {
    clear_has_sparse_923_str();
    sparse_923_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_924_str = 936;
inline bool Database_NoBench::has_sparse_924_str() const {
  return (_has_bits_[29] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_924_str() {
  _has_bits_[29] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_924_str() {
  _has_bits_[29] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_924_str() {
  if (sparse_924_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_924_str_->clear();
  }
  clear_has_sparse_924_str();
}
inline const ::std::string& Database_NoBench::sparse_924_str() const {
  return *sparse_924_str_;
}
inline void Database_NoBench::set_sparse_924_str(const ::std::string& value) {
  set_has_sparse_924_str();
  if (sparse_924_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_924_str_ = new ::std::string;
  }
  sparse_924_str_->assign(value);
}
inline void Database_NoBench::set_sparse_924_str(const char* value) {
  set_has_sparse_924_str();
  if (sparse_924_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_924_str_ = new ::std::string;
  }
  sparse_924_str_->assign(value);
}
inline void Database_NoBench::set_sparse_924_str(const char* value, size_t size) {
  set_has_sparse_924_str();
  if (sparse_924_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_924_str_ = new ::std::string;
  }
  sparse_924_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_924_str() {
  set_has_sparse_924_str();
  if (sparse_924_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_924_str_ = new ::std::string;
  }
  return sparse_924_str_;
}
inline ::std::string* Database_NoBench::release_sparse_924_str() {
  clear_has_sparse_924_str();
  if (sparse_924_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_924_str_;
    sparse_924_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_924_str(::std::string* sparse_924_str) {
  if (sparse_924_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_924_str_;
  }
  if (sparse_924_str) {
    set_has_sparse_924_str();
    sparse_924_str_ = sparse_924_str;
  } else {
    clear_has_sparse_924_str();
    sparse_924_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_925_str = 937;
inline bool Database_NoBench::has_sparse_925_str() const {
  return (_has_bits_[29] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_925_str() {
  _has_bits_[29] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_925_str() {
  _has_bits_[29] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_925_str() {
  if (sparse_925_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_925_str_->clear();
  }
  clear_has_sparse_925_str();
}
inline const ::std::string& Database_NoBench::sparse_925_str() const {
  return *sparse_925_str_;
}
inline void Database_NoBench::set_sparse_925_str(const ::std::string& value) {
  set_has_sparse_925_str();
  if (sparse_925_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_925_str_ = new ::std::string;
  }
  sparse_925_str_->assign(value);
}
inline void Database_NoBench::set_sparse_925_str(const char* value) {
  set_has_sparse_925_str();
  if (sparse_925_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_925_str_ = new ::std::string;
  }
  sparse_925_str_->assign(value);
}
inline void Database_NoBench::set_sparse_925_str(const char* value, size_t size) {
  set_has_sparse_925_str();
  if (sparse_925_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_925_str_ = new ::std::string;
  }
  sparse_925_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_925_str() {
  set_has_sparse_925_str();
  if (sparse_925_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_925_str_ = new ::std::string;
  }
  return sparse_925_str_;
}
inline ::std::string* Database_NoBench::release_sparse_925_str() {
  clear_has_sparse_925_str();
  if (sparse_925_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_925_str_;
    sparse_925_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_925_str(::std::string* sparse_925_str) {
  if (sparse_925_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_925_str_;
  }
  if (sparse_925_str) {
    set_has_sparse_925_str();
    sparse_925_str_ = sparse_925_str;
  } else {
    clear_has_sparse_925_str();
    sparse_925_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_926_str = 938;
inline bool Database_NoBench::has_sparse_926_str() const {
  return (_has_bits_[29] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_926_str() {
  _has_bits_[29] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_926_str() {
  _has_bits_[29] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_926_str() {
  if (sparse_926_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_926_str_->clear();
  }
  clear_has_sparse_926_str();
}
inline const ::std::string& Database_NoBench::sparse_926_str() const {
  return *sparse_926_str_;
}
inline void Database_NoBench::set_sparse_926_str(const ::std::string& value) {
  set_has_sparse_926_str();
  if (sparse_926_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_926_str_ = new ::std::string;
  }
  sparse_926_str_->assign(value);
}
inline void Database_NoBench::set_sparse_926_str(const char* value) {
  set_has_sparse_926_str();
  if (sparse_926_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_926_str_ = new ::std::string;
  }
  sparse_926_str_->assign(value);
}
inline void Database_NoBench::set_sparse_926_str(const char* value, size_t size) {
  set_has_sparse_926_str();
  if (sparse_926_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_926_str_ = new ::std::string;
  }
  sparse_926_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_926_str() {
  set_has_sparse_926_str();
  if (sparse_926_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_926_str_ = new ::std::string;
  }
  return sparse_926_str_;
}
inline ::std::string* Database_NoBench::release_sparse_926_str() {
  clear_has_sparse_926_str();
  if (sparse_926_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_926_str_;
    sparse_926_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_926_str(::std::string* sparse_926_str) {
  if (sparse_926_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_926_str_;
  }
  if (sparse_926_str) {
    set_has_sparse_926_str();
    sparse_926_str_ = sparse_926_str;
  } else {
    clear_has_sparse_926_str();
    sparse_926_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_927_str = 939;
inline bool Database_NoBench::has_sparse_927_str() const {
  return (_has_bits_[29] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_927_str() {
  _has_bits_[29] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_927_str() {
  _has_bits_[29] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_927_str() {
  if (sparse_927_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_927_str_->clear();
  }
  clear_has_sparse_927_str();
}
inline const ::std::string& Database_NoBench::sparse_927_str() const {
  return *sparse_927_str_;
}
inline void Database_NoBench::set_sparse_927_str(const ::std::string& value) {
  set_has_sparse_927_str();
  if (sparse_927_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_927_str_ = new ::std::string;
  }
  sparse_927_str_->assign(value);
}
inline void Database_NoBench::set_sparse_927_str(const char* value) {
  set_has_sparse_927_str();
  if (sparse_927_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_927_str_ = new ::std::string;
  }
  sparse_927_str_->assign(value);
}
inline void Database_NoBench::set_sparse_927_str(const char* value, size_t size) {
  set_has_sparse_927_str();
  if (sparse_927_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_927_str_ = new ::std::string;
  }
  sparse_927_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_927_str() {
  set_has_sparse_927_str();
  if (sparse_927_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_927_str_ = new ::std::string;
  }
  return sparse_927_str_;
}
inline ::std::string* Database_NoBench::release_sparse_927_str() {
  clear_has_sparse_927_str();
  if (sparse_927_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_927_str_;
    sparse_927_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_927_str(::std::string* sparse_927_str) {
  if (sparse_927_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_927_str_;
  }
  if (sparse_927_str) {
    set_has_sparse_927_str();
    sparse_927_str_ = sparse_927_str;
  } else {
    clear_has_sparse_927_str();
    sparse_927_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_928_str = 940;
inline bool Database_NoBench::has_sparse_928_str() const {
  return (_has_bits_[29] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_928_str() {
  _has_bits_[29] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_928_str() {
  _has_bits_[29] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_928_str() {
  if (sparse_928_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_928_str_->clear();
  }
  clear_has_sparse_928_str();
}
inline const ::std::string& Database_NoBench::sparse_928_str() const {
  return *sparse_928_str_;
}
inline void Database_NoBench::set_sparse_928_str(const ::std::string& value) {
  set_has_sparse_928_str();
  if (sparse_928_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_928_str_ = new ::std::string;
  }
  sparse_928_str_->assign(value);
}
inline void Database_NoBench::set_sparse_928_str(const char* value) {
  set_has_sparse_928_str();
  if (sparse_928_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_928_str_ = new ::std::string;
  }
  sparse_928_str_->assign(value);
}
inline void Database_NoBench::set_sparse_928_str(const char* value, size_t size) {
  set_has_sparse_928_str();
  if (sparse_928_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_928_str_ = new ::std::string;
  }
  sparse_928_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_928_str() {
  set_has_sparse_928_str();
  if (sparse_928_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_928_str_ = new ::std::string;
  }
  return sparse_928_str_;
}
inline ::std::string* Database_NoBench::release_sparse_928_str() {
  clear_has_sparse_928_str();
  if (sparse_928_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_928_str_;
    sparse_928_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_928_str(::std::string* sparse_928_str) {
  if (sparse_928_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_928_str_;
  }
  if (sparse_928_str) {
    set_has_sparse_928_str();
    sparse_928_str_ = sparse_928_str;
  } else {
    clear_has_sparse_928_str();
    sparse_928_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_929_str = 941;
inline bool Database_NoBench::has_sparse_929_str() const {
  return (_has_bits_[29] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_929_str() {
  _has_bits_[29] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_929_str() {
  _has_bits_[29] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_929_str() {
  if (sparse_929_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_929_str_->clear();
  }
  clear_has_sparse_929_str();
}
inline const ::std::string& Database_NoBench::sparse_929_str() const {
  return *sparse_929_str_;
}
inline void Database_NoBench::set_sparse_929_str(const ::std::string& value) {
  set_has_sparse_929_str();
  if (sparse_929_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_929_str_ = new ::std::string;
  }
  sparse_929_str_->assign(value);
}
inline void Database_NoBench::set_sparse_929_str(const char* value) {
  set_has_sparse_929_str();
  if (sparse_929_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_929_str_ = new ::std::string;
  }
  sparse_929_str_->assign(value);
}
inline void Database_NoBench::set_sparse_929_str(const char* value, size_t size) {
  set_has_sparse_929_str();
  if (sparse_929_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_929_str_ = new ::std::string;
  }
  sparse_929_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_929_str() {
  set_has_sparse_929_str();
  if (sparse_929_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_929_str_ = new ::std::string;
  }
  return sparse_929_str_;
}
inline ::std::string* Database_NoBench::release_sparse_929_str() {
  clear_has_sparse_929_str();
  if (sparse_929_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_929_str_;
    sparse_929_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_929_str(::std::string* sparse_929_str) {
  if (sparse_929_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_929_str_;
  }
  if (sparse_929_str) {
    set_has_sparse_929_str();
    sparse_929_str_ = sparse_929_str;
  } else {
    clear_has_sparse_929_str();
    sparse_929_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_930_str = 942;
inline bool Database_NoBench::has_sparse_930_str() const {
  return (_has_bits_[29] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_930_str() {
  _has_bits_[29] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_930_str() {
  _has_bits_[29] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_930_str() {
  if (sparse_930_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_930_str_->clear();
  }
  clear_has_sparse_930_str();
}
inline const ::std::string& Database_NoBench::sparse_930_str() const {
  return *sparse_930_str_;
}
inline void Database_NoBench::set_sparse_930_str(const ::std::string& value) {
  set_has_sparse_930_str();
  if (sparse_930_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_930_str_ = new ::std::string;
  }
  sparse_930_str_->assign(value);
}
inline void Database_NoBench::set_sparse_930_str(const char* value) {
  set_has_sparse_930_str();
  if (sparse_930_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_930_str_ = new ::std::string;
  }
  sparse_930_str_->assign(value);
}
inline void Database_NoBench::set_sparse_930_str(const char* value, size_t size) {
  set_has_sparse_930_str();
  if (sparse_930_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_930_str_ = new ::std::string;
  }
  sparse_930_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_930_str() {
  set_has_sparse_930_str();
  if (sparse_930_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_930_str_ = new ::std::string;
  }
  return sparse_930_str_;
}
inline ::std::string* Database_NoBench::release_sparse_930_str() {
  clear_has_sparse_930_str();
  if (sparse_930_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_930_str_;
    sparse_930_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_930_str(::std::string* sparse_930_str) {
  if (sparse_930_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_930_str_;
  }
  if (sparse_930_str) {
    set_has_sparse_930_str();
    sparse_930_str_ = sparse_930_str;
  } else {
    clear_has_sparse_930_str();
    sparse_930_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_931_str = 943;
inline bool Database_NoBench::has_sparse_931_str() const {
  return (_has_bits_[29] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_931_str() {
  _has_bits_[29] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_931_str() {
  _has_bits_[29] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_931_str() {
  if (sparse_931_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_931_str_->clear();
  }
  clear_has_sparse_931_str();
}
inline const ::std::string& Database_NoBench::sparse_931_str() const {
  return *sparse_931_str_;
}
inline void Database_NoBench::set_sparse_931_str(const ::std::string& value) {
  set_has_sparse_931_str();
  if (sparse_931_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_931_str_ = new ::std::string;
  }
  sparse_931_str_->assign(value);
}
inline void Database_NoBench::set_sparse_931_str(const char* value) {
  set_has_sparse_931_str();
  if (sparse_931_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_931_str_ = new ::std::string;
  }
  sparse_931_str_->assign(value);
}
inline void Database_NoBench::set_sparse_931_str(const char* value, size_t size) {
  set_has_sparse_931_str();
  if (sparse_931_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_931_str_ = new ::std::string;
  }
  sparse_931_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_931_str() {
  set_has_sparse_931_str();
  if (sparse_931_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_931_str_ = new ::std::string;
  }
  return sparse_931_str_;
}
inline ::std::string* Database_NoBench::release_sparse_931_str() {
  clear_has_sparse_931_str();
  if (sparse_931_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_931_str_;
    sparse_931_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_931_str(::std::string* sparse_931_str) {
  if (sparse_931_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_931_str_;
  }
  if (sparse_931_str) {
    set_has_sparse_931_str();
    sparse_931_str_ = sparse_931_str;
  } else {
    clear_has_sparse_931_str();
    sparse_931_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_932_str = 944;
inline bool Database_NoBench::has_sparse_932_str() const {
  return (_has_bits_[29] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_932_str() {
  _has_bits_[29] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_932_str() {
  _has_bits_[29] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_932_str() {
  if (sparse_932_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_932_str_->clear();
  }
  clear_has_sparse_932_str();
}
inline const ::std::string& Database_NoBench::sparse_932_str() const {
  return *sparse_932_str_;
}
inline void Database_NoBench::set_sparse_932_str(const ::std::string& value) {
  set_has_sparse_932_str();
  if (sparse_932_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_932_str_ = new ::std::string;
  }
  sparse_932_str_->assign(value);
}
inline void Database_NoBench::set_sparse_932_str(const char* value) {
  set_has_sparse_932_str();
  if (sparse_932_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_932_str_ = new ::std::string;
  }
  sparse_932_str_->assign(value);
}
inline void Database_NoBench::set_sparse_932_str(const char* value, size_t size) {
  set_has_sparse_932_str();
  if (sparse_932_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_932_str_ = new ::std::string;
  }
  sparse_932_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_932_str() {
  set_has_sparse_932_str();
  if (sparse_932_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_932_str_ = new ::std::string;
  }
  return sparse_932_str_;
}
inline ::std::string* Database_NoBench::release_sparse_932_str() {
  clear_has_sparse_932_str();
  if (sparse_932_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_932_str_;
    sparse_932_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_932_str(::std::string* sparse_932_str) {
  if (sparse_932_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_932_str_;
  }
  if (sparse_932_str) {
    set_has_sparse_932_str();
    sparse_932_str_ = sparse_932_str;
  } else {
    clear_has_sparse_932_str();
    sparse_932_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_933_str = 945;
inline bool Database_NoBench::has_sparse_933_str() const {
  return (_has_bits_[29] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_933_str() {
  _has_bits_[29] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_933_str() {
  _has_bits_[29] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_933_str() {
  if (sparse_933_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_933_str_->clear();
  }
  clear_has_sparse_933_str();
}
inline const ::std::string& Database_NoBench::sparse_933_str() const {
  return *sparse_933_str_;
}
inline void Database_NoBench::set_sparse_933_str(const ::std::string& value) {
  set_has_sparse_933_str();
  if (sparse_933_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_933_str_ = new ::std::string;
  }
  sparse_933_str_->assign(value);
}
inline void Database_NoBench::set_sparse_933_str(const char* value) {
  set_has_sparse_933_str();
  if (sparse_933_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_933_str_ = new ::std::string;
  }
  sparse_933_str_->assign(value);
}
inline void Database_NoBench::set_sparse_933_str(const char* value, size_t size) {
  set_has_sparse_933_str();
  if (sparse_933_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_933_str_ = new ::std::string;
  }
  sparse_933_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_933_str() {
  set_has_sparse_933_str();
  if (sparse_933_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_933_str_ = new ::std::string;
  }
  return sparse_933_str_;
}
inline ::std::string* Database_NoBench::release_sparse_933_str() {
  clear_has_sparse_933_str();
  if (sparse_933_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_933_str_;
    sparse_933_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_933_str(::std::string* sparse_933_str) {
  if (sparse_933_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_933_str_;
  }
  if (sparse_933_str) {
    set_has_sparse_933_str();
    sparse_933_str_ = sparse_933_str;
  } else {
    clear_has_sparse_933_str();
    sparse_933_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_934_str = 946;
inline bool Database_NoBench::has_sparse_934_str() const {
  return (_has_bits_[29] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_934_str() {
  _has_bits_[29] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_934_str() {
  _has_bits_[29] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_934_str() {
  if (sparse_934_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_934_str_->clear();
  }
  clear_has_sparse_934_str();
}
inline const ::std::string& Database_NoBench::sparse_934_str() const {
  return *sparse_934_str_;
}
inline void Database_NoBench::set_sparse_934_str(const ::std::string& value) {
  set_has_sparse_934_str();
  if (sparse_934_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_934_str_ = new ::std::string;
  }
  sparse_934_str_->assign(value);
}
inline void Database_NoBench::set_sparse_934_str(const char* value) {
  set_has_sparse_934_str();
  if (sparse_934_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_934_str_ = new ::std::string;
  }
  sparse_934_str_->assign(value);
}
inline void Database_NoBench::set_sparse_934_str(const char* value, size_t size) {
  set_has_sparse_934_str();
  if (sparse_934_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_934_str_ = new ::std::string;
  }
  sparse_934_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_934_str() {
  set_has_sparse_934_str();
  if (sparse_934_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_934_str_ = new ::std::string;
  }
  return sparse_934_str_;
}
inline ::std::string* Database_NoBench::release_sparse_934_str() {
  clear_has_sparse_934_str();
  if (sparse_934_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_934_str_;
    sparse_934_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_934_str(::std::string* sparse_934_str) {
  if (sparse_934_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_934_str_;
  }
  if (sparse_934_str) {
    set_has_sparse_934_str();
    sparse_934_str_ = sparse_934_str;
  } else {
    clear_has_sparse_934_str();
    sparse_934_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_935_str = 947;
inline bool Database_NoBench::has_sparse_935_str() const {
  return (_has_bits_[29] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_935_str() {
  _has_bits_[29] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_935_str() {
  _has_bits_[29] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_935_str() {
  if (sparse_935_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_935_str_->clear();
  }
  clear_has_sparse_935_str();
}
inline const ::std::string& Database_NoBench::sparse_935_str() const {
  return *sparse_935_str_;
}
inline void Database_NoBench::set_sparse_935_str(const ::std::string& value) {
  set_has_sparse_935_str();
  if (sparse_935_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_935_str_ = new ::std::string;
  }
  sparse_935_str_->assign(value);
}
inline void Database_NoBench::set_sparse_935_str(const char* value) {
  set_has_sparse_935_str();
  if (sparse_935_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_935_str_ = new ::std::string;
  }
  sparse_935_str_->assign(value);
}
inline void Database_NoBench::set_sparse_935_str(const char* value, size_t size) {
  set_has_sparse_935_str();
  if (sparse_935_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_935_str_ = new ::std::string;
  }
  sparse_935_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_935_str() {
  set_has_sparse_935_str();
  if (sparse_935_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_935_str_ = new ::std::string;
  }
  return sparse_935_str_;
}
inline ::std::string* Database_NoBench::release_sparse_935_str() {
  clear_has_sparse_935_str();
  if (sparse_935_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_935_str_;
    sparse_935_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_935_str(::std::string* sparse_935_str) {
  if (sparse_935_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_935_str_;
  }
  if (sparse_935_str) {
    set_has_sparse_935_str();
    sparse_935_str_ = sparse_935_str;
  } else {
    clear_has_sparse_935_str();
    sparse_935_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_936_str = 948;
inline bool Database_NoBench::has_sparse_936_str() const {
  return (_has_bits_[29] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_936_str() {
  _has_bits_[29] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_936_str() {
  _has_bits_[29] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_936_str() {
  if (sparse_936_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_936_str_->clear();
  }
  clear_has_sparse_936_str();
}
inline const ::std::string& Database_NoBench::sparse_936_str() const {
  return *sparse_936_str_;
}
inline void Database_NoBench::set_sparse_936_str(const ::std::string& value) {
  set_has_sparse_936_str();
  if (sparse_936_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_936_str_ = new ::std::string;
  }
  sparse_936_str_->assign(value);
}
inline void Database_NoBench::set_sparse_936_str(const char* value) {
  set_has_sparse_936_str();
  if (sparse_936_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_936_str_ = new ::std::string;
  }
  sparse_936_str_->assign(value);
}
inline void Database_NoBench::set_sparse_936_str(const char* value, size_t size) {
  set_has_sparse_936_str();
  if (sparse_936_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_936_str_ = new ::std::string;
  }
  sparse_936_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_936_str() {
  set_has_sparse_936_str();
  if (sparse_936_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_936_str_ = new ::std::string;
  }
  return sparse_936_str_;
}
inline ::std::string* Database_NoBench::release_sparse_936_str() {
  clear_has_sparse_936_str();
  if (sparse_936_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_936_str_;
    sparse_936_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_936_str(::std::string* sparse_936_str) {
  if (sparse_936_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_936_str_;
  }
  if (sparse_936_str) {
    set_has_sparse_936_str();
    sparse_936_str_ = sparse_936_str;
  } else {
    clear_has_sparse_936_str();
    sparse_936_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_937_str = 949;
inline bool Database_NoBench::has_sparse_937_str() const {
  return (_has_bits_[29] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_937_str() {
  _has_bits_[29] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_937_str() {
  _has_bits_[29] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_937_str() {
  if (sparse_937_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_937_str_->clear();
  }
  clear_has_sparse_937_str();
}
inline const ::std::string& Database_NoBench::sparse_937_str() const {
  return *sparse_937_str_;
}
inline void Database_NoBench::set_sparse_937_str(const ::std::string& value) {
  set_has_sparse_937_str();
  if (sparse_937_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_937_str_ = new ::std::string;
  }
  sparse_937_str_->assign(value);
}
inline void Database_NoBench::set_sparse_937_str(const char* value) {
  set_has_sparse_937_str();
  if (sparse_937_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_937_str_ = new ::std::string;
  }
  sparse_937_str_->assign(value);
}
inline void Database_NoBench::set_sparse_937_str(const char* value, size_t size) {
  set_has_sparse_937_str();
  if (sparse_937_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_937_str_ = new ::std::string;
  }
  sparse_937_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_937_str() {
  set_has_sparse_937_str();
  if (sparse_937_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_937_str_ = new ::std::string;
  }
  return sparse_937_str_;
}
inline ::std::string* Database_NoBench::release_sparse_937_str() {
  clear_has_sparse_937_str();
  if (sparse_937_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_937_str_;
    sparse_937_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_937_str(::std::string* sparse_937_str) {
  if (sparse_937_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_937_str_;
  }
  if (sparse_937_str) {
    set_has_sparse_937_str();
    sparse_937_str_ = sparse_937_str;
  } else {
    clear_has_sparse_937_str();
    sparse_937_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_938_str = 950;
inline bool Database_NoBench::has_sparse_938_str() const {
  return (_has_bits_[29] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_938_str() {
  _has_bits_[29] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_938_str() {
  _has_bits_[29] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_938_str() {
  if (sparse_938_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_938_str_->clear();
  }
  clear_has_sparse_938_str();
}
inline const ::std::string& Database_NoBench::sparse_938_str() const {
  return *sparse_938_str_;
}
inline void Database_NoBench::set_sparse_938_str(const ::std::string& value) {
  set_has_sparse_938_str();
  if (sparse_938_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_938_str_ = new ::std::string;
  }
  sparse_938_str_->assign(value);
}
inline void Database_NoBench::set_sparse_938_str(const char* value) {
  set_has_sparse_938_str();
  if (sparse_938_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_938_str_ = new ::std::string;
  }
  sparse_938_str_->assign(value);
}
inline void Database_NoBench::set_sparse_938_str(const char* value, size_t size) {
  set_has_sparse_938_str();
  if (sparse_938_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_938_str_ = new ::std::string;
  }
  sparse_938_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_938_str() {
  set_has_sparse_938_str();
  if (sparse_938_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_938_str_ = new ::std::string;
  }
  return sparse_938_str_;
}
inline ::std::string* Database_NoBench::release_sparse_938_str() {
  clear_has_sparse_938_str();
  if (sparse_938_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_938_str_;
    sparse_938_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_938_str(::std::string* sparse_938_str) {
  if (sparse_938_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_938_str_;
  }
  if (sparse_938_str) {
    set_has_sparse_938_str();
    sparse_938_str_ = sparse_938_str;
  } else {
    clear_has_sparse_938_str();
    sparse_938_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_939_str = 951;
inline bool Database_NoBench::has_sparse_939_str() const {
  return (_has_bits_[29] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_939_str() {
  _has_bits_[29] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_939_str() {
  _has_bits_[29] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_939_str() {
  if (sparse_939_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_939_str_->clear();
  }
  clear_has_sparse_939_str();
}
inline const ::std::string& Database_NoBench::sparse_939_str() const {
  return *sparse_939_str_;
}
inline void Database_NoBench::set_sparse_939_str(const ::std::string& value) {
  set_has_sparse_939_str();
  if (sparse_939_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_939_str_ = new ::std::string;
  }
  sparse_939_str_->assign(value);
}
inline void Database_NoBench::set_sparse_939_str(const char* value) {
  set_has_sparse_939_str();
  if (sparse_939_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_939_str_ = new ::std::string;
  }
  sparse_939_str_->assign(value);
}
inline void Database_NoBench::set_sparse_939_str(const char* value, size_t size) {
  set_has_sparse_939_str();
  if (sparse_939_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_939_str_ = new ::std::string;
  }
  sparse_939_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_939_str() {
  set_has_sparse_939_str();
  if (sparse_939_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_939_str_ = new ::std::string;
  }
  return sparse_939_str_;
}
inline ::std::string* Database_NoBench::release_sparse_939_str() {
  clear_has_sparse_939_str();
  if (sparse_939_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_939_str_;
    sparse_939_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_939_str(::std::string* sparse_939_str) {
  if (sparse_939_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_939_str_;
  }
  if (sparse_939_str) {
    set_has_sparse_939_str();
    sparse_939_str_ = sparse_939_str;
  } else {
    clear_has_sparse_939_str();
    sparse_939_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_940_str = 952;
inline bool Database_NoBench::has_sparse_940_str() const {
  return (_has_bits_[29] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_940_str() {
  _has_bits_[29] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_940_str() {
  _has_bits_[29] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_940_str() {
  if (sparse_940_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_940_str_->clear();
  }
  clear_has_sparse_940_str();
}
inline const ::std::string& Database_NoBench::sparse_940_str() const {
  return *sparse_940_str_;
}
inline void Database_NoBench::set_sparse_940_str(const ::std::string& value) {
  set_has_sparse_940_str();
  if (sparse_940_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_940_str_ = new ::std::string;
  }
  sparse_940_str_->assign(value);
}
inline void Database_NoBench::set_sparse_940_str(const char* value) {
  set_has_sparse_940_str();
  if (sparse_940_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_940_str_ = new ::std::string;
  }
  sparse_940_str_->assign(value);
}
inline void Database_NoBench::set_sparse_940_str(const char* value, size_t size) {
  set_has_sparse_940_str();
  if (sparse_940_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_940_str_ = new ::std::string;
  }
  sparse_940_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_940_str() {
  set_has_sparse_940_str();
  if (sparse_940_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_940_str_ = new ::std::string;
  }
  return sparse_940_str_;
}
inline ::std::string* Database_NoBench::release_sparse_940_str() {
  clear_has_sparse_940_str();
  if (sparse_940_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_940_str_;
    sparse_940_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_940_str(::std::string* sparse_940_str) {
  if (sparse_940_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_940_str_;
  }
  if (sparse_940_str) {
    set_has_sparse_940_str();
    sparse_940_str_ = sparse_940_str;
  } else {
    clear_has_sparse_940_str();
    sparse_940_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_941_str = 953;
inline bool Database_NoBench::has_sparse_941_str() const {
  return (_has_bits_[29] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_941_str() {
  _has_bits_[29] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_941_str() {
  _has_bits_[29] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_941_str() {
  if (sparse_941_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_941_str_->clear();
  }
  clear_has_sparse_941_str();
}
inline const ::std::string& Database_NoBench::sparse_941_str() const {
  return *sparse_941_str_;
}
inline void Database_NoBench::set_sparse_941_str(const ::std::string& value) {
  set_has_sparse_941_str();
  if (sparse_941_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_941_str_ = new ::std::string;
  }
  sparse_941_str_->assign(value);
}
inline void Database_NoBench::set_sparse_941_str(const char* value) {
  set_has_sparse_941_str();
  if (sparse_941_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_941_str_ = new ::std::string;
  }
  sparse_941_str_->assign(value);
}
inline void Database_NoBench::set_sparse_941_str(const char* value, size_t size) {
  set_has_sparse_941_str();
  if (sparse_941_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_941_str_ = new ::std::string;
  }
  sparse_941_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_941_str() {
  set_has_sparse_941_str();
  if (sparse_941_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_941_str_ = new ::std::string;
  }
  return sparse_941_str_;
}
inline ::std::string* Database_NoBench::release_sparse_941_str() {
  clear_has_sparse_941_str();
  if (sparse_941_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_941_str_;
    sparse_941_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_941_str(::std::string* sparse_941_str) {
  if (sparse_941_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_941_str_;
  }
  if (sparse_941_str) {
    set_has_sparse_941_str();
    sparse_941_str_ = sparse_941_str;
  } else {
    clear_has_sparse_941_str();
    sparse_941_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_942_str = 954;
inline bool Database_NoBench::has_sparse_942_str() const {
  return (_has_bits_[29] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_942_str() {
  _has_bits_[29] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_942_str() {
  _has_bits_[29] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_942_str() {
  if (sparse_942_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_942_str_->clear();
  }
  clear_has_sparse_942_str();
}
inline const ::std::string& Database_NoBench::sparse_942_str() const {
  return *sparse_942_str_;
}
inline void Database_NoBench::set_sparse_942_str(const ::std::string& value) {
  set_has_sparse_942_str();
  if (sparse_942_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_942_str_ = new ::std::string;
  }
  sparse_942_str_->assign(value);
}
inline void Database_NoBench::set_sparse_942_str(const char* value) {
  set_has_sparse_942_str();
  if (sparse_942_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_942_str_ = new ::std::string;
  }
  sparse_942_str_->assign(value);
}
inline void Database_NoBench::set_sparse_942_str(const char* value, size_t size) {
  set_has_sparse_942_str();
  if (sparse_942_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_942_str_ = new ::std::string;
  }
  sparse_942_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_942_str() {
  set_has_sparse_942_str();
  if (sparse_942_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_942_str_ = new ::std::string;
  }
  return sparse_942_str_;
}
inline ::std::string* Database_NoBench::release_sparse_942_str() {
  clear_has_sparse_942_str();
  if (sparse_942_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_942_str_;
    sparse_942_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_942_str(::std::string* sparse_942_str) {
  if (sparse_942_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_942_str_;
  }
  if (sparse_942_str) {
    set_has_sparse_942_str();
    sparse_942_str_ = sparse_942_str;
  } else {
    clear_has_sparse_942_str();
    sparse_942_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_943_str = 955;
inline bool Database_NoBench::has_sparse_943_str() const {
  return (_has_bits_[29] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_943_str() {
  _has_bits_[29] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_943_str() {
  _has_bits_[29] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_943_str() {
  if (sparse_943_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_943_str_->clear();
  }
  clear_has_sparse_943_str();
}
inline const ::std::string& Database_NoBench::sparse_943_str() const {
  return *sparse_943_str_;
}
inline void Database_NoBench::set_sparse_943_str(const ::std::string& value) {
  set_has_sparse_943_str();
  if (sparse_943_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_943_str_ = new ::std::string;
  }
  sparse_943_str_->assign(value);
}
inline void Database_NoBench::set_sparse_943_str(const char* value) {
  set_has_sparse_943_str();
  if (sparse_943_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_943_str_ = new ::std::string;
  }
  sparse_943_str_->assign(value);
}
inline void Database_NoBench::set_sparse_943_str(const char* value, size_t size) {
  set_has_sparse_943_str();
  if (sparse_943_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_943_str_ = new ::std::string;
  }
  sparse_943_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_943_str() {
  set_has_sparse_943_str();
  if (sparse_943_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_943_str_ = new ::std::string;
  }
  return sparse_943_str_;
}
inline ::std::string* Database_NoBench::release_sparse_943_str() {
  clear_has_sparse_943_str();
  if (sparse_943_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_943_str_;
    sparse_943_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_943_str(::std::string* sparse_943_str) {
  if (sparse_943_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_943_str_;
  }
  if (sparse_943_str) {
    set_has_sparse_943_str();
    sparse_943_str_ = sparse_943_str;
  } else {
    clear_has_sparse_943_str();
    sparse_943_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_944_str = 956;
inline bool Database_NoBench::has_sparse_944_str() const {
  return (_has_bits_[29] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_944_str() {
  _has_bits_[29] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_944_str() {
  _has_bits_[29] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_944_str() {
  if (sparse_944_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_944_str_->clear();
  }
  clear_has_sparse_944_str();
}
inline const ::std::string& Database_NoBench::sparse_944_str() const {
  return *sparse_944_str_;
}
inline void Database_NoBench::set_sparse_944_str(const ::std::string& value) {
  set_has_sparse_944_str();
  if (sparse_944_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_944_str_ = new ::std::string;
  }
  sparse_944_str_->assign(value);
}
inline void Database_NoBench::set_sparse_944_str(const char* value) {
  set_has_sparse_944_str();
  if (sparse_944_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_944_str_ = new ::std::string;
  }
  sparse_944_str_->assign(value);
}
inline void Database_NoBench::set_sparse_944_str(const char* value, size_t size) {
  set_has_sparse_944_str();
  if (sparse_944_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_944_str_ = new ::std::string;
  }
  sparse_944_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_944_str() {
  set_has_sparse_944_str();
  if (sparse_944_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_944_str_ = new ::std::string;
  }
  return sparse_944_str_;
}
inline ::std::string* Database_NoBench::release_sparse_944_str() {
  clear_has_sparse_944_str();
  if (sparse_944_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_944_str_;
    sparse_944_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_944_str(::std::string* sparse_944_str) {
  if (sparse_944_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_944_str_;
  }
  if (sparse_944_str) {
    set_has_sparse_944_str();
    sparse_944_str_ = sparse_944_str;
  } else {
    clear_has_sparse_944_str();
    sparse_944_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_945_str = 957;
inline bool Database_NoBench::has_sparse_945_str() const {
  return (_has_bits_[29] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_945_str() {
  _has_bits_[29] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_945_str() {
  _has_bits_[29] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_945_str() {
  if (sparse_945_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_945_str_->clear();
  }
  clear_has_sparse_945_str();
}
inline const ::std::string& Database_NoBench::sparse_945_str() const {
  return *sparse_945_str_;
}
inline void Database_NoBench::set_sparse_945_str(const ::std::string& value) {
  set_has_sparse_945_str();
  if (sparse_945_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_945_str_ = new ::std::string;
  }
  sparse_945_str_->assign(value);
}
inline void Database_NoBench::set_sparse_945_str(const char* value) {
  set_has_sparse_945_str();
  if (sparse_945_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_945_str_ = new ::std::string;
  }
  sparse_945_str_->assign(value);
}
inline void Database_NoBench::set_sparse_945_str(const char* value, size_t size) {
  set_has_sparse_945_str();
  if (sparse_945_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_945_str_ = new ::std::string;
  }
  sparse_945_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_945_str() {
  set_has_sparse_945_str();
  if (sparse_945_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_945_str_ = new ::std::string;
  }
  return sparse_945_str_;
}
inline ::std::string* Database_NoBench::release_sparse_945_str() {
  clear_has_sparse_945_str();
  if (sparse_945_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_945_str_;
    sparse_945_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_945_str(::std::string* sparse_945_str) {
  if (sparse_945_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_945_str_;
  }
  if (sparse_945_str) {
    set_has_sparse_945_str();
    sparse_945_str_ = sparse_945_str;
  } else {
    clear_has_sparse_945_str();
    sparse_945_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_946_str = 958;
inline bool Database_NoBench::has_sparse_946_str() const {
  return (_has_bits_[29] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_946_str() {
  _has_bits_[29] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_946_str() {
  _has_bits_[29] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_946_str() {
  if (sparse_946_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_946_str_->clear();
  }
  clear_has_sparse_946_str();
}
inline const ::std::string& Database_NoBench::sparse_946_str() const {
  return *sparse_946_str_;
}
inline void Database_NoBench::set_sparse_946_str(const ::std::string& value) {
  set_has_sparse_946_str();
  if (sparse_946_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_946_str_ = new ::std::string;
  }
  sparse_946_str_->assign(value);
}
inline void Database_NoBench::set_sparse_946_str(const char* value) {
  set_has_sparse_946_str();
  if (sparse_946_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_946_str_ = new ::std::string;
  }
  sparse_946_str_->assign(value);
}
inline void Database_NoBench::set_sparse_946_str(const char* value, size_t size) {
  set_has_sparse_946_str();
  if (sparse_946_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_946_str_ = new ::std::string;
  }
  sparse_946_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_946_str() {
  set_has_sparse_946_str();
  if (sparse_946_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_946_str_ = new ::std::string;
  }
  return sparse_946_str_;
}
inline ::std::string* Database_NoBench::release_sparse_946_str() {
  clear_has_sparse_946_str();
  if (sparse_946_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_946_str_;
    sparse_946_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_946_str(::std::string* sparse_946_str) {
  if (sparse_946_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_946_str_;
  }
  if (sparse_946_str) {
    set_has_sparse_946_str();
    sparse_946_str_ = sparse_946_str;
  } else {
    clear_has_sparse_946_str();
    sparse_946_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_947_str = 959;
inline bool Database_NoBench::has_sparse_947_str() const {
  return (_has_bits_[30] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_947_str() {
  _has_bits_[30] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_947_str() {
  _has_bits_[30] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_947_str() {
  if (sparse_947_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_947_str_->clear();
  }
  clear_has_sparse_947_str();
}
inline const ::std::string& Database_NoBench::sparse_947_str() const {
  return *sparse_947_str_;
}
inline void Database_NoBench::set_sparse_947_str(const ::std::string& value) {
  set_has_sparse_947_str();
  if (sparse_947_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_947_str_ = new ::std::string;
  }
  sparse_947_str_->assign(value);
}
inline void Database_NoBench::set_sparse_947_str(const char* value) {
  set_has_sparse_947_str();
  if (sparse_947_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_947_str_ = new ::std::string;
  }
  sparse_947_str_->assign(value);
}
inline void Database_NoBench::set_sparse_947_str(const char* value, size_t size) {
  set_has_sparse_947_str();
  if (sparse_947_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_947_str_ = new ::std::string;
  }
  sparse_947_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_947_str() {
  set_has_sparse_947_str();
  if (sparse_947_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_947_str_ = new ::std::string;
  }
  return sparse_947_str_;
}
inline ::std::string* Database_NoBench::release_sparse_947_str() {
  clear_has_sparse_947_str();
  if (sparse_947_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_947_str_;
    sparse_947_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_947_str(::std::string* sparse_947_str) {
  if (sparse_947_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_947_str_;
  }
  if (sparse_947_str) {
    set_has_sparse_947_str();
    sparse_947_str_ = sparse_947_str;
  } else {
    clear_has_sparse_947_str();
    sparse_947_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_948_str = 960;
inline bool Database_NoBench::has_sparse_948_str() const {
  return (_has_bits_[30] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_948_str() {
  _has_bits_[30] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_948_str() {
  _has_bits_[30] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_948_str() {
  if (sparse_948_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_948_str_->clear();
  }
  clear_has_sparse_948_str();
}
inline const ::std::string& Database_NoBench::sparse_948_str() const {
  return *sparse_948_str_;
}
inline void Database_NoBench::set_sparse_948_str(const ::std::string& value) {
  set_has_sparse_948_str();
  if (sparse_948_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_948_str_ = new ::std::string;
  }
  sparse_948_str_->assign(value);
}
inline void Database_NoBench::set_sparse_948_str(const char* value) {
  set_has_sparse_948_str();
  if (sparse_948_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_948_str_ = new ::std::string;
  }
  sparse_948_str_->assign(value);
}
inline void Database_NoBench::set_sparse_948_str(const char* value, size_t size) {
  set_has_sparse_948_str();
  if (sparse_948_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_948_str_ = new ::std::string;
  }
  sparse_948_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_948_str() {
  set_has_sparse_948_str();
  if (sparse_948_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_948_str_ = new ::std::string;
  }
  return sparse_948_str_;
}
inline ::std::string* Database_NoBench::release_sparse_948_str() {
  clear_has_sparse_948_str();
  if (sparse_948_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_948_str_;
    sparse_948_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_948_str(::std::string* sparse_948_str) {
  if (sparse_948_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_948_str_;
  }
  if (sparse_948_str) {
    set_has_sparse_948_str();
    sparse_948_str_ = sparse_948_str;
  } else {
    clear_has_sparse_948_str();
    sparse_948_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_949_str = 961;
inline bool Database_NoBench::has_sparse_949_str() const {
  return (_has_bits_[30] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_949_str() {
  _has_bits_[30] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_949_str() {
  _has_bits_[30] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_949_str() {
  if (sparse_949_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_949_str_->clear();
  }
  clear_has_sparse_949_str();
}
inline const ::std::string& Database_NoBench::sparse_949_str() const {
  return *sparse_949_str_;
}
inline void Database_NoBench::set_sparse_949_str(const ::std::string& value) {
  set_has_sparse_949_str();
  if (sparse_949_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_949_str_ = new ::std::string;
  }
  sparse_949_str_->assign(value);
}
inline void Database_NoBench::set_sparse_949_str(const char* value) {
  set_has_sparse_949_str();
  if (sparse_949_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_949_str_ = new ::std::string;
  }
  sparse_949_str_->assign(value);
}
inline void Database_NoBench::set_sparse_949_str(const char* value, size_t size) {
  set_has_sparse_949_str();
  if (sparse_949_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_949_str_ = new ::std::string;
  }
  sparse_949_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_949_str() {
  set_has_sparse_949_str();
  if (sparse_949_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_949_str_ = new ::std::string;
  }
  return sparse_949_str_;
}
inline ::std::string* Database_NoBench::release_sparse_949_str() {
  clear_has_sparse_949_str();
  if (sparse_949_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_949_str_;
    sparse_949_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_949_str(::std::string* sparse_949_str) {
  if (sparse_949_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_949_str_;
  }
  if (sparse_949_str) {
    set_has_sparse_949_str();
    sparse_949_str_ = sparse_949_str;
  } else {
    clear_has_sparse_949_str();
    sparse_949_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_950_str = 962;
inline bool Database_NoBench::has_sparse_950_str() const {
  return (_has_bits_[30] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_950_str() {
  _has_bits_[30] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_950_str() {
  _has_bits_[30] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_950_str() {
  if (sparse_950_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_950_str_->clear();
  }
  clear_has_sparse_950_str();
}
inline const ::std::string& Database_NoBench::sparse_950_str() const {
  return *sparse_950_str_;
}
inline void Database_NoBench::set_sparse_950_str(const ::std::string& value) {
  set_has_sparse_950_str();
  if (sparse_950_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_950_str_ = new ::std::string;
  }
  sparse_950_str_->assign(value);
}
inline void Database_NoBench::set_sparse_950_str(const char* value) {
  set_has_sparse_950_str();
  if (sparse_950_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_950_str_ = new ::std::string;
  }
  sparse_950_str_->assign(value);
}
inline void Database_NoBench::set_sparse_950_str(const char* value, size_t size) {
  set_has_sparse_950_str();
  if (sparse_950_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_950_str_ = new ::std::string;
  }
  sparse_950_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_950_str() {
  set_has_sparse_950_str();
  if (sparse_950_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_950_str_ = new ::std::string;
  }
  return sparse_950_str_;
}
inline ::std::string* Database_NoBench::release_sparse_950_str() {
  clear_has_sparse_950_str();
  if (sparse_950_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_950_str_;
    sparse_950_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_950_str(::std::string* sparse_950_str) {
  if (sparse_950_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_950_str_;
  }
  if (sparse_950_str) {
    set_has_sparse_950_str();
    sparse_950_str_ = sparse_950_str;
  } else {
    clear_has_sparse_950_str();
    sparse_950_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_951_str = 963;
inline bool Database_NoBench::has_sparse_951_str() const {
  return (_has_bits_[30] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_951_str() {
  _has_bits_[30] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_951_str() {
  _has_bits_[30] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_951_str() {
  if (sparse_951_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_951_str_->clear();
  }
  clear_has_sparse_951_str();
}
inline const ::std::string& Database_NoBench::sparse_951_str() const {
  return *sparse_951_str_;
}
inline void Database_NoBench::set_sparse_951_str(const ::std::string& value) {
  set_has_sparse_951_str();
  if (sparse_951_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_951_str_ = new ::std::string;
  }
  sparse_951_str_->assign(value);
}
inline void Database_NoBench::set_sparse_951_str(const char* value) {
  set_has_sparse_951_str();
  if (sparse_951_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_951_str_ = new ::std::string;
  }
  sparse_951_str_->assign(value);
}
inline void Database_NoBench::set_sparse_951_str(const char* value, size_t size) {
  set_has_sparse_951_str();
  if (sparse_951_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_951_str_ = new ::std::string;
  }
  sparse_951_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_951_str() {
  set_has_sparse_951_str();
  if (sparse_951_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_951_str_ = new ::std::string;
  }
  return sparse_951_str_;
}
inline ::std::string* Database_NoBench::release_sparse_951_str() {
  clear_has_sparse_951_str();
  if (sparse_951_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_951_str_;
    sparse_951_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_951_str(::std::string* sparse_951_str) {
  if (sparse_951_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_951_str_;
  }
  if (sparse_951_str) {
    set_has_sparse_951_str();
    sparse_951_str_ = sparse_951_str;
  } else {
    clear_has_sparse_951_str();
    sparse_951_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_952_str = 964;
inline bool Database_NoBench::has_sparse_952_str() const {
  return (_has_bits_[30] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_952_str() {
  _has_bits_[30] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_952_str() {
  _has_bits_[30] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_952_str() {
  if (sparse_952_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_952_str_->clear();
  }
  clear_has_sparse_952_str();
}
inline const ::std::string& Database_NoBench::sparse_952_str() const {
  return *sparse_952_str_;
}
inline void Database_NoBench::set_sparse_952_str(const ::std::string& value) {
  set_has_sparse_952_str();
  if (sparse_952_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_952_str_ = new ::std::string;
  }
  sparse_952_str_->assign(value);
}
inline void Database_NoBench::set_sparse_952_str(const char* value) {
  set_has_sparse_952_str();
  if (sparse_952_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_952_str_ = new ::std::string;
  }
  sparse_952_str_->assign(value);
}
inline void Database_NoBench::set_sparse_952_str(const char* value, size_t size) {
  set_has_sparse_952_str();
  if (sparse_952_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_952_str_ = new ::std::string;
  }
  sparse_952_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_952_str() {
  set_has_sparse_952_str();
  if (sparse_952_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_952_str_ = new ::std::string;
  }
  return sparse_952_str_;
}
inline ::std::string* Database_NoBench::release_sparse_952_str() {
  clear_has_sparse_952_str();
  if (sparse_952_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_952_str_;
    sparse_952_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_952_str(::std::string* sparse_952_str) {
  if (sparse_952_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_952_str_;
  }
  if (sparse_952_str) {
    set_has_sparse_952_str();
    sparse_952_str_ = sparse_952_str;
  } else {
    clear_has_sparse_952_str();
    sparse_952_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_953_str = 965;
inline bool Database_NoBench::has_sparse_953_str() const {
  return (_has_bits_[30] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_953_str() {
  _has_bits_[30] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_953_str() {
  _has_bits_[30] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_953_str() {
  if (sparse_953_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_953_str_->clear();
  }
  clear_has_sparse_953_str();
}
inline const ::std::string& Database_NoBench::sparse_953_str() const {
  return *sparse_953_str_;
}
inline void Database_NoBench::set_sparse_953_str(const ::std::string& value) {
  set_has_sparse_953_str();
  if (sparse_953_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_953_str_ = new ::std::string;
  }
  sparse_953_str_->assign(value);
}
inline void Database_NoBench::set_sparse_953_str(const char* value) {
  set_has_sparse_953_str();
  if (sparse_953_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_953_str_ = new ::std::string;
  }
  sparse_953_str_->assign(value);
}
inline void Database_NoBench::set_sparse_953_str(const char* value, size_t size) {
  set_has_sparse_953_str();
  if (sparse_953_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_953_str_ = new ::std::string;
  }
  sparse_953_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_953_str() {
  set_has_sparse_953_str();
  if (sparse_953_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_953_str_ = new ::std::string;
  }
  return sparse_953_str_;
}
inline ::std::string* Database_NoBench::release_sparse_953_str() {
  clear_has_sparse_953_str();
  if (sparse_953_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_953_str_;
    sparse_953_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_953_str(::std::string* sparse_953_str) {
  if (sparse_953_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_953_str_;
  }
  if (sparse_953_str) {
    set_has_sparse_953_str();
    sparse_953_str_ = sparse_953_str;
  } else {
    clear_has_sparse_953_str();
    sparse_953_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_954_str = 966;
inline bool Database_NoBench::has_sparse_954_str() const {
  return (_has_bits_[30] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_954_str() {
  _has_bits_[30] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_954_str() {
  _has_bits_[30] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_954_str() {
  if (sparse_954_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_954_str_->clear();
  }
  clear_has_sparse_954_str();
}
inline const ::std::string& Database_NoBench::sparse_954_str() const {
  return *sparse_954_str_;
}
inline void Database_NoBench::set_sparse_954_str(const ::std::string& value) {
  set_has_sparse_954_str();
  if (sparse_954_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_954_str_ = new ::std::string;
  }
  sparse_954_str_->assign(value);
}
inline void Database_NoBench::set_sparse_954_str(const char* value) {
  set_has_sparse_954_str();
  if (sparse_954_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_954_str_ = new ::std::string;
  }
  sparse_954_str_->assign(value);
}
inline void Database_NoBench::set_sparse_954_str(const char* value, size_t size) {
  set_has_sparse_954_str();
  if (sparse_954_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_954_str_ = new ::std::string;
  }
  sparse_954_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_954_str() {
  set_has_sparse_954_str();
  if (sparse_954_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_954_str_ = new ::std::string;
  }
  return sparse_954_str_;
}
inline ::std::string* Database_NoBench::release_sparse_954_str() {
  clear_has_sparse_954_str();
  if (sparse_954_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_954_str_;
    sparse_954_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_954_str(::std::string* sparse_954_str) {
  if (sparse_954_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_954_str_;
  }
  if (sparse_954_str) {
    set_has_sparse_954_str();
    sparse_954_str_ = sparse_954_str;
  } else {
    clear_has_sparse_954_str();
    sparse_954_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_955_str = 967;
inline bool Database_NoBench::has_sparse_955_str() const {
  return (_has_bits_[30] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_955_str() {
  _has_bits_[30] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_955_str() {
  _has_bits_[30] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_955_str() {
  if (sparse_955_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_955_str_->clear();
  }
  clear_has_sparse_955_str();
}
inline const ::std::string& Database_NoBench::sparse_955_str() const {
  return *sparse_955_str_;
}
inline void Database_NoBench::set_sparse_955_str(const ::std::string& value) {
  set_has_sparse_955_str();
  if (sparse_955_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_955_str_ = new ::std::string;
  }
  sparse_955_str_->assign(value);
}
inline void Database_NoBench::set_sparse_955_str(const char* value) {
  set_has_sparse_955_str();
  if (sparse_955_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_955_str_ = new ::std::string;
  }
  sparse_955_str_->assign(value);
}
inline void Database_NoBench::set_sparse_955_str(const char* value, size_t size) {
  set_has_sparse_955_str();
  if (sparse_955_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_955_str_ = new ::std::string;
  }
  sparse_955_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_955_str() {
  set_has_sparse_955_str();
  if (sparse_955_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_955_str_ = new ::std::string;
  }
  return sparse_955_str_;
}
inline ::std::string* Database_NoBench::release_sparse_955_str() {
  clear_has_sparse_955_str();
  if (sparse_955_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_955_str_;
    sparse_955_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_955_str(::std::string* sparse_955_str) {
  if (sparse_955_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_955_str_;
  }
  if (sparse_955_str) {
    set_has_sparse_955_str();
    sparse_955_str_ = sparse_955_str;
  } else {
    clear_has_sparse_955_str();
    sparse_955_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_956_str = 968;
inline bool Database_NoBench::has_sparse_956_str() const {
  return (_has_bits_[30] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_956_str() {
  _has_bits_[30] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_956_str() {
  _has_bits_[30] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_956_str() {
  if (sparse_956_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_956_str_->clear();
  }
  clear_has_sparse_956_str();
}
inline const ::std::string& Database_NoBench::sparse_956_str() const {
  return *sparse_956_str_;
}
inline void Database_NoBench::set_sparse_956_str(const ::std::string& value) {
  set_has_sparse_956_str();
  if (sparse_956_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_956_str_ = new ::std::string;
  }
  sparse_956_str_->assign(value);
}
inline void Database_NoBench::set_sparse_956_str(const char* value) {
  set_has_sparse_956_str();
  if (sparse_956_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_956_str_ = new ::std::string;
  }
  sparse_956_str_->assign(value);
}
inline void Database_NoBench::set_sparse_956_str(const char* value, size_t size) {
  set_has_sparse_956_str();
  if (sparse_956_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_956_str_ = new ::std::string;
  }
  sparse_956_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_956_str() {
  set_has_sparse_956_str();
  if (sparse_956_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_956_str_ = new ::std::string;
  }
  return sparse_956_str_;
}
inline ::std::string* Database_NoBench::release_sparse_956_str() {
  clear_has_sparse_956_str();
  if (sparse_956_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_956_str_;
    sparse_956_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_956_str(::std::string* sparse_956_str) {
  if (sparse_956_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_956_str_;
  }
  if (sparse_956_str) {
    set_has_sparse_956_str();
    sparse_956_str_ = sparse_956_str;
  } else {
    clear_has_sparse_956_str();
    sparse_956_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_957_str = 969;
inline bool Database_NoBench::has_sparse_957_str() const {
  return (_has_bits_[30] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_957_str() {
  _has_bits_[30] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_957_str() {
  _has_bits_[30] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_957_str() {
  if (sparse_957_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_957_str_->clear();
  }
  clear_has_sparse_957_str();
}
inline const ::std::string& Database_NoBench::sparse_957_str() const {
  return *sparse_957_str_;
}
inline void Database_NoBench::set_sparse_957_str(const ::std::string& value) {
  set_has_sparse_957_str();
  if (sparse_957_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_957_str_ = new ::std::string;
  }
  sparse_957_str_->assign(value);
}
inline void Database_NoBench::set_sparse_957_str(const char* value) {
  set_has_sparse_957_str();
  if (sparse_957_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_957_str_ = new ::std::string;
  }
  sparse_957_str_->assign(value);
}
inline void Database_NoBench::set_sparse_957_str(const char* value, size_t size) {
  set_has_sparse_957_str();
  if (sparse_957_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_957_str_ = new ::std::string;
  }
  sparse_957_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_957_str() {
  set_has_sparse_957_str();
  if (sparse_957_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_957_str_ = new ::std::string;
  }
  return sparse_957_str_;
}
inline ::std::string* Database_NoBench::release_sparse_957_str() {
  clear_has_sparse_957_str();
  if (sparse_957_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_957_str_;
    sparse_957_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_957_str(::std::string* sparse_957_str) {
  if (sparse_957_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_957_str_;
  }
  if (sparse_957_str) {
    set_has_sparse_957_str();
    sparse_957_str_ = sparse_957_str;
  } else {
    clear_has_sparse_957_str();
    sparse_957_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_958_str = 970;
inline bool Database_NoBench::has_sparse_958_str() const {
  return (_has_bits_[30] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_958_str() {
  _has_bits_[30] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_958_str() {
  _has_bits_[30] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_958_str() {
  if (sparse_958_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_958_str_->clear();
  }
  clear_has_sparse_958_str();
}
inline const ::std::string& Database_NoBench::sparse_958_str() const {
  return *sparse_958_str_;
}
inline void Database_NoBench::set_sparse_958_str(const ::std::string& value) {
  set_has_sparse_958_str();
  if (sparse_958_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_958_str_ = new ::std::string;
  }
  sparse_958_str_->assign(value);
}
inline void Database_NoBench::set_sparse_958_str(const char* value) {
  set_has_sparse_958_str();
  if (sparse_958_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_958_str_ = new ::std::string;
  }
  sparse_958_str_->assign(value);
}
inline void Database_NoBench::set_sparse_958_str(const char* value, size_t size) {
  set_has_sparse_958_str();
  if (sparse_958_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_958_str_ = new ::std::string;
  }
  sparse_958_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_958_str() {
  set_has_sparse_958_str();
  if (sparse_958_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_958_str_ = new ::std::string;
  }
  return sparse_958_str_;
}
inline ::std::string* Database_NoBench::release_sparse_958_str() {
  clear_has_sparse_958_str();
  if (sparse_958_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_958_str_;
    sparse_958_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_958_str(::std::string* sparse_958_str) {
  if (sparse_958_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_958_str_;
  }
  if (sparse_958_str) {
    set_has_sparse_958_str();
    sparse_958_str_ = sparse_958_str;
  } else {
    clear_has_sparse_958_str();
    sparse_958_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_959_str = 971;
inline bool Database_NoBench::has_sparse_959_str() const {
  return (_has_bits_[30] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_959_str() {
  _has_bits_[30] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_959_str() {
  _has_bits_[30] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_959_str() {
  if (sparse_959_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_959_str_->clear();
  }
  clear_has_sparse_959_str();
}
inline const ::std::string& Database_NoBench::sparse_959_str() const {
  return *sparse_959_str_;
}
inline void Database_NoBench::set_sparse_959_str(const ::std::string& value) {
  set_has_sparse_959_str();
  if (sparse_959_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_959_str_ = new ::std::string;
  }
  sparse_959_str_->assign(value);
}
inline void Database_NoBench::set_sparse_959_str(const char* value) {
  set_has_sparse_959_str();
  if (sparse_959_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_959_str_ = new ::std::string;
  }
  sparse_959_str_->assign(value);
}
inline void Database_NoBench::set_sparse_959_str(const char* value, size_t size) {
  set_has_sparse_959_str();
  if (sparse_959_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_959_str_ = new ::std::string;
  }
  sparse_959_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_959_str() {
  set_has_sparse_959_str();
  if (sparse_959_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_959_str_ = new ::std::string;
  }
  return sparse_959_str_;
}
inline ::std::string* Database_NoBench::release_sparse_959_str() {
  clear_has_sparse_959_str();
  if (sparse_959_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_959_str_;
    sparse_959_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_959_str(::std::string* sparse_959_str) {
  if (sparse_959_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_959_str_;
  }
  if (sparse_959_str) {
    set_has_sparse_959_str();
    sparse_959_str_ = sparse_959_str;
  } else {
    clear_has_sparse_959_str();
    sparse_959_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_960_str = 972;
inline bool Database_NoBench::has_sparse_960_str() const {
  return (_has_bits_[30] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_960_str() {
  _has_bits_[30] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_960_str() {
  _has_bits_[30] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_960_str() {
  if (sparse_960_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_960_str_->clear();
  }
  clear_has_sparse_960_str();
}
inline const ::std::string& Database_NoBench::sparse_960_str() const {
  return *sparse_960_str_;
}
inline void Database_NoBench::set_sparse_960_str(const ::std::string& value) {
  set_has_sparse_960_str();
  if (sparse_960_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_960_str_ = new ::std::string;
  }
  sparse_960_str_->assign(value);
}
inline void Database_NoBench::set_sparse_960_str(const char* value) {
  set_has_sparse_960_str();
  if (sparse_960_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_960_str_ = new ::std::string;
  }
  sparse_960_str_->assign(value);
}
inline void Database_NoBench::set_sparse_960_str(const char* value, size_t size) {
  set_has_sparse_960_str();
  if (sparse_960_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_960_str_ = new ::std::string;
  }
  sparse_960_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_960_str() {
  set_has_sparse_960_str();
  if (sparse_960_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_960_str_ = new ::std::string;
  }
  return sparse_960_str_;
}
inline ::std::string* Database_NoBench::release_sparse_960_str() {
  clear_has_sparse_960_str();
  if (sparse_960_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_960_str_;
    sparse_960_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_960_str(::std::string* sparse_960_str) {
  if (sparse_960_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_960_str_;
  }
  if (sparse_960_str) {
    set_has_sparse_960_str();
    sparse_960_str_ = sparse_960_str;
  } else {
    clear_has_sparse_960_str();
    sparse_960_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_961_str = 973;
inline bool Database_NoBench::has_sparse_961_str() const {
  return (_has_bits_[30] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_961_str() {
  _has_bits_[30] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_961_str() {
  _has_bits_[30] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_961_str() {
  if (sparse_961_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_961_str_->clear();
  }
  clear_has_sparse_961_str();
}
inline const ::std::string& Database_NoBench::sparse_961_str() const {
  return *sparse_961_str_;
}
inline void Database_NoBench::set_sparse_961_str(const ::std::string& value) {
  set_has_sparse_961_str();
  if (sparse_961_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_961_str_ = new ::std::string;
  }
  sparse_961_str_->assign(value);
}
inline void Database_NoBench::set_sparse_961_str(const char* value) {
  set_has_sparse_961_str();
  if (sparse_961_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_961_str_ = new ::std::string;
  }
  sparse_961_str_->assign(value);
}
inline void Database_NoBench::set_sparse_961_str(const char* value, size_t size) {
  set_has_sparse_961_str();
  if (sparse_961_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_961_str_ = new ::std::string;
  }
  sparse_961_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_961_str() {
  set_has_sparse_961_str();
  if (sparse_961_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_961_str_ = new ::std::string;
  }
  return sparse_961_str_;
}
inline ::std::string* Database_NoBench::release_sparse_961_str() {
  clear_has_sparse_961_str();
  if (sparse_961_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_961_str_;
    sparse_961_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_961_str(::std::string* sparse_961_str) {
  if (sparse_961_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_961_str_;
  }
  if (sparse_961_str) {
    set_has_sparse_961_str();
    sparse_961_str_ = sparse_961_str;
  } else {
    clear_has_sparse_961_str();
    sparse_961_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_962_str = 974;
inline bool Database_NoBench::has_sparse_962_str() const {
  return (_has_bits_[30] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_962_str() {
  _has_bits_[30] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_962_str() {
  _has_bits_[30] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_962_str() {
  if (sparse_962_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_962_str_->clear();
  }
  clear_has_sparse_962_str();
}
inline const ::std::string& Database_NoBench::sparse_962_str() const {
  return *sparse_962_str_;
}
inline void Database_NoBench::set_sparse_962_str(const ::std::string& value) {
  set_has_sparse_962_str();
  if (sparse_962_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_962_str_ = new ::std::string;
  }
  sparse_962_str_->assign(value);
}
inline void Database_NoBench::set_sparse_962_str(const char* value) {
  set_has_sparse_962_str();
  if (sparse_962_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_962_str_ = new ::std::string;
  }
  sparse_962_str_->assign(value);
}
inline void Database_NoBench::set_sparse_962_str(const char* value, size_t size) {
  set_has_sparse_962_str();
  if (sparse_962_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_962_str_ = new ::std::string;
  }
  sparse_962_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_962_str() {
  set_has_sparse_962_str();
  if (sparse_962_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_962_str_ = new ::std::string;
  }
  return sparse_962_str_;
}
inline ::std::string* Database_NoBench::release_sparse_962_str() {
  clear_has_sparse_962_str();
  if (sparse_962_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_962_str_;
    sparse_962_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_962_str(::std::string* sparse_962_str) {
  if (sparse_962_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_962_str_;
  }
  if (sparse_962_str) {
    set_has_sparse_962_str();
    sparse_962_str_ = sparse_962_str;
  } else {
    clear_has_sparse_962_str();
    sparse_962_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_963_str = 975;
inline bool Database_NoBench::has_sparse_963_str() const {
  return (_has_bits_[30] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_963_str() {
  _has_bits_[30] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_963_str() {
  _has_bits_[30] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_963_str() {
  if (sparse_963_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_963_str_->clear();
  }
  clear_has_sparse_963_str();
}
inline const ::std::string& Database_NoBench::sparse_963_str() const {
  return *sparse_963_str_;
}
inline void Database_NoBench::set_sparse_963_str(const ::std::string& value) {
  set_has_sparse_963_str();
  if (sparse_963_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_963_str_ = new ::std::string;
  }
  sparse_963_str_->assign(value);
}
inline void Database_NoBench::set_sparse_963_str(const char* value) {
  set_has_sparse_963_str();
  if (sparse_963_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_963_str_ = new ::std::string;
  }
  sparse_963_str_->assign(value);
}
inline void Database_NoBench::set_sparse_963_str(const char* value, size_t size) {
  set_has_sparse_963_str();
  if (sparse_963_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_963_str_ = new ::std::string;
  }
  sparse_963_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_963_str() {
  set_has_sparse_963_str();
  if (sparse_963_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_963_str_ = new ::std::string;
  }
  return sparse_963_str_;
}
inline ::std::string* Database_NoBench::release_sparse_963_str() {
  clear_has_sparse_963_str();
  if (sparse_963_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_963_str_;
    sparse_963_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_963_str(::std::string* sparse_963_str) {
  if (sparse_963_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_963_str_;
  }
  if (sparse_963_str) {
    set_has_sparse_963_str();
    sparse_963_str_ = sparse_963_str;
  } else {
    clear_has_sparse_963_str();
    sparse_963_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_964_str = 976;
inline bool Database_NoBench::has_sparse_964_str() const {
  return (_has_bits_[30] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_964_str() {
  _has_bits_[30] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_964_str() {
  _has_bits_[30] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_964_str() {
  if (sparse_964_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_964_str_->clear();
  }
  clear_has_sparse_964_str();
}
inline const ::std::string& Database_NoBench::sparse_964_str() const {
  return *sparse_964_str_;
}
inline void Database_NoBench::set_sparse_964_str(const ::std::string& value) {
  set_has_sparse_964_str();
  if (sparse_964_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_964_str_ = new ::std::string;
  }
  sparse_964_str_->assign(value);
}
inline void Database_NoBench::set_sparse_964_str(const char* value) {
  set_has_sparse_964_str();
  if (sparse_964_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_964_str_ = new ::std::string;
  }
  sparse_964_str_->assign(value);
}
inline void Database_NoBench::set_sparse_964_str(const char* value, size_t size) {
  set_has_sparse_964_str();
  if (sparse_964_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_964_str_ = new ::std::string;
  }
  sparse_964_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_964_str() {
  set_has_sparse_964_str();
  if (sparse_964_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_964_str_ = new ::std::string;
  }
  return sparse_964_str_;
}
inline ::std::string* Database_NoBench::release_sparse_964_str() {
  clear_has_sparse_964_str();
  if (sparse_964_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_964_str_;
    sparse_964_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_964_str(::std::string* sparse_964_str) {
  if (sparse_964_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_964_str_;
  }
  if (sparse_964_str) {
    set_has_sparse_964_str();
    sparse_964_str_ = sparse_964_str;
  } else {
    clear_has_sparse_964_str();
    sparse_964_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_965_str = 977;
inline bool Database_NoBench::has_sparse_965_str() const {
  return (_has_bits_[30] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_965_str() {
  _has_bits_[30] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_965_str() {
  _has_bits_[30] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_965_str() {
  if (sparse_965_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_965_str_->clear();
  }
  clear_has_sparse_965_str();
}
inline const ::std::string& Database_NoBench::sparse_965_str() const {
  return *sparse_965_str_;
}
inline void Database_NoBench::set_sparse_965_str(const ::std::string& value) {
  set_has_sparse_965_str();
  if (sparse_965_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_965_str_ = new ::std::string;
  }
  sparse_965_str_->assign(value);
}
inline void Database_NoBench::set_sparse_965_str(const char* value) {
  set_has_sparse_965_str();
  if (sparse_965_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_965_str_ = new ::std::string;
  }
  sparse_965_str_->assign(value);
}
inline void Database_NoBench::set_sparse_965_str(const char* value, size_t size) {
  set_has_sparse_965_str();
  if (sparse_965_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_965_str_ = new ::std::string;
  }
  sparse_965_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_965_str() {
  set_has_sparse_965_str();
  if (sparse_965_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_965_str_ = new ::std::string;
  }
  return sparse_965_str_;
}
inline ::std::string* Database_NoBench::release_sparse_965_str() {
  clear_has_sparse_965_str();
  if (sparse_965_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_965_str_;
    sparse_965_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_965_str(::std::string* sparse_965_str) {
  if (sparse_965_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_965_str_;
  }
  if (sparse_965_str) {
    set_has_sparse_965_str();
    sparse_965_str_ = sparse_965_str;
  } else {
    clear_has_sparse_965_str();
    sparse_965_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_966_str = 978;
inline bool Database_NoBench::has_sparse_966_str() const {
  return (_has_bits_[30] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_966_str() {
  _has_bits_[30] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_966_str() {
  _has_bits_[30] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_966_str() {
  if (sparse_966_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_966_str_->clear();
  }
  clear_has_sparse_966_str();
}
inline const ::std::string& Database_NoBench::sparse_966_str() const {
  return *sparse_966_str_;
}
inline void Database_NoBench::set_sparse_966_str(const ::std::string& value) {
  set_has_sparse_966_str();
  if (sparse_966_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_966_str_ = new ::std::string;
  }
  sparse_966_str_->assign(value);
}
inline void Database_NoBench::set_sparse_966_str(const char* value) {
  set_has_sparse_966_str();
  if (sparse_966_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_966_str_ = new ::std::string;
  }
  sparse_966_str_->assign(value);
}
inline void Database_NoBench::set_sparse_966_str(const char* value, size_t size) {
  set_has_sparse_966_str();
  if (sparse_966_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_966_str_ = new ::std::string;
  }
  sparse_966_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_966_str() {
  set_has_sparse_966_str();
  if (sparse_966_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_966_str_ = new ::std::string;
  }
  return sparse_966_str_;
}
inline ::std::string* Database_NoBench::release_sparse_966_str() {
  clear_has_sparse_966_str();
  if (sparse_966_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_966_str_;
    sparse_966_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_966_str(::std::string* sparse_966_str) {
  if (sparse_966_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_966_str_;
  }
  if (sparse_966_str) {
    set_has_sparse_966_str();
    sparse_966_str_ = sparse_966_str;
  } else {
    clear_has_sparse_966_str();
    sparse_966_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_967_str = 979;
inline bool Database_NoBench::has_sparse_967_str() const {
  return (_has_bits_[30] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_967_str() {
  _has_bits_[30] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_967_str() {
  _has_bits_[30] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_967_str() {
  if (sparse_967_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_967_str_->clear();
  }
  clear_has_sparse_967_str();
}
inline const ::std::string& Database_NoBench::sparse_967_str() const {
  return *sparse_967_str_;
}
inline void Database_NoBench::set_sparse_967_str(const ::std::string& value) {
  set_has_sparse_967_str();
  if (sparse_967_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_967_str_ = new ::std::string;
  }
  sparse_967_str_->assign(value);
}
inline void Database_NoBench::set_sparse_967_str(const char* value) {
  set_has_sparse_967_str();
  if (sparse_967_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_967_str_ = new ::std::string;
  }
  sparse_967_str_->assign(value);
}
inline void Database_NoBench::set_sparse_967_str(const char* value, size_t size) {
  set_has_sparse_967_str();
  if (sparse_967_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_967_str_ = new ::std::string;
  }
  sparse_967_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_967_str() {
  set_has_sparse_967_str();
  if (sparse_967_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_967_str_ = new ::std::string;
  }
  return sparse_967_str_;
}
inline ::std::string* Database_NoBench::release_sparse_967_str() {
  clear_has_sparse_967_str();
  if (sparse_967_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_967_str_;
    sparse_967_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_967_str(::std::string* sparse_967_str) {
  if (sparse_967_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_967_str_;
  }
  if (sparse_967_str) {
    set_has_sparse_967_str();
    sparse_967_str_ = sparse_967_str;
  } else {
    clear_has_sparse_967_str();
    sparse_967_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_968_str = 980;
inline bool Database_NoBench::has_sparse_968_str() const {
  return (_has_bits_[30] & 0x00200000u) != 0;
}
inline void Database_NoBench::set_has_sparse_968_str() {
  _has_bits_[30] |= 0x00200000u;
}
inline void Database_NoBench::clear_has_sparse_968_str() {
  _has_bits_[30] &= ~0x00200000u;
}
inline void Database_NoBench::clear_sparse_968_str() {
  if (sparse_968_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_968_str_->clear();
  }
  clear_has_sparse_968_str();
}
inline const ::std::string& Database_NoBench::sparse_968_str() const {
  return *sparse_968_str_;
}
inline void Database_NoBench::set_sparse_968_str(const ::std::string& value) {
  set_has_sparse_968_str();
  if (sparse_968_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_968_str_ = new ::std::string;
  }
  sparse_968_str_->assign(value);
}
inline void Database_NoBench::set_sparse_968_str(const char* value) {
  set_has_sparse_968_str();
  if (sparse_968_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_968_str_ = new ::std::string;
  }
  sparse_968_str_->assign(value);
}
inline void Database_NoBench::set_sparse_968_str(const char* value, size_t size) {
  set_has_sparse_968_str();
  if (sparse_968_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_968_str_ = new ::std::string;
  }
  sparse_968_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_968_str() {
  set_has_sparse_968_str();
  if (sparse_968_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_968_str_ = new ::std::string;
  }
  return sparse_968_str_;
}
inline ::std::string* Database_NoBench::release_sparse_968_str() {
  clear_has_sparse_968_str();
  if (sparse_968_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_968_str_;
    sparse_968_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_968_str(::std::string* sparse_968_str) {
  if (sparse_968_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_968_str_;
  }
  if (sparse_968_str) {
    set_has_sparse_968_str();
    sparse_968_str_ = sparse_968_str;
  } else {
    clear_has_sparse_968_str();
    sparse_968_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_969_str = 981;
inline bool Database_NoBench::has_sparse_969_str() const {
  return (_has_bits_[30] & 0x00400000u) != 0;
}
inline void Database_NoBench::set_has_sparse_969_str() {
  _has_bits_[30] |= 0x00400000u;
}
inline void Database_NoBench::clear_has_sparse_969_str() {
  _has_bits_[30] &= ~0x00400000u;
}
inline void Database_NoBench::clear_sparse_969_str() {
  if (sparse_969_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_969_str_->clear();
  }
  clear_has_sparse_969_str();
}
inline const ::std::string& Database_NoBench::sparse_969_str() const {
  return *sparse_969_str_;
}
inline void Database_NoBench::set_sparse_969_str(const ::std::string& value) {
  set_has_sparse_969_str();
  if (sparse_969_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_969_str_ = new ::std::string;
  }
  sparse_969_str_->assign(value);
}
inline void Database_NoBench::set_sparse_969_str(const char* value) {
  set_has_sparse_969_str();
  if (sparse_969_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_969_str_ = new ::std::string;
  }
  sparse_969_str_->assign(value);
}
inline void Database_NoBench::set_sparse_969_str(const char* value, size_t size) {
  set_has_sparse_969_str();
  if (sparse_969_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_969_str_ = new ::std::string;
  }
  sparse_969_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_969_str() {
  set_has_sparse_969_str();
  if (sparse_969_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_969_str_ = new ::std::string;
  }
  return sparse_969_str_;
}
inline ::std::string* Database_NoBench::release_sparse_969_str() {
  clear_has_sparse_969_str();
  if (sparse_969_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_969_str_;
    sparse_969_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_969_str(::std::string* sparse_969_str) {
  if (sparse_969_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_969_str_;
  }
  if (sparse_969_str) {
    set_has_sparse_969_str();
    sparse_969_str_ = sparse_969_str;
  } else {
    clear_has_sparse_969_str();
    sparse_969_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_970_str = 982;
inline bool Database_NoBench::has_sparse_970_str() const {
  return (_has_bits_[30] & 0x00800000u) != 0;
}
inline void Database_NoBench::set_has_sparse_970_str() {
  _has_bits_[30] |= 0x00800000u;
}
inline void Database_NoBench::clear_has_sparse_970_str() {
  _has_bits_[30] &= ~0x00800000u;
}
inline void Database_NoBench::clear_sparse_970_str() {
  if (sparse_970_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_970_str_->clear();
  }
  clear_has_sparse_970_str();
}
inline const ::std::string& Database_NoBench::sparse_970_str() const {
  return *sparse_970_str_;
}
inline void Database_NoBench::set_sparse_970_str(const ::std::string& value) {
  set_has_sparse_970_str();
  if (sparse_970_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_970_str_ = new ::std::string;
  }
  sparse_970_str_->assign(value);
}
inline void Database_NoBench::set_sparse_970_str(const char* value) {
  set_has_sparse_970_str();
  if (sparse_970_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_970_str_ = new ::std::string;
  }
  sparse_970_str_->assign(value);
}
inline void Database_NoBench::set_sparse_970_str(const char* value, size_t size) {
  set_has_sparse_970_str();
  if (sparse_970_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_970_str_ = new ::std::string;
  }
  sparse_970_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_970_str() {
  set_has_sparse_970_str();
  if (sparse_970_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_970_str_ = new ::std::string;
  }
  return sparse_970_str_;
}
inline ::std::string* Database_NoBench::release_sparse_970_str() {
  clear_has_sparse_970_str();
  if (sparse_970_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_970_str_;
    sparse_970_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_970_str(::std::string* sparse_970_str) {
  if (sparse_970_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_970_str_;
  }
  if (sparse_970_str) {
    set_has_sparse_970_str();
    sparse_970_str_ = sparse_970_str;
  } else {
    clear_has_sparse_970_str();
    sparse_970_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_971_str = 983;
inline bool Database_NoBench::has_sparse_971_str() const {
  return (_has_bits_[30] & 0x01000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_971_str() {
  _has_bits_[30] |= 0x01000000u;
}
inline void Database_NoBench::clear_has_sparse_971_str() {
  _has_bits_[30] &= ~0x01000000u;
}
inline void Database_NoBench::clear_sparse_971_str() {
  if (sparse_971_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_971_str_->clear();
  }
  clear_has_sparse_971_str();
}
inline const ::std::string& Database_NoBench::sparse_971_str() const {
  return *sparse_971_str_;
}
inline void Database_NoBench::set_sparse_971_str(const ::std::string& value) {
  set_has_sparse_971_str();
  if (sparse_971_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_971_str_ = new ::std::string;
  }
  sparse_971_str_->assign(value);
}
inline void Database_NoBench::set_sparse_971_str(const char* value) {
  set_has_sparse_971_str();
  if (sparse_971_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_971_str_ = new ::std::string;
  }
  sparse_971_str_->assign(value);
}
inline void Database_NoBench::set_sparse_971_str(const char* value, size_t size) {
  set_has_sparse_971_str();
  if (sparse_971_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_971_str_ = new ::std::string;
  }
  sparse_971_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_971_str() {
  set_has_sparse_971_str();
  if (sparse_971_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_971_str_ = new ::std::string;
  }
  return sparse_971_str_;
}
inline ::std::string* Database_NoBench::release_sparse_971_str() {
  clear_has_sparse_971_str();
  if (sparse_971_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_971_str_;
    sparse_971_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_971_str(::std::string* sparse_971_str) {
  if (sparse_971_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_971_str_;
  }
  if (sparse_971_str) {
    set_has_sparse_971_str();
    sparse_971_str_ = sparse_971_str;
  } else {
    clear_has_sparse_971_str();
    sparse_971_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_972_str = 984;
inline bool Database_NoBench::has_sparse_972_str() const {
  return (_has_bits_[30] & 0x02000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_972_str() {
  _has_bits_[30] |= 0x02000000u;
}
inline void Database_NoBench::clear_has_sparse_972_str() {
  _has_bits_[30] &= ~0x02000000u;
}
inline void Database_NoBench::clear_sparse_972_str() {
  if (sparse_972_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_972_str_->clear();
  }
  clear_has_sparse_972_str();
}
inline const ::std::string& Database_NoBench::sparse_972_str() const {
  return *sparse_972_str_;
}
inline void Database_NoBench::set_sparse_972_str(const ::std::string& value) {
  set_has_sparse_972_str();
  if (sparse_972_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_972_str_ = new ::std::string;
  }
  sparse_972_str_->assign(value);
}
inline void Database_NoBench::set_sparse_972_str(const char* value) {
  set_has_sparse_972_str();
  if (sparse_972_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_972_str_ = new ::std::string;
  }
  sparse_972_str_->assign(value);
}
inline void Database_NoBench::set_sparse_972_str(const char* value, size_t size) {
  set_has_sparse_972_str();
  if (sparse_972_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_972_str_ = new ::std::string;
  }
  sparse_972_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_972_str() {
  set_has_sparse_972_str();
  if (sparse_972_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_972_str_ = new ::std::string;
  }
  return sparse_972_str_;
}
inline ::std::string* Database_NoBench::release_sparse_972_str() {
  clear_has_sparse_972_str();
  if (sparse_972_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_972_str_;
    sparse_972_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_972_str(::std::string* sparse_972_str) {
  if (sparse_972_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_972_str_;
  }
  if (sparse_972_str) {
    set_has_sparse_972_str();
    sparse_972_str_ = sparse_972_str;
  } else {
    clear_has_sparse_972_str();
    sparse_972_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_973_str = 985;
inline bool Database_NoBench::has_sparse_973_str() const {
  return (_has_bits_[30] & 0x04000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_973_str() {
  _has_bits_[30] |= 0x04000000u;
}
inline void Database_NoBench::clear_has_sparse_973_str() {
  _has_bits_[30] &= ~0x04000000u;
}
inline void Database_NoBench::clear_sparse_973_str() {
  if (sparse_973_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_973_str_->clear();
  }
  clear_has_sparse_973_str();
}
inline const ::std::string& Database_NoBench::sparse_973_str() const {
  return *sparse_973_str_;
}
inline void Database_NoBench::set_sparse_973_str(const ::std::string& value) {
  set_has_sparse_973_str();
  if (sparse_973_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_973_str_ = new ::std::string;
  }
  sparse_973_str_->assign(value);
}
inline void Database_NoBench::set_sparse_973_str(const char* value) {
  set_has_sparse_973_str();
  if (sparse_973_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_973_str_ = new ::std::string;
  }
  sparse_973_str_->assign(value);
}
inline void Database_NoBench::set_sparse_973_str(const char* value, size_t size) {
  set_has_sparse_973_str();
  if (sparse_973_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_973_str_ = new ::std::string;
  }
  sparse_973_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_973_str() {
  set_has_sparse_973_str();
  if (sparse_973_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_973_str_ = new ::std::string;
  }
  return sparse_973_str_;
}
inline ::std::string* Database_NoBench::release_sparse_973_str() {
  clear_has_sparse_973_str();
  if (sparse_973_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_973_str_;
    sparse_973_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_973_str(::std::string* sparse_973_str) {
  if (sparse_973_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_973_str_;
  }
  if (sparse_973_str) {
    set_has_sparse_973_str();
    sparse_973_str_ = sparse_973_str;
  } else {
    clear_has_sparse_973_str();
    sparse_973_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_974_str = 986;
inline bool Database_NoBench::has_sparse_974_str() const {
  return (_has_bits_[30] & 0x08000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_974_str() {
  _has_bits_[30] |= 0x08000000u;
}
inline void Database_NoBench::clear_has_sparse_974_str() {
  _has_bits_[30] &= ~0x08000000u;
}
inline void Database_NoBench::clear_sparse_974_str() {
  if (sparse_974_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_974_str_->clear();
  }
  clear_has_sparse_974_str();
}
inline const ::std::string& Database_NoBench::sparse_974_str() const {
  return *sparse_974_str_;
}
inline void Database_NoBench::set_sparse_974_str(const ::std::string& value) {
  set_has_sparse_974_str();
  if (sparse_974_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_974_str_ = new ::std::string;
  }
  sparse_974_str_->assign(value);
}
inline void Database_NoBench::set_sparse_974_str(const char* value) {
  set_has_sparse_974_str();
  if (sparse_974_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_974_str_ = new ::std::string;
  }
  sparse_974_str_->assign(value);
}
inline void Database_NoBench::set_sparse_974_str(const char* value, size_t size) {
  set_has_sparse_974_str();
  if (sparse_974_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_974_str_ = new ::std::string;
  }
  sparse_974_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_974_str() {
  set_has_sparse_974_str();
  if (sparse_974_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_974_str_ = new ::std::string;
  }
  return sparse_974_str_;
}
inline ::std::string* Database_NoBench::release_sparse_974_str() {
  clear_has_sparse_974_str();
  if (sparse_974_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_974_str_;
    sparse_974_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_974_str(::std::string* sparse_974_str) {
  if (sparse_974_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_974_str_;
  }
  if (sparse_974_str) {
    set_has_sparse_974_str();
    sparse_974_str_ = sparse_974_str;
  } else {
    clear_has_sparse_974_str();
    sparse_974_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_975_str = 987;
inline bool Database_NoBench::has_sparse_975_str() const {
  return (_has_bits_[30] & 0x10000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_975_str() {
  _has_bits_[30] |= 0x10000000u;
}
inline void Database_NoBench::clear_has_sparse_975_str() {
  _has_bits_[30] &= ~0x10000000u;
}
inline void Database_NoBench::clear_sparse_975_str() {
  if (sparse_975_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_975_str_->clear();
  }
  clear_has_sparse_975_str();
}
inline const ::std::string& Database_NoBench::sparse_975_str() const {
  return *sparse_975_str_;
}
inline void Database_NoBench::set_sparse_975_str(const ::std::string& value) {
  set_has_sparse_975_str();
  if (sparse_975_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_975_str_ = new ::std::string;
  }
  sparse_975_str_->assign(value);
}
inline void Database_NoBench::set_sparse_975_str(const char* value) {
  set_has_sparse_975_str();
  if (sparse_975_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_975_str_ = new ::std::string;
  }
  sparse_975_str_->assign(value);
}
inline void Database_NoBench::set_sparse_975_str(const char* value, size_t size) {
  set_has_sparse_975_str();
  if (sparse_975_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_975_str_ = new ::std::string;
  }
  sparse_975_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_975_str() {
  set_has_sparse_975_str();
  if (sparse_975_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_975_str_ = new ::std::string;
  }
  return sparse_975_str_;
}
inline ::std::string* Database_NoBench::release_sparse_975_str() {
  clear_has_sparse_975_str();
  if (sparse_975_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_975_str_;
    sparse_975_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_975_str(::std::string* sparse_975_str) {
  if (sparse_975_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_975_str_;
  }
  if (sparse_975_str) {
    set_has_sparse_975_str();
    sparse_975_str_ = sparse_975_str;
  } else {
    clear_has_sparse_975_str();
    sparse_975_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_976_str = 988;
inline bool Database_NoBench::has_sparse_976_str() const {
  return (_has_bits_[30] & 0x20000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_976_str() {
  _has_bits_[30] |= 0x20000000u;
}
inline void Database_NoBench::clear_has_sparse_976_str() {
  _has_bits_[30] &= ~0x20000000u;
}
inline void Database_NoBench::clear_sparse_976_str() {
  if (sparse_976_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_976_str_->clear();
  }
  clear_has_sparse_976_str();
}
inline const ::std::string& Database_NoBench::sparse_976_str() const {
  return *sparse_976_str_;
}
inline void Database_NoBench::set_sparse_976_str(const ::std::string& value) {
  set_has_sparse_976_str();
  if (sparse_976_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_976_str_ = new ::std::string;
  }
  sparse_976_str_->assign(value);
}
inline void Database_NoBench::set_sparse_976_str(const char* value) {
  set_has_sparse_976_str();
  if (sparse_976_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_976_str_ = new ::std::string;
  }
  sparse_976_str_->assign(value);
}
inline void Database_NoBench::set_sparse_976_str(const char* value, size_t size) {
  set_has_sparse_976_str();
  if (sparse_976_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_976_str_ = new ::std::string;
  }
  sparse_976_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_976_str() {
  set_has_sparse_976_str();
  if (sparse_976_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_976_str_ = new ::std::string;
  }
  return sparse_976_str_;
}
inline ::std::string* Database_NoBench::release_sparse_976_str() {
  clear_has_sparse_976_str();
  if (sparse_976_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_976_str_;
    sparse_976_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_976_str(::std::string* sparse_976_str) {
  if (sparse_976_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_976_str_;
  }
  if (sparse_976_str) {
    set_has_sparse_976_str();
    sparse_976_str_ = sparse_976_str;
  } else {
    clear_has_sparse_976_str();
    sparse_976_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_977_str = 989;
inline bool Database_NoBench::has_sparse_977_str() const {
  return (_has_bits_[30] & 0x40000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_977_str() {
  _has_bits_[30] |= 0x40000000u;
}
inline void Database_NoBench::clear_has_sparse_977_str() {
  _has_bits_[30] &= ~0x40000000u;
}
inline void Database_NoBench::clear_sparse_977_str() {
  if (sparse_977_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_977_str_->clear();
  }
  clear_has_sparse_977_str();
}
inline const ::std::string& Database_NoBench::sparse_977_str() const {
  return *sparse_977_str_;
}
inline void Database_NoBench::set_sparse_977_str(const ::std::string& value) {
  set_has_sparse_977_str();
  if (sparse_977_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_977_str_ = new ::std::string;
  }
  sparse_977_str_->assign(value);
}
inline void Database_NoBench::set_sparse_977_str(const char* value) {
  set_has_sparse_977_str();
  if (sparse_977_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_977_str_ = new ::std::string;
  }
  sparse_977_str_->assign(value);
}
inline void Database_NoBench::set_sparse_977_str(const char* value, size_t size) {
  set_has_sparse_977_str();
  if (sparse_977_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_977_str_ = new ::std::string;
  }
  sparse_977_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_977_str() {
  set_has_sparse_977_str();
  if (sparse_977_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_977_str_ = new ::std::string;
  }
  return sparse_977_str_;
}
inline ::std::string* Database_NoBench::release_sparse_977_str() {
  clear_has_sparse_977_str();
  if (sparse_977_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_977_str_;
    sparse_977_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_977_str(::std::string* sparse_977_str) {
  if (sparse_977_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_977_str_;
  }
  if (sparse_977_str) {
    set_has_sparse_977_str();
    sparse_977_str_ = sparse_977_str;
  } else {
    clear_has_sparse_977_str();
    sparse_977_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_978_str = 990;
inline bool Database_NoBench::has_sparse_978_str() const {
  return (_has_bits_[30] & 0x80000000u) != 0;
}
inline void Database_NoBench::set_has_sparse_978_str() {
  _has_bits_[30] |= 0x80000000u;
}
inline void Database_NoBench::clear_has_sparse_978_str() {
  _has_bits_[30] &= ~0x80000000u;
}
inline void Database_NoBench::clear_sparse_978_str() {
  if (sparse_978_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_978_str_->clear();
  }
  clear_has_sparse_978_str();
}
inline const ::std::string& Database_NoBench::sparse_978_str() const {
  return *sparse_978_str_;
}
inline void Database_NoBench::set_sparse_978_str(const ::std::string& value) {
  set_has_sparse_978_str();
  if (sparse_978_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_978_str_ = new ::std::string;
  }
  sparse_978_str_->assign(value);
}
inline void Database_NoBench::set_sparse_978_str(const char* value) {
  set_has_sparse_978_str();
  if (sparse_978_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_978_str_ = new ::std::string;
  }
  sparse_978_str_->assign(value);
}
inline void Database_NoBench::set_sparse_978_str(const char* value, size_t size) {
  set_has_sparse_978_str();
  if (sparse_978_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_978_str_ = new ::std::string;
  }
  sparse_978_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_978_str() {
  set_has_sparse_978_str();
  if (sparse_978_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_978_str_ = new ::std::string;
  }
  return sparse_978_str_;
}
inline ::std::string* Database_NoBench::release_sparse_978_str() {
  clear_has_sparse_978_str();
  if (sparse_978_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_978_str_;
    sparse_978_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_978_str(::std::string* sparse_978_str) {
  if (sparse_978_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_978_str_;
  }
  if (sparse_978_str) {
    set_has_sparse_978_str();
    sparse_978_str_ = sparse_978_str;
  } else {
    clear_has_sparse_978_str();
    sparse_978_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_979_str = 991;
inline bool Database_NoBench::has_sparse_979_str() const {
  return (_has_bits_[31] & 0x00000001u) != 0;
}
inline void Database_NoBench::set_has_sparse_979_str() {
  _has_bits_[31] |= 0x00000001u;
}
inline void Database_NoBench::clear_has_sparse_979_str() {
  _has_bits_[31] &= ~0x00000001u;
}
inline void Database_NoBench::clear_sparse_979_str() {
  if (sparse_979_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_979_str_->clear();
  }
  clear_has_sparse_979_str();
}
inline const ::std::string& Database_NoBench::sparse_979_str() const {
  return *sparse_979_str_;
}
inline void Database_NoBench::set_sparse_979_str(const ::std::string& value) {
  set_has_sparse_979_str();
  if (sparse_979_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_979_str_ = new ::std::string;
  }
  sparse_979_str_->assign(value);
}
inline void Database_NoBench::set_sparse_979_str(const char* value) {
  set_has_sparse_979_str();
  if (sparse_979_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_979_str_ = new ::std::string;
  }
  sparse_979_str_->assign(value);
}
inline void Database_NoBench::set_sparse_979_str(const char* value, size_t size) {
  set_has_sparse_979_str();
  if (sparse_979_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_979_str_ = new ::std::string;
  }
  sparse_979_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_979_str() {
  set_has_sparse_979_str();
  if (sparse_979_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_979_str_ = new ::std::string;
  }
  return sparse_979_str_;
}
inline ::std::string* Database_NoBench::release_sparse_979_str() {
  clear_has_sparse_979_str();
  if (sparse_979_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_979_str_;
    sparse_979_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_979_str(::std::string* sparse_979_str) {
  if (sparse_979_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_979_str_;
  }
  if (sparse_979_str) {
    set_has_sparse_979_str();
    sparse_979_str_ = sparse_979_str;
  } else {
    clear_has_sparse_979_str();
    sparse_979_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_980_str = 992;
inline bool Database_NoBench::has_sparse_980_str() const {
  return (_has_bits_[31] & 0x00000002u) != 0;
}
inline void Database_NoBench::set_has_sparse_980_str() {
  _has_bits_[31] |= 0x00000002u;
}
inline void Database_NoBench::clear_has_sparse_980_str() {
  _has_bits_[31] &= ~0x00000002u;
}
inline void Database_NoBench::clear_sparse_980_str() {
  if (sparse_980_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_980_str_->clear();
  }
  clear_has_sparse_980_str();
}
inline const ::std::string& Database_NoBench::sparse_980_str() const {
  return *sparse_980_str_;
}
inline void Database_NoBench::set_sparse_980_str(const ::std::string& value) {
  set_has_sparse_980_str();
  if (sparse_980_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_980_str_ = new ::std::string;
  }
  sparse_980_str_->assign(value);
}
inline void Database_NoBench::set_sparse_980_str(const char* value) {
  set_has_sparse_980_str();
  if (sparse_980_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_980_str_ = new ::std::string;
  }
  sparse_980_str_->assign(value);
}
inline void Database_NoBench::set_sparse_980_str(const char* value, size_t size) {
  set_has_sparse_980_str();
  if (sparse_980_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_980_str_ = new ::std::string;
  }
  sparse_980_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_980_str() {
  set_has_sparse_980_str();
  if (sparse_980_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_980_str_ = new ::std::string;
  }
  return sparse_980_str_;
}
inline ::std::string* Database_NoBench::release_sparse_980_str() {
  clear_has_sparse_980_str();
  if (sparse_980_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_980_str_;
    sparse_980_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_980_str(::std::string* sparse_980_str) {
  if (sparse_980_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_980_str_;
  }
  if (sparse_980_str) {
    set_has_sparse_980_str();
    sparse_980_str_ = sparse_980_str;
  } else {
    clear_has_sparse_980_str();
    sparse_980_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_981_str = 993;
inline bool Database_NoBench::has_sparse_981_str() const {
  return (_has_bits_[31] & 0x00000004u) != 0;
}
inline void Database_NoBench::set_has_sparse_981_str() {
  _has_bits_[31] |= 0x00000004u;
}
inline void Database_NoBench::clear_has_sparse_981_str() {
  _has_bits_[31] &= ~0x00000004u;
}
inline void Database_NoBench::clear_sparse_981_str() {
  if (sparse_981_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_981_str_->clear();
  }
  clear_has_sparse_981_str();
}
inline const ::std::string& Database_NoBench::sparse_981_str() const {
  return *sparse_981_str_;
}
inline void Database_NoBench::set_sparse_981_str(const ::std::string& value) {
  set_has_sparse_981_str();
  if (sparse_981_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_981_str_ = new ::std::string;
  }
  sparse_981_str_->assign(value);
}
inline void Database_NoBench::set_sparse_981_str(const char* value) {
  set_has_sparse_981_str();
  if (sparse_981_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_981_str_ = new ::std::string;
  }
  sparse_981_str_->assign(value);
}
inline void Database_NoBench::set_sparse_981_str(const char* value, size_t size) {
  set_has_sparse_981_str();
  if (sparse_981_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_981_str_ = new ::std::string;
  }
  sparse_981_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_981_str() {
  set_has_sparse_981_str();
  if (sparse_981_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_981_str_ = new ::std::string;
  }
  return sparse_981_str_;
}
inline ::std::string* Database_NoBench::release_sparse_981_str() {
  clear_has_sparse_981_str();
  if (sparse_981_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_981_str_;
    sparse_981_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_981_str(::std::string* sparse_981_str) {
  if (sparse_981_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_981_str_;
  }
  if (sparse_981_str) {
    set_has_sparse_981_str();
    sparse_981_str_ = sparse_981_str;
  } else {
    clear_has_sparse_981_str();
    sparse_981_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_982_str = 994;
inline bool Database_NoBench::has_sparse_982_str() const {
  return (_has_bits_[31] & 0x00000008u) != 0;
}
inline void Database_NoBench::set_has_sparse_982_str() {
  _has_bits_[31] |= 0x00000008u;
}
inline void Database_NoBench::clear_has_sparse_982_str() {
  _has_bits_[31] &= ~0x00000008u;
}
inline void Database_NoBench::clear_sparse_982_str() {
  if (sparse_982_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_982_str_->clear();
  }
  clear_has_sparse_982_str();
}
inline const ::std::string& Database_NoBench::sparse_982_str() const {
  return *sparse_982_str_;
}
inline void Database_NoBench::set_sparse_982_str(const ::std::string& value) {
  set_has_sparse_982_str();
  if (sparse_982_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_982_str_ = new ::std::string;
  }
  sparse_982_str_->assign(value);
}
inline void Database_NoBench::set_sparse_982_str(const char* value) {
  set_has_sparse_982_str();
  if (sparse_982_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_982_str_ = new ::std::string;
  }
  sparse_982_str_->assign(value);
}
inline void Database_NoBench::set_sparse_982_str(const char* value, size_t size) {
  set_has_sparse_982_str();
  if (sparse_982_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_982_str_ = new ::std::string;
  }
  sparse_982_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_982_str() {
  set_has_sparse_982_str();
  if (sparse_982_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_982_str_ = new ::std::string;
  }
  return sparse_982_str_;
}
inline ::std::string* Database_NoBench::release_sparse_982_str() {
  clear_has_sparse_982_str();
  if (sparse_982_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_982_str_;
    sparse_982_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_982_str(::std::string* sparse_982_str) {
  if (sparse_982_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_982_str_;
  }
  if (sparse_982_str) {
    set_has_sparse_982_str();
    sparse_982_str_ = sparse_982_str;
  } else {
    clear_has_sparse_982_str();
    sparse_982_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_983_str = 995;
inline bool Database_NoBench::has_sparse_983_str() const {
  return (_has_bits_[31] & 0x00000010u) != 0;
}
inline void Database_NoBench::set_has_sparse_983_str() {
  _has_bits_[31] |= 0x00000010u;
}
inline void Database_NoBench::clear_has_sparse_983_str() {
  _has_bits_[31] &= ~0x00000010u;
}
inline void Database_NoBench::clear_sparse_983_str() {
  if (sparse_983_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_983_str_->clear();
  }
  clear_has_sparse_983_str();
}
inline const ::std::string& Database_NoBench::sparse_983_str() const {
  return *sparse_983_str_;
}
inline void Database_NoBench::set_sparse_983_str(const ::std::string& value) {
  set_has_sparse_983_str();
  if (sparse_983_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_983_str_ = new ::std::string;
  }
  sparse_983_str_->assign(value);
}
inline void Database_NoBench::set_sparse_983_str(const char* value) {
  set_has_sparse_983_str();
  if (sparse_983_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_983_str_ = new ::std::string;
  }
  sparse_983_str_->assign(value);
}
inline void Database_NoBench::set_sparse_983_str(const char* value, size_t size) {
  set_has_sparse_983_str();
  if (sparse_983_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_983_str_ = new ::std::string;
  }
  sparse_983_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_983_str() {
  set_has_sparse_983_str();
  if (sparse_983_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_983_str_ = new ::std::string;
  }
  return sparse_983_str_;
}
inline ::std::string* Database_NoBench::release_sparse_983_str() {
  clear_has_sparse_983_str();
  if (sparse_983_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_983_str_;
    sparse_983_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_983_str(::std::string* sparse_983_str) {
  if (sparse_983_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_983_str_;
  }
  if (sparse_983_str) {
    set_has_sparse_983_str();
    sparse_983_str_ = sparse_983_str;
  } else {
    clear_has_sparse_983_str();
    sparse_983_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_984_str = 996;
inline bool Database_NoBench::has_sparse_984_str() const {
  return (_has_bits_[31] & 0x00000020u) != 0;
}
inline void Database_NoBench::set_has_sparse_984_str() {
  _has_bits_[31] |= 0x00000020u;
}
inline void Database_NoBench::clear_has_sparse_984_str() {
  _has_bits_[31] &= ~0x00000020u;
}
inline void Database_NoBench::clear_sparse_984_str() {
  if (sparse_984_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_984_str_->clear();
  }
  clear_has_sparse_984_str();
}
inline const ::std::string& Database_NoBench::sparse_984_str() const {
  return *sparse_984_str_;
}
inline void Database_NoBench::set_sparse_984_str(const ::std::string& value) {
  set_has_sparse_984_str();
  if (sparse_984_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_984_str_ = new ::std::string;
  }
  sparse_984_str_->assign(value);
}
inline void Database_NoBench::set_sparse_984_str(const char* value) {
  set_has_sparse_984_str();
  if (sparse_984_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_984_str_ = new ::std::string;
  }
  sparse_984_str_->assign(value);
}
inline void Database_NoBench::set_sparse_984_str(const char* value, size_t size) {
  set_has_sparse_984_str();
  if (sparse_984_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_984_str_ = new ::std::string;
  }
  sparse_984_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_984_str() {
  set_has_sparse_984_str();
  if (sparse_984_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_984_str_ = new ::std::string;
  }
  return sparse_984_str_;
}
inline ::std::string* Database_NoBench::release_sparse_984_str() {
  clear_has_sparse_984_str();
  if (sparse_984_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_984_str_;
    sparse_984_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_984_str(::std::string* sparse_984_str) {
  if (sparse_984_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_984_str_;
  }
  if (sparse_984_str) {
    set_has_sparse_984_str();
    sparse_984_str_ = sparse_984_str;
  } else {
    clear_has_sparse_984_str();
    sparse_984_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_985_str = 997;
inline bool Database_NoBench::has_sparse_985_str() const {
  return (_has_bits_[31] & 0x00000040u) != 0;
}
inline void Database_NoBench::set_has_sparse_985_str() {
  _has_bits_[31] |= 0x00000040u;
}
inline void Database_NoBench::clear_has_sparse_985_str() {
  _has_bits_[31] &= ~0x00000040u;
}
inline void Database_NoBench::clear_sparse_985_str() {
  if (sparse_985_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_985_str_->clear();
  }
  clear_has_sparse_985_str();
}
inline const ::std::string& Database_NoBench::sparse_985_str() const {
  return *sparse_985_str_;
}
inline void Database_NoBench::set_sparse_985_str(const ::std::string& value) {
  set_has_sparse_985_str();
  if (sparse_985_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_985_str_ = new ::std::string;
  }
  sparse_985_str_->assign(value);
}
inline void Database_NoBench::set_sparse_985_str(const char* value) {
  set_has_sparse_985_str();
  if (sparse_985_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_985_str_ = new ::std::string;
  }
  sparse_985_str_->assign(value);
}
inline void Database_NoBench::set_sparse_985_str(const char* value, size_t size) {
  set_has_sparse_985_str();
  if (sparse_985_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_985_str_ = new ::std::string;
  }
  sparse_985_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_985_str() {
  set_has_sparse_985_str();
  if (sparse_985_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_985_str_ = new ::std::string;
  }
  return sparse_985_str_;
}
inline ::std::string* Database_NoBench::release_sparse_985_str() {
  clear_has_sparse_985_str();
  if (sparse_985_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_985_str_;
    sparse_985_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_985_str(::std::string* sparse_985_str) {
  if (sparse_985_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_985_str_;
  }
  if (sparse_985_str) {
    set_has_sparse_985_str();
    sparse_985_str_ = sparse_985_str;
  } else {
    clear_has_sparse_985_str();
    sparse_985_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_986_str = 998;
inline bool Database_NoBench::has_sparse_986_str() const {
  return (_has_bits_[31] & 0x00000080u) != 0;
}
inline void Database_NoBench::set_has_sparse_986_str() {
  _has_bits_[31] |= 0x00000080u;
}
inline void Database_NoBench::clear_has_sparse_986_str() {
  _has_bits_[31] &= ~0x00000080u;
}
inline void Database_NoBench::clear_sparse_986_str() {
  if (sparse_986_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_986_str_->clear();
  }
  clear_has_sparse_986_str();
}
inline const ::std::string& Database_NoBench::sparse_986_str() const {
  return *sparse_986_str_;
}
inline void Database_NoBench::set_sparse_986_str(const ::std::string& value) {
  set_has_sparse_986_str();
  if (sparse_986_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_986_str_ = new ::std::string;
  }
  sparse_986_str_->assign(value);
}
inline void Database_NoBench::set_sparse_986_str(const char* value) {
  set_has_sparse_986_str();
  if (sparse_986_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_986_str_ = new ::std::string;
  }
  sparse_986_str_->assign(value);
}
inline void Database_NoBench::set_sparse_986_str(const char* value, size_t size) {
  set_has_sparse_986_str();
  if (sparse_986_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_986_str_ = new ::std::string;
  }
  sparse_986_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_986_str() {
  set_has_sparse_986_str();
  if (sparse_986_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_986_str_ = new ::std::string;
  }
  return sparse_986_str_;
}
inline ::std::string* Database_NoBench::release_sparse_986_str() {
  clear_has_sparse_986_str();
  if (sparse_986_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_986_str_;
    sparse_986_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_986_str(::std::string* sparse_986_str) {
  if (sparse_986_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_986_str_;
  }
  if (sparse_986_str) {
    set_has_sparse_986_str();
    sparse_986_str_ = sparse_986_str;
  } else {
    clear_has_sparse_986_str();
    sparse_986_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_987_str = 999;
inline bool Database_NoBench::has_sparse_987_str() const {
  return (_has_bits_[31] & 0x00000100u) != 0;
}
inline void Database_NoBench::set_has_sparse_987_str() {
  _has_bits_[31] |= 0x00000100u;
}
inline void Database_NoBench::clear_has_sparse_987_str() {
  _has_bits_[31] &= ~0x00000100u;
}
inline void Database_NoBench::clear_sparse_987_str() {
  if (sparse_987_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_987_str_->clear();
  }
  clear_has_sparse_987_str();
}
inline const ::std::string& Database_NoBench::sparse_987_str() const {
  return *sparse_987_str_;
}
inline void Database_NoBench::set_sparse_987_str(const ::std::string& value) {
  set_has_sparse_987_str();
  if (sparse_987_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_987_str_ = new ::std::string;
  }
  sparse_987_str_->assign(value);
}
inline void Database_NoBench::set_sparse_987_str(const char* value) {
  set_has_sparse_987_str();
  if (sparse_987_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_987_str_ = new ::std::string;
  }
  sparse_987_str_->assign(value);
}
inline void Database_NoBench::set_sparse_987_str(const char* value, size_t size) {
  set_has_sparse_987_str();
  if (sparse_987_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_987_str_ = new ::std::string;
  }
  sparse_987_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_987_str() {
  set_has_sparse_987_str();
  if (sparse_987_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_987_str_ = new ::std::string;
  }
  return sparse_987_str_;
}
inline ::std::string* Database_NoBench::release_sparse_987_str() {
  clear_has_sparse_987_str();
  if (sparse_987_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_987_str_;
    sparse_987_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_987_str(::std::string* sparse_987_str) {
  if (sparse_987_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_987_str_;
  }
  if (sparse_987_str) {
    set_has_sparse_987_str();
    sparse_987_str_ = sparse_987_str;
  } else {
    clear_has_sparse_987_str();
    sparse_987_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_988_str = 1000;
inline bool Database_NoBench::has_sparse_988_str() const {
  return (_has_bits_[31] & 0x00000200u) != 0;
}
inline void Database_NoBench::set_has_sparse_988_str() {
  _has_bits_[31] |= 0x00000200u;
}
inline void Database_NoBench::clear_has_sparse_988_str() {
  _has_bits_[31] &= ~0x00000200u;
}
inline void Database_NoBench::clear_sparse_988_str() {
  if (sparse_988_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_988_str_->clear();
  }
  clear_has_sparse_988_str();
}
inline const ::std::string& Database_NoBench::sparse_988_str() const {
  return *sparse_988_str_;
}
inline void Database_NoBench::set_sparse_988_str(const ::std::string& value) {
  set_has_sparse_988_str();
  if (sparse_988_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_988_str_ = new ::std::string;
  }
  sparse_988_str_->assign(value);
}
inline void Database_NoBench::set_sparse_988_str(const char* value) {
  set_has_sparse_988_str();
  if (sparse_988_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_988_str_ = new ::std::string;
  }
  sparse_988_str_->assign(value);
}
inline void Database_NoBench::set_sparse_988_str(const char* value, size_t size) {
  set_has_sparse_988_str();
  if (sparse_988_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_988_str_ = new ::std::string;
  }
  sparse_988_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_988_str() {
  set_has_sparse_988_str();
  if (sparse_988_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_988_str_ = new ::std::string;
  }
  return sparse_988_str_;
}
inline ::std::string* Database_NoBench::release_sparse_988_str() {
  clear_has_sparse_988_str();
  if (sparse_988_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_988_str_;
    sparse_988_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_988_str(::std::string* sparse_988_str) {
  if (sparse_988_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_988_str_;
  }
  if (sparse_988_str) {
    set_has_sparse_988_str();
    sparse_988_str_ = sparse_988_str;
  } else {
    clear_has_sparse_988_str();
    sparse_988_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_989_str = 1001;
inline bool Database_NoBench::has_sparse_989_str() const {
  return (_has_bits_[31] & 0x00000400u) != 0;
}
inline void Database_NoBench::set_has_sparse_989_str() {
  _has_bits_[31] |= 0x00000400u;
}
inline void Database_NoBench::clear_has_sparse_989_str() {
  _has_bits_[31] &= ~0x00000400u;
}
inline void Database_NoBench::clear_sparse_989_str() {
  if (sparse_989_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_989_str_->clear();
  }
  clear_has_sparse_989_str();
}
inline const ::std::string& Database_NoBench::sparse_989_str() const {
  return *sparse_989_str_;
}
inline void Database_NoBench::set_sparse_989_str(const ::std::string& value) {
  set_has_sparse_989_str();
  if (sparse_989_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_989_str_ = new ::std::string;
  }
  sparse_989_str_->assign(value);
}
inline void Database_NoBench::set_sparse_989_str(const char* value) {
  set_has_sparse_989_str();
  if (sparse_989_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_989_str_ = new ::std::string;
  }
  sparse_989_str_->assign(value);
}
inline void Database_NoBench::set_sparse_989_str(const char* value, size_t size) {
  set_has_sparse_989_str();
  if (sparse_989_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_989_str_ = new ::std::string;
  }
  sparse_989_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_989_str() {
  set_has_sparse_989_str();
  if (sparse_989_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_989_str_ = new ::std::string;
  }
  return sparse_989_str_;
}
inline ::std::string* Database_NoBench::release_sparse_989_str() {
  clear_has_sparse_989_str();
  if (sparse_989_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_989_str_;
    sparse_989_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_989_str(::std::string* sparse_989_str) {
  if (sparse_989_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_989_str_;
  }
  if (sparse_989_str) {
    set_has_sparse_989_str();
    sparse_989_str_ = sparse_989_str;
  } else {
    clear_has_sparse_989_str();
    sparse_989_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_990_str = 1002;
inline bool Database_NoBench::has_sparse_990_str() const {
  return (_has_bits_[31] & 0x00000800u) != 0;
}
inline void Database_NoBench::set_has_sparse_990_str() {
  _has_bits_[31] |= 0x00000800u;
}
inline void Database_NoBench::clear_has_sparse_990_str() {
  _has_bits_[31] &= ~0x00000800u;
}
inline void Database_NoBench::clear_sparse_990_str() {
  if (sparse_990_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_990_str_->clear();
  }
  clear_has_sparse_990_str();
}
inline const ::std::string& Database_NoBench::sparse_990_str() const {
  return *sparse_990_str_;
}
inline void Database_NoBench::set_sparse_990_str(const ::std::string& value) {
  set_has_sparse_990_str();
  if (sparse_990_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_990_str_ = new ::std::string;
  }
  sparse_990_str_->assign(value);
}
inline void Database_NoBench::set_sparse_990_str(const char* value) {
  set_has_sparse_990_str();
  if (sparse_990_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_990_str_ = new ::std::string;
  }
  sparse_990_str_->assign(value);
}
inline void Database_NoBench::set_sparse_990_str(const char* value, size_t size) {
  set_has_sparse_990_str();
  if (sparse_990_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_990_str_ = new ::std::string;
  }
  sparse_990_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_990_str() {
  set_has_sparse_990_str();
  if (sparse_990_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_990_str_ = new ::std::string;
  }
  return sparse_990_str_;
}
inline ::std::string* Database_NoBench::release_sparse_990_str() {
  clear_has_sparse_990_str();
  if (sparse_990_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_990_str_;
    sparse_990_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_990_str(::std::string* sparse_990_str) {
  if (sparse_990_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_990_str_;
  }
  if (sparse_990_str) {
    set_has_sparse_990_str();
    sparse_990_str_ = sparse_990_str;
  } else {
    clear_has_sparse_990_str();
    sparse_990_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_991_str = 1003;
inline bool Database_NoBench::has_sparse_991_str() const {
  return (_has_bits_[31] & 0x00001000u) != 0;
}
inline void Database_NoBench::set_has_sparse_991_str() {
  _has_bits_[31] |= 0x00001000u;
}
inline void Database_NoBench::clear_has_sparse_991_str() {
  _has_bits_[31] &= ~0x00001000u;
}
inline void Database_NoBench::clear_sparse_991_str() {
  if (sparse_991_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_991_str_->clear();
  }
  clear_has_sparse_991_str();
}
inline const ::std::string& Database_NoBench::sparse_991_str() const {
  return *sparse_991_str_;
}
inline void Database_NoBench::set_sparse_991_str(const ::std::string& value) {
  set_has_sparse_991_str();
  if (sparse_991_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_991_str_ = new ::std::string;
  }
  sparse_991_str_->assign(value);
}
inline void Database_NoBench::set_sparse_991_str(const char* value) {
  set_has_sparse_991_str();
  if (sparse_991_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_991_str_ = new ::std::string;
  }
  sparse_991_str_->assign(value);
}
inline void Database_NoBench::set_sparse_991_str(const char* value, size_t size) {
  set_has_sparse_991_str();
  if (sparse_991_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_991_str_ = new ::std::string;
  }
  sparse_991_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_991_str() {
  set_has_sparse_991_str();
  if (sparse_991_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_991_str_ = new ::std::string;
  }
  return sparse_991_str_;
}
inline ::std::string* Database_NoBench::release_sparse_991_str() {
  clear_has_sparse_991_str();
  if (sparse_991_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_991_str_;
    sparse_991_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_991_str(::std::string* sparse_991_str) {
  if (sparse_991_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_991_str_;
  }
  if (sparse_991_str) {
    set_has_sparse_991_str();
    sparse_991_str_ = sparse_991_str;
  } else {
    clear_has_sparse_991_str();
    sparse_991_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_992_str = 1004;
inline bool Database_NoBench::has_sparse_992_str() const {
  return (_has_bits_[31] & 0x00002000u) != 0;
}
inline void Database_NoBench::set_has_sparse_992_str() {
  _has_bits_[31] |= 0x00002000u;
}
inline void Database_NoBench::clear_has_sparse_992_str() {
  _has_bits_[31] &= ~0x00002000u;
}
inline void Database_NoBench::clear_sparse_992_str() {
  if (sparse_992_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_992_str_->clear();
  }
  clear_has_sparse_992_str();
}
inline const ::std::string& Database_NoBench::sparse_992_str() const {
  return *sparse_992_str_;
}
inline void Database_NoBench::set_sparse_992_str(const ::std::string& value) {
  set_has_sparse_992_str();
  if (sparse_992_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_992_str_ = new ::std::string;
  }
  sparse_992_str_->assign(value);
}
inline void Database_NoBench::set_sparse_992_str(const char* value) {
  set_has_sparse_992_str();
  if (sparse_992_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_992_str_ = new ::std::string;
  }
  sparse_992_str_->assign(value);
}
inline void Database_NoBench::set_sparse_992_str(const char* value, size_t size) {
  set_has_sparse_992_str();
  if (sparse_992_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_992_str_ = new ::std::string;
  }
  sparse_992_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_992_str() {
  set_has_sparse_992_str();
  if (sparse_992_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_992_str_ = new ::std::string;
  }
  return sparse_992_str_;
}
inline ::std::string* Database_NoBench::release_sparse_992_str() {
  clear_has_sparse_992_str();
  if (sparse_992_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_992_str_;
    sparse_992_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_992_str(::std::string* sparse_992_str) {
  if (sparse_992_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_992_str_;
  }
  if (sparse_992_str) {
    set_has_sparse_992_str();
    sparse_992_str_ = sparse_992_str;
  } else {
    clear_has_sparse_992_str();
    sparse_992_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_993_str = 1005;
inline bool Database_NoBench::has_sparse_993_str() const {
  return (_has_bits_[31] & 0x00004000u) != 0;
}
inline void Database_NoBench::set_has_sparse_993_str() {
  _has_bits_[31] |= 0x00004000u;
}
inline void Database_NoBench::clear_has_sparse_993_str() {
  _has_bits_[31] &= ~0x00004000u;
}
inline void Database_NoBench::clear_sparse_993_str() {
  if (sparse_993_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_993_str_->clear();
  }
  clear_has_sparse_993_str();
}
inline const ::std::string& Database_NoBench::sparse_993_str() const {
  return *sparse_993_str_;
}
inline void Database_NoBench::set_sparse_993_str(const ::std::string& value) {
  set_has_sparse_993_str();
  if (sparse_993_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_993_str_ = new ::std::string;
  }
  sparse_993_str_->assign(value);
}
inline void Database_NoBench::set_sparse_993_str(const char* value) {
  set_has_sparse_993_str();
  if (sparse_993_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_993_str_ = new ::std::string;
  }
  sparse_993_str_->assign(value);
}
inline void Database_NoBench::set_sparse_993_str(const char* value, size_t size) {
  set_has_sparse_993_str();
  if (sparse_993_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_993_str_ = new ::std::string;
  }
  sparse_993_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_993_str() {
  set_has_sparse_993_str();
  if (sparse_993_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_993_str_ = new ::std::string;
  }
  return sparse_993_str_;
}
inline ::std::string* Database_NoBench::release_sparse_993_str() {
  clear_has_sparse_993_str();
  if (sparse_993_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_993_str_;
    sparse_993_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_993_str(::std::string* sparse_993_str) {
  if (sparse_993_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_993_str_;
  }
  if (sparse_993_str) {
    set_has_sparse_993_str();
    sparse_993_str_ = sparse_993_str;
  } else {
    clear_has_sparse_993_str();
    sparse_993_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_994_str = 1006;
inline bool Database_NoBench::has_sparse_994_str() const {
  return (_has_bits_[31] & 0x00008000u) != 0;
}
inline void Database_NoBench::set_has_sparse_994_str() {
  _has_bits_[31] |= 0x00008000u;
}
inline void Database_NoBench::clear_has_sparse_994_str() {
  _has_bits_[31] &= ~0x00008000u;
}
inline void Database_NoBench::clear_sparse_994_str() {
  if (sparse_994_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_994_str_->clear();
  }
  clear_has_sparse_994_str();
}
inline const ::std::string& Database_NoBench::sparse_994_str() const {
  return *sparse_994_str_;
}
inline void Database_NoBench::set_sparse_994_str(const ::std::string& value) {
  set_has_sparse_994_str();
  if (sparse_994_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_994_str_ = new ::std::string;
  }
  sparse_994_str_->assign(value);
}
inline void Database_NoBench::set_sparse_994_str(const char* value) {
  set_has_sparse_994_str();
  if (sparse_994_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_994_str_ = new ::std::string;
  }
  sparse_994_str_->assign(value);
}
inline void Database_NoBench::set_sparse_994_str(const char* value, size_t size) {
  set_has_sparse_994_str();
  if (sparse_994_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_994_str_ = new ::std::string;
  }
  sparse_994_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_994_str() {
  set_has_sparse_994_str();
  if (sparse_994_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_994_str_ = new ::std::string;
  }
  return sparse_994_str_;
}
inline ::std::string* Database_NoBench::release_sparse_994_str() {
  clear_has_sparse_994_str();
  if (sparse_994_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_994_str_;
    sparse_994_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_994_str(::std::string* sparse_994_str) {
  if (sparse_994_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_994_str_;
  }
  if (sparse_994_str) {
    set_has_sparse_994_str();
    sparse_994_str_ = sparse_994_str;
  } else {
    clear_has_sparse_994_str();
    sparse_994_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_995_str = 1007;
inline bool Database_NoBench::has_sparse_995_str() const {
  return (_has_bits_[31] & 0x00010000u) != 0;
}
inline void Database_NoBench::set_has_sparse_995_str() {
  _has_bits_[31] |= 0x00010000u;
}
inline void Database_NoBench::clear_has_sparse_995_str() {
  _has_bits_[31] &= ~0x00010000u;
}
inline void Database_NoBench::clear_sparse_995_str() {
  if (sparse_995_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_995_str_->clear();
  }
  clear_has_sparse_995_str();
}
inline const ::std::string& Database_NoBench::sparse_995_str() const {
  return *sparse_995_str_;
}
inline void Database_NoBench::set_sparse_995_str(const ::std::string& value) {
  set_has_sparse_995_str();
  if (sparse_995_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_995_str_ = new ::std::string;
  }
  sparse_995_str_->assign(value);
}
inline void Database_NoBench::set_sparse_995_str(const char* value) {
  set_has_sparse_995_str();
  if (sparse_995_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_995_str_ = new ::std::string;
  }
  sparse_995_str_->assign(value);
}
inline void Database_NoBench::set_sparse_995_str(const char* value, size_t size) {
  set_has_sparse_995_str();
  if (sparse_995_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_995_str_ = new ::std::string;
  }
  sparse_995_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_995_str() {
  set_has_sparse_995_str();
  if (sparse_995_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_995_str_ = new ::std::string;
  }
  return sparse_995_str_;
}
inline ::std::string* Database_NoBench::release_sparse_995_str() {
  clear_has_sparse_995_str();
  if (sparse_995_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_995_str_;
    sparse_995_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_995_str(::std::string* sparse_995_str) {
  if (sparse_995_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_995_str_;
  }
  if (sparse_995_str) {
    set_has_sparse_995_str();
    sparse_995_str_ = sparse_995_str;
  } else {
    clear_has_sparse_995_str();
    sparse_995_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_996_str = 1008;
inline bool Database_NoBench::has_sparse_996_str() const {
  return (_has_bits_[31] & 0x00020000u) != 0;
}
inline void Database_NoBench::set_has_sparse_996_str() {
  _has_bits_[31] |= 0x00020000u;
}
inline void Database_NoBench::clear_has_sparse_996_str() {
  _has_bits_[31] &= ~0x00020000u;
}
inline void Database_NoBench::clear_sparse_996_str() {
  if (sparse_996_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_996_str_->clear();
  }
  clear_has_sparse_996_str();
}
inline const ::std::string& Database_NoBench::sparse_996_str() const {
  return *sparse_996_str_;
}
inline void Database_NoBench::set_sparse_996_str(const ::std::string& value) {
  set_has_sparse_996_str();
  if (sparse_996_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_996_str_ = new ::std::string;
  }
  sparse_996_str_->assign(value);
}
inline void Database_NoBench::set_sparse_996_str(const char* value) {
  set_has_sparse_996_str();
  if (sparse_996_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_996_str_ = new ::std::string;
  }
  sparse_996_str_->assign(value);
}
inline void Database_NoBench::set_sparse_996_str(const char* value, size_t size) {
  set_has_sparse_996_str();
  if (sparse_996_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_996_str_ = new ::std::string;
  }
  sparse_996_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_996_str() {
  set_has_sparse_996_str();
  if (sparse_996_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_996_str_ = new ::std::string;
  }
  return sparse_996_str_;
}
inline ::std::string* Database_NoBench::release_sparse_996_str() {
  clear_has_sparse_996_str();
  if (sparse_996_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_996_str_;
    sparse_996_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_996_str(::std::string* sparse_996_str) {
  if (sparse_996_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_996_str_;
  }
  if (sparse_996_str) {
    set_has_sparse_996_str();
    sparse_996_str_ = sparse_996_str;
  } else {
    clear_has_sparse_996_str();
    sparse_996_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_997_str = 1009;
inline bool Database_NoBench::has_sparse_997_str() const {
  return (_has_bits_[31] & 0x00040000u) != 0;
}
inline void Database_NoBench::set_has_sparse_997_str() {
  _has_bits_[31] |= 0x00040000u;
}
inline void Database_NoBench::clear_has_sparse_997_str() {
  _has_bits_[31] &= ~0x00040000u;
}
inline void Database_NoBench::clear_sparse_997_str() {
  if (sparse_997_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_997_str_->clear();
  }
  clear_has_sparse_997_str();
}
inline const ::std::string& Database_NoBench::sparse_997_str() const {
  return *sparse_997_str_;
}
inline void Database_NoBench::set_sparse_997_str(const ::std::string& value) {
  set_has_sparse_997_str();
  if (sparse_997_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_997_str_ = new ::std::string;
  }
  sparse_997_str_->assign(value);
}
inline void Database_NoBench::set_sparse_997_str(const char* value) {
  set_has_sparse_997_str();
  if (sparse_997_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_997_str_ = new ::std::string;
  }
  sparse_997_str_->assign(value);
}
inline void Database_NoBench::set_sparse_997_str(const char* value, size_t size) {
  set_has_sparse_997_str();
  if (sparse_997_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_997_str_ = new ::std::string;
  }
  sparse_997_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_997_str() {
  set_has_sparse_997_str();
  if (sparse_997_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_997_str_ = new ::std::string;
  }
  return sparse_997_str_;
}
inline ::std::string* Database_NoBench::release_sparse_997_str() {
  clear_has_sparse_997_str();
  if (sparse_997_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_997_str_;
    sparse_997_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_997_str(::std::string* sparse_997_str) {
  if (sparse_997_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_997_str_;
  }
  if (sparse_997_str) {
    set_has_sparse_997_str();
    sparse_997_str_ = sparse_997_str;
  } else {
    clear_has_sparse_997_str();
    sparse_997_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_998_str = 1010;
inline bool Database_NoBench::has_sparse_998_str() const {
  return (_has_bits_[31] & 0x00080000u) != 0;
}
inline void Database_NoBench::set_has_sparse_998_str() {
  _has_bits_[31] |= 0x00080000u;
}
inline void Database_NoBench::clear_has_sparse_998_str() {
  _has_bits_[31] &= ~0x00080000u;
}
inline void Database_NoBench::clear_sparse_998_str() {
  if (sparse_998_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_998_str_->clear();
  }
  clear_has_sparse_998_str();
}
inline const ::std::string& Database_NoBench::sparse_998_str() const {
  return *sparse_998_str_;
}
inline void Database_NoBench::set_sparse_998_str(const ::std::string& value) {
  set_has_sparse_998_str();
  if (sparse_998_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_998_str_ = new ::std::string;
  }
  sparse_998_str_->assign(value);
}
inline void Database_NoBench::set_sparse_998_str(const char* value) {
  set_has_sparse_998_str();
  if (sparse_998_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_998_str_ = new ::std::string;
  }
  sparse_998_str_->assign(value);
}
inline void Database_NoBench::set_sparse_998_str(const char* value, size_t size) {
  set_has_sparse_998_str();
  if (sparse_998_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_998_str_ = new ::std::string;
  }
  sparse_998_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_998_str() {
  set_has_sparse_998_str();
  if (sparse_998_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_998_str_ = new ::std::string;
  }
  return sparse_998_str_;
}
inline ::std::string* Database_NoBench::release_sparse_998_str() {
  clear_has_sparse_998_str();
  if (sparse_998_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_998_str_;
    sparse_998_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_998_str(::std::string* sparse_998_str) {
  if (sparse_998_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_998_str_;
  }
  if (sparse_998_str) {
    set_has_sparse_998_str();
    sparse_998_str_ = sparse_998_str;
  } else {
    clear_has_sparse_998_str();
    sparse_998_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sparse_999_str = 1011;
inline bool Database_NoBench::has_sparse_999_str() const {
  return (_has_bits_[31] & 0x00100000u) != 0;
}
inline void Database_NoBench::set_has_sparse_999_str() {
  _has_bits_[31] |= 0x00100000u;
}
inline void Database_NoBench::clear_has_sparse_999_str() {
  _has_bits_[31] &= ~0x00100000u;
}
inline void Database_NoBench::clear_sparse_999_str() {
  if (sparse_999_str_ != &::google::protobuf::internal::kEmptyString) {
    sparse_999_str_->clear();
  }
  clear_has_sparse_999_str();
}
inline const ::std::string& Database_NoBench::sparse_999_str() const {
  return *sparse_999_str_;
}
inline void Database_NoBench::set_sparse_999_str(const ::std::string& value) {
  set_has_sparse_999_str();
  if (sparse_999_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_999_str_ = new ::std::string;
  }
  sparse_999_str_->assign(value);
}
inline void Database_NoBench::set_sparse_999_str(const char* value) {
  set_has_sparse_999_str();
  if (sparse_999_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_999_str_ = new ::std::string;
  }
  sparse_999_str_->assign(value);
}
inline void Database_NoBench::set_sparse_999_str(const char* value, size_t size) {
  set_has_sparse_999_str();
  if (sparse_999_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_999_str_ = new ::std::string;
  }
  sparse_999_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Database_NoBench::mutable_sparse_999_str() {
  set_has_sparse_999_str();
  if (sparse_999_str_ == &::google::protobuf::internal::kEmptyString) {
    sparse_999_str_ = new ::std::string;
  }
  return sparse_999_str_;
}
inline ::std::string* Database_NoBench::release_sparse_999_str() {
  clear_has_sparse_999_str();
  if (sparse_999_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sparse_999_str_;
    sparse_999_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Database_NoBench::set_allocated_sparse_999_str(::std::string* sparse_999_str) {
  if (sparse_999_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sparse_999_str_;
  }
  if (sparse_999_str) {
    set_has_sparse_999_str();
    sparse_999_str_ = sparse_999_str;
  } else {
    clear_has_sparse_999_str();
    sparse_999_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Database

// repeated .Database.NoBench nb = 1;
inline int Database::nb_size() const {
  return nb_.size();
}
inline void Database::clear_nb() {
  nb_.Clear();
}
inline const ::Database_NoBench& Database::nb(int index) const {
  return nb_.Get(index);
}
inline ::Database_NoBench* Database::mutable_nb(int index) {
  return nb_.Mutable(index);
}
inline ::Database_NoBench* Database::add_nb() {
  return nb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Database_NoBench >&
Database::nb() const {
  return nb_;
}
inline ::google::protobuf::RepeatedPtrField< ::Database_NoBench >*
Database::mutable_nb() {
  return &nb_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nobench_2eproto__INCLUDED
